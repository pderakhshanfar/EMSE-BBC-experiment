/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 00:46:32 GMT 2020
 */

package com.google.javascript.jscomp.parsing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocToken;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Token;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsDocInfoParser_ESTest extends JsDocInfoParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("msg.undef.prop.elete");
      assertNotNull(node0);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(20, node0.getLength());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(1, (-1467419979), token_CommentType0, "qcn8E6");
      assertNotNull(comment0);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals((-1467419979), comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("qcn8E6", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(1, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertNotNull(set0);
      assertFalse(set0.contains("qcn8E6"));
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(set0.contains("qcn8E6"));
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertNotNull(errorReporter0);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("\n\nTree2:\n", (-2121), 12);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("qcn8E6"));
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(20, node0.getLength());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals((-1467419979), comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("qcn8E6", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(1, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNotNull(node1);
      assertFalse(set0.contains("qcn8E6"));
      assertFalse(node1.equals((Object)node0));
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(20, node0.getLength());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals((-1467419979), comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("qcn8E6", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(1, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isFunction());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isNE());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isCatch());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getChangeTime());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isFor());
      assertFalse(node1.isCase());
      assertFalse(node1.isTry());
      assertTrue(node1.mayMutateArguments());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isIn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertEquals(40, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertEquals(5, node1.getLength());
      assertFalse(node1.isAssign());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isThis());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isBlock());
      assertTrue(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isOr());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("AUK~_e");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment((-1452044486), (-1844827420), token_CommentType0, "UZht+T+*%myk");
      assertNotNull(comment0);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals((-1452044486), comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-1452044486), comment0.getPosition());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals((-1844827420), comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("UZht+T+*%myk", comment0.getValue());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertFalse(set0.contains("AUK~_e"));
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(set0.contains("AUK~_e"));
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      Node node0 = new Node(0);
      assertNotNull(node0);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isComma());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false, (PrintStream) null);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("AUK~_e"));
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals((-1452044486), comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-1452044486), comment0.getPosition());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals((-1844827420), comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("UZht+T+*%myk", comment0.getValue());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isComma());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertNull(jSDocInfo0);
      assertFalse(set0.contains("AUK~_e"));
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals((-1452044486), comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-1452044486), comment0.getPosition());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals((-1844827420), comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("UZht+T+*%myk", comment0.getValue());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isComma());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNew());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getType());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("H p@J", 4, (-1983112859));
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(3408, (-1983112859), token_CommentType0, "H p@J");
      assertNotNull(comment0);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals((-1983112859), comment0.getLength());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals("H p@J", comment0.getValue());
      assertEquals(3408, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(3408, comment0.getPosition());
      
      Node node0 = JsDocInfoParser.parseTypeString("H p@J");
      assertNotNull(node0);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertEquals(1, node0.getLength());
      assertFalse(node0.isNE());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isWhile());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("H p@J"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(linkedHashSet0.contains("H p@J"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Context context0 = Context.getCurrentContext();
      assertNotNull(context0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertNotNull(errorReporter0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(linkedHashSet0.contains("H p@J"));
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals((-1983112859), comment0.getLength());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals("H p@J", comment0.getValue());
      assertEquals(3408, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(3408, comment0.getPosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertEquals(1, node0.getLength());
      assertFalse(node0.isNE());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isWhile());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotNull(jSDocInfo0);
      assertFalse(linkedHashSet0.contains("H p@J"));
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals((-1983112859), comment0.getLength());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals("H p@J", comment0.getValue());
      assertEquals(3408, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(3408, comment0.getPosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertEquals(1, node0.getLength());
      assertFalse(node0.isNE());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isWhile());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(3408, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertEquals("H p@J", jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertTrue(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getVersion());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDescription());
      assertTrue(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasThisType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("AUK~_e");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment((-1452044486), (-1844827420), token_CommentType0, "UZht+T+*%myk");
      assertNotNull(comment0);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals((-1452044486), comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals((-1844827420), comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals("UZht+T+*%myk", comment0.getValue());
      assertEquals((-1452044486), comment0.getPosition());
      assertEquals(0, comment0.depth());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertFalse(set0.contains("UZht+T+*%myk"));
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(set0.contains("UZht+T+*%myk"));
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      
      Node node0 = new Node(0);
      assertNotNull(node0);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false, (PrintStream) null);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("UZht+T+*%myk"));
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-1452044486), comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals((-1844827420), comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals("UZht+T+*%myk", comment0.getValue());
      assertEquals((-1452044486), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotNull(jSDocInfo0);
      assertFalse(set0.contains("UZht+T+*%myk"));
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals((-1452044486), comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals((-1844827420), comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals("UZht+T+*%myk", comment0.getValue());
      assertEquals((-1452044486), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isHidden());
      assertTrue(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertTrue(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals((-1452044486), jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("UZht+T+*%myk", jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasTypedefType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("U>A?oj/8jTbzc");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(123, 123, token_CommentType0, "U>A?oj/8jTbzc");
      assertNotNull(comment0);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(123, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(123, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(161, comment0.getType());
      assertEquals(123, comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals("U>A?oj/8jTbzc", comment0.getValue());
      assertEquals("161", comment0.toString());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocToken jsDocToken0 = JsDocToken.STAR;
      Node node0 = Node.newNumber(0.0);
      assertNotNull(node0);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isNumber());
      assertFalse(node0.isHook());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChangeTime());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertFalse(hashSet0.contains("U>A?oj/8jTbzc"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(hashSet0.contains("U>A?oj/8jTbzc"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(hashSet0.contains("U>A?oj/8jTbzc"));
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(123, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(123, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(161, comment0.getType());
      assertEquals(123, comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals("U>A?oj/8jTbzc", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isNumber());
      assertFalse(node0.isHook());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChangeTime());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNotNull(node1);
      assertFalse(hashSet0.contains("U>A?oj/8jTbzc"));
      assertFalse(node1.equals((Object)node0));
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(123, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(123, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(161, comment0.getType());
      assertEquals(123, comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals("U>A?oj/8jTbzc", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.isNumber());
      assertFalse(node0.isHook());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNot());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isWhile());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChangeTime());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isVar());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isWhile());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isReturn());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isParamList());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isScript());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isCast());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isCase());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isHook());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isNot());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertEquals(302, node1.getType());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertFalse(node1.isOr());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("", 1107);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((-350), (-350), token_CommentType0, "");
      assertNotNull(comment0);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals("", comment0.getValue());
      assertEquals((-350), comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals((-350), comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals((-350), comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      
      Node node0 = Node.newNumber((-2763.07), 26, 10);
      assertNotNull(node0);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(10, node0.getCharno());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChangeTime());
      assertEquals(106506, node0.getSourcePosition());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(26, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(set0.contains(""));
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains(""));
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals("", comment0.getValue());
      assertEquals((-350), comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals((-350), comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals((-350), comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(10, node0.getCharno());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChangeTime());
      assertEquals(106506, node0.getSourcePosition());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(26, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression((Node) null);
      assertNull(jSTypeExpression0);
      assertFalse(set0.contains(""));
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals("", comment0.getValue());
      assertEquals((-350), comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals((-350), comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals((-350), comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.wasEmptyNode());
      assertEquals(39, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(10, node0.getCharno());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChangeTime());
      assertEquals(106506, node0.getSourcePosition());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(26, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("qcn8E6");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(874, 52, token_CommentType0, "qcn8E6");
      assertNotNull(comment0);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(52, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(874, comment0.getAbsolutePosition());
      assertEquals(874, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("qcn8E6", comment0.getValue());
      assertEquals(0, comment0.depth());
      
      Node node0 = Node.newString("qcn8E6");
      assertNotNull(node0);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("qcn8E6"));
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(set0.contains("qcn8E6"));
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("qcn8E6"));
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(874, comment0.getAbsolutePosition());
      assertEquals(874, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("qcn8E6", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression(node0);
      assertNotNull(jSTypeExpression0);
      assertFalse(set0.contains("qcn8E6"));
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(52, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(874, comment0.getAbsolutePosition());
      assertEquals(874, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("qcn8E6", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNull());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsDocInfoParser.parseTypeString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("", 12, 36);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment((-2268), 51, token_CommentType0, "UZht+T+*%myk");
      assertNotNull(comment0);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals("161", comment0.toString());
      assertEquals(51, comment0.getLength());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals((-2268), comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals("UZht+T+*%myk", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals((-2268), comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertFalse(set0.contains("UZht+T+*%myk"));
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(set0.contains("UZht+T+*%myk"));
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("UZht+T+*%myk"));
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals("161", comment0.toString());
      assertEquals(51, comment0.getLength());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals((-2268), comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals("UZht+T+*%myk", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals((-2268), comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((-1785), (-1785), token_CommentType0, "");
      assertNotNull(comment0);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals("161", comment0.toString());
      assertEquals("", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals((-1785), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals((-1785), comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertEquals((-1785), comment0.getLength());
      
      Node node0 = Node.newNumber(0.0, 1, 20);
      assertNotNull(node0);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(20, node0.getCharno());
      assertEquals(4116, node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(set0.contains(""));
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, (ErrorReporter) null);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains(""));
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals("161", comment0.toString());
      assertEquals("", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals((-1785), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals((-1785), comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertEquals((-1785), comment0.getLength());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(20, node0.getCharno());
      assertEquals(4116, node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Node node0 = Node.newNumber((-945.9199), 2704, 2704);
      assertNotNull(node0);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(11078288, node0.getSourcePosition());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDo());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertEquals(2704, node0.getCharno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertEquals(2704, node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("5f", 12);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(52, 29, token_CommentType0, "Xlqg[*Gky,@bXw");
      assertNotNull(comment0);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(52, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals("Xlqg[*Gky,@bXw", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals(52, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(29, comment0.getLength());
      assertFalse(comment0.hasChildren());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("5f"));
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(11078288, node0.getSourcePosition());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDo());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDec());
      assertEquals(2704, node0.getCharno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertFalse(node0.isString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertEquals(2704, node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertEquals("ko", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(52, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals("Xlqg[*Gky,@bXw", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals(52, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(29, comment0.getLength());
      assertFalse(comment0.hasChildren());
      
      JsDocToken jsDocToken0 = JsDocToken.COLON;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Node node0 = Node.newString("msg.bad.p$ec%isAoI");
      assertNotNull(node0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.bad.p$ec%isAoI", 2, 1);
      assertNotNull(jsDocTokenStream0);
      
      jsDocTokenStream0.sourceCursor = (-18);
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(37, 43, token_CommentType0, "msg.bad.p$ec%isAoI");
      assertNotNull(comment0);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals(37, comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals(37, comment0.getPosition());
      assertEquals(43, comment0.getLength());
      assertEquals("msg.bad.p$ec%isAoI", comment0.getValue());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertNotNull(set0);
      assertFalse(set0.contains("msg.bad.p$ec%isAoI"));
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(set0.contains("msg.bad.p$ec%isAoI"));
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocToken jsDocToken0 = JsDocToken.LB;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("msg.bad.p$ec%isAoI"));
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals(37, comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals(37, comment0.getPosition());
      assertEquals(43, comment0.getLength());
      assertEquals("msg.bad.p$ec%isAoI", comment0.getValue());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Node node0 = Node.newNumber((double) 0);
      assertNotNull(node0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isGetElem());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.isNumber());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isConstructor());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNgInject());
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertNotNull(set0);
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isConstructor());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNgInject());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isConstructor());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNgInject());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("NGD");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, (ErrorReporter) null);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("NGD"));
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isGetElem());
      assertEquals(39, node0.getType());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.isNumber());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isConstructor());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNgInject());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      JsDocToken jsDocToken0 = JsDocToken.LP;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Property table overflow");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-963), (-963), token_CommentType0, "Property table overflow");
      assertNotNull(comment0);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals((-963), comment0.getPosition());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals((-963), comment0.getLength());
      assertEquals((-963), comment0.getAbsolutePosition());
      assertEquals("Property table overflow", comment0.getValue());
      assertFalse(comment0.hasChildren());
      
      Node node0 = Node.newNumber((double) 24);
      assertNotNull(node0);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getLength());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getSideEffectFlags());
      assertTrue(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertNotNull(set0);
      assertFalse(set0.contains("Property table overflow"));
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(set0.contains("Property table overflow"));
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("Property table overflow"));
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-963), comment0.getPosition());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals((-963), comment0.getLength());
      assertEquals((-963), comment0.getAbsolutePosition());
      assertEquals("Property table overflow", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getLength());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getSideEffectFlags());
      assertTrue(node0.isNumber());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("msg.undef.prop.delete");
      assertNotNull(node0);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isName());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertEquals(21, node0.getLength());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("qcn8E6", 48, 4);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(1, (-1467419979), token_CommentType0, "qcn8E6");
      assertNotNull(comment0);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(1, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals("qcn8E6", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals((-1467419979), comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getVersion());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoCompile());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertNotNull(set0);
      assertFalse(set0.contains("qcn8E6"));
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getVersion());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoCompile());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(set0.contains("qcn8E6"));
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getVersion());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoCompile());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      jsDocTokenStream0.sourceCursor = 44;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("qcn8E6"));
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isName());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertEquals(21, node0.getLength());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertEquals(1, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals("qcn8E6", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals((-1467419979), comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getVersion());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoCompile());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment((-1844827420), (-180), token_CommentType0, "L");
      assertNotNull(comment0);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals((-1844827420), comment0.getPosition());
      assertEquals((-1844827420), comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals("L", comment0.getValue());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals((-180), comment0.getLength());
      assertFalse(comment0.hasChildren());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("L"));
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("", 301);
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(set0.contains("L"));
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, (ErrorReporter) null);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("L"));
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals((-1844827420), comment0.getPosition());
      assertEquals((-1844827420), comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals("L", comment0.getValue());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals((-180), comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("U>A?oj/8jTbzc");
      assertNotNull(jsDocTokenStream0);
      
      Node node0 = new Node(2991);
      assertNotNull(node0);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertEquals(2991, node0.getType());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = null;
      try {
        jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("msg.bad.precision");
      assertNotNull(node0);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isArrayLit());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertEquals(17, node0.getLength());
      assertFalse(node0.isBreak());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(37, 43, token_CommentType0, "msg.bad.precision");
      assertNotNull(comment0);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(37, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals("msg.bad.precision", comment0.getValue());
      assertEquals(43, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(37, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertFalse(set0.contains("msg.bad.precision"));
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(set0.contains("msg.bad.precision"));
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*W:*f\"E[Y8$W1_");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("*W:*f\"E[Y8$W1_"));
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isArrayLit());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertEquals(17, node0.getLength());
      assertFalse(node0.isBreak());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(37, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals("msg.bad.precision", comment0.getValue());
      assertEquals(43, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(37, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocToken jsDocToken0 = JsDocToken.EOL;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      assertFalse(set0.contains("*W:*f\"E[Y8$W1_"));
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isArrayLit());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertEquals(17, node0.getLength());
      assertFalse(node0.isBreak());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(37, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals("msg.bad.precision", comment0.getValue());
      assertEquals(43, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(37, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(set0.contains("*W:*f\"E[Y8$W1_"));
      assertFalse(boolean0);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isArrayLit());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertEquals(17, node0.getLength());
      assertFalse(node0.isBreak());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(37, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals("msg.bad.precision", comment0.getValue());
      assertEquals(43, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(37, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("]d?HT;04*bUP");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(874, 874, token_CommentType0, "]d?HT;04*bUP");
      assertNotNull(comment0);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(874, comment0.getLength());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals("]d?HT;04*bUP", comment0.getValue());
      assertEquals(874, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(874, comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      
      Node node0 = Node.newString("]d?HT;04*bUP");
      assertNotNull(node0);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getChangeTime());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("]d?HT;04*bUP"));
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(set0.contains("]d?HT;04*bUP"));
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("]d?HT;04*bUP"));
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(874, comment0.getLength());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals("]d?HT;04*bUP", comment0.getValue());
      assertEquals(874, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(874, comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getChangeTime());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocToken jsDocToken0 = JsDocToken.EOL;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      assertFalse(set0.contains("]d?HT;04*bUP"));
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(874, comment0.getLength());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals("]d?HT;04*bUP", comment0.getValue());
      assertEquals(874, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(874, comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getChangeTime());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(set0.contains("]d?HT;04*bUP"));
      assertFalse(boolean0);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(874, comment0.getLength());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals("]d?HT;04*bUP", comment0.getValue());
      assertEquals(874, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(874, comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isWith());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getChangeTime());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("[c^es9]");
      assertNotNull(node0);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isParamList());
      assertEquals(1, node0.getChildCount());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isString());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNull());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNew());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getLength());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(308, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("msg.undef.prop.elete");
      assertNotNull(node0);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabelName());
      assertEquals(20, node0.getLength());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("qcn8E6", 48, 4);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(1, (-1467419979), token_CommentType0, "qcn8E6");
      assertNotNull(comment0);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals("qcn8E6", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(1, comment0.getPosition());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals((-1467419979), comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoAlias());
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertNotNull(set0);
      assertFalse(set0.contains("msg.undef.prop.elete"));
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(set0.contains("msg.undef.prop.elete"));
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertNotNull(errorReporter0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("msg.undef.prop.elete"));
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabelName());
      assertEquals(20, node0.getLength());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals("qcn8E6", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(1, comment0.getPosition());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals((-1467419979), comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      
      JsDocToken jsDocToken0 = JsDocToken.LP;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      assertFalse(set0.contains("msg.undef.prop.elete"));
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabelName());
      assertEquals(20, node0.getLength());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals("qcn8E6", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(1, comment0.getPosition());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals((-1467419979), comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      
      Node node2 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node2);
      assertFalse(set0.contains("msg.undef.prop.elete"));
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabelName());
      assertEquals(20, node0.getLength());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals("qcn8E6", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(1, comment0.getPosition());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals((-1467419979), comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("null");
      assertNotNull(node0);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isString());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNot());
      assertEquals(40, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getCharno());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(52, (-480), token_CommentType0, "");
      assertNotNull(comment0);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals((-480), comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(52, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals("", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(52, comment0.getPosition());
      
      Node node0 = Node.newString("AX&95W;QB B");
      assertNotNull(node0);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains(""));
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(set0.contains(""));
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("`2\"/:)\"", (-1881121521), 4);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains(""));
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals((-480), comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(52, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals("", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(52, comment0.getPosition());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocToken jsDocToken0 = JsDocToken.LB;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      assertFalse(set0.contains(""));
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals((-480), comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(52, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals("", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(52, comment0.getPosition());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("*b`nCq>.]");
      assertNotNull(node0);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertEquals(302, node0.getType());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("9!Ihy4Vt&");
      assertNotNull(node0);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(306, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isContinue());
      assertFalse(node0.isString());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.hasChildren());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertTrue(node0.mayMutateArguments());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("com.google.common.collect.ImmutableList");
      assertNotNull(node0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(39, node0.getLength());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCast());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isString());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isVar());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNew());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("j?g?&)7R8\"htY1`&", 132, 50);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(5149, (-484), token_CommentType0, "$P");
      assertNotNull(comment0);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals((-484), comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals("$P", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(5149, comment0.getAbsolutePosition());
      assertEquals(5149, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasModifies());
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertNotNull(set0);
      assertFalse(set0.contains("com.google.common.collect.ImmutableList"));
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasModifies());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(set0.contains("com.google.common.collect.ImmutableList"));
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasModifies());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertNotNull(errorReporter0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("com.google.common.collect.ImmutableList"));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(39, node0.getLength());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCast());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isString());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isVar());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNew());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals((-484), comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals("$P", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(5149, comment0.getAbsolutePosition());
      assertEquals(5149, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasModifies());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNotNull(node1);
      assertFalse(set0.contains("com.google.common.collect.ImmutableList"));
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(39, node0.getLength());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCast());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isString());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isVar());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNew());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals((-484), comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals("$P", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(5149, comment0.getAbsolutePosition());
      assertEquals(5149, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasModifies());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(node1.isBlock());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isDo());
      assertEquals(51, node1.getCharno());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isReturn());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNumber());
      assertFalse(node1.isVarArgs());
      assertEquals(132, node1.getLineno());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFunction());
      assertFalse(node1.isTry());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isFor());
      assertTrue(node1.mayMutateArguments());
      assertEquals(304, node1.getType());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThis());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isIn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isIf());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isNE());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCase());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isHook());
      assertEquals(540723, node1.getSourcePosition());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isOr());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Node node0 = Node.newString("E.");
      assertNotNull(node0);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isScript());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIn());
      assertEquals(40, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("E."));
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(set0.contains("E."));
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("function", 57, 1469);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("function"));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isScript());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIn());
      assertEquals(40, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocToken jsDocToken0 = JsDocToken.BANG;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      assertFalse(set0.contains("function"));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isScript());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIn());
      assertEquals(40, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Node node0 = Node.newString("msg.bad.precision");
      assertNotNull(node0);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIf());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.bad.precision", 2, 1);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(37, 43, token_CommentType0, "msg.bad.precision");
      assertNotNull(comment0);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(37, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals(43, comment0.getLength());
      assertEquals(37, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals("msg.bad.precision", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("msg.bad.precision"));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(set0.contains("msg.bad.precision"));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("msg.bad.precision"));
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIf());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(37, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals(43, comment0.getLength());
      assertEquals(37, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals("msg.bad.precision", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      JsDocToken jsDocToken0 = JsDocToken.GT;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      assertFalse(set0.contains("msg.bad.precision"));
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIf());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(37, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals(43, comment0.getLength());
      assertEquals(37, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals("msg.bad.precision", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      JsDocToken jsDocToken1 = JsDocToken.QMARK;
      Node node2 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertNotNull(node2);
      assertFalse(set0.contains("msg.bad.precision"));
      assertFalse(jsDocToken1.equals((Object)jsDocToken0));
      assertFalse(node2.equals((Object)node0));
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIf());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(37, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals(43, comment0.getLength());
      assertEquals(37, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals("msg.bad.precision", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(node2.isIn());
      assertFalse(node2.isCase());
      assertFalse(node2.isString());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isIf());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isNE());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isFalse());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isInc());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isThrow());
      assertEquals(0, node2.getChildCount());
      assertEquals(304, node2.getType());
      assertFalse(node2.isWith());
      assertEquals(2, node2.getLineno());
      assertFalse(node2.isCatch());
      assertFalse(node2.isInstanceOf());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isHook());
      assertEquals(0, node2.getLength());
      assertFalse(node2.hasOneChild());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isScript());
      assertFalse(node2.isThis());
      assertFalse(node2.isTry());
      assertFalse(node2.isFor());
      assertFalse(node2.isBlock());
      assertFalse(node2.wasEmptyNode());
      assertTrue(node2.mayMutateArguments());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isOr());
      assertFalse(node2.isContinue());
      assertFalse(node2.isOnlyModifiesArgumentsCall());
      assertFalse(node2.isNumber());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isVar());
      assertFalse(node2.isAdd());
      assertEquals(8192, node2.getSourcePosition());
      assertFalse(node2.isCast());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isNull());
      assertFalse(node2.isLocalResultCall());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isBreak());
      assertFalse(node2.isName());
      assertFalse(node2.isTrue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isTypeOf());
      assertTrue(node2.mayMutateGlobalStateOrThrow());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isComma());
      assertFalse(node2.isAssign());
      assertFalse(node2.isDec());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertEquals(0, node2.getChangeTime());
      assertNotSame(jsDocToken1, jsDocToken0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Locale locale0 = Locale.TAIWAN;
      assertNotNull(locale0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, true);
      assertNotNull(config0);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Node node0 = new Node(1);
      assertNotNull(node0);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isNumber());
      assertEquals(1, node0.getType());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("}.|P7~J|$Lft_dKi/:B");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("}.|P7~J|$Lft_dKi/:B"));
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isNumber());
      assertEquals(1, node0.getType());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNotNull(node1);
      assertFalse(set0.contains("}.|P7~J|$Lft_dKi/:B"));
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isNumber());
      assertEquals(1, node0.getType());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isThrow());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isIf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isVoid());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isFunction());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isQuotedString());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isCast());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isContinue());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasChildren());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isAssign());
      assertFalse(node1.isName());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertEquals(304, node1.getType());
      assertFalse(node1.isNew());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isOr());
      assertFalse(node1.isWith());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isThis());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isFor());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isParamList());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("Lj5v|%##");
      assertNotNull(node0);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(5, node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isComma());
      assertFalse(node0.isDo());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertEquals(5, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertEquals(301, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLength());
      assertEquals(2, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Node node0 = Node.newString("msg.bad.precision");
      assertNotNull(node0);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("msg.bad.precision"));
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(set0.contains("msg.bad.precision"));
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*W:*f\"E[Y8$W1_", 26, 50);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("*W:*f\"E[Y8$W1_"));
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(set0.contains("*W:*f\"E[Y8$W1_"));
      assertFalse(boolean0);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isComma());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDec());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("$");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(2337, 2337, token_CommentType0, "$");
      assertNotNull(comment0);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(2337, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(2337, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals("$", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(2337, comment0.getLength());
      
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.TemplateTypeMap$EquivalenceMatch");
      assertNotNull(node0);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertEquals(40, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertTrue(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("$"));
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(set0.contains("$"));
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("$"));
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2337, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(2337, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals("$", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(2337, comment0.getLength());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertEquals(40, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertTrue(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocToken jsDocToken0 = JsDocToken.EQUALS;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      assertFalse(set0.contains("$"));
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2337, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(2337, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals("$", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(2337, comment0.getLength());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertEquals(40, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertTrue(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(set0.contains("$"));
      assertFalse(boolean0);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2337, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(2337, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals("$", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(2337, comment0.getLength());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertEquals(40, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertTrue(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("qcn8E6");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(874, 52, token_CommentType0, "qcn8E6");
      assertNotNull(comment0);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(874, comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(52, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(874, comment0.getPosition());
      assertEquals("qcn8E6", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      
      Node node0 = Node.newString("qcn8E6");
      assertNotNull(node0);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("qcn8E6"));
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(set0.contains("qcn8E6"));
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("qcn8E6"));
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(874, comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(52, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(874, comment0.getPosition());
      assertEquals("qcn8E6", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocToken jsDocToken0 = JsDocToken.ELLIPSIS;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      assertFalse(set0.contains("qcn8E6"));
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(874, comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(52, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(874, comment0.getPosition());
      assertEquals("qcn8E6", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(set0.contains("qcn8E6"));
      assertFalse(boolean0);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(874, comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(52, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(874, comment0.getPosition());
      assertEquals("qcn8E6", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("q~c^n8E6");
      assertNotNull(jsDocTokenStream0);
      
      Node node0 = Node.newString("q~c^n8E6");
      assertNotNull(node0);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isBreak());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNull());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("q~c^n8E6"));
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(set0.contains("q~c^n8E6"));
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("q~c^n8E6"));
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isBreak());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNull());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocToken jsDocToken0 = JsDocToken.RP;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      assertFalse(set0.contains("q~c^n8E6"));
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isBreak());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNull());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(set0.contains("q~c^n8E6"));
      assertFalse(boolean0);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDo());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isBreak());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNull());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("q~c^n8E6");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(874, 52, token_CommentType0, "q~c^n8E6");
      assertNotNull(comment0);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(874, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(52, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals(874, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals("q~c^n8E6", comment0.getValue());
      
      Node node0 = Node.newString("q~c^n8E6");
      assertNotNull(node0);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("q~c^n8E6"));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(set0.contains("q~c^n8E6"));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("q~c^n8E6"));
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(874, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(52, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals(874, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals("q~c^n8E6", comment0.getValue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocToken jsDocToken0 = JsDocToken.RC;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      assertFalse(set0.contains("q~c^n8E6"));
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(874, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(52, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals(874, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals("q~c^n8E6", comment0.getValue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(set0.contains("q~c^n8E6"));
      assertFalse(boolean0);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(874, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(52, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals(874, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals("q~c^n8E6", comment0.getValue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("msg.bad.precision");
      assertNotNull(node0);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertEquals(17, node0.getLength());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("msg.bad.precision"));
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      assertNotNull(config0);
      assertFalse(set0.contains("msg.bad.precision"));
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Duplicate record field ");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("Duplicate record field "));
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertEquals(17, node0.getLength());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      JsDocToken jsDocToken0 = JsDocToken.PIPE;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      assertFalse(set0.contains("Duplicate record field "));
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertEquals(17, node0.getLength());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(set0.contains("Duplicate record field "));
      assertFalse(boolean0);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertEquals(17, node0.getLength());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("nJooQ?f|>AHY");
      assertNotNull(jsDocTokenStream0);
      
      jsDocTokenStream0.getJsDocToken();
      Node node0 = Node.newString("qcn8E6");
      assertNotNull(node0);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChangeTime());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getLength());
      assertTrue(node0.isString());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("qcn8E6"));
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertFalse(set0.contains("qcn8E6"));
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertFalse(set0.contains("qcn8E6"));
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChangeTime());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getLength());
      assertTrue(node0.isString());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(set0.contains("qcn8E6"));
      assertFalse(boolean0);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChangeTime());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getLength());
      assertTrue(node0.isString());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("msg.undef.prop.delete");
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("qcn8E6", 48, 4);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Context context0 = Context.enter();
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.LT;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertEquals(0, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("(D)Ljava/lang/Double;", (-2578), 1073741824);
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-89), (-89), token_CommentType0, (String) null);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      Node node0 = new Node((-167));
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Node node0 = Node.newString("msg.bad.precision");
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("_&S`f{`B;aUBD-3e");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNotNull(node1);
      assertEquals(304, node1.getType());
      assertEquals(5, node1.getSourcePosition());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("q~c^n8E6");
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(52, 310, token_CommentType0, "q~c^n8E6");
      Node node0 = Node.newString("x%K0K1t7P");
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.GT;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Node node0 = Node.newString("NEXT_IS_ANNOTATION");
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("debugger;\n");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.COLON;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("q~c^n8E6");
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(874, 52, token_CommentType0, "q~c^n8E6");
      Node node0 = Node.newString("q~c^n8E6");
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.COMMA;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("", 1107);
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((-350), (-350), token_CommentType0, "");
      Node node0 = Node.newNumber((-2763.07), 26, 10);
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.LC;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*W:*f\"E[Y8$W1_");
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(55, 43, token_CommentType0, "E");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.ANNOTATION;
      Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Node node0 = Node.newString("msg.bad.precision");
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(37, 43, token_CommentType0, "msg.bad.precision");
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*W:*f\"E[Y8$W1_");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("(D)Ljava/lang/Double;");
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("@)%", 524288);
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(16, 2, token_CommentType0, "(D)Ljava/lang/Double;");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.ANNOTATION;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertEquals(301, node0.getType());
      assertFalse(boolean0);
      assertTrue(node0.hasChildren());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("debugger;\n");
      assertNotNull(node0);
      
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(29, (-1718), token_CommentType0, "1a ");
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("debugger;\n", 50, 15);
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertEquals(0, node0.getSourcePosition());
      assertTrue(node0.isString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("qcn8E6");
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-2065205793), 557, token_CommentType0, "}.|P7~J|$Lft_dKi/:B");
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Node node0 = new Node(2);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.EOC;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(874, 874, token_CommentType0, "q~c^n8E6");
      Node node0 = Node.newString("q~c^n8E6");
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{\"S=2v$81[", 54);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("undefined");
      assertEquals(0, node0.getSourcePosition());
      assertTrue(node0.isString());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("(D)Ljava/lang/Double;", (-2578), 1073741824);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0);
      JSType[] jSTypeArray0 = new JSType[0];
      Node node0 = jSTypeRegistry0.createOptionalParameters(jSTypeArray0);
      HashSet<String> hashSet0 = new HashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, (ErrorReporter) null);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertFalse(jSDocInfo0.isNgInject());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("qcn8E6");
      Node node0 = Node.newString("qcn8E6");
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(52, (-480), token_CommentType0, "");
      Node node0 = Node.newString("AX&95W;QB B");
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("`2\"/:)\"", (-1881121521), 4);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      jsDocInfoParser0.parse();
      JsDocToken jsDocToken0 = JsDocToken.LB;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(0, 0, token_CommentType0, "qmYF^");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser((JsDocTokenStream) null, comment0, (Node) null, config0, errorCollector0);
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      assertFalse(jSDocInfo0.isNoTypeCheck());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("");
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((-1785), (-1785), token_CommentType0, "");
      Node node0 = Node.newNumber(0.0, 1, 20);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("AUK~_e");
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-3255), 0, token_CommentType0, "");
      Node node0 = Node.newNumber((-2946.787));
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertNull(jSDocInfo1);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("{");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("q~cn8E6");
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(874, 52, token_CommentType0, "q~cn8E6");
      Node node0 = Node.newString("q~cn8E6");
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      boolean boolean0 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("qcn8E6");
      Node node0 = Node.newString("qcn8E6");
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.EOC;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertTrue(boolean0);
  }
}
