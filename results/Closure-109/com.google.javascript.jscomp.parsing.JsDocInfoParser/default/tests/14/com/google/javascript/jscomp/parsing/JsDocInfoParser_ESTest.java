/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 25 19:15:55 GMT 2021
 */

package com.google.javascript.jscomp.parsing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocToken;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.SimpleErrorReporter;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.EvaluatorException;
import com.google.javascript.rhino.head.RhinoException;
import com.google.javascript.rhino.head.Token;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.ast.Name;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import com.google.javascript.rhino.jstype.FunctionType;
import com.google.javascript.rhino.jstype.JSType;
import com.google.javascript.rhino.jstype.JSTypeNative;
import com.google.javascript.rhino.jstype.JSTypeRegistry;
import com.google.javascript.rhino.jstype.SimpleSourceFile;
import java.io.BufferedOutputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.nio.channels.FileChannel;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.Stack;
import java.util.TreeSet;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsDocInfoParser_ESTest extends JsDocInfoParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("debugger;\n", 302);
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(302, 302, token_CommentType0, "debugger;\n");
      Node node0 = Node.newNumber(0.0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      ContextFactory contextFactory0 = new ContextFactory();
      Context context0 = contextFactory0.enterContext();
      Context context1 = contextFactory0.enterContext(context0);
      ErrorReporter errorReporter0 = context1.getErrorReporter();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.EOL;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("debugger;\n", 302);
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(302, 302, token_CommentType0, "debugger;\n");
      Node node0 = Node.newNumber(0.0);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, false);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JsDocInfoParser.parseTypeString("debugger;\n");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("zZoufj{hx*c3,9&M");
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(105, 3441, token_CommentType0, "zZoufj{hx*c3,9&M");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Node node0 = new Node(1199, (-2310), 26);
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      locale0.stripExtensions();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      toolErrorReporter0.warning("zZoufj{hx*c3,9&M", "", 0, (String) null, (-15));
      jsDocTokenStream0.cursor = 6;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      toolErrorReporter0.error("-,4|GC^dN;g&K9z]#E", "", (-2), (String) null, 540);
      jsDocInfoParser0.parse();
      node0.getQualifiedName();
      System.setCurrentTimeMillis(0L);
      jsDocInfoParser0.parseInlineTypeDoc();
      jsDocInfoParser0.parseInlineTypeDoc();
      jsDocInfoParser0.getFileOverviewJSDocInfo();
      JsDocToken jsDocToken0 = JsDocToken.RB;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      JsDocToken jsDocToken1 = JsDocToken.QMARK;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("{<y:8Tt'");
      assertNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{<y:8Tt'");
      assertNotNull(jsDocTokenStream0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("{<y:8Tt'"));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertFalse(treeSet0.contains("{<y:8Tt'"));
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, errorCollector0);
      assertFalse(treeSet0.contains("{<y:8Tt'"));
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JsDocInfoParser.parseTypeString("Z");
      System.setCurrentTimeMillis(4);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Z", 4095, 2);
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((-1947), 49, token_CommentType0, "Z");
      comment0.getJsDocNode();
      Node node0 = Node.newString(307, "Z");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getModifies();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, (ErrorReporter) null);
      jsDocInfoParser0.createJSTypeExpression(node0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JsDocInfoParser.parseTypeString("!LnA.<&&x?|V2");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!LnA.<&&x?|V2");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.STAR;
      jsDocInfoParser0.parseInlineTypeDoc();
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)28;
      byteArray0[1] = (byte)95;
      byteArray0[2] = (byte) (-90);
      byteArray0[3] = (byte) (-124);
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)59;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Node node0 = JsDocInfoParser.parseTypeString("funcxion ");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("X\nAq|UW,A{", 1206);
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(1331, (-1725834400), token_CommentType0, "funcxion ");
      comment0.getJsDocNode();
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, (Set<String>) null, false, config_LanguageMode0, false);
      MockPrintStream mockPrintStream0 = new MockPrintStream("funcxion ");
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true, mockPrintStream0);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.LP;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JsDocInfoParser.parseTypeString("X\nAq|UW,A{");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)121;
      byteArray0[3] = (byte) (-15);
      byteArray0[4] = (byte)76;
      byteArray0[5] = (byte)58;
      byteArray0[6] = (byte)95;
      byteArray0[7] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("nWprBr|N", (-4565));
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(121, (-566), token_CommentType0, "1<)|G~d");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      Node node0 = new Node(3);
      node0.getDirectives();
      jSDocInfo0.getParameterNames();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, (Set<String>) null, true, config_LanguageMode0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("Failed to create VMBridge instance");
      PrintStream printStream0 = mockPrintStream0.append('!');
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true, printStream0);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.LC;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      JsDocInfoParser.parseTypeString("nWprBr|N");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("9V}");
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(19, 21, token_CommentType0, "9V}");
      Node node0 = Node.newString(2, "\"l&&'ojgVMc", 15, 0);
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet1, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Token.CommentType token_CommentType1 = Token.CommentType.LINE;
      jsDocTokenStream0.update();
      Comment comment1 = new Comment(16, 13, token_CommentType1, "?");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment1, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.LC;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      Node node1 = Node.newString(55, "CYLr");
      jsDocInfoParser0.createJSTypeExpression(node1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("x=?\"SH.BG~r]IORvi}r");
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Node node0 = JsDocInfoParser.parseTypeString("x=?\"SH.BG~r]IORvi}r");
      Comment comment0 = new Comment(52, 12, token_CommentType0, "s|>~ESfCU{l}");
      comment0.getJsDocNode();
      JsDocInfoParser.parseTypeString("!LnA.<&&x?|:V2");
      HashSet<String> hashSet0 = new HashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
      Context context0 = Context.getCurrentContext();
      Context context1 = Context.enter(context0);
      ErrorReporter errorReporter0 = context1.getErrorReporter();
      ErrorReporter errorReporter1 = context1.setErrorReporter(errorReporter0);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter1);
      jsDocInfoParser0.parseInlineTypeDoc();
      jsDocInfoParser0.getFileOverviewJSDocInfo();
      JsDocToken jsDocToken0 = JsDocToken.RB;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("x=?\"SH.BG~r]IORvi}r");
      JsDocInfoParser.parseTypeString("x=?\"SH.BG~r]IORvi}r");
      JsDocInfoParser.parseTypeString("!LnA.<&&x?|:V2");
      HashSet<String> hashSet0 = new HashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
      Context context0 = Context.getCurrentContext();
      Context context1 = Context.enter(context0);
      ErrorReporter errorReporter0 = context1.getErrorReporter();
      context1.setErrorReporter(errorReporter0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("x=?\"SH.BG~r]IORvi}r");
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Node node0 = JsDocInfoParser.parseTypeString("x=?\"SH.BG~r]IORvi}r");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocToken jsDocToken0 = JsDocToken.RP;
      Comment comment0 = new Comment(2838, 12, token_CommentType0, "s|>~ESfCU{l}");
      comment0.getJsDocNode();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocInfoParser.parseTypeString("!LnA.<&&x?|V2");
      jsDocInfoParser0.parse();
      jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JsDocInfoParser.parseTypeString("{proxy:");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{proxy:", (-1638), 57);
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(4095, 16, token_CommentType0, "{proxy:");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      MockFile mockFile0 = new MockFile("{proxy:", "{proxy:");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) jsDocTokenStream0;
      objectArray0[2] = (Object) linkedHashSet0;
      Object object1 = new Object();
      objectArray0[3] = object1;
      objectArray0[4] = (Object) config0;
      objectArray0[5] = (Object) null;
      PrintStream printStream0 = mockPrintStream0.format((Locale) null, "{proxy:", objectArray0);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true, printStream0);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.PIPE;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("nRvGMIft");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("l3vI");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.PIPE;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsoc.consistidgen");
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment((-946), 3005, token_CommentType0, ".ds8");
      JsDocInfoParser.parseTypeString("{proxy:");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.STAR;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.parse();
      jsDocInfoParser0.parseInlineTypeDoc();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("x=?\"SH.BG~r]IORvi}r");
      JsDocInfoParser.parseTypeString("[X,)'^CEY&s");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(10, 196, token_CommentType0, (String) null);
      Node node0 = JsDocInfoParser.parseTypeString("com.google.javascript.rhino.head.ast.BreakStatement");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "msg.jsdoc.noalias");
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("[", 42);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.EOL;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("[85$`C6", (-292));
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((-292), 7, token_CommentType0, "[85$`C6");
      Node node0 = Node.newNumber((double) 4, 16, 15);
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      jsDocInfoParser0.parse();
      jsDocInfoParser0.hasParsedJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("c");
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-946), (-946), token_CommentType0, "c");
      Node node0 = new Node(1, 3, 2);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.EOL;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JsDocInfoParser.parseTypeString("{yoy?-A;D/I+#n1m?");
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!5x/j>mAS+EA\"1j@O", 51);
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment((-1722), (-2567), token_CommentType0, "");
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, errorCollector0);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Node node0 = JsDocInfoParser.parseTypeString("com.googlejavascript.rhino.Noe");
      assertNotNull(node0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!5x/j>mAS+EA\"1j@O", 51);
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(29, 57, token_CommentType0, "com.googlejavascript.rhino.Noe");
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals(0, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getLineno());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Z");
      Node node0 = JsDocInfoParser.parseTypeString("Z");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.ANNOTATION;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(597, 597, token_CommentType0, "push");
      Comment comment1 = new Comment(13, 4, token_CommentType0, "push");
      Node node0 = JsDocInfoParser.parseTypeString("iAhQw*n~@lA*dL]");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Node.newNumber((double) 7, 4182, 1);
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("iAhQw*n~@lA*dL]", 2);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream0, comment1, node0, config0, toolErrorReporter0);
      comment0.getJsDocNode();
      JsDocInfoParser jsDocInfoParser2 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.RC;
      jsDocInfoParser2.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.createJSTypeExpression(node0);
      jsDocInfoParser1.parseInlineTypeDoc();
      Config.LanguageMode config_LanguageMode1 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config1 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode1, false);
      JsDocInfoParser jsDocInfoParser3 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      jsDocInfoParser1.parse();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JsDocInfoParser.parseTypeString("{pTxNY:");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{pTxNY:", 305);
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(57, 29, token_CommentType0, "{pTxNY:");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, toolErrorReporter0);
      jsDocInfoParser0.parseInlineTypeDoc();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(597, 597, token_CommentType0, "push");
      comment0.getJsDocNode();
      Node node0 = JsDocInfoParser.parseTypeString("iAhQw*n~@lA*dL]");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("iAhQw*n~@lA*dL]", 0);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      Comment comment1 = new Comment(2, (-2152), token_CommentType0, "@");
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream0, comment1, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.COLON;
      jsDocInfoParser1.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.createJSTypeExpression((Node) null);
      jsDocInfoParser1.parseInlineTypeDoc();
      Comment comment2 = new Comment((-3188), 11, token_CommentType0, " Lu^l2-)lpO,5m]-");
      JsDocInfoParser jsDocInfoParser2 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      jsDocInfoParser1.parse();
      Node node1 = new Node(1204);
      JsDocInfoParser jsDocInfoParser3 = new JsDocInfoParser(jsDocTokenStream0, comment2, (Node) null, config0, toolErrorReporter0);
      jsDocInfoParser3.parse();
      System.setCurrentTimeMillis(55);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Z", (-862));
      Node node0 = Node.newString("Z");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.COLON;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JsDocInfoParser.parseTypeString("{GWFJ47}6.IT*v B");
      JsDocTokenStream jsDocTokenStream0 = null;
      try {
        jsDocTokenStream0 = new JsDocTokenStream((String) null, 51, 183);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{Ns_+_}x{n>{M$}nRX0", 3463);
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(3463, (-553), token_CommentType0, "{Ns_+_}x{n>{M$}nRX0");
      JsDocInfoParser.parseTypeString("{Ns_+_}x{n>{M$}nRX0");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true, mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("x=?\"SH.BG~r]IORvi}r");
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((-966), (-966), token_CommentType0, "x=?\"SH.BG~r]IORvi}r");
      comment0.getJsDocNode();
      Node node0 = JsDocInfoParser.parseTypeString("x=?\"SH.BG~r]IORvi}r");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      Node node1 = new Node(46, node0);
      jsDocInfoParser0.createJSTypeExpression(node1);
      JsDocToken jsDocToken0 = JsDocToken.ELLIPSIS;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      Token.CommentType token_CommentType1 = Token.CommentType.BLOCK_COMMENT;
      Comment comment1 = new Comment(48, (-2102813752), token_CommentType1, "o1X");
      jsDocInfoParser0.parse();
      JsDocInfoParser.parseTypeString("0x");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Z");
      Node node0 = JsDocInfoParser.parseTypeString("Z");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.ELLIPSIS;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(",=7ZhO]nU)#vZNr\"f", 196, 196);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream1 = new JsDocTokenStream("fiI2N_m7So9C", (-11));
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(196, 11, token_CommentType0, "Recorded bad position information\nstart-char: ");
      comment0.getJsDocNode();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream1, (Comment) null, (Node) null, config0, toolErrorReporter0);
      ToolErrorReporter toolErrorReporter1 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream1, (Comment) null, (Node) null, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.COLON;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser1.createJSTypeExpression((Node) null);
      JsDocToken jsDocToken1 = JsDocToken.GT;
      jsDocInfoParser1.parseAndRecordTypeNode(jsDocToken1);
      JsDocInfoParser.parseTypeString("msg.extend.scriptable");
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      jsDocInfoParser1.parse();
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.createJSTypeExpression((Node) null);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("push");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("push", 38);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.GT;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Z");
      Node node0 = JsDocInfoParser.parseTypeString("Z");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      jsDocTokenStream0.sourceCursor = 6;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.EOL;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("com.google.javascript.rhino.head.ast.BreakStatement", 196, 196);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Node node0 = new Node(196);
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Node node0 = new Node((-45));
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("no message resource found for message property ", 51);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("x");
      JsDocInfoParser.parseTypeString("x");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      EvaluatorException evaluatorException0 = new EvaluatorException("M-a3^1AI3Q");
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      ToolErrorReporter toolErrorReporter1 = new ToolErrorReporter(true);
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(38, 31, token_CommentType0, "C8_4e:bJs`t}khnS");
      Node node0 = JsDocInfoParser.parseTypeString("M-a3^1AI3Q");
      Comment comment1 = new Comment(1, 4, token_CommentType0, "end-line: ");
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment1, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.BANG;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(597, 597, token_CommentType0, "push");
      comment0.getJsDocNode();
      Node node0 = JsDocInfoParser.parseTypeString("iAhQw*n~@lA*dL]");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("iAhQw*n~@lA*dL]", 0);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      ToolErrorReporter toolErrorReporter1 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter1);
      JsDocToken jsDocToken0 = JsDocToken.EOC;
      jsDocInfoParser1.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.createJSTypeExpression(node0);
      jsDocInfoParser0.parseInlineTypeDoc();
      Token.CommentType token_CommentType1 = Token.CommentType.LINE;
      Comment comment1 = new Comment((-2825), (-159), token_CommentType1, "msg.jsdoc.implements.duplicate");
      ToolErrorReporter toolErrorReporter2 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser2 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, toolErrorReporter1);
      jsDocInfoParser1.parse();
      Node node1 = new Node(25);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Context.enter();
      JsDocToken jsDocToken0 = JsDocToken.LB;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("b;<Ys", 1);
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(150, (-2024), token_CommentType0, "(Y{^,Xc-l+aW%");
      comment0.getJsDocNode();
      Node node0 = Node.newString("language version", 30, 1198);
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("{yoy?-A;D/I+#n1m?");
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{yoy?-A;D/I+#n1m?", (-1628094700));
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(57, 12, token_CommentType0, "push");
      Context context0 = Context.getCurrentContext();
      Context.enter(context0);
      ContextFactory contextFactory0 = context0.getFactory();
      contextFactory0.enterContext();
      ErrorCollector errorCollector0 = new ErrorCollector();
      context0.setErrorReporter(errorCollector0);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(612, 612, token_CommentType0, "push");
      Node node0 = Node.newString("push");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("GA#wY*nvl*&L]", 13, 3);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      jsDocInfoParser0.parseInlineTypeDoc();
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(597, 597, token_CommentType0, "push");
      Node node0 = Node.newString("push");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("iA#w*nv@lA*&L]", 37);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      jsDocInfoParser0.parseInlineTypeDoc();
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Z");
      Node node0 = Node.newString("Z");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.ANNOTATION;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(597, 597, token_CommentType0, "push");
      Comment comment1 = new Comment(13, 4, token_CommentType0, "push");
      Node node0 = JsDocInfoParser.parseTypeString("iAhQw*n~@lA*dL]");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("iAhQw*n~@lA*dL]", 0);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.LB;
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream0, comment1, node0, config0, toolErrorReporter0);
      jsDocInfoParser1.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.createJSTypeExpression((Node) null);
      jsDocInfoParser0.parseInlineTypeDoc();
      Config.LanguageMode config_LanguageMode1 = Config.LanguageMode.ECMASCRIPT5;
      Config config1 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode1, true);
      JsDocInfoParser jsDocInfoParser2 = new JsDocInfoParser(jsDocTokenStream0, comment1, node0, config1, toolErrorReporter0);
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("x=?\"SH.BG~r]IORvi}r");
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-966), (-966), token_CommentType0, "x=?\"SH.BG~r]IORvi}r");
      comment0.getJsDocNode();
      Node node0 = JsDocInfoParser.parseTypeString("x=?\"SH.BG~r]IORvi}r");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.LB;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.createJSTypeExpression(node0);
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      Node node1 = jsDocInfoParser1.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser1.createJSTypeExpression((Node) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser2 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node1, config0, toolErrorReporter0);
      jsDocInfoParser2.parse();
      JsDocToken jsDocToken1 = JsDocToken.EOF;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      jsDocInfoParser0.parse();
      Node node2 = new Node(49);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("wl");
      Node node0 = JsDocInfoParser.parseTypeString("wl");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.RC;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("x=?\"SH.BG~r]IORvi}r");
      JsDocInfoParser.parseTypeString("[#y']Pg8Zl{MD@KF}I");
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Z");
      Node node0 = JsDocInfoParser.parseTypeString("Z");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.EOC;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("push");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("push", 38);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.EOC;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("x=?\"SH.BG~r]IORvi}r");
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-966), (-966), token_CommentType0, "x=?\"SH.BG~r]IORvi}r");
      comment0.getJsDocNode();
      Node node0 = JsDocInfoParser.parseTypeString("x=?\"SH.BG~r]IORvi}r");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.LB;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.createJSTypeExpression((Node) null);
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      Config config1 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config1, toolErrorReporter0);
      jsDocInfoParser1.createJSTypeExpression((Node) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser2 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, toolErrorReporter0);
      jsDocInfoParser0.parse();
      JsDocInfoParser jsDocInfoParser3 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config1, toolErrorReporter0);
      JsDocToken jsDocToken1 = JsDocToken.EOC;
      jsDocInfoParser3.createJSTypeExpression(node0);
      jsDocInfoParser3.parseAndRecordTypeNode(jsDocToken1);
      jsDocInfoParser3.parse();
      Node node1 = new Node(1053);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      String string0 = "Z";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Z", (-865));
      jsDocTokenStream0.sourceCursor = (-2092538423);
      Node node0 = Node.newString("Z");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Node node0 = JsDocInfoParser.parseTypeString("{yoy?-A;D/I+#n1m?");
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{yoy?-A;D/I+#n1m?", (-1628094700), (-3062));
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(32, (-1628094700), token_CommentType0, "{yoy?-A;D/I+#n1m?");
      Context context0 = Context.getCurrentContext();
      Context context1 = Context.enter(context0);
      ContextFactory contextFactory0 = context1.getFactory();
      Context context2 = contextFactory0.enterContext();
      ErrorCollector errorCollector0 = new ErrorCollector();
      ErrorReporter errorReporter0 = context2.setErrorReporter(errorCollector0);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(",=7ZhO]nU)#vZNr\"f", 196, 196);
      jsDocTokenStream0.cursor = 196;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Node node0 = new Node(196);
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      ErrorCollector errorCollector0 = new ErrorCollector();
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      errorCollector0.toString();
      JsDocToken jsDocToken0 = JsDocToken.BANG;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JsDocInfoParser.parseTypeString("function");
      System.setCurrentTimeMillis(2);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("function");
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(57, 50, token_CommentType0, "function");
      HashSet<String> hashSet0 = new HashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, errorCollector0);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("w!/QDt&kAoBj^;");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("THIS");
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(32, 53, token_CommentType0, "w!/QDt&kAoBj^;");
      comment0.getJsDocNode();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.LB;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.createJSTypeExpression((Node) null);
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken1 = JsDocToken.LT;
      jsDocInfoParser1.parseAndRecordTypeNode(jsDocToken1);
      jsDocInfoParser1.createJSTypeExpression((Node) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser2 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, errorCollector0);
      jsDocInfoParser1.parse();
      jsDocInfoParser0.parse();
      JsDocToken jsDocToken2 = JsDocToken.LB;
      jsDocInfoParser1.parseAndRecordTypeNode(jsDocToken2);
      jsDocInfoParser0.hasParsedJSDocInfo();
      jsDocInfoParser1.parse();
      jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Node node0 = Node.newString("push");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("push", 47);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.LT;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Z");
      Node node0 = JsDocInfoParser.parseTypeString("Z");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.EOL;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.parseInlineTypeDoc();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("?TwSR#");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("?TwSR#", 4);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.EOL;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsoc.consistidgen");
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(2735, 2735, token_CommentType0, "msg.jsoc.consistidgen");
      comment0.getJsDocNode();
      Node node0 = JsDocInfoParser.parseTypeString("msg.jsdoc.consistidgen");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      node0.getDirectives();
      Config config0 = new Config(linkedHashSet0, (Set<String>) null, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.RB;
      jsDocInfoParser1.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser1.createJSTypeExpression((Node) null);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      JsDocInfoParser jsDocInfoParser2 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      jsDocInfoParser0.parse();
      jsDocInfoParser1.parse();
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("push");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("push", 37, 57);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.RB;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(",=7ZhO]nU)#vZNr\"f", 3604, 47);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Node node0 = new Node((-1571));
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      node0.setSourceFileForTesting("com.google.javascript.rhino.head.NativeJavaClass");
      Config.LanguageMode config_LanguageMode1 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode1, true);
      JsDocTokenStream jsDocTokenStream1 = new JsDocTokenStream(",=7ZhO]nU)#vZNr\"f", 308, 306);
      Config config1 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream1, (Comment) null, node0, config1, toolErrorReporter0);
      jsDocInfoParser0.parse();
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(",=7ZhO]nU)#vZNr\"f", 196, 196);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Node node0 = new Node(196);
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      SimpleSourceFile simpleSourceFile0 = new SimpleSourceFile("1jmQ-?\"-JflG~'", false);
      node0.setStaticSourceFile(simpleSourceFile0);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("(2CS", 0, 3604);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Node node0 = new Node((-1794420259));
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      jsDocInfoParser0.parse();
      jsDocInfoParser0.parse();
      JsDocToken jsDocToken0 = JsDocToken.LP;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("(2CS", 0, 0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Node node0 = new Node(0);
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("x=?\"SH.BG~r]IORvi}r");
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-966), (-966), token_CommentType0, "x=?\"SH.BG~r]IORvi}r");
      comment0.getJsDocNode();
      Node node0 = JsDocInfoParser.parseTypeString("x=?\"SH.BG~r]IORvi}r");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.LB;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.createJSTypeExpression(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, toolErrorReporter0);
      jsDocInfoParser0.parse();
      jsDocInfoParser1.parse();
      JsDocToken jsDocToken1 = JsDocToken.RC;
      jsDocInfoParser1.parseAndRecordTypeNode(jsDocToken1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JsDocInfoParser.parseTypeString("{yoy?-A;D/I+#n1m?");
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!5x/j>mAS+EA\"1j@O", 51);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.EQUALS;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("x=?\"SH.BG~r]IORvi}r");
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment((-3071), (-3071), token_CommentType0, "x=?\"SH.BG~r]IORvi}r");
      Node node0 = Node.newString(4, "x=?\"SH.BG~r]IORvi}r", 4, 12);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      jsDocTokenStream0.sourceCursor = 23;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.LC;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("x");
      JsDocInfoParser.parseTypeString("x");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      EvaluatorException evaluatorException0 = new EvaluatorException("M-a3^1AI3Q");
      toolErrorReporter0.reportException((RhinoException) evaluatorException0);
      Node node0 = JsDocInfoParser.parseTypeString("x");
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      JsDocInfoParser.parseTypeString("capacity must be >= 0 but was %s");
      JsDocInfoParser.parseTypeString("x");
      JsDocTokenStream jsDocTokenStream1 = new JsDocTokenStream("capacity must be >= 0 but was %s");
      JsDocTokenStream jsDocTokenStream2 = new JsDocTokenStream(")XZwwpRiIa*|");
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(2057, (-982), token_CommentType0, "M-a3^1AI3Q");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream2, comment0, node0, config0, toolErrorReporter0);
      jsDocInfoParser0.parse();
      Node node1 = new Node(33);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Z");
      Node node0 = JsDocInfoParser.parseTypeString("Z");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.RP;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(",=7ZhO]nU)#vZNr\"f", 196, 196);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(51, 1419, token_CommentType0, "a|oZ.Br4c:HX");
      comment0.getJsDocNode();
      Node node0 = Node.newString((-1757), "number", 15, 3);
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.createJSTypeExpression(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocTokenStream jsDocTokenStream1 = new JsDocTokenStream("<f7kj9$d45McK");
      jsDocTokenStream1.getJsDocToken();
      JsDocInfoParser jsDocInfoParser2 = new JsDocInfoParser(jsDocTokenStream1, (Comment) null, node0, config0, toolErrorReporter0);
      jsDocInfoParser2.parse();
      Node node1 = new Node((-1686));
      jsDocInfoParser0.hasParsedJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(",i* l7EsK$Qm5B{m");
      Node node0 = Node.newString("");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("bsg.j$doc.consistiPgen");
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment((-966), 19, token_CommentType0, "K4Ov%GKKee-");
      Comment comment1 = new Comment(13, 2, token_CommentType0, "{(M7>*}EE");
      String string0 = "#>>As'S!>n[W)O";
      JsDocInfoParser.parseTypeString("#>>As'S!>n[W)O");
      JsDocTokenStream jsDocTokenStream1 = new JsDocTokenStream("{(M7>*}EE", 36, 1);
      JsDocInfoParser.parseTypeString("{(M7>*}EE");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      String string1 = "a|oZ.Br4c:HX";
      String string2 = "YTd7:'";
      JsDocTokenStream jsDocTokenStream2 = new JsDocTokenStream("YTd7:'", 47, 2);
      JsDocInfoParser.parseTypeString("a|oZ.Br4c:HX");
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      JsDocInfoParser.parseTypeString("localeCompare");
      boolean boolean0 = true;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet1, linkedHashSet1, true, config_LanguageMode0, true);
      boolean boolean1 = false;
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("K4Ov%GKKee-", "^zhuaZj");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // ^zhuaZj
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsoc.consistidgen");
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-966), (-966), token_CommentType0, "msg.jsoc.consistidgen");
      Comment comment1 = new Comment(1, 0, token_CommentType0, "msg.jsoc.consistidgen");
      Node node0 = JsDocInfoParser.parseTypeString("msg.jsoc.consistidgen");
      JsDocTokenStream jsDocTokenStream1 = new JsDocTokenStream("I): MwDxM", 43, 1);
      JsDocInfoParser.parseTypeString("function ");
      JsDocTokenStream jsDocTokenStream2 = new JsDocTokenStream("a|oZ.Br4c:HX", 3000, 6);
      Node node1 = new Node(0, node0, 53, 31);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Node node2 = JsDocInfoParser.parseTypeString("limit is negative");
      JsDocTokenStream jsDocTokenStream3 = new JsDocTokenStream("getMilliseconds", 30, (-4511));
      node2.toString(true, true, true);
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream3, comment1, node0, config0, errorCollector0);
      JsDocToken jsDocToken0 = JsDocToken.STAR;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsdoc.consistidgen");
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Token.CommentType token_CommentType1 = Token.CommentType.LINE;
      Comment comment0 = new Comment((-966), (-966), token_CommentType1, "msg.jsdoc.consistidgen");
      Comment comment1 = new Comment(17, 11, token_CommentType0, "msg.jsdoc.consistidgen");
      Node node0 = JsDocInfoParser.parseTypeString("com.google.javascript.rhino.Node$AncestorIterable");
      node0.setVarArgs(false);
      JsDocTokenStream jsDocTokenStream1 = new JsDocTokenStream("msg.jsdoc.consistidgen", 52, 2177);
      Node node1 = JsDocInfoParser.parseTypeString("I): MwDxM");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      node1.children();
      JsDocTokenStream jsDocTokenStream2 = new JsDocTokenStream("parseInt", 2667, 8);
      JsDocInfoParser.parseTypeString("a|oZ.Br4c:HX");
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      JsDocInfoParser.parseTypeString("S},F[vj^)U@");
      node1.getDirectives();
      Config config1 = new Config(linkedHashSet1, (Set<String>) null, false, config_LanguageMode0, false);
      Context context0 = Context.enter();
      Context context1 = Context.enter(context0);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      ErrorReporter errorReporter0 = context1.setErrorReporter(toolErrorReporter0);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream1, comment0, node1, config1, errorReporter0);
      jsDocInfoParser0.hasParsedJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "msg.jsoc.consistidgen";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsoc.consistidgen");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-966), (-966), token_CommentType0, "msg.jsoc.consistidgen");
      Comment comment1 = new Comment(1, 0, token_CommentType0, "msg.jsoc.consistidgen");
      JsDocInfoParser.parseTypeString("msg.jsoc.consistidgen");
      JsDocTokenStream jsDocTokenStream1 = new JsDocTokenStream("I): MwDxM", 43, 1);
      JsDocInfoParser.parseTypeString("function ");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Comment comment2 = new Comment((-617), 24, token_CommentType0, "I): MwDxM");
      Node node0 = Node.newString("com.google.avascript.rhino.jstype.JSTypeNative");
      Locale locale0 = Locale.CANADA;
      locale0.getUnicodeLocaleKeys();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream1, comment1, node0, config0, (ErrorReporter) null);
      jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      JsDocInfoParser.parseTypeString(".j9");
      JsDocToken jsDocToken0 = JsDocToken.LP;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.createJSTypeExpression(node0);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      JsDocToken jsDocToken1 = JsDocToken.QMARK;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JsDocInfoParser.parseTypeString("(Ljava/lang/String;)Ljava/lang/Class;");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JsDocInfoParser.parseTypeString("*");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JsDocInfoParser.parseTypeString("function ");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("+F40[^Y", 0, 0);
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(392, 2524, token_CommentType0, "+F40[^Y");
      JsDocTokenStream jsDocTokenStream1 = new JsDocTokenStream("%s", 1, 124);
      JsDocInfoParser.parseTypeString("function ");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Comment comment1 = new Comment((-3694), (-2092554346), token_CommentType0, "com.google.avascript.rhino.jstype.JSTypeNative");
      Node node0 = Node.newString("fdzp!");
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment1, node0, config0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("bsg.j$doc.consistiPgen");
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment((-966), (-3430), token_CommentType0, "jlb");
      Node node0 = JsDocInfoParser.parseTypeString("com.google.javascript.rhino.Node");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      Config config1 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocInfoParser.parseTypeString("{yoy?-A;D/I+#n1m?");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config1, (ErrorReporter) null);
      jsDocInfoParser0.createJSTypeExpression(node0);
      Token.CommentType token_CommentType1 = Token.CommentType.HTML;
      Comment comment1 = new Comment(20, (-491), token_CommentType1, "com.google.javascript.rhino.Node");
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream0, comment1, (Node) null, config0, (ErrorReporter) null);
      jsDocInfoParser1.retrieveAndResetParsedJSDocInfo();
      jsDocInfoParser0.setFileOverviewJSDocInfo((JSDocInfo) null);
      jsDocInfoParser1.retrieveAndResetParsedJSDocInfo();
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      JsDocInfoParser.parseTypeString("bsg.j$doc.consistiPgen");
      JsDocInfoParser.parseTypeString("{yoy?-A;D/I+#n1m?");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("bsg.j$doc.consistiPgen");
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-3631), (-3631), token_CommentType0, "bsg.j$doc.consistiPgen");
      Node node0 = JsDocInfoParser.parseTypeString("null");
      JsDocTokenStream jsDocTokenStream1 = new JsDocTokenStream("com.google.common.collect.ImmutableCollection$ArrayBasedBuilder", (-393179569));
      Token.CommentType token_CommentType1 = Token.CommentType.BLOCK_COMMENT;
      Comment comment1 = new Comment(4, 19, token_CommentType1, "null");
      comment0.getJsDocNode();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      JsDocInfoParser.parseTypeString("?Zo2;/}");
      Node.newNumber((-803.39234), 6, 4532);
      Context context0 = Context.enter();
      Context.enter(context0);
      ContextFactory contextFactory0 = context0.getFactory();
      contextFactory0.enter();
      Context context1 = contextFactory0.enterContext();
      ErrorReporter errorReporter0 = context1.getErrorReporter();
      JsDocTokenStream jsDocTokenStream2 = new JsDocTokenStream("soalbe");
      JsDocInfoParser jsDocInfoParser0 = null;
      try {
        jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream2, comment0, node0, (Config) null, errorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("+F40[^Y", 0, 0);
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((-101), (-101), token_CommentType0, "+F40[^Y");
      JsDocTokenStream jsDocTokenStream1 = new JsDocTokenStream("%s", 20, 26);
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, true);
      JSTypeNative jSTypeNative0 = JSTypeNative.SYNTAX_ERROR_FUNCTION_TYPE;
      FunctionType functionType0 = jSTypeRegistry0.getNativeFunctionType(jSTypeNative0);
      Set<String> set0 = functionType0.getOwnPropertyNames();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      Node node0 = Node.newString((-7), "S\nh{j", 17, 25);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream1, comment0, node0, config0, (ErrorReporter) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream1, comment0, node0, config0, (ErrorReporter) null);
      jsDocInfoParser1.parseInlineTypeDoc();
      jsDocInfoParser0.createJSTypeExpression(node0);
      JsDocToken jsDocToken0 = JsDocToken.COLON;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = ",=7ZhO]nU)#vZNr\"f";
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(",=7ZhO]nU)#vZNr\"f", 196, 196);
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(196, 196, token_CommentType0, ".java");
      Node node0 = JsDocInfoParser.parseTypeString("some");
      Node node1 = new Node(4, node0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ErrorReporter errorReporter0 = null;
      Config config1 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      jsDocTokenStream0.update();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node1, config1, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(",=7ZhO]nU)#vZNr\"f", 196, 196);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Node node0 = new Node(196);
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      jsDocInfoParser0.parse();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("bsg.j$doc.consistiPgen");
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      String string0 = "jlb";
      Comment comment0 = new Comment((-966), (-3430), token_CommentType0, "jlb");
      Node node0 = JsDocInfoParser.parseTypeString("com.google.javascript.rhino.Node");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      Config config1 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocInfoParser.parseTypeString("{yoy?-A;D/I+#n1m?");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config1, (ErrorReporter) null);
      jsDocInfoParser0.createJSTypeExpression(node0);
      Token.CommentType token_CommentType1 = Token.CommentType.HTML;
      Comment comment1 = new Comment(20, (-491), token_CommentType1, "com.google.javascript.rhino.Node");
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream0, comment1, (Node) null, config0, (ErrorReporter) null);
      jsDocInfoParser1.retrieveAndResetParsedJSDocInfo();
      jsDocInfoParser0.setFileOverviewJSDocInfo((JSDocInfo) null);
      jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      JsDocToken jsDocToken0 = JsDocToken.LC;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsDocInfoParser.parseTypeString("void");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, linkedHashSet0, false, config_LanguageMode0, false);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("z", 2348);
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(53, 53, token_CommentType0, (String) null);
      comment0.getJsDocNode();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      JsDocInfoParser.parseTypeString("undefined");
      Node node0 = Node.newNumber(0.0, 16, 2);
      Context context0 = Context.enter();
      Context context1 = Context.enter(context0);
      ContextFactory contextFactory0 = context1.getFactory();
      Context context2 = contextFactory0.enter();
      ErrorReporter errorReporter0 = context2.getErrorReporter();
      JsDocInfoParser jsDocInfoParser0 = null;
      try {
        jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, (Config) null, errorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JsDocInfoParser.parseTypeString("undefined");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("bsg.j$doc.consistiPgen");
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-3631), (-3631), token_CommentType0, "bsg.j$doc.consistiPgen");
      Node node0 = JsDocInfoParser.parseTypeString("null");
      Node node1 = new Node(14, node0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      EvaluatorException evaluatorException0 = new EvaluatorException("null");
      File file0 = MockFile.createTempFile("suDfH%hQ*D", "z*O)iUHr~");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0, true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      Context context0 = new Context();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      context0.setLocale(locale0);
      PrintStream printStream0 = mockPrintStream0.format((Locale) null, "e'", context0.emptyArgs);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true, printStream0);
      toolErrorReporter0.reportException((RhinoException) evaluatorException0);
      JsDocInfoParser.parseTypeString("z0DQ?A5IEX@vO>/-<V");
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, true);
      JsDocInfoParser.parseTypeString("z*O)iUHr~");
      JsDocInfoParser.parseTypeString("");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JsDocInfoParser.parseTypeString("f!lJpiEC");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JsDocInfoParser.parseTypeString("q?fr:~Qnx{L:Uj");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsdoc.consistidgen");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, true);
      JsDocInfoParser.parseTypeString("JP;QxYqZn#!t= }oG");
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      LinkedHashSet<String> linkedHashSet2 = new LinkedHashSet<String>();
      Config config1 = new Config(linkedHashSet2, linkedHashSet1, false, config_LanguageMode0, false);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsdoc.consistidgen");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      EvaluatorException evaluatorException0 = new EvaluatorException("msg.jsdoc.consistidgen", "#I?Lc^=n}XugSbyPjI", 34);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      EvaluatorException evaluatorException1 = new EvaluatorException((String) null);
      toolErrorReporter0.reportException((RhinoException) evaluatorException1);
      Node.newString("4-hw]},", 34, (-2180));
      JsDocInfoParser.parseTypeString("(");
      JsDocInfoParser.parseTypeString("(");
      JsDocTokenStream jsDocTokenStream1 = new JsDocTokenStream("9<", 31, (-2098759718));
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment((-2180), 36, token_CommentType0, "9<");
      comment0.getJsDocNode();
      ToolErrorReporter toolErrorReporter1 = new ToolErrorReporter(false);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JsDocInfoParser.parseTypeString("null");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("+F40[^Y", 0, 0);
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(110, 45, token_CommentType0, "+F40[^Y");
      JsDocTokenStream jsDocTokenStream1 = new JsDocTokenStream("+F40[^Y", 18, 14);
      Token.CommentType token_CommentType1 = Token.CommentType.BLOCK_COMMENT;
      Comment comment1 = new Comment(0, 10, token_CommentType1, "com.google.javascript.rhino.jstype.JSTypeNative");
      Node node0 = JsDocInfoParser.parseTypeString("null");
      Node node1 = new Node(8199, node0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment1, node0, config0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JsDocInfoParser.parseTypeString("[}5$`C6");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)52;
      byteArray0[1] = (byte) (-57);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(";,~7)u6GGGRy,");
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((byte)52, (byte)52, token_CommentType0, "cti^96&@@IV<dx");
      comment0.getJsDocNode();
      Node node0 = new Node(13, (byte) (-57), 13);
      Node node1 = new Node(28, node0, node0);
      Node node2 = new Node(1353, node1);
      HashSet<String> hashSet0 = new HashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node2, config0, (ErrorReporter) null);
      JsDocToken jsDocToken0 = JsDocToken.LB;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JsDocInfoParser.parseTypeString("[GAsD2?s=@VC");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("+F40[^Y", 0, 0);
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(110, 45, token_CommentType0, "+F40[^Y");
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.JSTypeNative", 24, 4);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      node0.siblings();
      Set<String> set0 = jSDocInfo0.getModifies();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      jSDocInfo0.getTypeNodes();
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      jsDocInfoParser0.getFileOverviewJSDocInfo();
      Node node1 = JsDocInfoParser.parseTypeString("com.google.javascript.rhino.jstype.JSTypeNative");
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
      node1.removeChildren();
      toolErrorReporter0.warning("Invalid keyword literal type: ", "h)t$47l6xV_6zt'~.", 813, "=", (-2014));
      jsDocInfoParser0.hasParsedJSDocInfo();
      jsDocTokenStream0.getJsDocToken();
      jsDocInfoParser0.hasParsedJSDocInfo();
      jsDocInfoParser0.createJSTypeExpression(node0);
      jsDocInfoParser0.hasParsedJSDocInfo();
      jsDocInfoParser0.createJSTypeExpression((Node) null);
      jsDocInfoParser0.parseInlineTypeDoc();
      jsDocInfoParser0.hasParsedJSDocInfo();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsdoc.consistidgen");
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-966), (-966), token_CommentType0, "msg.jsdoc.consistidgen");
      Comment comment1 = new Comment(1, 0, token_CommentType0, "msg.jsdoc.consistidgen");
      Node node0 = JsDocInfoParser.parseTypeString("msg.jsdoc.consistidgen");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, true);
      Config config1 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config1, (ErrorReporter) null);
      jsDocInfoParser0.createJSTypeExpression(node0);
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config1, (ErrorReporter) null);
      jsDocInfoParser1.retrieveAndResetParsedJSDocInfo();
      jsDocInfoParser1.setFileOverviewJSDocInfo((JSDocInfo) null);
      jsDocInfoParser0.setFileOverviewJSDocInfo((JSDocInfo) null);
      jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      JsDocToken jsDocToken0 = JsDocToken.LC;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{Ns_+_}x{n>{M$}nRX0", 3463);
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(3463, (-553), token_CommentType0, "{Ns_+_}x{n>{M$}nRX0");
      Node node0 = JsDocInfoParser.parseTypeString("eZh?3\"76l4,7b");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getModifies();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true, mockPrintStream0);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      jsDocInfoParser0.parseInlineTypeDoc();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("");
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(55, 0, token_CommentType0, "");
      comment0.getJsDocNode();
      Node node0 = JsDocInfoParser.parseTypeString("uk~[V>7vn.j4h:!k");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      Config.LanguageMode config_LanguageMode1 = Config.LanguageMode.ECMASCRIPT5;
      Config config1 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode1, true);
      JsDocTokenStream jsDocTokenStream1 = new JsDocTokenStream("msg.jsdoc.consistidgen", 37, 2);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream1, comment0, node0, config0, (ErrorReporter) null);
      jsDocInfoParser0.createJSTypeExpression(node0);
      jsDocInfoParser0.parseInlineTypeDoc();
      jsDocInfoParser0.getFileOverviewJSDocInfo();
      JsDocToken jsDocToken0 = JsDocToken.EOF;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Node node0 = new Node(47);
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser((JsDocTokenStream) null, (Comment) null, node0, config0, toolErrorReporter0);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Node node0 = JsDocInfoParser.parseTypeString("com.googlejavacript.rhino.Noe");
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!5x/j>mAS+EA\"1j@O", 51);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      JsDocToken jsDocToken0 = JsDocToken.EOL;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("+F40[^Y", 0, 0);
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(110, 45, token_CommentType0, "+F40[^Y");
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.JSTypeNative", (-2322), 4);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Iterable<Node> iterable0 = new Vector<Node>();
      Set<String> set0 = jSDocInfo0.getModifies();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      jSDocInfo0.getTypeNodes();
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      jsDocInfoParser0.getFileOverviewJSDocInfo();
      Node node1 = JsDocInfoParser.parseTypeString("com.google.javascript.rhino.jstype.JSTypeNative");
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
      node1.removeChildren();
      toolErrorReporter0.warning("Invalid keyword literal type: ", "h)t$47l6xV_6zt'~.", 813, "=", (-2014));
      jsDocInfoParser0.hasParsedJSDocInfo();
      jsDocInfoParser0.hasParsedJSDocInfo();
      jsDocInfoParser0.createJSTypeExpression(node0);
      jsDocInfoParser0.getFileOverviewJSDocInfo();
      jsDocInfoParser0.createJSTypeExpression(node0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JsDocInfoParser.parseTypeString("?");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("?K?}A");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("?K?}A", 36, 1692);
      JsDocInfoParser jsDocInfoParser0 = null;
      try {
        jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, (Config) null, (ErrorReporter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("funcxion ");
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getModifies();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser((JsDocTokenStream) null, (Comment) null, node0, config0, errorCollector0);
      JsDocToken jsDocToken0 = JsDocToken.LC;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JsDocInfoParser.parseTypeString("(iR;b[iO2E25*o");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("'.", 55, (-2137));
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(55, 0, token_CommentType0, "'.");
      assertNotNull(comment0);
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(55, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals("'.", comment0.getValue());
      assertEquals(0, comment0.getLength());
      assertEquals(55, comment0.getAbsolutePosition());
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      
      Comment comment1 = comment0.getJsDocNode();
      assertNull(comment1);
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(55, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals("'.", comment0.getValue());
      assertEquals(0, comment0.getLength());
      assertEquals(55, comment0.getAbsolutePosition());
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      
      Node node0 = Node.newString((-2557), "com.google.javascript.rhino.head.ast.XmlString", 18, 1);
      assertNotNull(node0);
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isParamList());
      assertFalse(node0.isQuotedString());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertEquals((-2557), node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isString());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoAlias());
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertFalse(set0.contains("'."));
      assertNotNull(set0);
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoAlias());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertFalse(set0.contains("'."));
      assertNotNull(config0);
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoAlias());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      jSDocInfo0.setLicense("'.");
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals("'.", jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoAlias());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(set0.contains("'."));
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isParamList());
      assertFalse(node0.isQuotedString());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertEquals((-2557), node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isString());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals("'.", jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoAlias());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      
      EvaluatorException evaluatorException0 = new EvaluatorException("6U aua)|LY6qhmlL7)I", "msg.jsdoc.type.syntax", 432);
      assertNotNull(evaluatorException0);
      
      String string0 = evaluatorException0.getScriptStackTrace();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("msg.jsdoc.type.syntax", evaluatorException0.getSourceName());
      assertFalse(evaluatorException0.usesMozillaStackStyle());
      assertEquals(432, evaluatorException0.lineNumber());
      assertEquals(0, evaluatorException0.columnNumber());
      assertEquals(432, evaluatorException0.getLineNumber());
      assertEquals("msg.jsdoc.type.syntax", evaluatorException0.sourceName());
      assertNull(evaluatorException0.lineSource());
      assertNull(evaluatorException0.getLineSource());
      assertEquals(0, evaluatorException0.getColumnNumber());
      
      toolErrorReporter0.reportException((RhinoException) evaluatorException0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals("msg.jsdoc.type.syntax", evaluatorException0.getSourceName());
      assertFalse(evaluatorException0.usesMozillaStackStyle());
      assertEquals(432, evaluatorException0.lineNumber());
      assertEquals(0, evaluatorException0.columnNumber());
      assertEquals(432, evaluatorException0.getLineNumber());
      assertEquals("msg.jsdoc.type.syntax", evaluatorException0.sourceName());
      assertNull(evaluatorException0.lineSource());
      assertNull(evaluatorException0.getLineSource());
      assertEquals(0, evaluatorException0.getColumnNumber());
      
      Node node1 = JsDocInfoParser.parseTypeString("'.");
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isTrue());
      assertEquals(40, node1.getType());
      assertFalse(node1.isThrow());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isEmpty());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isCatch());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertTrue(node1.isString());
      assertFalse(node1.isHook());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isFromExterns());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isContinue());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isCast());
      assertFalse(node1.isNew());
      assertEquals(2, node1.getLength());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isVar());
      assertFalse(node1.isDo());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isGetProp());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isComma());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertEquals(0, node1.getChangeTime());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isNull());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isName());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isWhile());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotSame(node1, node0);
      
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertFalse(set0.contains("'."));
      assertFalse(node0.equals((Object)node1));
      assertNull(jSDocInfo1);
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isParamList());
      assertFalse(node0.isQuotedString());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertEquals((-2557), node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isString());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals("'.", jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoAlias());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotSame(node0, node1);
      
      JSDocInfo jSDocInfo2 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertFalse(set0.contains("'."));
      assertFalse(node0.equals((Object)node1));
      assertNull(jSDocInfo2);
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isParamList());
      assertFalse(node0.isQuotedString());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertEquals((-2557), node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isString());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals("'.", jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoAlias());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotSame(node0, node1);
      
      jsDocInfoParser0.setFileOverviewJSDocInfo((JSDocInfo) null);
      assertFalse(set0.contains("'."));
      assertFalse(node0.equals((Object)node1));
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isParamList());
      assertFalse(node0.isQuotedString());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertEquals((-2557), node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isString());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals("'.", jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoAlias());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotSame(node0, node1);
      
      JsDocToken jsDocToken0 = JsDocToken.LP;
      Node node2 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(set0.contains("'."));
      assertFalse(node0.equals((Object)node1));
      assertNull(node2);
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isParamList());
      assertFalse(node0.isQuotedString());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertEquals((-2557), node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isString());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals("'.", jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoAlias());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotSame(node0, node1);
      
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(set0.contains("'."));
      assertFalse(node0.equals((Object)node1));
      assertFalse(jsDocInfoParser1.equals((Object)jsDocInfoParser0));
      assertNotNull(jsDocInfoParser1);
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isParamList());
      assertFalse(node0.isQuotedString());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertEquals((-2557), node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isString());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals("'.", jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoAlias());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      
      boolean boolean0 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertFalse(set0.contains("'."));
      assertFalse(node0.equals((Object)node1));
      assertFalse(jsDocInfoParser0.equals((Object)jsDocInfoParser1));
      assertFalse(boolean0);
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isParamList());
      assertFalse(node0.isQuotedString());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertEquals((-2557), node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isString());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals("'.", jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoAlias());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotSame(node0, node1);
      assertNotSame(jsDocInfoParser0, jsDocInfoParser1);
      
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser1.createJSTypeExpression(node0);
      assertFalse(set0.contains("'."));
      assertFalse(node0.equals((Object)node1));
      assertFalse(jsDocInfoParser1.equals((Object)jsDocInfoParser0));
      assertNotNull(jSTypeExpression0);
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isParamList());
      assertFalse(node0.isQuotedString());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertEquals((-2557), node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isString());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals("'.", jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoAlias());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotSame(node0, node1);
      assertNotSame(jsDocInfoParser1, jsDocInfoParser0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("a|oZ.Br4c:HX");
      assertNotNull(node0);
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isDo());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(2, node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isStringKey());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertEquals(301, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertTrue(node0.hasMoreThanOneChild());
      assertEquals(2, node0.getCharno());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("", 55, (-2137));
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(55, 0, token_CommentType0, "");
      assertNotNull(comment0);
      assertEquals(55, comment0.getPosition());
      assertEquals(0, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals(55, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals("", comment0.getValue());
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      
      Comment comment1 = comment0.getJsDocNode();
      assertNull(comment1);
      assertEquals(55, comment0.getPosition());
      assertEquals(0, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals(55, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals("", comment0.getValue());
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      
      Node node0 = Node.newString((-2557), "com.google.javascript.rhino.head.ast.XmlString", 18, 1);
      assertNotNull(node0);
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertEquals((-2557), node0.getType());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBreak());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertFalse(set0.contains(""));
      assertNotNull(set0);
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertFalse(set0.contains(""));
      assertNotNull(config0);
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      jSDocInfo0.setLicense("");
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("", jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(set0.contains(""));
      assertNotNull(jsDocInfoParser0);
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertEquals((-2557), node0.getType());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBreak());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("", jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      
      EvaluatorException evaluatorException0 = new EvaluatorException("6U aua)|LY6qhmlL7)I", "msg.jsdoc.type.syntax", 432);
      assertNotNull(evaluatorException0);
      
      toolErrorReporter0.reportException((RhinoException) evaluatorException0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(0, evaluatorException0.getColumnNumber());
      assertEquals("msg.jsdoc.type.syntax", evaluatorException0.getSourceName());
      assertEquals("msg.jsdoc.type.syntax", evaluatorException0.sourceName());
      assertEquals(432, evaluatorException0.lineNumber());
      assertEquals(432, evaluatorException0.getLineNumber());
      assertFalse(evaluatorException0.usesMozillaStackStyle());
      assertNull(evaluatorException0.lineSource());
      assertNull(evaluatorException0.getLineSource());
      assertEquals(0, evaluatorException0.columnNumber());
      
      Node node1 = JsDocInfoParser.parseTypeString("");
      assertNull(node1);
      
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertFalse(set0.contains(""));
      assertNull(jSDocInfo1);
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertEquals((-2557), node0.getType());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBreak());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("", jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      
      JSDocInfo jSDocInfo2 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertFalse(set0.contains(""));
      assertNull(jSDocInfo2);
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertEquals((-2557), node0.getType());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBreak());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("", jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      
      jsDocInfoParser0.setFileOverviewJSDocInfo((JSDocInfo) null);
      assertFalse(set0.contains(""));
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertEquals((-2557), node0.getType());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBreak());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("", jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      
      JSDocInfo jSDocInfo3 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertFalse(set0.contains(""));
      assertNull(jSDocInfo3);
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertEquals((-2557), node0.getType());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBreak());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("", jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      Node node2 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(set0.contains(""));
      assertNull(node2);
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertEquals((-2557), node0.getType());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBreak());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("", jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      
      JSDocInfo jSDocInfo4 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertFalse(set0.contains(""));
      assertNull(jSDocInfo4);
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertEquals((-2557), node0.getType());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBreak());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("", jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      
      boolean boolean0 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertFalse(set0.contains(""));
      assertFalse(boolean0);
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertEquals((-2557), node0.getType());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBreak());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("", jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression(node0);
      assertFalse(set0.contains(""));
      assertNotNull(jSTypeExpression0);
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertEquals((-2557), node0.getType());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBreak());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("", jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      
      JSDocInfo jSDocInfo5 = jsDocInfoParser0.parseInlineTypeDoc();
      assertFalse(set0.contains(""));
      assertNull(jSDocInfo5);
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNumber());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertEquals((-2557), node0.getType());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBreak());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("", jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Node node0 = Node.newString("push");
      assertNotNull(node0);
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isOr());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("push"));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertFalse(treeSet0.contains("push"));
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("push", 47);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(treeSet0.contains("push"));
      assertNotNull(jsDocInfoParser0);
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isOr());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(treeSet0.contains("push"));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isOr());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(40, node1.getType());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isFunction());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.mayMutateArguments());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isRegExp());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isFor());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isTry());
      assertTrue(node1.isString());
      assertFalse(node1.isArrayLit());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isDebugger());
      assertEquals(192512, node1.getSourcePosition());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isCase());
      assertEquals(4, node1.getLength());
      assertFalse(node1.isBlock());
      assertFalse(node1.isHook());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isComma());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNot());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDo());
      assertFalse(node1.isAssignAdd());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isDec());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isName());
      assertEquals(47, node1.getLineno());
      assertFalse(node1.isNew());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isNull());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(treeSet0.contains("push"));
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isOr());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertNotSame(node0, node1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("_", (-130));
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((-130), (-130), token_CommentType0, "_");
      assertNotNull(comment0);
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals("_", comment0.getValue());
      assertEquals((-130), comment0.getLength());
      assertEquals((-130), comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals((-130), comment0.getPosition());
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      
      Node node0 = Node.newNumber((double) 21, 4, 15);
      assertNotNull(node0);
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals(15, node0.getCharno());
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals(4, node0.getLineno());
      assertEquals(16399, node0.getSourcePosition());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("_"));
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("_"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals("_", comment0.getValue());
      assertEquals((-130), comment0.getLength());
      assertEquals((-130), comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals((-130), comment0.getPosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals(15, node0.getCharno());
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals(4, node0.getLineno());
      assertEquals(16399, node0.getSourcePosition());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(linkedHashSet0.contains("_"));
      assertFalse(boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals("_", comment0.getValue());
      assertEquals((-130), comment0.getLength());
      assertEquals((-130), comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals((-130), comment0.getPosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals(15, node0.getCharno());
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals(4, node0.getLineno());
      assertEquals(16399, node0.getSourcePosition());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(linkedHashSet0.contains("_"));
      assertNull(node1);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals("_", comment0.getValue());
      assertEquals((-130), comment0.getLength());
      assertEquals((-130), comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals((-130), comment0.getPosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isReturn());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals(15, node0.getCharno());
      assertTrue(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals(4, node0.getLineno());
      assertEquals(16399, node0.getSourcePosition());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("bsg.j$doc.consistiPgen");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-966), (-966), token_CommentType0, "bsg.j$doc.consistiPgen");
      assertNotNull(comment0);
      assertEquals((-966), comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("bsg.j$doc.consistiPgen", comment0.getValue());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals((-966), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertFalse(comment0.hasChildren());
      assertEquals((-966), comment0.getLength());
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      
      Comment comment1 = comment0.getJsDocNode();
      assertNull(comment1);
      assertEquals((-966), comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("bsg.j$doc.consistiPgen", comment0.getValue());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals((-966), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertFalse(comment0.hasChildren());
      assertEquals((-966), comment0.getLength());
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      
      Node node0 = JsDocInfoParser.parseTypeString("bsg.j$doc.consistiPgen");
      assertNotNull(node0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertEquals(22, node0.getLength());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertTrue(node0.isString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThis());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("bsg.j$doc.consistiPgen"));
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("bsg.j$doc.consistiPgen"));
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, (ErrorReporter) null);
      assertFalse(linkedHashSet0.contains("bsg.j$doc.consistiPgen"));
      assertNotNull(jsDocInfoParser0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertEquals(22, node0.getLength());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertTrue(node0.isString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThis());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      boolean boolean0 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertFalse(linkedHashSet0.contains("bsg.j$doc.consistiPgen"));
      assertFalse(boolean0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertEquals(22, node0.getLength());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertTrue(node0.isString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThis());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertFalse(linkedHashSet0.contains("bsg.j$doc.consistiPgen"));
      assertNotNull(jSDocInfo0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertEquals(22, node0.getLength());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertTrue(node0.isString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThis());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertTrue(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertTrue(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isInterface());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("X\nAq|US,A{");
      assertNotNull(node0);
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals(1, node0.getLength());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("X\nAq|US,A{", 56, (-2558));
      assertNotNull(jsDocTokenStream0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains("X\nAq|US,A{"));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
      assertFalse(hashSet0.contains("X\nAq|US,A{"));
      assertNotNull(config0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(hashSet0.contains("X\nAq|US,A{"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals(1, node0.getLength());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertFalse(hashSet0.contains("X\nAq|US,A{"));
      assertNotNull(jSDocInfo0);
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals(1, node0.getLength());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertTrue(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getLicense());
      assertTrue(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("", 55, (-2137));
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(55, 0, token_CommentType0, "");
      assertNotNull(comment0);
      assertNull(comment0.getJsDoc());
      assertEquals(55, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals("", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals(55, comment0.getPosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(0, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      
      Comment comment1 = comment0.getJsDocNode();
      assertNull(comment1);
      assertNull(comment0.getJsDoc());
      assertEquals(55, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals("", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals(55, comment0.getPosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(0, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      
      Node node0 = Node.newString((-2557), "com.google.javascript.rhino.head.ast.XmlString", 18, 1);
      assertNotNull(node0);
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isName());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isVarArgs());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-2557), node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertFalse(set0.contains(""));
      assertNotNull(set0);
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertFalse(set0.contains(""));
      assertNotNull(config0);
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      jSDocInfo0.setLicense("");
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("", jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(set0.contains(""));
      assertNotNull(jsDocInfoParser0);
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isName());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isVarArgs());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-2557), node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("", jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      Config config1 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertFalse(set0.contains(""));
      assertFalse(config1.equals((Object)config0));
      assertNotNull(config1);
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("", jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocTokenStream jsDocTokenStream1 = new JsDocTokenStream("null", 47, 1);
      assertFalse(jsDocTokenStream1.equals((Object)jsDocTokenStream0));
      assertNotNull(jsDocTokenStream1);
      
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream1, comment0, node0, config0, errorCollector0);
      assertFalse(set0.contains(""));
      assertFalse(config0.equals((Object)config1));
      assertFalse(jsDocTokenStream1.equals((Object)jsDocTokenStream0));
      assertFalse(jsDocInfoParser1.equals((Object)jsDocInfoParser0));
      assertNotNull(jsDocInfoParser1);
      assertNull(comment0.getJsDoc());
      assertEquals(55, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals("", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals(55, comment0.getPosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(0, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isName());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isVarArgs());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-2557), node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("", jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.parseInlineTypeDoc();
      assertFalse(set0.contains(""));
      assertFalse(jsDocTokenStream0.equals((Object)jsDocTokenStream1));
      assertFalse(config0.equals((Object)config1));
      assertFalse(jsDocInfoParser0.equals((Object)jsDocInfoParser1));
      assertNull(jSDocInfo1);
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isName());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isVarArgs());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-2557), node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("", jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNotSame(jsDocTokenStream0, jsDocTokenStream1);
      assertNotSame(config0, config1);
      assertNotSame(jsDocInfoParser0, jsDocInfoParser1);
      
      JSDocInfo jSDocInfo2 = jsDocInfoParser0.parseInlineTypeDoc();
      assertFalse(set0.contains(""));
      assertFalse(jsDocTokenStream0.equals((Object)jsDocTokenStream1));
      assertFalse(config0.equals((Object)config1));
      assertFalse(jsDocInfoParser0.equals((Object)jsDocInfoParser1));
      assertNull(jSDocInfo2);
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isName());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isVarArgs());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-2557), node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("", jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNotSame(jsDocTokenStream0, jsDocTokenStream1);
      assertNotSame(config0, config1);
      assertNotSame(jsDocInfoParser0, jsDocInfoParser1);
      
      JSDocInfo jSDocInfo3 = jsDocInfoParser0.parseInlineTypeDoc();
      assertFalse(set0.contains(""));
      assertFalse(jsDocTokenStream0.equals((Object)jsDocTokenStream1));
      assertFalse(config0.equals((Object)config1));
      assertFalse(jsDocInfoParser0.equals((Object)jsDocInfoParser1));
      assertNull(jSDocInfo3);
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isName());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isVarArgs());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-2557), node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("", jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNotSame(jsDocTokenStream0, jsDocTokenStream1);
      assertNotSame(config0, config1);
      assertNotSame(jsDocInfoParser0, jsDocInfoParser1);
      
      boolean boolean0 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertFalse(set0.contains(""));
      assertFalse(jsDocTokenStream0.equals((Object)jsDocTokenStream1));
      assertFalse(config0.equals((Object)config1));
      assertFalse(jsDocInfoParser0.equals((Object)jsDocInfoParser1));
      assertFalse(boolean0);
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertEquals(18, node0.getLineno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isBlock());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isName());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isVarArgs());
      assertEquals(73729, node0.getSourcePosition());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertEquals((-2557), node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("", jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNotSame(jsDocTokenStream0, jsDocTokenStream1);
      assertNotSame(config0, config1);
      assertNotSame(jsDocInfoParser0, jsDocInfoParser1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsdoc.consistidgen");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-966), (-966), token_CommentType0, "msg.jsdoc.consistidgen");
      assertNotNull(comment0);
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals((-966), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-966), comment0.getLength());
      assertEquals((-966), comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals("msg.jsdoc.consistidgen", comment0.getValue());
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      
      Comment comment1 = new Comment(1, 0, token_CommentType0, "msg.jsdoc.consistidgen");
      assertFalse(comment1.equals((Object)comment0));
      assertNotNull(comment1);
      assertNull(comment1.getJsDoc());
      assertFalse(comment1.hasChildren());
      assertEquals(0, comment1.depth());
      assertEquals("msg.jsdoc.consistidgen", comment1.getValue());
      assertEquals(0, comment1.getLength());
      assertEquals(Token.CommentType.JSDOC, comment1.getCommentType());
      assertEquals((-1), comment1.getLineno());
      assertEquals("161", comment1.toString());
      assertEquals(1, comment1.getAbsolutePosition());
      assertEquals(161, comment1.getType());
      assertEquals(1, comment1.getPosition());
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      
      Node node0 = JsDocInfoParser.parseTypeString("msg.jsdoc.consistidgen");
      assertNotNull(node0);
      assertFalse(node0.isAssignAdd());
      assertEquals(22, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isDec());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isComma());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("msg.jsdoc.consistidgen"));
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      EvaluatorException evaluatorException0 = new EvaluatorException("msg.bad.esc.mask", "M-a3^1AI3Q", 12);
      assertNotNull(evaluatorException0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      EvaluatorException evaluatorException1 = new EvaluatorException("e'");
      assertFalse(evaluatorException1.equals((Object)evaluatorException0));
      assertNotNull(evaluatorException1);
      
      toolErrorReporter0.reportException((RhinoException) evaluatorException1);
      assertFalse(evaluatorException1.equals((Object)evaluatorException0));
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertEquals(0, evaluatorException1.columnNumber());
      assertFalse(evaluatorException1.usesMozillaStackStyle());
      assertEquals(0, evaluatorException1.getLineNumber());
      assertNull(evaluatorException1.lineSource());
      assertNull(evaluatorException1.getLineSource());
      assertEquals(0, evaluatorException1.getColumnNumber());
      assertNull(evaluatorException1.sourceName());
      assertNull(evaluatorException1.getSourceName());
      assertEquals(0, evaluatorException1.lineNumber());
      assertNotSame(evaluatorException1, evaluatorException0);
      
      Node node1 = Node.newString("e'", 38, 2);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertTrue(node1.isString());
      assertEquals(155650, node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isOr());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWhile());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isDec());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertTrue(node1.mayMutateArguments());
      assertEquals(2, node1.getCharno());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVar());
      assertFalse(node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isFor());
      assertFalse(node1.isInstanceOf());
      assertEquals(38, node1.getLineno());
      assertFalse(node1.isWith());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(node1, node0);
      
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      assertFalse(linkedHashSet0.contains("e'"));
      assertNotNull(config0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Node node2 = JsDocInfoParser.parseTypeString("msg.bad.esc.mask");
      assertFalse(node2.equals((Object)node0));
      assertFalse(node2.equals((Object)node1));
      assertNotNull(node2);
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isFor());
      assertFalse(node2.isNE());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isIn());
      assertFalse(node2.isSyntheticBlock());
      assertEquals(16, node2.getLength());
      assertFalse(node2.isTry());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isSwitch());
      assertEquals(40, node2.getType());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isArrayLit());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isFalse());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isThis());
      assertFalse(node2.isThrow());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertTrue(node2.isString());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isWith());
      assertFalse(node2.isRegExp());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isCase());
      assertFalse(node2.isBlock());
      assertEquals(0, node2.getCharno());
      assertTrue(node2.mayMutateArguments());
      assertFalse(node2.isHook());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCatch());
      assertFalse(node2.isOnlyModifiesArgumentsCall());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isNumber());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isNot());
      assertFalse(node2.isDo());
      assertFalse(node2.isAnd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCast());
      assertFalse(node2.isBreak());
      assertEquals(0, node2.getSourcePosition());
      assertFalse(node2.isName());
      assertFalse(node2.isComma());
      assertTrue(node2.mayMutateGlobalStateOrThrow());
      assertFalse(node2.isNull());
      assertFalse(node2.isVar());
      assertEquals(0, node2.getChangeTime());
      assertFalse(node2.isNew());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isAdd());
      assertFalse(node2.isWhile());
      assertFalse(node2.isLocalResultCall());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isReturn());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isGetElem());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertNotSame(node2, node0);
      assertNotSame(node2, node1);
      
      Node node3 = JsDocInfoParser.parseTypeString("M-a3^1AI3Q");
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node1));
      assertNotNull(node3);
      assertFalse(node3.isNE());
      assertFalse(node3.isSyntheticBlock());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isIf());
      assertFalse(node3.isCase());
      assertFalse(node3.isEmpty());
      assertEquals((-1), node3.getSourceOffset());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isIn());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isInc());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isSwitch());
      assertEquals(40, node3.getType());
      assertFalse(node3.isNoSideEffectsCall());
      assertFalse(node3.isOptionalArg());
      assertFalse(node3.isThrow());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isFunction());
      assertFalse(node3.isFalse());
      assertFalse(node3.isThis());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isParamList());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isScript());
      assertTrue(node3.isString());
      assertFalse(node3.isBlock());
      assertFalse(node3.isTry());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.isHook());
      assertFalse(node3.hasOneChild());
      assertTrue(node3.mayMutateArguments());
      assertFalse(node3.isFor());
      assertFalse(node3.wasEmptyNode());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isCatch());
      assertFalse(node3.isOnlyModifiesArgumentsCall());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isWith());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isOr());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isReturn());
      assertFalse(node3.isLabel());
      assertFalse(node3.isOnlyModifiesThisCall());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isDo());
      assertFalse(node3.isNumber());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isVar());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isCast());
      assertFalse(node3.isContinue());
      assertFalse(node3.isVarArgs());
      assertFalse(node3.isComma());
      assertEquals(0, node3.getLineno());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isNull());
      assertEquals(0, node3.getChangeTime());
      assertFalse(node3.isAnd());
      assertTrue(node3.mayMutateGlobalStateOrThrow());
      assertFalse(node3.isNot());
      assertFalse(node3.isQuotedString());
      assertEquals(0, node3.getSourcePosition());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTrue());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isLocalResultCall());
      assertFalse(node3.isWhile());
      assertFalse(node3.isName());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isAssign());
      assertEquals(10, node3.getLength());
      assertFalse(node3.isCall());
      assertFalse(node3.isBreak());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isTypeOf());
      assertEquals(0, node3.getSideEffectFlags());
      assertFalse(node3.isDec());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      assertNotSame(node3, node1);
      
      JsDocTokenStream jsDocTokenStream1 = new JsDocTokenStream("msg.bad.esc.mask", 47, 1451);
      assertFalse(jsDocTokenStream1.equals((Object)jsDocTokenStream0));
      assertNotNull(jsDocTokenStream1);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream1, comment0, node1, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("e'"));
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(jsDocTokenStream1.equals((Object)jsDocTokenStream0));
      assertNotNull(jsDocInfoParser0);
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals((-966), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-966), comment0.getLength());
      assertEquals((-966), comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals("msg.jsdoc.consistidgen", comment0.getValue());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertTrue(node1.isString());
      assertEquals(155650, node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isOr());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWhile());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isDec());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertTrue(node1.mayMutateArguments());
      assertEquals(2, node1.getCharno());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVar());
      assertFalse(node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isFor());
      assertFalse(node1.isInstanceOf());
      assertEquals(38, node1.getLineno());
      assertFalse(node1.isWith());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertFalse(linkedHashSet0.contains("e'"));
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(jsDocTokenStream1.equals((Object)jsDocTokenStream0));
      assertNull(jSDocInfo0);
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals((-966), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-966), comment0.getLength());
      assertEquals((-966), comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals("msg.jsdoc.consistidgen", comment0.getValue());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertTrue(node1.isString());
      assertEquals(155650, node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isOr());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWhile());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isDec());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertTrue(node1.mayMutateArguments());
      assertEquals(2, node1.getCharno());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVar());
      assertFalse(node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isFor());
      assertFalse(node1.isInstanceOf());
      assertEquals(38, node1.getLineno());
      assertFalse(node1.isWith());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(comment0, comment1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node1, node3);
      assertNotSame(jsDocTokenStream1, jsDocTokenStream0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(linkedHashSet0.contains("e'"));
      assertFalse(comment0.equals((Object)comment1));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(node1.equals((Object)node3));
      assertFalse(jsDocTokenStream1.equals((Object)jsDocTokenStream0));
      assertFalse(boolean0);
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals((-966), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-966), comment0.getLength());
      assertEquals((-966), comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals("msg.jsdoc.consistidgen", comment0.getValue());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertTrue(node1.isString());
      assertEquals(155650, node1.getSourcePosition());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isOr());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCatch());
      assertFalse(node1.isWhile());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isDec());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isScript());
      assertTrue(node1.mayMutateArguments());
      assertEquals(2, node1.getCharno());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVar());
      assertFalse(node1.isOptionalArg());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isFor());
      assertFalse(node1.isInstanceOf());
      assertEquals(38, node1.getLineno());
      assertFalse(node1.isWith());
      assertFalse(node1.isHook());
      assertFalse(node1.isComma());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(comment0, comment1);
      assertNotSame(node1, node0);
      assertNotSame(node1, node2);
      assertNotSame(node1, node3);
      assertNotSame(jsDocTokenStream1, jsDocTokenStream0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Context context0 = Context.enter();
      assertNotNull(context0);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      
      Node node0 = JsDocInfoParser.parseTypeString("language version");
      assertNotNull(node0);
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChangeTime());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(8, node0.getLength());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet1.contains("language version"));
      assertTrue(linkedHashSet1.equals((Object)linkedHashSet0));
      assertNotNull(linkedHashSet1);
      assertTrue(linkedHashSet1.isEmpty());
      assertEquals(0, linkedHashSet1.size());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Function argument was not created by]interpreted mode ", 1);
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("language version"));
      assertTrue(linkedHashSet0.equals((Object)linkedHashSet1));
      assertNotNull(config0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      assertFalse(linkedHashSet0.contains("language version"));
      assertTrue(linkedHashSet0.equals((Object)linkedHashSet1));
      assertNotNull(jsDocInfoParser0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChangeTime());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(8, node0.getLength());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWhile());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNew());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(597, 597, token_CommentType0, "push");
      assertNotNull(comment0);
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(597, comment0.getLength());
      assertEquals("push", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(597, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals(597, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      
      Comment comment1 = comment0.getJsDocNode();
      assertNull(comment1);
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(597, comment0.getLength());
      assertEquals("push", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(597, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals(597, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      
      Node node0 = JsDocInfoParser.parseTypeString("iAhQw*n~@lA*dL]");
      assertNotNull(node0);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.isString());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(5, node0.getLength());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("push"));
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("push"));
      assertNotNull(config0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("iAhQw*n~@lA*dL]", 0);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("push"));
      assertNotNull(jsDocInfoParser0);
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(597, comment0.getLength());
      assertEquals("push", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(597, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals(597, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.isString());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(5, node0.getLength());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      JsDocToken jsDocToken0 = JsDocToken.LB;
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("push"));
      assertFalse(jsDocInfoParser1.equals((Object)jsDocInfoParser0));
      assertNotNull(jsDocInfoParser1);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.isString());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(5, node0.getLength());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      
      Node node1 = jsDocInfoParser1.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(linkedHashSet0.contains("push"));
      assertFalse(jsDocInfoParser1.equals((Object)jsDocInfoParser0));
      assertNull(node1);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.isString());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(5, node0.getLength());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(jsDocInfoParser1, jsDocInfoParser0);
      
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression((Node) null);
      assertFalse(linkedHashSet0.contains("push"));
      assertFalse(jsDocInfoParser0.equals((Object)jsDocInfoParser1));
      assertNull(jSTypeExpression0);
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(597, comment0.getLength());
      assertEquals("push", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(597, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals(597, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.isString());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(5, node0.getLength());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(jsDocInfoParser0, jsDocInfoParser1);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertFalse(linkedHashSet0.contains("push"));
      assertFalse(jsDocInfoParser0.equals((Object)jsDocInfoParser1));
      assertNotNull(jSDocInfo0);
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(597, comment0.getLength());
      assertEquals("push", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(597, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals(597, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.isString());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(5, node0.getLength());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertTrue(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertEquals(597, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isNgInject());
      assertTrue(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals("push", jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(jsDocInfoParser0, jsDocInfoParser1);
      
      Comment comment2 = new Comment(1939, 3733, token_CommentType0, "g0dvHM");
      assertFalse(comment2.equals((Object)comment0));
      assertNotNull(comment2);
      assertEquals(161, comment2.getType());
      assertEquals("g0dvHM", comment2.getValue());
      assertEquals(0, comment2.depth());
      assertEquals(Token.CommentType.HTML, comment2.getCommentType());
      assertFalse(comment2.hasChildren());
      assertEquals(1939, comment2.getAbsolutePosition());
      assertEquals(1939, comment2.getPosition());
      assertNull(comment2.getJsDoc());
      assertEquals((-1), comment2.getLineno());
      assertEquals("161", comment2.toString());
      assertEquals(3733, comment2.getLength());
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      
      ToolErrorReporter toolErrorReporter1 = new ToolErrorReporter(true);
      assertFalse(toolErrorReporter1.equals((Object)toolErrorReporter0));
      assertNotNull(toolErrorReporter1);
      assertTrue(toolErrorReporter1.isReportingWarnings());
      assertFalse(toolErrorReporter1.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser2 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("push"));
      assertFalse(jsDocInfoParser2.equals((Object)jsDocInfoParser1));
      assertFalse(jsDocInfoParser2.equals((Object)jsDocInfoParser0));
      assertFalse(comment0.equals((Object)comment2));
      assertFalse(toolErrorReporter0.equals((Object)toolErrorReporter1));
      assertNotNull(jsDocInfoParser2);
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(597, comment0.getLength());
      assertEquals("push", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(597, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals(597, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(linkedHashSet0.contains("push"));
      assertFalse(comment0.equals((Object)comment2));
      assertFalse(toolErrorReporter0.equals((Object)toolErrorReporter1));
      assertFalse(jsDocInfoParser0.equals((Object)jsDocInfoParser2));
      assertFalse(jsDocInfoParser0.equals((Object)jsDocInfoParser1));
      assertFalse(boolean0);
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(597, comment0.getLength());
      assertEquals("push", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(597, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals(597, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.isString());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(5, node0.getLength());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(comment0, comment2);
      assertNotSame(toolErrorReporter0, toolErrorReporter1);
      assertNotSame(jsDocInfoParser0, jsDocInfoParser2);
      assertNotSame(jsDocInfoParser0, jsDocInfoParser1);
      
      Node node2 = new Node(168);
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertFalse(node2.isExprResult());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isScript());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isThrow());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isFalse());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isCast());
      assertFalse(node2.isInc());
      assertFalse(node2.isSwitch());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isCase());
      assertFalse(node2.isIn());
      assertFalse(node2.isThis());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(0, node2.getLength());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isWith());
      assertFalse(node2.isOnlyModifiesArgumentsCall());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isFunction());
      assertFalse(node2.isTrue());
      assertTrue(node2.mayMutateArguments());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isLocalResultCall());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertEquals(168, node2.getType());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isParamList());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isArrayLit());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isNew());
      assertFalse(node2.isWhile());
      assertFalse(node2.isVar());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isDo());
      assertFalse(node2.isString());
      assertFalse(node2.isAdd());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isComma());
      assertFalse(node2.isGetProp());
      assertTrue(node2.mayMutateGlobalStateOrThrow());
      assertFalse(node2.isDec());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isOr());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isNull());
      assertEquals(0, node2.getChangeTime());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isAssign());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetElem());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      boolean boolean1 = jsDocInfoParser1.parse();
      assertFalse(linkedHashSet0.contains("push"));
      assertFalse(node0.equals((Object)node2));
      assertTrue(boolean1 == boolean0);
      assertFalse(toolErrorReporter0.equals((Object)toolErrorReporter1));
      assertFalse(jsDocInfoParser1.equals((Object)jsDocInfoParser0));
      assertFalse(jsDocInfoParser1.equals((Object)jsDocInfoParser2));
      assertFalse(boolean1);
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertTrue(node0.isString());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(5, node0.getLength());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotSame(toolErrorReporter0, toolErrorReporter1);
      assertNotSame(jsDocInfoParser1, jsDocInfoParser0);
      assertNotSame(jsDocInfoParser1, jsDocInfoParser2);
      
      System.setCurrentTimeMillis(4);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("");
      assertNotNull(jsDocTokenStream0);
      
      Node node0 = JsDocInfoParser.parseTypeString("");
      assertNull(node0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(""));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertFalse(treeSet0.contains(""));
      assertNotNull(config0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, toolErrorReporter0);
      assertFalse(treeSet0.contains(""));
      assertNotNull(jsDocInfoParser0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(treeSet0.contains(""));
      assertFalse(boolean0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsDocInfoParser.parseTypeString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Node node0 = JsDocInfoParser.parseTypeString("com.googlejavascript.rhino.Noe");
      assertNotNull(node0);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateArguments());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(30, node0.getLength());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      assertFalse(linkedHashSet0.contains("com.googlejavascript.rhino.Noe"));
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!5x/j>mAS+EA\"1j@O", 51);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(29, 57, token_CommentType0, "com.googlejavascript.rhino.Noe");
      assertNotNull(comment0);
      assertNull(comment0.getJsDoc());
      assertEquals("com.googlejavascript.rhino.Noe", comment0.getValue());
      assertEquals(57, comment0.getLength());
      assertEquals(29, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(29, comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertFalse(linkedHashSet0.contains("com.googlejavascript.rhino.Noe"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateArguments());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(30, node0.getLength());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNot());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertNull(comment0.getJsDoc());
      assertEquals("com.googlejavascript.rhino.Noe", comment0.getValue());
      assertEquals(57, comment0.getLength());
      assertEquals(29, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(29, comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsoc.consistidgen");
      assertNotNull(jsDocTokenStream0);
      
      JsDocTokenStream jsDocTokenStream1 = new JsDocTokenStream("com.google.javascript.rhino.head.ast.BreakStatement", 3071, 3071);
      assertFalse(jsDocTokenStream1.equals((Object)jsDocTokenStream0));
      assertNotNull(jsDocTokenStream1);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("com.google.javascript.rhino.head.ast.BreakStatement"));
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JsDocTokenStream jsDocTokenStream2 = new JsDocTokenStream("\"nzoie\"=<bn3G$hYn", 45);
      assertFalse(jsDocTokenStream2.equals((Object)jsDocTokenStream0));
      assertFalse(jsDocTokenStream2.equals((Object)jsDocTokenStream1));
      assertNotNull(jsDocTokenStream2);
      
      Node node0 = Node.newString(553, "\"nzoie\"=<bn3G$hYn", 139, 3071);
      assertNotNull(node0);
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertEquals(139, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertEquals(3071, node0.getCharno());
      assertFalse(node0.isString());
      assertEquals(553, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertEquals(572415, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("\"nzoie\"=<bn3G$hYn"));
      assertNotNull(config0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(32, 45, token_CommentType0, "PvJF<=W]som7H4Kve");
      assertNotNull(comment0);
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals(45, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(32, comment0.getAbsolutePosition());
      assertEquals("PvJF<=W]som7H4Kve", comment0.getValue());
      assertEquals(32, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      
      Comment comment1 = comment0.getJsDocNode();
      assertNull(comment1);
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals(45, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(32, comment0.getAbsolutePosition());
      assertEquals("PvJF<=W]som7H4Kve", comment0.getValue());
      assertEquals(32, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream1, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("\"nzoie\"=<bn3G$hYn"));
      assertFalse(jsDocTokenStream1.equals((Object)jsDocTokenStream2));
      assertFalse(jsDocTokenStream1.equals((Object)jsDocTokenStream0));
      assertNotNull(jsDocInfoParser0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertEquals(139, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertEquals(3071, node0.getCharno());
      assertFalse(node0.isString());
      assertEquals(553, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertEquals(572415, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      
      JsDocToken jsDocToken0 = JsDocToken.ANNOTATION;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(linkedHashSet0.contains("\"nzoie\"=<bn3G$hYn"));
      assertFalse(jsDocTokenStream1.equals((Object)jsDocTokenStream2));
      assertFalse(jsDocTokenStream1.equals((Object)jsDocTokenStream0));
      assertNull(node1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertEquals(139, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertEquals(3071, node0.getCharno());
      assertFalse(node0.isString());
      assertEquals(553, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertEquals(572415, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertNotSame(jsDocTokenStream1, jsDocTokenStream2);
      assertNotSame(jsDocTokenStream1, jsDocTokenStream0);
      
      Node node2 = JsDocInfoParser.parseTypeString("DQ'S^Y=D");
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isFor());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isIn());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isCase());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isInc());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isFunction());
      assertFalse(node2.isSwitch());
      assertEquals(40, node2.getType());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isFalse());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isComma());
      assertTrue(node2.mayMutateGlobalStateOrThrow());
      assertFalse(node2.isVarArgs());
      assertEquals(0, node2.getChildCount());
      assertEquals(0, node2.getChangeTime());
      assertFalse(node2.isNull());
      assertEquals(0, node2.getSourcePosition());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isExprResult());
      assertEquals(6, node2.getLength());
      assertFalse(node2.isWhile());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isLocalResultCall());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isNumber());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isOr());
      assertFalse(node2.isLabel());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isDo());
      assertFalse(node2.isVar());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAnd());
      assertFalse(node2.isCast());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isThis());
      assertFalse(node2.isThrow());
      assertFalse(node2.isScript());
      assertFalse(node2.isSetterDef());
      assertTrue(node2.mayMutateArguments());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isTry());
      assertTrue(node2.isString());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isBlock());
      assertFalse(node2.isHook());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isCatch());
      assertFalse(node2.isWith());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isOnlyModifiesArgumentsCall());
      assertFalse(node2.isInstanceOf());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotSame(node2, node0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(linkedHashSet0.contains("\"nzoie\"=<bn3G$hYn"));
      assertFalse(jsDocTokenStream1.equals((Object)jsDocTokenStream2));
      assertFalse(jsDocTokenStream1.equals((Object)jsDocTokenStream0));
      assertFalse(node0.equals((Object)node2));
      assertFalse(boolean0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertEquals(139, node0.getLineno());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertEquals(3071, node0.getCharno());
      assertFalse(node0.isString());
      assertEquals(553, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertEquals(572415, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertNotSame(jsDocTokenStream1, jsDocTokenStream2);
      assertNotSame(jsDocTokenStream1, jsDocTokenStream0);
      assertNotSame(node0, node2);
      
      Node node3 = JsDocInfoParser.parseTypeString("com.google.javascript.rhino.head.ast.BreakStatement");
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertNotNull(node3);
      assertFalse(node3.hasOneChild());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isDec());
      assertFalse(node3.isWith());
      assertFalse(node3.isAssign());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isCast());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isGetElem());
      assertEquals(0, node3.getSideEffectFlags());
      assertFalse(node3.isOnlyModifiesArgumentsCall());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isAnd());
      assertFalse(node3.isComma());
      assertFalse(node3.wasEmptyNode());
      assertFalse(node3.isReturn());
      assertFalse(node3.isThis());
      assertFalse(node3.isWhile());
      assertFalse(node3.isNot());
      assertFalse(node3.isNumber());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isFromExterns());
      assertEquals(51, node3.getLength());
      assertFalse(node3.isScript());
      assertTrue(node3.isString());
      assertFalse(node3.isThrow());
      assertFalse(node3.isNoSideEffectsCall());
      assertFalse(node3.isHook());
      assertFalse(node3.isBlock());
      assertFalse(node3.isFalse());
      assertFalse(node3.isContinue());
      assertEquals(0, node3.getLineno());
      assertFalse(node3.isIn());
      assertFalse(node3.isNE());
      assertEquals(40, node3.getType());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isInc());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isTry());
      assertFalse(node3.isDebugger());
      assertTrue(node3.mayMutateArguments());
      assertFalse(node3.isOptionalArg());
      assertFalse(node3.isFor());
      assertFalse(node3.isTrue());
      assertFalse(node3.isIf());
      assertFalse(node3.isLocalResultCall());
      assertFalse(node3.isFunction());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isVoid());
      assertFalse(node3.isCatch());
      assertFalse(node3.isSyntheticBlock());
      assertFalse(node3.isParamList());
      assertEquals(0, node3.getChangeTime());
      assertFalse(node3.isGetterDef());
      assertTrue(node3.mayMutateGlobalStateOrThrow());
      assertFalse(node3.isQuotedString());
      assertFalse(node3.isCase());
      assertEquals((-1), node3.getSourceOffset());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isVar());
      assertFalse(node3.isBreak());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isVarArgs());
      assertFalse(node3.isName());
      assertFalse(node3.isCall());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isOr());
      assertFalse(node3.isLabel());
      assertFalse(node3.isOnlyModifiesThisCall());
      assertFalse(node3.isNull());
      assertFalse(node3.isDefaultCase());
      assertEquals(0, node3.getSourcePosition());
      assertFalse(node3.isDo());
      assertFalse(node3.isNew());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isAdd());
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertNotSame(node3, node2);
      assertNotSame(node3, node0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("debugger;\n", 302);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(302, 302, token_CommentType0, "debugger;\n");
      assertNotNull(comment0);
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals("debugger;\n", comment0.getValue());
      assertEquals(302, comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(302, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(302, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      
      Node node0 = Node.newNumber(0.0);
      assertNotNull(node0);
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertTrue(node0.isNumber());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      
      Set<String> set0 = charset0.aliases();
      assertFalse(set0.contains("debugger;\n"));
      assertNotNull(set0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertFalse(set0.contains("debugger;\n"));
      assertNotNull(config0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      
      Context context0 = contextFactory0.enterContext();
      assertNotNull(context0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      
      Context context1 = contextFactory0.enterContext(context0);
      assertNotNull(context1);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context1.isSealed());
      assertEquals(0, context1.getOptimizationLevel());
      assertTrue(context1.isGeneratingSource());
      assertFalse(context1.isGeneratingDebugChanged());
      assertFalse(context1.isGeneratingDebug());
      assertEquals(0, context1.getLanguageVersion());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context1.generateObserverCount);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertSame(context0, context1);
      assertSame(context1, context0);
      
      ToolErrorReporter toolErrorReporter0 = (ToolErrorReporter)context1.getErrorReporter();
      assertNotNull(toolErrorReporter0);
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context1.isSealed());
      assertEquals(0, context1.getOptimizationLevel());
      assertTrue(context1.isGeneratingSource());
      assertFalse(context1.isGeneratingDebugChanged());
      assertFalse(context1.isGeneratingDebug());
      assertEquals(0, context1.getLanguageVersion());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context1.generateObserverCount);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertSame(context0, context1);
      assertSame(context1, context0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertFalse(set0.contains("debugger;\n"));
      assertNotNull(jsDocInfoParser0);
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals("debugger;\n", comment0.getValue());
      assertEquals(302, comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(302, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(302, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertTrue(node0.isNumber());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context1.isSealed());
      assertEquals(0, context1.getOptimizationLevel());
      assertTrue(context1.isGeneratingSource());
      assertFalse(context1.isGeneratingDebugChanged());
      assertFalse(context1.isGeneratingDebug());
      assertEquals(0, context1.getLanguageVersion());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context1.generateObserverCount);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      
      JsDocToken jsDocToken0 = JsDocToken.EOL;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(set0.contains("debugger;\n"));
      assertNull(node1);
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals("debugger;\n", comment0.getValue());
      assertEquals(302, comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(302, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(302, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertTrue(node0.isNumber());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context1.isSealed());
      assertEquals(0, context1.getOptimizationLevel());
      assertTrue(context1.isGeneratingSource());
      assertFalse(context1.isGeneratingDebugChanged());
      assertFalse(context1.isGeneratingDebug());
      assertEquals(0, context1.getLanguageVersion());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context1.generateObserverCount);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertSame(context0, context1);
      assertSame(context1, context0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(set0.contains("debugger;\n"));
      assertFalse(boolean0);
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals("debugger;\n", comment0.getValue());
      assertEquals(302, comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(302, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(302, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isDec());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(39, node0.getType());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertTrue(node0.isNumber());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(contextFactory0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context1.isSealed());
      assertEquals(0, context1.getOptimizationLevel());
      assertTrue(context1.isGeneratingSource());
      assertFalse(context1.isGeneratingDebugChanged());
      assertFalse(context1.isGeneratingDebug());
      assertEquals(0, context1.getLanguageVersion());
      assertEquals(0, context1.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context1.getMaximumInterpreterStackDepth());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context1.generateObserverCount);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertSame(context0, context1);
      assertSame(context1, context0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Z");
      assertNotNull(jsDocTokenStream0);
      
      Node node0 = Node.newString("Z");
      assertNotNull(node0);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isComma());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isWith());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("Z"));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      assertFalse(treeSet0.contains("Z"));
      assertNotNull(config0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(treeSet0.contains("Z"));
      assertNotNull(jsDocInfoParser0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isComma());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isWith());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(treeSet0.contains("Z"));
      assertFalse(boolean0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isComma());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isWith());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("+F40[^Y", 0, 0);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(110, 45, token_CommentType0, "+F40[^Y");
      assertNotNull(comment0);
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(45, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals("+F40[^Y", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(110, comment0.getPosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(110, comment0.getAbsolutePosition());
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      
      Node node0 = Node.newString("com.google.javascript.rhino.jstype.JSTypeNative", (-2322), 4);
      assertNotNull(node0);
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDo());
      assertFalse(node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      
      Iterable<Node> iterable0 = node0.siblings();
      assertNotNull(iterable0);
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDo());
      assertFalse(node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertFalse(set0.contains("com.google.javascript.rhino.jstype.JSTypeNative"));
      assertNotNull(set0);
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Collection<Node> collection0 = jSDocInfo0.getTypeNodes();
      assertFalse(collection0.contains(node0));
      assertNotNull(collection0);
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      assertFalse(set0.contains("com.google.javascript.rhino.jstype.JSTypeNative"));
      assertNotNull(config0);
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertFalse(set0.contains("com.google.javascript.rhino.jstype.JSTypeNative"));
      assertNotNull(jsDocInfoParser0);
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(45, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals("+F40[^Y", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(110, comment0.getPosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(110, comment0.getAbsolutePosition());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDo());
      assertFalse(node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertFalse(set0.contains("com.google.javascript.rhino.jstype.JSTypeNative"));
      assertNull(jSDocInfo1);
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(45, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals("+F40[^Y", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(110, comment0.getPosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(110, comment0.getAbsolutePosition());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDo());
      assertFalse(node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      Node node1 = JsDocInfoParser.parseTypeString("com.google.javascript.rhino.jstype.JSTypeNative");
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNE());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isTry());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFor());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertTrue(node1.isString());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isReturn());
      assertEquals(47, node1.getLength());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isContinue());
      assertFalse(node1.isBlock());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isDec());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAdd());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertEquals(40, node1.getType());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isGetProp());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      assertFalse(set0.contains("com.google.javascript.rhino.jstype.JSTypeNative"));
      assertFalse(node0.equals((Object)node1));
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(45, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals("+F40[^Y", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(110, comment0.getPosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(110, comment0.getAbsolutePosition());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDo());
      assertFalse(node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node1.getJsDocBuilderForNode();
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node_FileLevelJsDocBuilder0);
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNE());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isTry());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFor());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertTrue(node1.isString());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isReturn());
      assertEquals(47, node1.getLength());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isContinue());
      assertFalse(node1.isBlock());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isDec());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAdd());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertEquals(40, node1.getType());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isGetProp());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      
      jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
      assertFalse(set0.contains("com.google.javascript.rhino.jstype.JSTypeNative"));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(45, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals("+F40[^Y", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(110, comment0.getPosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(110, comment0.getAbsolutePosition());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDo());
      assertFalse(node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNE());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isTry());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFor());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertTrue(node1.isString());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isReturn());
      assertEquals(47, node1.getLength());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isContinue());
      assertFalse(node1.isBlock());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isDec());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAdd());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertEquals(40, node1.getType());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isGetProp());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      
      Node node2 = node1.removeChildren();
      assertFalse(node1.equals((Object)node0));
      assertNull(node2);
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNE());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isTry());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFor());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertTrue(node1.isString());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isReturn());
      assertEquals(47, node1.getLength());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isContinue());
      assertFalse(node1.isBlock());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isDec());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAdd());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertEquals(40, node1.getType());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isGetProp());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      
      toolErrorReporter0.warning("Invalid keyword literal type: ", "h)t$47l6xV_6zt'~.", 813, "=", (-2014));
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      boolean boolean0 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertFalse(set0.contains("com.google.javascript.rhino.jstype.JSTypeNative"));
      assertFalse(node0.equals((Object)node1));
      assertFalse(boolean0);
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(45, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals("+F40[^Y", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(110, comment0.getPosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(110, comment0.getAbsolutePosition());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDo());
      assertFalse(node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      boolean boolean1 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertFalse(set0.contains("com.google.javascript.rhino.jstype.JSTypeNative"));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(45, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals("+F40[^Y", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(110, comment0.getPosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(110, comment0.getAbsolutePosition());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDo());
      assertFalse(node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression(node0);
      assertFalse(set0.contains("com.google.javascript.rhino.jstype.JSTypeNative"));
      assertFalse(node0.equals((Object)node1));
      assertNotNull(jSTypeExpression0);
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(45, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals("+F40[^Y", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(110, comment0.getPosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(110, comment0.getAbsolutePosition());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDo());
      assertFalse(node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
      assertFalse(set0.contains("com.google.javascript.rhino.jstype.JSTypeNative"));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node0));
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(45, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals("+F40[^Y", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(110, comment0.getPosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(110, comment0.getAbsolutePosition());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDo());
      assertFalse(node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isCase());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNE());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isIn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isTry());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isFor());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isWhile());
      assertTrue(node1.isString());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isReturn());
      assertEquals(47, node1.getLength());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isContinue());
      assertFalse(node1.isBlock());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isDec());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isNull());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAdd());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAnd());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertEquals(40, node1.getType());
      assertFalse(node1.isAssign());
      assertFalse(node1.isComma());
      assertFalse(node1.hasChildren());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isGetProp());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      
      boolean boolean2 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertFalse(set0.contains("com.google.javascript.rhino.jstype.JSTypeNative"));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(45, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals("+F40[^Y", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(110, comment0.getPosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(110, comment0.getAbsolutePosition());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDo());
      assertFalse(node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      boolean boolean3 = jsDocInfoParser0.parse();
      assertFalse(set0.contains("com.google.javascript.rhino.jstype.JSTypeNative"));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(45, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals("+F40[^Y", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(110, comment0.getPosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(110, comment0.getAbsolutePosition());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDo());
      assertFalse(node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      boolean boolean4 = jsDocInfoParser0.parse();
      assertFalse(set0.contains("com.google.javascript.rhino.jstype.JSTypeNative"));
      assertFalse(node0.equals((Object)node1));
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(45, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals("+F40[^Y", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(110, comment0.getPosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(110, comment0.getAbsolutePosition());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDo());
      assertFalse(node0.isLocalResultCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Z");
      assertNotNull(jsDocTokenStream0);
      
      Node node0 = Node.newString("Z");
      assertNotNull(node0);
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("Z"));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertFalse(treeSet0.contains("Z"));
      assertNotNull(config0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(treeSet0.contains("Z"));
      assertNotNull(jsDocInfoParser0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(treeSet0.contains("Z"));
      assertFalse(boolean0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertFalse(treeSet0.contains("Z"));
      assertNull(jSDocInfo0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCast());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("s$PQSq?]M8eOG/j", (-2178));
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment((-2178), 2434, token_CommentType0, "Fz.b.!2f");
      assertNotNull(comment0);
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals((-2178), comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-2178), comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals(2434, comment0.getLength());
      assertEquals("Fz.b.!2f", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      
      Node node0 = Node.newString("");
      assertNotNull(node0);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      
      Node node1 = new Node(15, node0, node0, node0, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isOr());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isString());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isCase());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertEquals(15, node1.getType());
      assertFalse(node1.isIn());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains("Fz.b.!2f"));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
      assertFalse(hashSet0.contains("Fz.b.!2f"));
      assertNotNull(config0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Name name0 = (Name)com.google.javascript.rhino.head.Node.newString("4_5!k@Ty+L*(OO*");
      assertNotNull(name0);
      assertEquals("41", name0.toString());
      assertEquals(41, name0.getType());
      assertFalse(name0.isLocalName());
      assertEquals(17, name0.getLength());
      assertEquals(17, name0.length());
      assertEquals((-1), name0.getPosition());
      assertEquals((-1), name0.getAbsolutePosition());
      assertEquals("4_5!k@Ty+L*(OO*", name0.getString());
      assertEquals((-1), name0.getLineno());
      assertNull(name0.getJsDoc());
      assertEquals(0, name0.depth());
      assertFalse(name0.hasChildren());
      assertEquals("4_5!k@Ty+L*(OO*", name0.getIdentifier());
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("setSeconds");
      assertNotNull(mockFileOutputStream0);
      
      Node node2 = Node.newString(4095, "Fz.b.!2f");
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertFalse(node2.isThis());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isBreak());
      assertFalse(node2.isFalse());
      assertFalse(node2.isThrow());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isWith());
      assertFalse(node2.isHook());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isComma());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isScript());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCase());
      assertFalse(node2.isAnd());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isString());
      assertFalse(node2.isNumber());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNot());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isOptionalArg());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTrue());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isLocalResultCall());
      assertFalse(node2.isNew());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDo());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isOr());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSetterDef());
      assertTrue(node2.mayMutateGlobalStateOrThrow());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isNull());
      assertEquals(0, node2.getChangeTime());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isCatch());
      assertFalse(node2.isVar());
      assertFalse(node2.isRegExp());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isFunction());
      assertFalse(node2.isDebugger());
      assertTrue(node2.mayMutateArguments());
      assertFalse(node2.isBlock());
      assertFalse(node2.isWhile());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertEquals(4095, node2.getType());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNE());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isIf());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isFor());
      assertFalse(node2.isCast());
      assertFalse(node2.isOnlyModifiesArgumentsCall());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isInc());
      assertEquals(0, node2.getLength());
      assertFalse(node2.isIn());
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      assertNotNull(mockPrintStream0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false, mockPrintStream0);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      Name name1 = (Name)com.google.javascript.rhino.head.Node.newString(102, "4_5!k@Ty+L*(OO*");
      assertFalse(name1.equals((Object)name0));
      assertNotNull(name1);
      assertEquals((-1), name1.getLineno());
      assertEquals("4_5!k@Ty+L*(OO*", name1.getString());
      assertNull(name1.getJsDoc());
      assertFalse(name1.isLocalName());
      assertEquals((-1), name1.getAbsolutePosition());
      assertEquals(17, name1.getLength());
      assertEquals((-1), name1.getPosition());
      assertEquals(0, name1.depth());
      assertFalse(name1.hasChildren());
      assertEquals("4_5!k@Ty+L*(OO*", name1.getIdentifier());
      assertEquals(102, name1.getType());
      assertEquals("102", name1.toString());
      assertEquals(17, name1.length());
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      
      Node node3 = Node.newString("tt");
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node3);
      assertFalse(node3.isSyntheticBlock());
      assertFalse(node3.isCase());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isHook());
      assertFalse(node3.isFor());
      assertEquals((-1), node3.getSourceOffset());
      assertFalse(node3.isTry());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isDebugger());
      assertEquals((-1), node3.getCharno());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isComma());
      assertTrue(node3.mayMutateGlobalStateOrThrow());
      assertFalse(node3.isVarArgs());
      assertFalse(node3.isLocalResultCall());
      assertFalse(node3.isBreak());
      assertEquals(0, node3.getChangeTime());
      assertFalse(node3.isExprResult());
      assertEquals(0, node3.getChildCount());
      assertFalse(node3.isVar());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isCall());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isNew());
      assertFalse(node3.isOptionalArg());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isName());
      assertFalse(node3.isVoid());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNull());
      assertFalse(node3.isAdd());
      assertFalse(node3.isOr());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isContinue());
      assertFalse(node3.isOnlyModifiesArgumentsCall());
      assertFalse(node3.isDo());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isWhile());
      assertEquals((-1), node3.getLineno());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isBlock());
      assertFalse(node3.isAssign());
      assertFalse(node3.isReturn());
      assertFalse(node3.isOnlyModifiesThisCall());
      assertFalse(node3.wasEmptyNode());
      assertFalse(node3.isLabel());
      assertFalse(node3.isDec());
      assertEquals(0, node3.getSideEffectFlags());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isCast());
      assertFalse(node3.isQuotedString());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isLabelName());
      assertFalse(node3.hasOneChild());
      assertTrue(node3.isString());
      assertFalse(node3.isFromExterns());
      assertEquals((-1), node3.getSourcePosition());
      assertFalse(node3.isParamList());
      assertFalse(node3.isScript());
      assertFalse(node3.isNot());
      assertFalse(node3.isNumber());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isCatch());
      assertFalse(node3.isAnd());
      assertFalse(node3.isInstanceOf());
      assertEquals(40, node3.getType());
      assertTrue(node3.mayMutateArguments());
      assertFalse(node3.isThis());
      assertFalse(node3.isWith());
      assertFalse(node3.isNoSideEffectsCall());
      assertFalse(node3.isFalse());
      assertFalse(node3.isFunction());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isThrow());
      assertEquals(0, node3.getLength());
      assertFalse(node3.isIf());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isNE());
      assertFalse(node3.isInc());
      assertFalse(node3.isIn());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      
      FileChannel fileChannel0 = mockFileOutputStream0.getChannel();
      assertNotNull(fileChannel0);
      assertEquals(0L, fileChannel0.size());
      assertEquals(0L, fileChannel0.position());
      assertTrue(fileChannel0.isOpen());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node1, config0, toolErrorReporter0);
      assertFalse(hashSet0.contains("4_5!k@Ty+L*(OO*"));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertNotNull(jsDocInfoParser0);
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals((-2178), comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-2178), comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals(2434, comment0.getLength());
      assertEquals("Fz.b.!2f", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isOr());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isString());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isCase());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertEquals(15, node1.getType());
      assertFalse(node1.isIn());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.POST_FLAG);
      
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression(node1);
      assertFalse(hashSet0.contains("4_5!k@Ty+L*(OO*"));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertNotNull(jSTypeExpression0);
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals((-2178), comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-2178), comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals(2434, comment0.getLength());
      assertEquals("Fz.b.!2f", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isOr());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isString());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isCase());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertEquals(15, node1.getType());
      assertFalse(node1.isIn());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertFalse(hashSet0.contains("4_5!k@Ty+L*(OO*"));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertNull(jSDocInfo0);
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals((-2178), comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-2178), comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals(2434, comment0.getLength());
      assertEquals("Fz.b.!2f", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isOr());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isString());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isCase());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertEquals(15, node1.getType());
      assertFalse(node1.isIn());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      jsDocInfoParser0.setFileOverviewJSDocInfo((JSDocInfo) null);
      assertFalse(hashSet0.contains("4_5!k@Ty+L*(OO*"));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals((-2178), comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-2178), comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals(2434, comment0.getLength());
      assertEquals("Fz.b.!2f", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isOr());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isString());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isCase());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertEquals(15, node1.getType());
      assertFalse(node1.isIn());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      JSTypeExpression jSTypeExpression1 = jsDocInfoParser0.createJSTypeExpression(node0);
      assertFalse(hashSet0.contains("4_5!k@Ty+L*(OO*"));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertNotNull(jSTypeExpression1);
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals((-2178), comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-2178), comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals(2434, comment0.getLength());
      assertEquals("Fz.b.!2f", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isOr());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isString());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isCase());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertEquals(15, node1.getType());
      assertFalse(node1.isIn());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertNotNull(node_FileLevelJsDocBuilder0);
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      
      jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
      assertFalse(hashSet0.contains("4_5!k@Ty+L*(OO*"));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals((-2178), comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-2178), comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals(2434, comment0.getLength());
      assertEquals("Fz.b.!2f", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isOr());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isString());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isCase());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertEquals(15, node1.getType());
      assertFalse(node1.isIn());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      JsDocToken jsDocToken0 = JsDocToken.COMMA;
      EvaluatorException evaluatorException0 = toolErrorReporter0.runtimeError("", "undefined", 6, "setSeconds", 507);
      assertNotNull(evaluatorException0);
      assertEquals(507, evaluatorException0.getColumnNumber());
      assertEquals(6, evaluatorException0.getLineNumber());
      assertFalse(evaluatorException0.usesMozillaStackStyle());
      assertEquals("setSeconds", evaluatorException0.lineSource());
      assertEquals(507, evaluatorException0.columnNumber());
      assertEquals("undefined", evaluatorException0.sourceName());
      assertEquals("setSeconds", evaluatorException0.getLineSource());
      assertEquals("undefined", evaluatorException0.getSourceName());
      assertEquals(6, evaluatorException0.lineNumber());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      ToolErrorReporter.reportException((ErrorReporter) toolErrorReporter0, (RhinoException) evaluatorException0);
      assertEquals(507, evaluatorException0.getColumnNumber());
      assertEquals(6, evaluatorException0.getLineNumber());
      assertFalse(evaluatorException0.usesMozillaStackStyle());
      assertEquals("setSeconds", evaluatorException0.lineSource());
      assertEquals(507, evaluatorException0.columnNumber());
      assertEquals("undefined", evaluatorException0.sourceName());
      assertEquals("setSeconds", evaluatorException0.getLineSource());
      assertEquals("undefined", evaluatorException0.getSourceName());
      assertEquals(6, evaluatorException0.lineNumber());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      Node node4 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(hashSet0.contains("4_5!k@Ty+L*(OO*"));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertNull(node4);
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals((-2178), comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-2178), comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals(2434, comment0.getLength());
      assertEquals("Fz.b.!2f", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isOr());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isString());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isCase());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertEquals(15, node1.getType());
      assertFalse(node1.isIn());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(hashSet0.contains("4_5!k@Ty+L*(OO*"));
      assertFalse(node0.equals((Object)node2));
      assertFalse(node0.equals((Object)node3));
      assertFalse(node0.equals((Object)node1));
      assertFalse(node1.equals((Object)node3));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node1.equals((Object)node2));
      assertFalse(boolean0);
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals((-2178), comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-2178), comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals(2434, comment0.getLength());
      assertEquals("Fz.b.!2f", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isArrayLit());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isBlock());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLabel());
      assertFalse(node1.isDec());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isVar());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isOr());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isAdd());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isWith());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCast());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isHook());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isGetProp());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isString());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isCase());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(1, node1.getChildCount());
      assertEquals((-1), node1.getLineno());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isThrow());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertEquals(15, node1.getType());
      assertFalse(node1.isIn());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("e$O'L..Q14", 65533, 765);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(65533, 0, token_CommentType0, "^&YS/=.2yV,l");
      assertNotNull(comment0);
      assertFalse(comment0.hasChildren());
      assertEquals("^&YS/=.2yV,l", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(161, comment0.getType());
      assertEquals(65533, comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(0, comment0.getLength());
      assertEquals(65533, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("e$O'L..Q14"));
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, (Set<String>) null, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("e$O'L..Q14"));
      assertNotNull(config0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Context context0 = Context.getCurrentContext();
      assertNotNull(context0);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      
      ToolErrorReporter toolErrorReporter0 = (ToolErrorReporter)context0.getErrorReporter();
      assertNotNull(toolErrorReporter0);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("e$O'L..Q14"));
      assertNotNull(jsDocInfoParser0);
      assertFalse(comment0.hasChildren());
      assertEquals("^&YS/=.2yV,l", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(161, comment0.getType());
      assertEquals(65533, comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(0, comment0.getLength());
      assertEquals(65533, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      
      boolean boolean0 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertFalse(linkedHashSet0.contains("e$O'L..Q14"));
      assertFalse(boolean0);
      assertFalse(comment0.hasChildren());
      assertEquals("^&YS/=.2yV,l", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(161, comment0.getType());
      assertEquals(65533, comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(0, comment0.getLength());
      assertEquals(65533, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsoc.consistidgen");
      assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = new Comment((-946), (-948), (Token.CommentType) null, "msg.jsoc.consistidgen");
      assertNotNull(comment0);
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals((-946), comment0.getAbsolutePosition());
      assertEquals((-946), comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals("msg.jsoc.consistidgen", comment0.getValue());
      assertEquals((-948), comment0.getLength());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getCommentType());
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      
      Node node0 = JsDocInfoParser.parseTypeString("msg.jsoc.consistidgen");
      assertNotNull(node0);
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(21, node0.getLength());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isThis());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      
      Node node1 = JsDocInfoParser.parseTypeString("(.d|");
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("x=?\"SH.BG~r]IORvi}r");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-966), (-966), token_CommentType0, "x=?\"SH.BG~r]IORvi}r");
      assertNotNull(comment0);
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals("x=?\"SH.BG~r]IORvi}r", comment0.getValue());
      assertEquals((-966), comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals((-966), comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals((-966), comment0.getPosition());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      
      Comment comment1 = comment0.getJsDocNode();
      assertNull(comment1);
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals("x=?\"SH.BG~r]IORvi}r", comment0.getValue());
      assertEquals((-966), comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals((-966), comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals((-966), comment0.getPosition());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      
      Node node0 = JsDocInfoParser.parseTypeString("x=?\"SH.BG~r]IORvi}r");
      assertNotNull(node0);
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertEquals(1, node0.getLength());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("x=?\"SH.BG~r]IORvi}r"));
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      assertFalse(linkedHashSet0.contains("x=?\"SH.BG~r]IORvi}r"));
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("x=?\"SH.BG~r]IORvi}r"));
      assertNotNull(jsDocInfoParser0);
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertEquals(1, node0.getLength());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      JsDocToken jsDocToken0 = JsDocToken.LB;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(linkedHashSet0.contains("x=?\"SH.BG~r]IORvi}r"));
      assertNull(node1);
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertEquals(1, node0.getLength());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression(node0);
      assertFalse(linkedHashSet0.contains("x=?\"SH.BG~r]IORvi}r"));
      assertNotNull(jSTypeExpression0);
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertEquals(1, node0.getLength());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      JsDocToken jsDocToken1 = JsDocToken.EOL;
      Node node2 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertFalse(linkedHashSet0.contains("x=?\"SH.BG~r]IORvi}r"));
      assertFalse(jsDocToken1.equals((Object)jsDocToken0));
      assertNull(node2);
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertEquals(1, node0.getLength());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(jsDocToken1, jsDocToken0);
      
      JSTypeExpression jSTypeExpression1 = jsDocInfoParser0.createJSTypeExpression(node0);
      assertFalse(linkedHashSet0.contains("x=?\"SH.BG~r]IORvi}r"));
      assertTrue(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertNotNull(jSTypeExpression1);
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertEquals(1, node0.getLength());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, errorCollector0);
      assertFalse(linkedHashSet0.contains("x=?\"SH.BG~r]IORvi}r"));
      assertFalse(jsDocInfoParser1.equals((Object)jsDocInfoParser0));
      assertNotNull(jsDocInfoParser1);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(linkedHashSet0.contains("x=?\"SH.BG~r]IORvi}r"));
      assertFalse(jsDocInfoParser0.equals((Object)jsDocInfoParser1));
      assertFalse(boolean0);
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertEquals(1, node0.getLength());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(jsDocInfoParser0, jsDocInfoParser1);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(linkedHashSet0.contains("x=?\"SH.BG~r]IORvi}r"));
      assertTrue(boolean1 == boolean0);
      assertFalse(jsDocInfoParser0.equals((Object)jsDocInfoParser1));
      assertFalse(boolean1);
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertEquals(1, node0.getLength());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(jsDocInfoParser0, jsDocInfoParser1);
      
      JsDocToken jsDocToken2 = JsDocToken.EOF;
      // Undeclared exception!
      try { 
        jsDocInfoParser1.parseAndRecordTypeNode(jsDocToken2);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("(.d|");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("[85$`C");
      assertNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("[85$`C");
      assertNotNull(jsDocTokenStream0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("[85$`C"));
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      assertFalse(linkedHashSet0.contains("[85$`C"));
      assertNotNull(config0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, errorCollector0);
      assertFalse(linkedHashSet0.contains("[85$`C"));
      assertNotNull(jsDocInfoParser0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertFalse(linkedHashSet0.contains("[85$`C"));
      assertNull(jSDocInfo0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Node node0 = Node.newString("function");
      assertNotNull(node0);
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isFalse());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertFalse(set0.contains("function"));
      assertNotNull(set0);
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertFalse(set0.contains("function"));
      assertNotNull(config0);
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser((JsDocTokenStream) null, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(set0.contains("function"));
      assertNotNull(jsDocInfoParser0);
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isFalse());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(0, 0, token_CommentType0, "com.google.javascript.rhino.head.NativeJavaPackage");
      assertNotNull(comment0);
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.getPosition());
      assertEquals("com.google.javascript.rhino.head.NativeJavaPackage", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(0, comment0.getAbsolutePosition());
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      
      SimpleErrorReporter simpleErrorReporter0 = new SimpleErrorReporter();
      assertNotNull(simpleErrorReporter0);
      
      JSTypeRegistry jSTypeRegistry0 = new JSTypeRegistry(simpleErrorReporter0, false);
      assertNotNull(jSTypeRegistry0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      
      Stack<JSType> stack0 = new Stack<JSType>();
      assertNotNull(stack0);
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      
      Node node0 = jSTypeRegistry0.createParametersWithVarArgs((List<JSType>) stack0);
      assertNotNull(node0);
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertEquals(83, node0.getType());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      
      Set<String> set0 = charset0.aliases();
      assertFalse(set0.contains("com.google.javascript.rhino.head.NativeJavaPackage"));
      assertNotNull(set0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertFalse(set0.contains("com.google.javascript.rhino.head.NativeJavaPackage"));
      assertNotNull(config0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser((JsDocTokenStream) null, comment0, node0, config0, errorCollector0);
      assertFalse(set0.contains("com.google.javascript.rhino.head.NativeJavaPackage"));
      assertNotNull(jsDocInfoParser0);
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.getPosition());
      assertEquals("com.google.javascript.rhino.head.NativeJavaPackage", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(0, comment0.getAbsolutePosition());
      assertFalse(jSTypeRegistry0.shouldTolerateUndefinedValues());
      assertEquals(10, stack0.capacity());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertTrue(node0.isParamList());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertEquals(83, node0.getType());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("{\"8@");
      assertNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{\"8@");
      assertNotNull(jsDocTokenStream0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = null;
      try {
        jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("[6?E'-o>3~sQ'^|5ap");
      assertNull(node0);
      
      Node node1 = JsDocInfoParser.parseTypeString("debugger;\n");
      assertNotNull(node1);
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isTry());
      assertFalse(node1.isFor());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(40, node1.getType());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isInc());
      assertFalse(node1.isThis());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCase());
      assertTrue(node1.isString());
      assertFalse(node1.isCatch());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isIn());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isNE());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isIf());
      assertFalse(node1.isCast());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isNumber());
      assertFalse(node1.isScript());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDec());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNot());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(9, node1.getLength());
      assertFalse(node1.isContinue());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAnd());
      assertFalse(node1.isVar());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDo());
      assertFalse(node1.isWhile());
      assertFalse(node1.isNew());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOr());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isLocalResultCall());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isBreak());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isName());
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Z");
      assertNotNull(jsDocTokenStream0);
      
      Node node0 = Node.newString("Z");
      assertNotNull(node0);
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isComma());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("Z"));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertFalse(treeSet0.contains("Z"));
      assertNotNull(config0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(treeSet0.contains("Z"));
      assertNotNull(jsDocInfoParser0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isComma());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      
      boolean boolean0 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertFalse(treeSet0.contains("Z"));
      assertFalse(boolean0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFor());
      assertFalse(node0.isWith());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isComma());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isAnd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsdoc.consistidgen");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-966), (-966), token_CommentType0, "msg.jsdoc.consistidgen");
      assertNotNull(comment0);
      assertNull(comment0.getJsDoc());
      assertEquals((-966), comment0.getLength());
      assertEquals((-966), comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals((-966), comment0.getPosition());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("msg.jsdoc.consistidgen", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      
      Comment comment1 = new Comment(1, 0, token_CommentType0, "msg.jsdoc.consistidgen");
      assertFalse(comment1.equals((Object)comment0));
      assertNotNull(comment1);
      assertEquals(1, comment1.getPosition());
      assertFalse(comment1.hasChildren());
      assertEquals(0, comment1.depth());
      assertNull(comment1.getJsDoc());
      assertEquals("msg.jsdoc.consistidgen", comment1.getValue());
      assertEquals(1, comment1.getAbsolutePosition());
      assertEquals(0, comment1.getLength());
      assertEquals((-1), comment1.getLineno());
      assertEquals(161, comment1.getType());
      assertEquals(Token.CommentType.JSDOC, comment1.getCommentType());
      assertEquals("161", comment1.toString());
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      
      Node node0 = JsDocInfoParser.parseTypeString("msg.jsdoc.consistidgen");
      assertNotNull(node0);
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(22, node0.getLength());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.isVar());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("msg.jsdoc.consistidgen"));
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      EvaluatorException evaluatorException0 = new EvaluatorException("M-a3^1AI3Q", "M-a3^1AI3Q", 2, "M-a3^1AI3Q", 22);
      assertNotNull(evaluatorException0);
      
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("M-a3^1AI3Q"));
      assertNotNull(config0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Config config1 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("M-a3^1AI3Q"));
      assertFalse(config1.equals((Object)config0));
      assertNotNull(config1);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Node node1 = JsDocInfoParser.parseTypeString("{yoy?-A;D/I+#n1m?");
      assertNull(node1);
      
      Comment comment2 = new Comment(32, 49, token_CommentType0, "!");
      assertFalse(comment2.equals((Object)comment0));
      assertFalse(comment2.equals((Object)comment1));
      assertNotNull(comment2);
      assertEquals(161, comment2.getType());
      assertEquals(Token.CommentType.JSDOC, comment2.getCommentType());
      assertEquals("161", comment2.toString());
      assertEquals(32, comment2.getPosition());
      assertEquals(49, comment2.getLength());
      assertEquals((-1), comment2.getLineno());
      assertNull(comment2.getJsDoc());
      assertEquals(0, comment2.depth());
      assertEquals(32, comment2.getAbsolutePosition());
      assertFalse(comment2.hasChildren());
      assertEquals("!", comment2.getValue());
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      
      Node node2 = JsDocInfoParser.parseTypeString("M-a3^1AI3Q");
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isInc());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isCase());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isArrayLit());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isTry());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isFor());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isTrue());
      assertFalse(node2.isScript());
      assertFalse(node2.isOr());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isLabel());
      assertFalse(node2.isCall());
      assertFalse(node2.isVar());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isName());
      assertTrue(node2.isString());
      assertFalse(node2.isBlock());
      assertEquals(0, node2.getChangeTime());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSetterDef());
      assertTrue(node2.mayMutateGlobalStateOrThrow());
      assertFalse(node2.isNull());
      assertEquals(0, node2.getSourcePosition());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertTrue(node2.mayMutateArguments());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isLocalResultCall());
      assertFalse(node2.hasChildren());
      assertEquals(10, node2.getLength());
      assertFalse(node2.isAssign());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isOnlyModifiesArgumentsCall());
      assertFalse(node2.isCast());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isFromExterns());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNot());
      assertFalse(node2.isIn());
      assertFalse(node2.isObjectLit());
      assertEquals(40, node2.getType());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFunction());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertNotSame(node2, node0);
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      Context context0 = contextFactory0.enter();
      assertNotNull(context0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      ErrorReporter errorReporter0 = context0.setErrorReporter(toolErrorReporter0);
      assertNotNull(errorReporter0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment2, node2, config1, errorReporter0);
      assertFalse(linkedHashSet0.contains("M-a3^1AI3Q"));
      assertFalse(config1.equals((Object)config0));
      assertFalse(comment2.equals((Object)comment0));
      assertFalse(comment2.equals((Object)comment1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(jsDocInfoParser0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(161, comment2.getType());
      assertEquals(Token.CommentType.JSDOC, comment2.getCommentType());
      assertEquals("161", comment2.toString());
      assertEquals(32, comment2.getPosition());
      assertEquals(49, comment2.getLength());
      assertEquals((-1), comment2.getLineno());
      assertNull(comment2.getJsDoc());
      assertEquals(0, comment2.depth());
      assertEquals(32, comment2.getAbsolutePosition());
      assertFalse(comment2.hasChildren());
      assertEquals("!", comment2.getValue());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isInc());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isCase());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isArrayLit());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isTry());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isFor());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isTrue());
      assertFalse(node2.isScript());
      assertFalse(node2.isOr());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isLabel());
      assertFalse(node2.isCall());
      assertFalse(node2.isVar());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isName());
      assertTrue(node2.isString());
      assertFalse(node2.isBlock());
      assertEquals(0, node2.getChangeTime());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSetterDef());
      assertTrue(node2.mayMutateGlobalStateOrThrow());
      assertFalse(node2.isNull());
      assertEquals(0, node2.getSourcePosition());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertTrue(node2.mayMutateArguments());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isLocalResultCall());
      assertFalse(node2.hasChildren());
      assertEquals(10, node2.getLength());
      assertFalse(node2.isAssign());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isOnlyModifiesArgumentsCall());
      assertFalse(node2.isCast());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isFromExterns());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNot());
      assertFalse(node2.isIn());
      assertFalse(node2.isObjectLit());
      assertEquals(40, node2.getType());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFunction());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      
      JsDocToken jsDocToken0 = JsDocToken.BANG;
      Node node3 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(linkedHashSet0.contains("M-a3^1AI3Q"));
      assertFalse(config1.equals((Object)config0));
      assertFalse(comment2.equals((Object)comment0));
      assertFalse(comment2.equals((Object)comment1));
      assertFalse(node2.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertFalse(node3.equals((Object)node0));
      assertNotNull(node3);
      assertFalse(node3.isBlock());
      assertFalse(node3.isNew());
      assertFalse(node3.isAdd());
      assertFalse(node3.isCall());
      assertFalse(node3.isWhile());
      assertEquals(0, node3.getChangeTime());
      assertFalse(node3.isDo());
      assertFalse(node3.wasEmptyNode());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isQuotedString());
      assertFalse(node3.isVar());
      assertTrue(node3.mayMutateGlobalStateOrThrow());
      assertEquals(0, node3.getSideEffectFlags());
      assertFalse(node3.isReturn());
      assertFalse(node3.isOnlyModifiesArgumentsCall());
      assertFalse(node3.isOr());
      assertFalse(node3.isCatch());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isLocalResultCall());
      assertFalse(node3.isNull());
      assertFalse(node3.isGetElem());
      assertFalse(node3.isTrue());
      assertFalse(node3.isVoid());
      assertFalse(node3.isName());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isCast());
      assertTrue(node3.hasOneChild());
      assertFalse(node3.isDec());
      assertFalse(node3.isAssign());
      assertFalse(node3.isFromExterns());
      assertEquals(21, node3.getCharno());
      assertFalse(node3.isSyntheticBlock());
      assertEquals(0, node3.getLineno());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isContinue());
      assertFalse(node3.isObjectLit());
      assertFalse(node3.isNot());
      assertFalse(node3.isAnd());
      assertFalse(node3.isHook());
      assertFalse(node3.isInc());
      assertFalse(node3.isFalse());
      assertFalse(node3.isString());
      assertFalse(node3.isNoSideEffectsCall());
      assertFalse(node3.isCase());
      assertFalse(node3.isThis());
      assertFalse(node3.isThrow());
      assertEquals(1, node3.getChildCount());
      assertTrue(node3.hasChildren());
      assertFalse(node3.isInstanceOf());
      assertEquals(306, node3.getType());
      assertFalse(node3.isComma());
      assertFalse(node3.isIn());
      assertFalse(node3.isWith());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isBreak());
      assertFalse(node3.isNE());
      assertEquals(0, node3.getLength());
      assertFalse(node3.isIf());
      assertFalse(node3.isTry());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isFor());
      assertFalse(node3.isScript());
      assertEquals((-1), node3.getSourceOffset());
      assertEquals(21, node3.getSourcePosition());
      assertTrue(node3.mayMutateArguments());
      assertFalse(node3.isOptionalArg());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isOnlyModifiesThisCall());
      assertFalse(node3.isVarArgs());
      assertFalse(node3.isNumber());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isLabelName());
      assertFalse(node3.isParamList());
      assertFalse(node3.isStringKey());
      assertFalse(node3.isSwitch());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(161, comment2.getType());
      assertEquals(Token.CommentType.JSDOC, comment2.getCommentType());
      assertEquals("161", comment2.toString());
      assertEquals(32, comment2.getPosition());
      assertEquals(49, comment2.getLength());
      assertEquals((-1), comment2.getLineno());
      assertNull(comment2.getJsDoc());
      assertEquals(0, comment2.depth());
      assertEquals(32, comment2.getAbsolutePosition());
      assertFalse(comment2.hasChildren());
      assertEquals("!", comment2.getValue());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isInc());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isCase());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isArrayLit());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isTry());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isFor());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isTrue());
      assertFalse(node2.isScript());
      assertFalse(node2.isOr());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isLabel());
      assertFalse(node2.isCall());
      assertFalse(node2.isVar());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isName());
      assertTrue(node2.isString());
      assertFalse(node2.isBlock());
      assertEquals(0, node2.getChangeTime());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSetterDef());
      assertTrue(node2.mayMutateGlobalStateOrThrow());
      assertFalse(node2.isNull());
      assertEquals(0, node2.getSourcePosition());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertTrue(node2.mayMutateArguments());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isLocalResultCall());
      assertFalse(node2.hasChildren());
      assertEquals(10, node2.getLength());
      assertFalse(node2.isAssign());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isOnlyModifiesArgumentsCall());
      assertFalse(node2.isCast());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isFromExterns());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNot());
      assertFalse(node2.isIn());
      assertFalse(node2.isObjectLit());
      assertEquals(40, node2.getType());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFunction());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertNotSame(config1, config0);
      assertNotSame(comment2, comment0);
      assertNotSame(comment2, comment1);
      assertNotSame(node2, node0);
      
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression(node1);
      assertFalse(linkedHashSet0.contains("M-a3^1AI3Q"));
      assertFalse(config1.equals((Object)config0));
      assertFalse(comment2.equals((Object)comment0));
      assertFalse(comment2.equals((Object)comment1));
      assertFalse(node2.equals((Object)node3));
      assertFalse(node2.equals((Object)node0));
      assertNull(jSTypeExpression0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(161, comment2.getType());
      assertEquals(Token.CommentType.JSDOC, comment2.getCommentType());
      assertEquals("161", comment2.toString());
      assertEquals(32, comment2.getPosition());
      assertEquals(49, comment2.getLength());
      assertEquals((-1), comment2.getLineno());
      assertNull(comment2.getJsDoc());
      assertEquals(0, comment2.depth());
      assertEquals(32, comment2.getAbsolutePosition());
      assertFalse(comment2.hasChildren());
      assertEquals("!", comment2.getValue());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isHook());
      assertFalse(node2.isThrow());
      assertFalse(node2.isInc());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isCase());
      assertFalse(node2.isComma());
      assertFalse(node2.isThis());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isBreak());
      assertFalse(node2.isWith());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isArrayLit());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isTry());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isFor());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isTrue());
      assertFalse(node2.isScript());
      assertFalse(node2.isOr());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNumber());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isDo());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isLabel());
      assertFalse(node2.isCall());
      assertFalse(node2.isVar());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isName());
      assertTrue(node2.isString());
      assertFalse(node2.isBlock());
      assertEquals(0, node2.getChangeTime());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isSetterDef());
      assertTrue(node2.mayMutateGlobalStateOrThrow());
      assertFalse(node2.isNull());
      assertEquals(0, node2.getSourcePosition());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isCatch());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isReturn());
      assertFalse(node2.isWhile());
      assertTrue(node2.mayMutateArguments());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isLocalResultCall());
      assertFalse(node2.hasChildren());
      assertEquals(10, node2.getLength());
      assertFalse(node2.isAssign());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isOnlyModifiesArgumentsCall());
      assertFalse(node2.isCast());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isFromExterns());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNot());
      assertFalse(node2.isIn());
      assertFalse(node2.isObjectLit());
      assertEquals(40, node2.getType());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isAnd());
      assertFalse(node2.isFunction());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.generateObserverCount);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertNotSame(config1, config0);
      assertNotSame(comment2, comment0);
      assertNotSame(comment2, comment1);
      assertNotSame(node2, node0);
      
      String string0 = "do";
      Node node4 = JsDocInfoParser.parseTypeString(string0);
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node0));
      assertNotNull(node4);
      assertFalse(node4.isFromExterns());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isNumber());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isReturn());
      assertEquals(0, node4.getSideEffectFlags());
      assertFalse(node4.isAssign());
      assertFalse(node4.isOr());
      assertFalse(node4.isDec());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isLabel());
      assertFalse(node4.isOnlyModifiesThisCall());
      assertFalse(node4.isDo());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isExprResult());
      assertEquals(0, node4.getCharno());
      assertTrue(node4.isString());
      assertFalse(node4.isWhile());
      assertFalse(node4.isWith());
      assertFalse(node4.isBlock());
      assertFalse(node4.wasEmptyNode());
      assertFalse(node4.isCall());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isName());
      assertFalse(node4.isOnlyModifiesArgumentsCall());
      assertFalse(node4.isInstanceOf());
      assertEquals(2, node4.getLength());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isThis());
      assertFalse(node4.isParamList());
      assertFalse(node4.isNull());
      assertFalse(node4.isVarArgs());
      assertEquals(0, node4.getChildCount());
      assertEquals(0, node4.getSourcePosition());
      assertFalse(node4.isVar());
      assertFalse(node4.isAdd());
      assertFalse(node4.isNew());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isScript());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.isNE());
      assertFalse(node4.isIf());
      assertFalse(node4.isFor());
      assertFalse(node4.isSyntheticBlock());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isOptionalArg());
      assertFalse(node4.isIn());
      assertFalse(node4.isTry());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isCase());
      assertEquals((-1), node4.getSourceOffset());
      assertFalse(node4.isTrue());
      assertFalse(node4.isInc());
      assertTrue(node4.mayMutateArguments());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isVoid());
      assertFalse(node4.isHook());
      assertFalse(node4.isCatch());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isLocalResultCall());
      assertFalse(node4.isBreak());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isComma());
      assertTrue(node4.mayMutateGlobalStateOrThrow());
      assertEquals(0, node4.getChangeTime());
      assertFalse(node4.isNoSideEffectsCall());
      assertFalse(node4.isThrow());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isQuotedString());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isFunction());
      assertFalse(node4.isNot());
      assertEquals(40, node4.getType());
      assertFalse(node4.isDebugger());
      assertFalse(node4.isCast());
      assertFalse(node4.isFalse());
      assertFalse(node4.isContinue());
      assertFalse(node4.isAnd());
      assertEquals(0, node4.getLineno());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNotSame(node4, node2);
      assertNotSame(node4, node0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "JP;\"OQxYqZn#");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(",=7ZhO]nU)#vZNr\"f", 196, 196);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(196, 196, token_CommentType0, ".java");
      assertNotNull(comment0);
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(196, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals(196, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertFalse(comment0.hasChildren());
      assertEquals(196, comment0.getPosition());
      assertEquals(".java", comment0.getValue());
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      
      Node node0 = JsDocInfoParser.parseTypeString("some");
      assertNotNull(node0);
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertTrue(node0.isString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      
      Node node1 = new Node(4, node0);
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertTrue(node0.isString());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNumber());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isScript());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNot());
      assertFalse(node1.isDo());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isCast());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isVar());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isWhile());
      assertEquals(4, node1.getType());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isFor());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isString());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isDebugger());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isFunction());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThis());
      assertFalse(node1.isHook());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertTrue(node1.isReturn());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertEquals(1, node1.getChildCount());
      assertTrue(node1.hasChildren());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isCatch());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isInstanceOf());
      assertEquals((-1), node1.getLineno());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("JP;\"OQxYqZn#"));
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Node node2 = JsDocInfoParser.parseTypeString("ZWndXE17x");
      assertFalse(node2.equals((Object)node1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertFalse(node2.isDec());
      assertFalse(node2.isNumber());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isOr());
      assertFalse(node2.isScript());
      assertFalse(node2.isWhile());
      assertFalse(node2.isWith());
      assertFalse(node2.wasEmptyNode());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isBlock());
      assertFalse(node2.isOnlyModifiesArgumentsCall());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isCall());
      assertFalse(node2.isExprResult());
      assertEquals(0, node2.getSourcePosition());
      assertFalse(node2.isBreak());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isThis());
      assertFalse(node2.isNull());
      assertFalse(node2.isVar());
      assertTrue(node2.isString());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isDo());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isIn());
      assertFalse(node2.isTry());
      assertFalse(node2.isCase());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isLocalResultCall());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isVoid());
      assertTrue(node2.mayMutateArguments());
      assertFalse(node2.isTrue());
      assertFalse(node2.isHook());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getChangeTime());
      assertFalse(node2.isComma());
      assertTrue(node2.mayMutateGlobalStateOrThrow());
      assertFalse(node2.isThrow());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isInc());
      assertFalse(node2.isFunction());
      assertEquals(9, node2.getLength());
      assertFalse(node2.isNot());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isAnd());
      assertEquals(40, node2.getType());
      assertFalse(node2.isFalse());
      assertFalse(node2.isContinue());
      assertEquals(0, node2.getLineno());
      assertFalse(node2.isCast());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertNotSame(node2, node0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("ZWndXE17x"));
      assertNotNull(config0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Node node3 = JsDocInfoParser.parseTypeString("qRW&22");
      assertFalse(node3.equals((Object)node1));
      assertFalse(node3.equals((Object)node0));
      assertFalse(node3.equals((Object)node2));
      assertNotNull(node3);
      assertFalse(node3.isStringKey());
      assertFalse(node3.isName());
      assertFalse(node3.isVarArgs());
      assertFalse(node3.isQuotedString());
      assertFalse(node3.isSetterDef());
      assertFalse(node3.isCall());
      assertFalse(node3.isNew());
      assertEquals(0, node3.getChildCount());
      assertTrue(node3.isString());
      assertTrue(node3.mayMutateGlobalStateOrThrow());
      assertFalse(node3.isVar());
      assertEquals(0, node3.getChangeTime());
      assertEquals(40, node3.getType());
      assertFalse(node3.isBlock());
      assertFalse(node3.isDo());
      assertFalse(node3.wasEmptyNode());
      assertFalse(node3.isDefaultCase());
      assertFalse(node3.isRegExp());
      assertFalse(node3.isCatch());
      assertFalse(node3.hasMoreThanOneChild());
      assertFalse(node3.isLocalResultCall());
      assertEquals(6, node3.getLength());
      assertFalse(node3.isOnlyModifiesArgumentsCall());
      assertFalse(node3.isAdd());
      assertFalse(node3.isOr());
      assertFalse(node3.isVoid());
      assertEquals(0, node3.getSourcePosition());
      assertFalse(node3.isTrue());
      assertFalse(node3.isNull());
      assertFalse(node3.isAssign());
      assertFalse(node3.isDelProp());
      assertFalse(node3.isTypeOf());
      assertFalse(node3.isCast());
      assertFalse(node3.isFromExterns());
      assertFalse(node3.isGetElem());
      assertEquals(0, node3.getSideEffectFlags());
      assertFalse(node3.isFunction());
      assertFalse(node3.isDec());
      assertFalse(node3.hasChildren());
      assertFalse(node3.isReturn());
      assertFalse(node3.isNot());
      assertFalse(node3.isWhile());
      assertFalse(node3.isContinue());
      assertFalse(node3.isAnd());
      assertFalse(node3.isObjectLit());
      assertEquals(0, node3.getLineno());
      assertFalse(node3.isDebugger());
      assertFalse(node3.isSyntheticBlock());
      assertFalse(node3.isNoSideEffectsCall());
      assertFalse(node3.isFalse());
      assertFalse(node3.isGetProp());
      assertFalse(node3.isBreak());
      assertFalse(node3.isComma());
      assertFalse(node3.isThrow());
      assertFalse(node3.isThis());
      assertFalse(node3.isHook());
      assertFalse(node3.isWith());
      assertFalse(node3.isInstanceOf());
      assertFalse(node3.isInc());
      assertFalse(node3.isExprResult());
      assertFalse(node3.isIn());
      assertFalse(node3.isNE());
      assertEquals(0, node3.getCharno());
      assertFalse(node3.isEmpty());
      assertFalse(node3.isFor());
      assertFalse(node3.isLabelName());
      assertEquals((-1), node3.getSourceOffset());
      assertFalse(node3.isOptionalArg());
      assertFalse(node3.isIf());
      assertFalse(node3.isGetterDef());
      assertFalse(node3.isNumber());
      assertFalse(node3.hasOneChild());
      assertFalse(node3.isArrayLit());
      assertFalse(node3.isTry());
      assertFalse(node3.isAssignAdd());
      assertFalse(node3.isLabel());
      assertFalse(node3.isOnlyModifiesThisCall());
      assertTrue(node3.mayMutateArguments());
      assertFalse(node3.isCase());
      assertFalse(node3.isScript());
      assertFalse(node3.isSwitch());
      assertFalse(node3.isParamList());
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotSame(node3, node0);
      assertNotSame(node3, node2);
      
      Token.CommentType token_CommentType1 = Token.CommentType.BLOCK_COMMENT;
      Comment comment1 = new Comment((-1845807698), 8, token_CommentType1, "msg.jsdoc.modifies.duplicate");
      assertFalse(token_CommentType1.equals((Object)token_CommentType0));
      assertFalse(comment1.equals((Object)comment0));
      assertNotNull(comment1);
      assertEquals("msg.jsdoc.modifies.duplicate", comment1.getValue());
      assertEquals(161, comment1.getType());
      assertEquals("161", comment1.toString());
      assertEquals(0, comment1.depth());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment1.getCommentType());
      assertEquals((-1), comment1.getLineno());
      assertNull(comment1.getJsDoc());
      assertEquals((-1845807698), comment1.getAbsolutePosition());
      assertEquals(8, comment1.getLength());
      assertEquals((-1845807698), comment1.getPosition());
      assertFalse(comment1.hasChildren());
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      
      Node node4 = JsDocInfoParser.parseTypeString("qRW&22");
      assertFalse(node4.equals((Object)node3));
      assertFalse(node4.equals((Object)node2));
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node1));
      assertNotNull(node4);
      assertFalse(node4.isHook());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isThrow());
      assertFalse(node4.isCase());
      assertFalse(node4.isInc());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isIn());
      assertFalse(node4.isThis());
      assertFalse(node4.isNE());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isBreak());
      assertFalse(node4.isIf());
      assertFalse(node4.isWith());
      assertFalse(node4.isComma());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isDebugger());
      assertEquals(0, node4.getCharno());
      assertFalse(node4.isFromExterns());
      assertFalse(node4.isNot());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isSyntheticBlock());
      assertEquals(0, node4.getLineno());
      assertFalse(node4.isAnd());
      assertEquals(40, node4.getType());
      assertFalse(node4.isNoSideEffectsCall());
      assertFalse(node4.isFunction());
      assertFalse(node4.isContinue());
      assertFalse(node4.isFalse());
      assertFalse(node4.isCast());
      assertTrue(node4.isString());
      assertFalse(node4.isNew());
      assertFalse(node4.isBlock());
      assertFalse(node4.isVar());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isWhile());
      assertEquals(0, node4.getSourcePosition());
      assertFalse(node4.isDo());
      assertFalse(node4.isQuotedString());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isAdd());
      assertEquals(0, node4.getSideEffectFlags());
      assertFalse(node4.isReturn());
      assertFalse(node4.isOr());
      assertTrue(node4.mayMutateGlobalStateOrThrow());
      assertFalse(node4.isNull());
      assertEquals(0, node4.getChangeTime());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isLocalResultCall());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isName());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.wasEmptyNode());
      assertFalse(node4.isDec());
      assertFalse(node4.isAssign());
      assertFalse(node4.isCall());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isGetElem());
      assertEquals(6, node4.getLength());
      assertFalse(node4.isCatch());
      assertFalse(node4.isOnlyModifiesArgumentsCall());
      assertFalse(node4.isTry());
      assertFalse(node4.isArrayLit());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isTrue());
      assertFalse(node4.isVoid());
      assertFalse(node4.isFor());
      assertFalse(node4.isOptionalArg());
      assertTrue(node4.mayMutateArguments());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isDefaultCase());
      assertFalse(node4.isNumber());
      assertEquals((-1), node4.getSourceOffset());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isScript());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isOnlyModifiesThisCall());
      assertFalse(node4.isLabel());
      assertEquals(0, node4.getChildCount());
      assertFalse(node4.isParamList());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isVarArgs());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertNotSame(node4, node3);
      assertNotSame(node4, node2);
      assertNotSame(node4, node0);
      
      Node node5 = JsDocInfoParser.parseTypeString("qRW&22");
      assertFalse(node5.equals((Object)node3));
      assertFalse(node5.equals((Object)node1));
      assertFalse(node5.equals((Object)node4));
      assertFalse(node5.equals((Object)node2));
      assertFalse(node5.equals((Object)node0));
      assertNotNull(node5);
      assertFalse(node5.isObjectLit());
      assertFalse(node5.isGetProp());
      assertFalse(node5.isInstanceOf());
      assertFalse(node5.isBreak());
      assertFalse(node5.isNot());
      assertFalse(node5.isAnd());
      assertEquals(0, node5.getCharno());
      assertFalse(node5.isHook());
      assertFalse(node5.hasOneChild());
      assertFalse(node5.isExprResult());
      assertFalse(node5.isScript());
      assertFalse(node5.isGetElem());
      assertFalse(node5.isWith());
      assertFalse(node5.hasChildren());
      assertFalse(node5.isTypeOf());
      assertFalse(node5.isCase());
      assertFalse(node5.isDec());
      assertFalse(node5.isAssign());
      assertFalse(node5.isComma());
      assertFalse(node5.isThis());
      assertFalse(node5.isReturn());
      assertFalse(node5.isAssignAdd());
      assertFalse(node5.isLabel());
      assertFalse(node5.isOnlyModifiesThisCall());
      assertEquals(0, node5.getSideEffectFlags());
      assertFalse(node5.isOr());
      assertFalse(node5.isDelProp());
      assertFalse(node5.isGetterDef());
      assertFalse(node5.isNumber());
      assertFalse(node5.isLabelName());
      assertFalse(node5.isSwitch());
      assertFalse(node5.isNew());
      assertFalse(node5.isArrayLit());
      assertFalse(node5.isAdd());
      assertFalse(node5.isEmpty());
      assertFalse(node5.isDefaultCase());
      assertFalse(node5.isDo());
      assertFalse(node5.isOptionalArg());
      assertFalse(node5.isVar());
      assertEquals(0, node5.getLineno());
      assertEquals(0, node5.getChildCount());
      assertFalse(node5.isSetterDef());
      assertFalse(node5.isVarArgs());
      assertFalse(node5.isCatch());
      assertEquals(0, node5.getSourcePosition());
      assertFalse(node5.isLocalResultCall());
      assertFalse(node5.isName());
      assertFalse(node5.isDebugger());
      assertFalse(node5.isTrue());
      assertFalse(node5.isParamList());
      assertFalse(node5.isNull());
      assertFalse(node5.isStringKey());
      assertTrue(node5.isString());
      assertFalse(node5.isTry());
      assertFalse(node5.isVoid());
      assertEquals(6, node5.getLength());
      assertFalse(node5.isCall());
      assertFalse(node5.isQuotedString());
      assertFalse(node5.isWhile());
      assertEquals((-1), node5.getSourceOffset());
      assertFalse(node5.isRegExp());
      assertFalse(node5.wasEmptyNode());
      assertTrue(node5.mayMutateArguments());
      assertTrue(node5.mayMutateGlobalStateOrThrow());
      assertFalse(node5.isFor());
      assertFalse(node5.isBlock());
      assertEquals(0, node5.getChangeTime());
      assertFalse(node5.isIn());
      assertFalse(node5.isFromExterns());
      assertFalse(node5.isContinue());
      assertFalse(node5.hasMoreThanOneChild());
      assertFalse(node5.isOnlyModifiesArgumentsCall());
      assertFalse(node5.isIf());
      assertFalse(node5.isNE());
      assertFalse(node5.isSyntheticBlock());
      assertFalse(node5.isFunction());
      assertFalse(node5.isInc());
      assertFalse(node5.isFalse());
      assertFalse(node5.isCast());
      assertFalse(node5.isNoSideEffectsCall());
      assertEquals(40, node5.getType());
      assertFalse(node5.isThrow());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotSame(node5, node3);
      assertNotSame(node5, node4);
      assertNotSame(node5, node2);
      assertNotSame(node5, node0);
      
      Node node6 = JsDocInfoParser.parseTypeString("*v_me%6%OT$<uLF?:z");
      assertFalse(node6.equals((Object)node4));
      assertFalse(node6.equals((Object)node5));
      assertFalse(node6.equals((Object)node1));
      assertFalse(node6.equals((Object)node2));
      assertFalse(node6.equals((Object)node3));
      assertFalse(node6.equals((Object)node0));
      assertNotNull(node6);
      assertFalse(node6.isCatch());
      assertEquals(0, node6.getChildCount());
      assertFalse(node6.isRegExp());
      assertFalse(node6.isFunction());
      assertTrue(node6.mayMutateArguments());
      assertFalse(node6.isSetterDef());
      assertFalse(node6.isDefaultCase());
      assertEquals(0, node6.getChangeTime());
      assertFalse(node6.isTry());
      assertTrue(node6.mayMutateGlobalStateOrThrow());
      assertFalse(node6.isQuotedString());
      assertFalse(node6.isStringKey());
      assertFalse(node6.isOptionalArg());
      assertFalse(node6.isVar());
      assertFalse(node6.isArrayLit());
      assertEquals((-1), node6.getSourceOffset());
      assertFalse(node6.isGetterDef());
      assertFalse(node6.isVarArgs());
      assertFalse(node6.isDebugger());
      assertFalse(node6.isParamList());
      assertEquals(0, node6.getLineno());
      assertFalse(node6.isSyntheticBlock());
      assertEquals(0, node6.getSideEffectFlags());
      assertFalse(node6.isString());
      assertFalse(node6.isOr());
      assertFalse(node6.isFromExterns());
      assertFalse(node6.isNew());
      assertFalse(node6.isAdd());
      assertFalse(node6.isLabel());
      assertFalse(node6.isOnlyModifiesThisCall());
      assertFalse(node6.isReturn());
      assertFalse(node6.isWhile());
      assertFalse(node6.isDo());
      assertFalse(node6.isAssignAdd());
      assertFalse(node6.isEmpty());
      assertFalse(node6.isCall());
      assertFalse(node6.isGetElem());
      assertEquals(0, node6.getSourcePosition());
      assertFalse(node6.hasChildren());
      assertFalse(node6.isDec());
      assertFalse(node6.isAssign());
      assertFalse(node6.isTypeOf());
      assertFalse(node6.isVoid());
      assertFalse(node6.isLocalResultCall());
      assertFalse(node6.isTrue());
      assertFalse(node6.isNull());
      assertFalse(node6.isExprResult());
      assertFalse(node6.isDelProp());
      assertFalse(node6.isBreak());
      assertFalse(node6.isName());
      assertFalse(node6.isAnd());
      assertFalse(node6.isObjectLit());
      assertFalse(node6.isInstanceOf());
      assertFalse(node6.isNot());
      assertFalse(node6.isWith());
      assertFalse(node6.isGetProp());
      assertFalse(node6.isComma());
      assertFalse(node6.isScript());
      assertFalse(node6.isThis());
      assertEquals(302, node6.getType());
      assertFalse(node6.hasOneChild());
      assertFalse(node6.isThrow());
      assertFalse(node6.isNoSideEffectsCall());
      assertFalse(node6.isCast());
      assertFalse(node6.isFalse());
      assertFalse(node6.isNumber());
      assertFalse(node6.isSwitch());
      assertFalse(node6.isLabelName());
      assertFalse(node6.isContinue());
      assertFalse(node6.isCase());
      assertFalse(node6.wasEmptyNode());
      assertFalse(node6.isIn());
      assertFalse(node6.isOnlyModifiesArgumentsCall());
      assertFalse(node6.hasMoreThanOneChild());
      assertFalse(node6.isInc());
      assertFalse(node6.isBlock());
      assertFalse(node6.isFor());
      assertFalse(node6.isHook());
      assertFalse(node6.isNE());
      assertEquals(0, node6.getCharno());
      assertFalse(node6.isIf());
      assertEquals(0, node6.getLength());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertNotSame(node6, node1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsdoc.consistidgen");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-966), (-966), token_CommentType0, "msg.jsdoc.consistidgen");
      assertNotNull(comment0);
      assertEquals("msg.jsdoc.consistidgen", comment0.getValue());
      assertEquals((-966), comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals((-966), comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals((-966), comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      
      Comment comment1 = new Comment(1, 0, token_CommentType0, "msg.jsdoc.consistidgen");
      assertFalse(comment1.equals((Object)comment0));
      assertNotNull(comment1);
      assertEquals((-1), comment1.getLineno());
      assertEquals("161", comment1.toString());
      assertEquals(0, comment1.getLength());
      assertEquals(161, comment1.getType());
      assertEquals(Token.CommentType.JSDOC, comment1.getCommentType());
      assertNull(comment1.getJsDoc());
      assertEquals("msg.jsdoc.consistidgen", comment1.getValue());
      assertEquals(0, comment1.depth());
      assertEquals(1, comment1.getPosition());
      assertEquals(1, comment1.getAbsolutePosition());
      assertFalse(comment1.hasChildren());
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      
      Node node0 = JsDocInfoParser.parseTypeString("msg.jsdoc.consistidgen");
      assertNotNull(node0);
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.isString());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertEquals(22, node0.getLength());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("msg.jsdoc.consistidgen"));
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      EvaluatorException evaluatorException0 = new EvaluatorException("msg.bad.esc.mask", "M-a3^1AI3Q", 2);
      assertNotNull(evaluatorException0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      EvaluatorException evaluatorException1 = new EvaluatorException("e'");
      assertFalse(evaluatorException1.equals((Object)evaluatorException0));
      assertNotNull(evaluatorException1);
      
      toolErrorReporter0.reportException((RhinoException) evaluatorException1);
      assertFalse(evaluatorException1.equals((Object)evaluatorException0));
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(0, evaluatorException1.getColumnNumber());
      assertEquals(0, evaluatorException1.lineNumber());
      assertNull(evaluatorException1.getSourceName());
      assertNull(evaluatorException1.getLineSource());
      assertNull(evaluatorException1.sourceName());
      assertEquals(0, evaluatorException1.getLineNumber());
      assertEquals(0, evaluatorException1.columnNumber());
      assertFalse(evaluatorException1.usesMozillaStackStyle());
      assertNull(evaluatorException1.lineSource());
      assertNotSame(evaluatorException1, evaluatorException0);
      
      Node node1 = JsDocInfoParser.parseTypeString("e'");
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertEquals(0, node1.getLineno());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertTrue(node1.isString());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isLocalResultCall());
      assertEquals(2, node1.getLength());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isWhile());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isBlock());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isIn());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isCast());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isHook());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNew());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(node1, node0);
      
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      assertFalse(linkedHashSet0.contains("e'"));
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment1, node1, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("e'"));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(jsDocInfoParser0);
      assertEquals((-1), comment1.getLineno());
      assertEquals("161", comment1.toString());
      assertEquals(0, comment1.getLength());
      assertEquals(161, comment1.getType());
      assertEquals(Token.CommentType.JSDOC, comment1.getCommentType());
      assertNull(comment1.getJsDoc());
      assertEquals("msg.jsdoc.consistidgen", comment1.getValue());
      assertEquals(0, comment1.depth());
      assertEquals(1, comment1.getPosition());
      assertEquals(1, comment1.getAbsolutePosition());
      assertFalse(comment1.hasChildren());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertEquals(0, node1.getLineno());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertTrue(node1.isString());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isLocalResultCall());
      assertEquals(2, node1.getLength());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isWhile());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isBlock());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isIn());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isCast());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isHook());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNew());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertFalse(linkedHashSet0.contains("e'"));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(node1.equals((Object)node0));
      assertNull(jSDocInfo0);
      assertEquals((-1), comment1.getLineno());
      assertEquals("161", comment1.toString());
      assertEquals(0, comment1.getLength());
      assertEquals(161, comment1.getType());
      assertEquals(Token.CommentType.JSDOC, comment1.getCommentType());
      assertNull(comment1.getJsDoc());
      assertEquals("msg.jsdoc.consistidgen", comment1.getValue());
      assertEquals(0, comment1.depth());
      assertEquals(1, comment1.getPosition());
      assertEquals(1, comment1.getAbsolutePosition());
      assertFalse(comment1.hasChildren());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertEquals(0, node1.getLineno());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertTrue(node1.isString());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isLocalResultCall());
      assertEquals(2, node1.getLength());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isWhile());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isBlock());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isIn());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isCast());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isHook());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNew());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(comment1, comment0);
      assertNotSame(node1, node0);
      
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertFalse(linkedHashSet0.contains("e'"));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(node1.equals((Object)node0));
      assertNull(jSDocInfo1);
      assertEquals((-1), comment1.getLineno());
      assertEquals("161", comment1.toString());
      assertEquals(0, comment1.getLength());
      assertEquals(161, comment1.getType());
      assertEquals(Token.CommentType.JSDOC, comment1.getCommentType());
      assertNull(comment1.getJsDoc());
      assertEquals("msg.jsdoc.consistidgen", comment1.getValue());
      assertEquals(0, comment1.depth());
      assertEquals(1, comment1.getPosition());
      assertEquals(1, comment1.getAbsolutePosition());
      assertFalse(comment1.hasChildren());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertEquals(0, node1.getLineno());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertTrue(node1.isString());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isLocalResultCall());
      assertEquals(2, node1.getLength());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isWhile());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isBlock());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isIn());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isCast());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isHook());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNew());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(comment1, comment0);
      assertNotSame(node1, node0);
      
      jsDocInfoParser0.setFileOverviewJSDocInfo((JSDocInfo) null);
      assertFalse(linkedHashSet0.contains("e'"));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(node1.equals((Object)node0));
      assertEquals((-1), comment1.getLineno());
      assertEquals("161", comment1.toString());
      assertEquals(0, comment1.getLength());
      assertEquals(161, comment1.getType());
      assertEquals(Token.CommentType.JSDOC, comment1.getCommentType());
      assertNull(comment1.getJsDoc());
      assertEquals("msg.jsdoc.consistidgen", comment1.getValue());
      assertEquals(0, comment1.depth());
      assertEquals(1, comment1.getPosition());
      assertEquals(1, comment1.getAbsolutePosition());
      assertFalse(comment1.hasChildren());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertEquals(0, node1.getLineno());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertTrue(node1.isString());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isLocalResultCall());
      assertEquals(2, node1.getLength());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isWhile());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isBlock());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isIn());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isCast());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isHook());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNew());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(comment1, comment0);
      assertNotSame(node1, node0);
      
      JsDocToken jsDocToken0 = JsDocToken.LP;
      Node node2 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(linkedHashSet0.contains("e'"));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(node1.equals((Object)node0));
      assertNull(node2);
      assertEquals((-1), comment1.getLineno());
      assertEquals("161", comment1.toString());
      assertEquals(0, comment1.getLength());
      assertEquals(161, comment1.getType());
      assertEquals(Token.CommentType.JSDOC, comment1.getCommentType());
      assertNull(comment1.getJsDoc());
      assertEquals("msg.jsdoc.consistidgen", comment1.getValue());
      assertEquals(0, comment1.depth());
      assertEquals(1, comment1.getPosition());
      assertEquals(1, comment1.getAbsolutePosition());
      assertFalse(comment1.hasChildren());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertEquals(0, node1.getLineno());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertTrue(node1.isString());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isLocalResultCall());
      assertEquals(2, node1.getLength());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isWhile());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isBlock());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isIn());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isCast());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isHook());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNew());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(comment1, comment0);
      assertNotSame(node1, node0);
      
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression(node1);
      assertFalse(linkedHashSet0.contains("e'"));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(jSTypeExpression0);
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertEquals((-1), comment1.getLineno());
      assertEquals("161", comment1.toString());
      assertEquals(0, comment1.getLength());
      assertEquals(161, comment1.getType());
      assertEquals(Token.CommentType.JSDOC, comment1.getCommentType());
      assertNull(comment1.getJsDoc());
      assertEquals("msg.jsdoc.consistidgen", comment1.getValue());
      assertEquals(0, comment1.depth());
      assertEquals(1, comment1.getPosition());
      assertEquals(1, comment1.getAbsolutePosition());
      assertFalse(comment1.hasChildren());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertEquals(0, node1.getLineno());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertTrue(node1.isString());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isLocalResultCall());
      assertEquals(2, node1.getLength());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isWhile());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isBlock());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isIn());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isCast());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isHook());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNew());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(comment1, comment0);
      assertNotSame(node1, node0);
      
      JSDocInfo jSDocInfo2 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertFalse(linkedHashSet0.contains("e'"));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(node1.equals((Object)node0));
      assertNull(jSDocInfo2);
      assertEquals((-1), comment1.getLineno());
      assertEquals("161", comment1.toString());
      assertEquals(0, comment1.getLength());
      assertEquals(161, comment1.getType());
      assertEquals(Token.CommentType.JSDOC, comment1.getCommentType());
      assertNull(comment1.getJsDoc());
      assertEquals("msg.jsdoc.consistidgen", comment1.getValue());
      assertEquals(0, comment1.depth());
      assertEquals(1, comment1.getPosition());
      assertEquals(1, comment1.getAbsolutePosition());
      assertFalse(comment1.hasChildren());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertEquals(0, node1.getLineno());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertTrue(node1.isString());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isLocalResultCall());
      assertEquals(2, node1.getLength());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isWhile());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isBlock());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isIn());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isCast());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isHook());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNew());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(comment1, comment0);
      assertNotSame(node1, node0);
      
      JsDocToken jsDocToken1 = JsDocToken.QMARK;
      Node node3 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertFalse(linkedHashSet0.contains("e'"));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(jsDocToken1.equals((Object)jsDocToken0));
      assertFalse(node1.equals((Object)node0));
      assertNull(node3);
      assertEquals((-1), comment1.getLineno());
      assertEquals("161", comment1.toString());
      assertEquals(0, comment1.getLength());
      assertEquals(161, comment1.getType());
      assertEquals(Token.CommentType.JSDOC, comment1.getCommentType());
      assertNull(comment1.getJsDoc());
      assertEquals("msg.jsdoc.consistidgen", comment1.getValue());
      assertEquals(0, comment1.depth());
      assertEquals(1, comment1.getPosition());
      assertEquals(1, comment1.getAbsolutePosition());
      assertFalse(comment1.hasChildren());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertEquals(0, node1.getLineno());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertTrue(node1.isString());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isLocalResultCall());
      assertEquals(2, node1.getLength());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isWhile());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isBlock());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isIn());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isCast());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isHook());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNew());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(comment1, comment0);
      assertNotSame(jsDocToken1, jsDocToken0);
      assertNotSame(node1, node0);
      
      JSTypeExpression jSTypeExpression1 = jsDocInfoParser0.createJSTypeExpression(node0);
      assertFalse(linkedHashSet0.contains("e'"));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(node0.equals((Object)node1));
      assertFalse(jSTypeExpression1.equals((Object)jSTypeExpression0));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(jSTypeExpression1);
      assertEquals((-1), comment1.getLineno());
      assertEquals("161", comment1.toString());
      assertEquals(0, comment1.getLength());
      assertEquals(161, comment1.getType());
      assertEquals(Token.CommentType.JSDOC, comment1.getCommentType());
      assertNull(comment1.getJsDoc());
      assertEquals("msg.jsdoc.consistidgen", comment1.getValue());
      assertEquals(0, comment1.depth());
      assertEquals(1, comment1.getPosition());
      assertEquals(1, comment1.getAbsolutePosition());
      assertFalse(comment1.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.isString());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertEquals(22, node0.getLength());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(jSTypeExpression1.isOptionalArg());
      assertFalse(jSTypeExpression1.isVarArgs());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertEquals(0, node1.getLineno());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertTrue(node1.isString());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isLocalResultCall());
      assertEquals(2, node1.getLength());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isWhile());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isBlock());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isIn());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isCast());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isHook());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNew());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(comment1, comment0);
      assertNotSame(node0, node1);
      assertNotSame(jSTypeExpression1, jSTypeExpression0);
      assertNotSame(node1, node0);
      
      JSDocInfo jSDocInfo3 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertFalse(linkedHashSet0.contains("e'"));
      assertFalse(comment1.equals((Object)comment0));
      assertFalse(node1.equals((Object)node0));
      assertNull(jSDocInfo3);
      assertEquals((-1), comment1.getLineno());
      assertEquals("161", comment1.toString());
      assertEquals(0, comment1.getLength());
      assertEquals(161, comment1.getType());
      assertEquals(Token.CommentType.JSDOC, comment1.getCommentType());
      assertNull(comment1.getJsDoc());
      assertEquals("msg.jsdoc.consistidgen", comment1.getValue());
      assertEquals(0, comment1.depth());
      assertEquals(1, comment1.getPosition());
      assertEquals(1, comment1.getAbsolutePosition());
      assertFalse(comment1.hasChildren());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertEquals(0, node1.getLineno());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isNull());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isName());
      assertFalse(node1.isCall());
      assertTrue(node1.isString());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isLocalResultCall());
      assertEquals(2, node1.getLength());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isFor());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isWhile());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isBlock());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isIn());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isCast());
      assertFalse(node1.isInc());
      assertFalse(node1.isThrow());
      assertFalse(node1.isContinue());
      assertFalse(node1.isFunction());
      assertEquals(40, node1.getType());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isObjectLit());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isNot());
      assertFalse(node1.isHook());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetElem());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isThis());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isNew());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotSame(comment1, comment0);
      assertNotSame(node1, node0);
      
      Node node4 = JsDocInfoParser.parseTypeString("msg.bad.esc.mask");
      assertFalse(node4.equals((Object)node0));
      assertFalse(node4.equals((Object)node1));
      assertNotNull(node4);
      assertFalse(node4.isInc());
      assertFalse(node4.isFalse());
      assertFalse(node4.isComma());
      assertFalse(node4.isThis());
      assertFalse(node4.isThrow());
      assertFalse(node4.isNoSideEffectsCall());
      assertFalse(node4.isHook());
      assertFalse(node4.isInstanceOf());
      assertFalse(node4.isIn());
      assertFalse(node4.isBreak());
      assertFalse(node4.isEmpty());
      assertFalse(node4.isDelProp());
      assertFalse(node4.isIf());
      assertEquals(0, node4.getCharno());
      assertFalse(node4.isNE());
      assertFalse(node4.isTry());
      assertFalse(node4.isScript());
      assertFalse(node4.hasOneChild());
      assertFalse(node4.isArrayLit());
      assertEquals((-1), node4.getSourceOffset());
      assertFalse(node4.isWith());
      assertFalse(node4.isFor());
      assertFalse(node4.isOptionalArg());
      assertFalse(node4.isDefaultCase());
      assertTrue(node4.mayMutateArguments());
      assertFalse(node4.isRegExp());
      assertFalse(node4.isLabel());
      assertFalse(node4.isOnlyModifiesThisCall());
      assertEquals(0, node4.getChildCount());
      assertEquals(16, node4.getLength());
      assertFalse(node4.isCase());
      assertFalse(node4.isGetterDef());
      assertFalse(node4.isLabelName());
      assertFalse(node4.isNumber());
      assertFalse(node4.isStringKey());
      assertFalse(node4.isSwitch());
      assertFalse(node4.isParamList());
      assertFalse(node4.isAdd());
      assertTrue(node4.isString());
      assertFalse(node4.isCall());
      assertFalse(node4.isNew());
      assertFalse(node4.isQuotedString());
      assertFalse(node4.isWhile());
      assertFalse(node4.isDo());
      assertEquals(0, node4.getChangeTime());
      assertFalse(node4.isContinue());
      assertTrue(node4.mayMutateGlobalStateOrThrow());
      assertFalse(node4.isVarArgs());
      assertFalse(node4.hasMoreThanOneChild());
      assertFalse(node4.isVar());
      assertFalse(node4.isBlock());
      assertFalse(node4.wasEmptyNode());
      assertEquals(0, node4.getSideEffectFlags());
      assertFalse(node4.isOr());
      assertFalse(node4.isOnlyModifiesArgumentsCall());
      assertFalse(node4.isAssignAdd());
      assertFalse(node4.isSetterDef());
      assertFalse(node4.isCatch());
      assertFalse(node4.isName());
      assertFalse(node4.isTrue());
      assertFalse(node4.isNull());
      assertEquals(0, node4.getSourcePosition());
      assertFalse(node4.isExprResult());
      assertFalse(node4.isVoid());
      assertFalse(node4.isCast());
      assertFalse(node4.isGetElem());
      assertFalse(node4.isLocalResultCall());
      assertFalse(node4.isAssign());
      assertFalse(node4.isTypeOf());
      assertFalse(node4.isFunction());
      assertEquals(40, node4.getType());
      assertFalse(node4.isDec());
      assertFalse(node4.hasChildren());
      assertFalse(node4.isReturn());
      assertFalse(node4.isSyntheticBlock());
      assertFalse(node4.isFromExterns());
      assertEquals(0, node4.getLineno());
      assertFalse(node4.isGetProp());
      assertFalse(node4.isNot());
      assertFalse(node4.isAnd());
      assertFalse(node4.isObjectLit());
      assertFalse(node4.isDebugger());
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertNotSame(node4, node0);
      assertNotSame(node4, node1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("", 55, (-2137));
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(55, 0, token_CommentType0, "");
      comment0.getJsDocNode();
      Node node0 = Node.newString((-2557), "com.google.javascript.rhino.head.ast.XmlString", 18, 1);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getModifies();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      jSDocInfo0.setLicense("");
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      EvaluatorException evaluatorException0 = new EvaluatorException("6U aua)|LY6qhmlL7)I", "msg.jsdoc.type.syntax", 432);
      toolErrorReporter0.reportException((RhinoException) evaluatorException0);
      JsDocInfoParser.parseTypeString("");
      jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      jsDocInfoParser0.setFileOverviewJSDocInfo((JSDocInfo) null);
      JsDocToken jsDocToken0 = JsDocToken.LP;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.createJSTypeExpression((Node) null);
      jsDocInfoParser0.getFileOverviewJSDocInfo();
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression((Node) null);
      assertNull(jSTypeExpression0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsdoc.consistidgen");
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment((-966), (-966), token_CommentType0, "msg.jsdoc.consistidgen");
      comment0.getJsDocNode();
      Node node0 = JsDocInfoParser.parseTypeString("msg.jsdoc.consistidgen");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, (ErrorReporter) null);
      jsDocInfoParser0.hasParsedJSDocInfo();
      assertEquals(0, node0.getSourcePosition());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JsDocInfoParser.parseTypeString("function");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("function", 0, (-146800249));
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getModifies();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, errorCollector0);
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertNull(jSDocInfo1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("funcxion ");
      assertNotNull(node0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("funcxion ", 43, 30);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
      JsDocInfoParser.parseTypeString("funcxion ");
      jsDocInfoParser0.hasParsedJSDocInfo();
      assertEquals(0, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Z");
      Node node0 = Node.newString("Z");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression(node0);
      assertFalse(jSTypeExpression0.isOptionalArg());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("push");
      assertNotNull(node0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("push", 38);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.EOC;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("{");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("transient");
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("transient", 52);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertTrue(node0.isString());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("tAgV#/O_|,1");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("com.google.javascript.rhino.head.ast.XmlFragment");
      assertNotNull(node0);
      assertEquals(0, node0.getSourcePosition());
      assertEquals(40, node0.getType());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("s$PQSq?]M8eOG/j", (-2178));
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment((-2178), 2434, token_CommentType0, "Fz.b.!2f");
      Node node0 = Node.newString("");
      Node node1 = new Node(15, node0, node0, node0, node0);
      HashSet<String> hashSet0 = new HashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
      com.google.javascript.rhino.head.Node.newString("4_5!k@Ty+L*(OO*");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("setSeconds");
      Node.newString(4095, "Fz.b.!2f");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false, mockPrintStream0);
      com.google.javascript.rhino.head.Node.newString(102, "4_5!k@Ty+L*(OO*");
      Node.newString("tt");
      mockFileOutputStream0.getChannel();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node1, config0, toolErrorReporter0);
      jsDocInfoParser0.createJSTypeExpression(node1);
      jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      jsDocInfoParser0.setFileOverviewJSDocInfo((JSDocInfo) null);
      jsDocInfoParser0.createJSTypeExpression(node0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
      JsDocToken jsDocToken0 = JsDocToken.COMMA;
      Node node2 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node2);
  }
}
