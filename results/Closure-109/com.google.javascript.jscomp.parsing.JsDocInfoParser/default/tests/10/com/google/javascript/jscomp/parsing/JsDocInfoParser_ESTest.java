/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 00:47:45 GMT 2020
 */

package com.google.javascript.jscomp.parsing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.common.collect.ImmutableList;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocToken;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Node;
import com.google.javascript.rhino.head.Token;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import java.nio.charset.Charset;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsDocInfoParser_ESTest extends JsDocInfoParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(1642, 1642, token_CommentType0, "E");
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals("E", comment0.getValue());
      assertEquals(1642, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(1642, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(1642, comment0.getLength());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertNotNull(comment0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertNotNull(jSDocInfo0);
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertFalse(set0.contains("E"));
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertFalse(set0.contains("E"));
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Z( ");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, errorCollector0);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertFalse(set0.contains("Z( "));
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals("E", comment0.getValue());
      assertEquals(1642, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(1642, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(1642, comment0.getLength());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("$gcTSPq\"~y9Tc.%5|y6");
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertEquals(301, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals(17, node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isComma());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFromExterns());
      assertEquals(17, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertNotNull(node0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("$gcTSPq\"~y9Tc.%5|y6"));
      assertNotNull(treeSet0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("$gcTSPq\"~y9Tc.%5|y6", 1);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(4095, 56, token_CommentType0, "$gcTSPq\"~y9Tc.%5|y6");
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals("$gcTSPq\"~y9Tc.%5|y6", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(56, comment0.getLength());
      assertEquals(4095, comment0.getPosition());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(4095, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertNotNull(comment0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertFalse(treeSet0.contains("$gcTSPq\"~y9Tc.%5|y6"));
      assertNotNull(config0);
      
      Context context0 = Context.enter();
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertNotNull(errorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertFalse(treeSet0.contains("$gcTSPq\"~y9Tc.%5|y6"));
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertEquals(301, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals(17, node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isComma());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFromExterns());
      assertEquals(17, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals("$gcTSPq\"~y9Tc.%5|y6", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(56, comment0.getLength());
      assertEquals(4095, comment0.getPosition());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(4095, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertFalse(treeSet0.contains("$gcTSPq\"~y9Tc.%5|y6"));
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertEquals(301, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals(17, node0.getSourcePosition());
      assertFalse(node0.isString());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isComma());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFromExterns());
      assertEquals(17, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isFalse());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals("$gcTSPq\"~y9Tc.%5|y6", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(56, comment0.getLength());
      assertEquals(4095, comment0.getPosition());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(4095, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Context context0 = Context.enter();
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(errorReporter0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNoCompile());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNotNull(jSDocInfo0);
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNoCompile());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNoCompile());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("x");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, errorReporter0);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(set0.contains("x"));
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNoCompile());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(jsDocInfoParser0);
      
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression((com.google.javascript.rhino.Node) null);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(set0.contains("x"));
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNoCompile());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNull(jSTypeExpression0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("$gcTSPq\"~y9Tc.%5|y6");
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertEquals(17, node0.getCharno());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(301, node0.getType());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertEquals(17, node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertNotNull(node0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("$gcTSPq\"~y9Tc.%5|y6"));
      assertNotNull(treeSet0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("$gcTSPq\"~y9Tc.%5|y6");
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      assertFalse(treeSet0.contains("$gcTSPq\"~y9Tc.%5|y6"));
      assertNotNull(config0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertFalse(treeSet0.contains("$gcTSPq\"~y9Tc.%5|y6"));
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertEquals(17, node0.getCharno());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(301, node0.getType());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertEquals(17, node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertNotNull(jsDocInfoParser0);
      
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression(node0);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertFalse(treeSet0.contains("$gcTSPq\"~y9Tc.%5|y6"));
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertEquals(17, node0.getCharno());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(301, node0.getType());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertEquals(17, node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertNotNull(jSTypeExpression0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsDocInfoParser.parseTypeString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(174, 174, token_CommentType0, "?");
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(174, comment0.getLength());
      assertEquals("?", comment0.getValue());
      assertEquals(174, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(174, comment0.getPosition());
      assertNotNull(comment0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNotNull(jSDocInfo0);
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertFalse(set0.contains("?"));
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertFalse(set0.contains("?"));
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("?", 9, 14);
      assertNotNull(jsDocTokenStream0);
      
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString("?", 1, 0);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCast());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertNotNull(node0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(set0.contains("?"));
      assertEquals(174, comment0.getLength());
      assertEquals("?", comment0.getValue());
      assertEquals(174, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(174, comment0.getPosition());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCast());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertEquals(4096, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertEquals(1, node0.getLineno());
      assertFalse(node0.isGetElem());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Context context0 = Context.enter();
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertNotNull(errorReporter0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertNotNull(jSDocInfo0);
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("x");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, errorReporter0);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(170, Context.VERSION_1_7);
      assertFalse(context0.generateObserverCount);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertFalse(set0.contains("x"));
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(jsDocInfoParser0);
      
      jsDocTokenStream0.sourceCursor = 130;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(");\n");
      assertNotNull(jsDocTokenStream0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains(");\n"));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
      assertFalse(hashSet0.contains(");\n"));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(config0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, (ErrorReporter) null);
      assertFalse(hashSet0.contains(");\n"));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.ANNOTATION;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("msg.sdoc.disposeparameter.mising");
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTrue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertEquals(32, node0.getLength());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertNotNull(node0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains("msg.sdoc.disposeparameter.mising"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
      assertFalse(hashSet0.contains("msg.sdoc.disposeparameter.mising"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(config0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("[");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(1, 48, token_CommentType0, "gsg.jsdoc.preservertry");
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals("gsg.jsdoc.preservertry", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals(1, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals(48, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertNotNull(comment0);
      
      jsDocTokenStream0.sourceCursor = 4;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertFalse(hashSet0.contains("["));
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTrue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertEquals(32, node0.getLength());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals("gsg.jsdoc.preservertry", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals(1, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals(48, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString("msg.jsdoc.missing.rc", 793, 793);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertEquals(793, node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDec());
      assertFalse(node0.isNew());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(793, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertEquals(3248921, node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertNotNull(node0);
      
      Locale locale0 = Locale.KOREA;
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertFalse(set0.contains("msg.jsdoc.missing.rc"));
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertFalse(set0.contains("msg.jsdoc.missing.rc"));
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser((JsDocTokenStream) null, (Comment) null, node0, config0, errorCollector0);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(set0.contains("msg.jsdoc.missing.rc"));
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertEquals(793, node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDec());
      assertFalse(node0.isNew());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDo());
      assertTrue(node0.isString());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(793, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertEquals(3248921, node0.getSourcePosition());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("util");
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertTrue(node0.mayMutateArguments());
      assertTrue(node0.isString());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertNotNull(node0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(38, 54, token_CommentType0, "util");
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals("util", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(38, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(54, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals(38, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertNotNull(comment0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = null;
      try {
        jsDocInfoParser0 = new JsDocInfoParser((JsDocTokenStream) null, comment0, node0, (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("?");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("{");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("{%#E3");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("[N\"+V]W9");
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertEquals(308, node0.getType());
      assertFalse(node0.isOr());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssign());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptionalArg());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertEquals(1, node0.getSourcePosition());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("[2dxJ9<'-WvO>VH");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("(/+pI)V");
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertEquals(301, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("W|)GR4a{d+<Nw=3`}");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Context context0 = Context.enter();
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(errorReporter0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNotNull(jSDocInfo0);
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(config0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(");\n");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      int int0 = jsDocTokenStream0.getChar();
      assertEquals(41, int0);
      
      Comment comment0 = new Comment(36, (-2073597771), token_CommentType0, "uF\"p$");
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(161, comment0.getType());
      assertEquals(36, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(36, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals((-2073597771), comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals("uF\"p$", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertNotNull(comment0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, errorReporter0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertFalse(set0.contains(");\n"));
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(161, comment0.getType());
      assertEquals(36, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(36, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals((-2073597771), comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals("uF\"p$", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotSame(jSDocInfo0, jSDocInfo1);
      assertNotSame(jSDocInfo1, jSDocInfo0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertFalse(set0.contains(");\n"));
      assertFalse(jSDocInfo1.equals((Object)jSDocInfo0));
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(161, comment0.getType());
      assertEquals(36, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(36, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals((-2073597771), comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals("uF\"p$", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertFalse(jSDocInfo1.isConstant());
      assertNull(jSDocInfo1.getFileOverview());
      assertEquals("uF\"p$", jSDocInfo1.getOriginalCommentString());
      assertFalse(jSDocInfo1.hasThisType());
      assertNull(jSDocInfo1.getMeaning());
      assertFalse(jSDocInfo1.hasModifies());
      assertFalse(jSDocInfo1.isConstructor());
      assertFalse(jSDocInfo1.isNoTypeCheck());
      assertFalse(jSDocInfo1.hasTypedefType());
      assertTrue(jSDocInfo1.hasType());
      assertFalse(jSDocInfo1.hasEnumParameterType());
      assertFalse(jSDocInfo1.makesStructs());
      assertNull(jSDocInfo1.getDescription());
      assertFalse(jSDocInfo1.isExterns());
      assertFalse(jSDocInfo1.isNoShadow());
      assertFalse(jSDocInfo1.isExpose());
      assertEquals(36, jSDocInfo1.getOriginalCommentPosition());
      assertFalse(jSDocInfo1.isNoAlias());
      assertFalse(jSDocInfo1.hasReturnType());
      assertFalse(jSDocInfo1.isHidden());
      assertEquals(0, jSDocInfo1.getExtendedInterfacesCount());
      assertFalse(jSDocInfo1.makesDicts());
      assertFalse(jSDocInfo1.isDeprecated());
      assertEquals("JSDocInfo", jSDocInfo1.toString());
      assertFalse(jSDocInfo1.isMappedIdGenerator());
      assertNull(jSDocInfo1.getLendsName());
      assertFalse(jSDocInfo1.isNgInject());
      assertEquals(0, jSDocInfo1.getImplementedInterfaceCount());
      assertFalse(jSDocInfo1.isNoSideEffects());
      assertFalse(jSDocInfo1.isConsistentIdGenerator());
      assertNull(jSDocInfo1.getLicense());
      assertFalse(jSDocInfo1.isNoCompile());
      assertFalse(jSDocInfo1.shouldPreserveTry());
      assertFalse(jSDocInfo1.isDefine());
      assertFalse(jSDocInfo1.isDisposes());
      assertFalse(jSDocInfo1.isStableIdGenerator());
      assertFalse(jSDocInfo1.isJaggerProvide());
      assertNull(jSDocInfo1.getReturnDescription());
      assertFalse(jSDocInfo1.hasBaseType());
      assertEquals(0, jSDocInfo1.getParameterCount());
      assertNull(jSDocInfo1.getDeprecationReason());
      assertFalse(jSDocInfo1.hasFileOverview());
      assertNull(jSDocInfo1.getBlockDescription());
      assertFalse(jSDocInfo1.isInterface());
      assertFalse(jSDocInfo1.isIdGenerator());
      assertFalse(jSDocInfo1.isImplicitCast());
      assertNull(jSDocInfo1.getVersion());
      assertFalse(jSDocInfo1.isJaggerModule());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo1.getVisibility());
      assertFalse(jSDocInfo1.isJaggerInject());
      assertFalse(jSDocInfo1.isJavaDispatch());
      assertFalse(jSDocInfo1.isOverride());
      assertFalse(jSDocInfo1.isExport());
      assertFalse(jSDocInfo1.isWizaction());
      assertTrue(jSDocInfo1.containsDeclaration());
      assertNotNull(jSDocInfo1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertNotSame(jSDocInfo0, jSDocInfo1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertFalse(set0.contains(");\n"));
      assertFalse(jSDocInfo0.equals((Object)jSDocInfo1));
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(161, comment0.getType());
      assertEquals(36, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(36, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals((-2073597771), comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals("uF\"p$", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("null");
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCast());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("*_it7LZH");
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDec());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isString());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertTrue(node0.mayMutateArguments());
      assertEquals(302, node0.getType());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString("function");
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isNot());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertEquals(40, node0.getType());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(">", (-5606));
      assertNotNull(jsDocTokenStream0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains("function"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
      assertFalse(hashSet0.contains("function"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(config0);
      
      Context context0 = Context.enter();
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(errorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorReporter0);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertFalse(hashSet0.contains("function"));
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isNot());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertEquals(40, node0.getType());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(context0.generateObserverCount);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertFalse(hashSet0.contains("function"));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isNot());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertEquals(40, node0.getType());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isWith());
      assertFalse(node1.isThrow());
      assertFalse(node1.isThis());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isScript());
      assertFalse(node1.isString());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isIn());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isCase());
      assertFalse(node1.isFor());
      assertFalse(node1.isContinue());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isBlock());
      assertFalse(node1.wasEmptyNode());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSetterDef());
      assertEquals(304, node1.getType());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getChangeTime());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isArrayLit());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isTry());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.isDebugger());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isWhile());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isDec());
      assertFalse(node1.isAdd());
      assertFalse(node1.isVar());
      assertFalse(node1.isVoid());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isNew());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isNull());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("2dxY9'-WvOVH");
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWith());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertEquals(12, node0.getLength());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertNotNull(node0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("2dxY9'-WvOVH"));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      assertFalse(treeSet0.contains("2dxY9'-WvOVH"));
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("X|}1\"Z[IY^W8jT", 31, 3913);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment((-1970011312), 11, token_CommentType0, "X|}1\"Z[IY^W8jT");
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals("X|}1\"Z[IY^W8jT", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals((-1970011312), comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals((-1970011312), comment0.getAbsolutePosition());
      assertEquals(11, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertNotNull(comment0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertFalse(treeSet0.contains("X|}1\"Z[IY^W8jT"));
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWith());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertEquals(12, node0.getLength());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertEquals("X|}1\"Z[IY^W8jT", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals((-1970011312), comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals((-1970011312), comment0.getAbsolutePosition());
      assertEquals(11, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertFalse(treeSet0.contains("X|}1\"Z[IY^W8jT"));
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWith());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertEquals(12, node0.getLength());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertEquals("X|}1\"Z[IY^W8jT", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals((-1970011312), comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals((-1970011312), comment0.getAbsolutePosition());
      assertEquals(11, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasBaseType());
      assertTrue(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertTrue(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasThisType());
      assertNotNull(jSDocInfo0);
      
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertFalse(treeSet0.contains("X|}1\"Z[IY^W8jT"));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isWith());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertEquals(12, node0.getLength());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertEquals("X|}1\"Z[IY^W8jT", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals((-1970011312), comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals((-1970011312), comment0.getAbsolutePosition());
      assertEquals(11, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isDo());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isBlock());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isAssignAdd());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isWhile());
      assertFalse(node1.isReturn());
      assertFalse(node1.isVar());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNumber());
      assertFalse(node1.isCast());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isRegExp());
      assertEquals(3914, node1.getCharno());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals(304, node1.getType());
      assertFalse(node1.isFunction());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isTry());
      assertFalse(node1.isThis());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isFor());
      assertFalse(node1.isSetterDef());
      assertEquals(130890, node1.getSourcePosition());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertFalse(node1.isCase());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isString());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isFalse());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isArrayLit());
      assertEquals(31, node1.getLineno());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAnd());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isCall());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVoid());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isNgInject());
      assertNotNull(jSDocInfo0);
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isNgInject());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isNgInject());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(");\n");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, errorCollector0);
      assertFalse(set0.contains(");\n"));
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isNgInject());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertFalse(set0.contains(");\n"));
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isNgInject());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCast());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNot());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(304, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("?}PBG.HQP1b(,F=");
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isTry());
      assertFalse(node0.isOr());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertEquals(304, node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isReturn());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isIf());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isNE());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(".<", 53, 5);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(30, 52, token_CommentType0, ".<");
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(52, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals(30, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(".<", comment0.getValue());
      assertEquals(30, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertNotNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(".<"));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      assertFalse(treeSet0.contains(".<"));
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertFalse(treeSet0.contains(".<"));
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(52, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals(30, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(".<", comment0.getValue());
      assertEquals(30, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.STRING;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertFalse(treeSet0.contains(".<"));
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(52, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals(30, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(".<", comment0.getValue());
      assertEquals(30, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertEquals(217092, node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDo());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertEquals(53, node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(4, node0.getCharno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("arguments");
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(9, node0.getLength());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertTrue(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("|f }_#dFtqIEl%V-s.", 2980, 51);
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      ImmutableList<String> immutableList0 = ImmutableList.of("com.google.javascript.jscomp.parsing.JsDocInfoParser$ExtractionInfo", "XG/3/Z[EVp<KPlD", "|f }_#dFtqIEl%V-s.", "|f }_#dFtqIEl%V-s.", "com.google.javascript.jscomp.parsing.JsDocInfoParser$ExtractionInfo", ">", "com.google.javascript.jscomp.parsing.JsDocInfoParser$ExtractionInfo", "|f }_#dFtqIEl%V-s.", "l`^j", "l`^j");
      assertFalse(immutableList0.contains("arguments"));
      assertTrue(immutableList0.contains("XG/3/Z[EVp<KPlD"));
      assertEquals(10, immutableList0.size());
      assertNotNull(immutableList0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(immutableList0);
      assertFalse(immutableList0.contains("arguments"));
      assertTrue(immutableList0.contains("XG/3/Z[EVp<KPlD"));
      assertTrue(linkedHashSet0.contains("XG/3/Z[EVp<KPlD"));
      assertFalse(linkedHashSet0.contains("arguments"));
      assertEquals(10, immutableList0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(5, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(immutableList0.contains("arguments"));
      assertTrue(immutableList0.contains("XG/3/Z[EVp<KPlD"));
      assertTrue(linkedHashSet0.contains("XG/3/Z[EVp<KPlD"));
      assertFalse(linkedHashSet0.contains("arguments"));
      assertEquals(10, immutableList0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(5, linkedHashSet0.size());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertFalse(immutableList0.contains("arguments"));
      assertTrue(immutableList0.contains("XG/3/Z[EVp<KPlD"));
      assertTrue(linkedHashSet0.contains("XG/3/Z[EVp<KPlD"));
      assertFalse(linkedHashSet0.contains("arguments"));
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(9, node0.getLength());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertTrue(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals(10, immutableList0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(5, linkedHashSet0.size());
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertFalse(immutableList0.contains("arguments"));
      assertTrue(immutableList0.contains("XG/3/Z[EVp<KPlD"));
      assertTrue(linkedHashSet0.contains("XG/3/Z[EVp<KPlD"));
      assertFalse(linkedHashSet0.contains("arguments"));
      assertFalse(node1.equals((Object)node0));
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(9, node0.getLength());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertTrue(node0.isString());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals(10, immutableList0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(5, linkedHashSet0.size());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isCast());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isScript());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isParamList());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isHook());
      assertEquals(53, node1.getCharno());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isTry());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isThis());
      assertFalse(node1.isRegExp());
      assertEquals(2980, node1.getLineno());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isBlock());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isIn());
      assertTrue(node1.hasChildren());
      assertEquals(301, node1.getType());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isCase());
      assertFalse(node1.isNE());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isInc());
      assertFalse(node1.isIf());
      assertFalse(node1.isString());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isThrow());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDefaultCase());
      assertEquals(2, node1.getChildCount());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCall());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isName());
      assertFalse(node1.isVoid());
      assertFalse(node1.isBreak());
      assertFalse(node1.isQuotedString());
      assertEquals(12206133, node1.getSourcePosition());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isExprResult());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isWhile());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isDec());
      assertFalse(node1.isComma());
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString("^2QIs!+j/A@\"V(9%Xp");
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isIn());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertNotNull(node0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("^2QIs!+j/A@\"V(9%Xp", 48);
      assertNotNull(jsDocTokenStream0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("^2QIs!+j/A@\"V(9%Xp"));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      assertFalse(treeSet0.contains("^2QIs!+j/A@\"V(9%Xp"));
      assertNotNull(config0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertFalse(treeSet0.contains("^2QIs!+j/A@\"V(9%Xp"));
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isThis());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertEquals(40, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isIn());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Context context0 = Context.enter();
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertNotNull(errorReporter0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertNotNull(jSDocInfo0);
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(config0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("each ");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, errorReporter0);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(set0.contains("each "));
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(100, Context.VERSION_1_0);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(set0.contains("each "));
      assertEquals(0, context0.getOptimizationLevel());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getVersion());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(1642, 1642, token_CommentType0, "E");
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(1642, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals(1642, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(1642, comment0.getAbsolutePosition());
      assertEquals("E", comment0.getValue());
      assertNotNull(comment0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNotNull(jSDocInfo0);
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertFalse(set0.contains("E"));
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertFalse(set0.contains("E"));
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("X54WJWxaPqt*6<krFeC2", 9, 14);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, errorCollector0);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertFalse(set0.contains("X54WJWxaPqt*6<krFeC2"));
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(1642, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals(1642, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(1642, comment0.getAbsolutePosition());
      assertEquals("E", comment0.getValue());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotSame(jSDocInfo0, jSDocInfo1);
      assertNotSame(jSDocInfo1, jSDocInfo0);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertFalse(set0.contains("X54WJWxaPqt*6<krFeC2"));
      assertFalse(jSDocInfo1.equals((Object)jSDocInfo0));
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(1642, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals(1642, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(1642, comment0.getAbsolutePosition());
      assertEquals("E", comment0.getValue());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(jSDocInfo1.isNoAlias());
      assertFalse(jSDocInfo1.hasReturnType());
      assertEquals("E", jSDocInfo1.getOriginalCommentString());
      assertFalse(jSDocInfo1.isExport());
      assertFalse(jSDocInfo1.isConstructor());
      assertNull(jSDocInfo1.getReturnDescription());
      assertTrue(jSDocInfo1.hasType());
      assertFalse(jSDocInfo1.isNoTypeCheck());
      assertFalse(jSDocInfo1.hasTypedefType());
      assertFalse(jSDocInfo1.shouldPreserveTry());
      assertFalse(jSDocInfo1.isDefine());
      assertFalse(jSDocInfo1.hasEnumParameterType());
      assertFalse(jSDocInfo1.isConsistentIdGenerator());
      assertEquals(0, jSDocInfo1.getParameterCount());
      assertNull(jSDocInfo1.getLicense());
      assertFalse(jSDocInfo1.isStableIdGenerator());
      assertNull(jSDocInfo1.getDescription());
      assertFalse(jSDocInfo1.hasBaseType());
      assertNull(jSDocInfo1.getFileOverview());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo1.getVisibility());
      assertFalse(jSDocInfo1.hasThisType());
      assertFalse(jSDocInfo1.isConstant());
      assertFalse(jSDocInfo1.isWizaction());
      assertNull(jSDocInfo1.getVersion());
      assertNull(jSDocInfo1.getBlockDescription());
      assertFalse(jSDocInfo1.isJavaDispatch());
      assertFalse(jSDocInfo1.isOverride());
      assertFalse(jSDocInfo1.hasFileOverview());
      assertFalse(jSDocInfo1.isJaggerInject());
      assertTrue(jSDocInfo1.containsDeclaration());
      assertFalse(jSDocInfo1.isImplicitCast());
      assertNull(jSDocInfo1.getDeprecationReason());
      assertFalse(jSDocInfo1.isNoCompile());
      assertFalse(jSDocInfo1.isJaggerModule());
      assertFalse(jSDocInfo1.isInterface());
      assertFalse(jSDocInfo1.isExterns());
      assertFalse(jSDocInfo1.isHidden());
      assertFalse(jSDocInfo1.isIdGenerator());
      assertFalse(jSDocInfo1.makesStructs());
      assertFalse(jSDocInfo1.isJaggerProvide());
      assertNull(jSDocInfo1.getMeaning());
      assertFalse(jSDocInfo1.isDisposes());
      assertFalse(jSDocInfo1.hasModifies());
      assertFalse(jSDocInfo1.isNoSideEffects());
      assertFalse(jSDocInfo1.isNgInject());
      assertEquals(1642, jSDocInfo1.getOriginalCommentPosition());
      assertEquals(0, jSDocInfo1.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo1.toString());
      assertFalse(jSDocInfo1.isExpose());
      assertFalse(jSDocInfo1.makesDicts());
      assertFalse(jSDocInfo1.isNoShadow());
      assertNull(jSDocInfo1.getLendsName());
      assertFalse(jSDocInfo1.isDeprecated());
      assertFalse(jSDocInfo1.isMappedIdGenerator());
      assertEquals(0, jSDocInfo1.getImplementedInterfaceCount());
      assertNotNull(jSDocInfo1);
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Context context0 = Context.enter();
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertNotNull(errorReporter0);
      
      com.google.javascript.rhino.Node node0 = new com.google.javascript.rhino.Node(3, 8, (-1));
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(3, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("(I)V");
      assertNotNull(jsDocTokenStream0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("(I)V"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("(I)V"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorReporter0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertFalse(linkedHashSet0.contains("(I)V"));
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(3, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.EOC;
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertFalse(linkedHashSet0.contains("(I)V"));
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(3, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNull(node1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertFalse(linkedHashSet0.contains("(I)V"));
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertTrue(context0.isGeneratingSource());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabel());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(3, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("2dxY9'-WvOVH");
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertEquals(12, node0.getLength());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("n5B/M#lg?@0]n");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(36, 5, token_CommentType0, "X|}1\"Z[IY^W8jT");
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(0, comment0.depth());
      assertEquals("X|}1\"Z[IY^W8jT", comment0.getValue());
      assertEquals(36, comment0.getAbsolutePosition());
      assertEquals(5, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(36, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertNotNull(comment0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      Set<String> set0 = charset0.aliases();
      assertFalse(set0.contains("X|}1\"Z[IY^W8jT"));
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      assertFalse(set0.contains("X|}1\"Z[IY^W8jT"));
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertFalse(set0.contains("X|}1\"Z[IY^W8jT"));
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertEquals(12, node0.getLength());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertEquals(0, comment0.depth());
      assertEquals("X|}1\"Z[IY^W8jT", comment0.getValue());
      assertEquals(36, comment0.getAbsolutePosition());
      assertEquals(5, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(36, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertFalse(set0.contains("X|}1\"Z[IY^W8jT"));
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertEquals(12, node0.getLength());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertEquals(0, comment0.depth());
      assertEquals("X|}1\"Z[IY^W8jT", comment0.getValue());
      assertEquals(36, comment0.getAbsolutePosition());
      assertEquals(5, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(36, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasModifies());
      assertEquals("X|}1\"Z[IY^W8jT", jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isConstructor());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getFileOverview());
      assertTrue(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isWizaction());
      assertTrue(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(36, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNgInject());
      assertNotNull(jSDocInfo0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertFalse(set0.contains("X|}1\"Z[IY^W8jT"));
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertEquals(12, node0.getLength());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isInc());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertEquals(0, comment0.depth());
      assertEquals("X|}1\"Z[IY^W8jT", comment0.getValue());
      assertEquals(36, comment0.getAbsolutePosition());
      assertEquals(5, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(36, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Context context0 = new Context();
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertNotNull(errorReporter0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNotNull(jSDocInfo0);
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsdoc.define");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, errorReporter0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(set0.contains("msg.jsdoc.define"));
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.ELLIPSIS;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(set0.contains("msg.jsdoc.define"));
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNull(node0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertFalse(set0.contains("msg.jsdoc.define"));
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("2dxY9'-WvOVH");
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateArguments());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertEquals(12, node0.getLength());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertNotNull(node0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("2dxY9'-WvOVH"));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertFalse(treeSet0.contains("2dxY9'-WvOVH"));
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("X|}1\"Z[IY^W8jT");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment((-1182190518), 46, token_CommentType0, "X|}1\"Z[IY^W8jT");
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals("X|}1\"Z[IY^W8jT", comment0.getValue());
      assertEquals(46, comment0.getLength());
      assertEquals((-1182190518), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals((-1182190518), comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertNotNull(comment0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertFalse(treeSet0.contains("2dxY9'-WvOVH"));
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateArguments());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertEquals(12, node0.getLength());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals("X|}1\"Z[IY^W8jT", comment0.getValue());
      assertEquals(46, comment0.getLength());
      assertEquals((-1182190518), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals((-1182190518), comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertNotNull(jsDocInfoParser0);
      
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertFalse(treeSet0.contains("2dxY9'-WvOVH"));
      assertFalse(jsDocInfoParser1.equals((Object)jsDocInfoParser0));
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateArguments());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertEquals(12, node0.getLength());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals("X|}1\"Z[IY^W8jT", comment0.getValue());
      assertEquals(46, comment0.getLength());
      assertEquals((-1182190518), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals((-1182190518), comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertNotNull(jsDocInfoParser1);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser1.parseInlineTypeDoc();
      assertNotSame(jsDocInfoParser1, jsDocInfoParser0);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertFalse(treeSet0.contains("2dxY9'-WvOVH"));
      assertFalse(jsDocInfoParser1.equals((Object)jsDocInfoParser0));
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateArguments());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertEquals(12, node0.getLength());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIf());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals("X|}1\"Z[IY^W8jT", comment0.getValue());
      assertEquals(46, comment0.getLength());
      assertEquals((-1182190518), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals((-1182190518), comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasModifies());
      assertEquals("X|}1\"Z[IY^W8jT", jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.makesStructs());
      assertTrue(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals((-1182190518), jSDocInfo0.getOriginalCommentPosition());
      assertTrue(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNotNull(jSDocInfo0);
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Context context0 = Context.enter();
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertNotNull(errorReporter0);
      
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("Function argument was not created by interpreted mode ");
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.wasEmptyNode());
      assertEquals(8, node0.getLength());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertNotNull(node0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains("Function argument was not created by interpreted mode "));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, false);
      assertFalse(hashSet0.contains("Function argument was not created by interpreted mode "));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(config0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("error reporter");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorReporter0);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertFalse(hashSet0.contains("Function argument was not created by interpreted mode "));
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.wasEmptyNode());
      assertEquals(8, node0.getLength());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.RB;
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertFalse(hashSet0.contains("Function argument was not created by interpreted mode "));
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.wasEmptyNode());
      assertEquals(8, node0.getLength());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNull(node1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertFalse(hashSet0.contains("Function argument was not created by interpreted mode "));
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isVar());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isCast());
      assertFalse(node0.wasEmptyNode());
      assertEquals(8, node0.getLength());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("$gcTSPq\"~y9Tc.%5|y6");
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(17, node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertEquals(301, node0.getType());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertTrue(node0.mayMutateArguments());
      assertEquals(17, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertNotNull(node0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("$gcTSPq\"~y9Tc.%5|y6"));
      assertNotNull(treeSet0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("$gcTSPq\"~y9Tc.%5|y6", 30);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(57, 2, token_CommentType0, "$gcTSPq\"~y9Tc.%5|y6");
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(57, comment0.getPosition());
      assertEquals(57, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(2, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals("$gcTSPq\"~y9Tc.%5|y6", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertNotNull(comment0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertFalse(treeSet0.contains("$gcTSPq\"~y9Tc.%5|y6"));
      assertNotNull(config0);
      
      Context context0 = Context.enter();
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertNotNull(errorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(treeSet0.contains("$gcTSPq\"~y9Tc.%5|y6"));
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(17, node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertEquals(301, node0.getType());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertTrue(node0.mayMutateArguments());
      assertEquals(17, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertEquals(57, comment0.getPosition());
      assertEquals(57, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(2, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals("$gcTSPq\"~y9Tc.%5|y6", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(treeSet0.contains("$gcTSPq\"~y9Tc.%5|y6"));
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(17, node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertEquals(301, node0.getType());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertTrue(node0.mayMutateArguments());
      assertEquals(17, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertEquals(57, comment0.getPosition());
      assertEquals(57, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(2, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals("$gcTSPq\"~y9Tc.%5|y6", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertTrue(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertEquals("$gcTSPq\"~y9Tc.%5|y6", jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getDescription());
      assertTrue(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getLicense());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(57, jSDocInfo0.getOriginalCommentPosition());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasModifies());
      assertNotNull(jSDocInfo0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(treeSet0.contains("$gcTSPq\"~y9Tc.%5|y6"));
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(17, node0.getSourcePosition());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertEquals(301, node0.getType());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isComma());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertTrue(node0.mayMutateArguments());
      assertEquals(17, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertEquals(57, comment0.getPosition());
      assertEquals(57, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(2, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals("$gcTSPq\"~y9Tc.%5|y6", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("?9a~$BOgl");
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("?9a~$BOgl"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("?9a~$BOgl"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString(4, "msg.jsdoc.seemissing");
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isParamList());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertEquals(4, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertTrue(node0.isReturn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertNotNull(node0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertFalse(linkedHashSet0.contains("msg.jsdoc.seemissing"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isParamList());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertEquals(4, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertTrue(node0.isReturn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertFalse(linkedHashSet0.contains("msg.jsdoc.seemissing"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isParamList());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isAnd());
      assertFalse(node0.isTry());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertEquals(4, node0.getType());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertTrue(node0.isReturn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("/X");
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getLineno());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertTrue(node0.isString());
      assertEquals(0, node0.getCharno());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isIf());
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(".<", 53, 5);
      assertNotNull(jsDocTokenStream0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("/X"));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertFalse(treeSet0.contains("/X"));
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertFalse(treeSet0.contains("/X"));
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getLineno());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertTrue(node0.isString());
      assertEquals(0, node0.getCharno());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isIf());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertFalse(treeSet0.contains("/X"));
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getLineno());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertEquals(40, node0.getType());
      assertTrue(node0.isString());
      assertEquals(0, node0.getCharno());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isIf());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{%#E3");
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertFalse(treeSet0.contains("{%#E3"));
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertFalse(treeSet0.contains("{%#E3"));
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(treeSet0.contains("{%#E3"));
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("msg.sdoc.disposeparameter.mising");
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertEquals(32, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertNotNull(node0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains("msg.sdoc.disposeparameter.mising"));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
      assertFalse(hashSet0.contains("msg.sdoc.disposeparameter.mising"));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(config0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(">");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(1, 48, token_CommentType0, "gsg.jsdoc.preservertUy");
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertFalse(comment0.hasChildren());
      assertEquals(1, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals("gsg.jsdoc.preservertUy", comment0.getValue());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals(48, comment0.getLength());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertNotNull(comment0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertFalse(hashSet0.contains("gsg.jsdoc.preservertUy"));
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDo());
      assertFalse(node0.isThrow());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCase());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertEquals(32, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(comment0.hasChildren());
      assertEquals(1, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals("gsg.jsdoc.preservertUy", comment0.getValue());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals(48, comment0.getLength());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("2dxY9'-WvOVH");
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIf());
      assertEquals(12, node0.getLength());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getSourcePosition());
      assertNotNull(node0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(51, 1, token_CommentType0, "2dxY9'-WvOVH");
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals("2dxY9'-WvOVH", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(51, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertEquals(51, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(1, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertNotNull(comment0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNotNull(jSDocInfo0);
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertFalse(set0.contains("2dxY9'-WvOVH"));
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertFalse(set0.contains("2dxY9'-WvOVH"));
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("3JF:kImFlH H+", 57, 37);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertFalse(set0.contains("3JF:kImFlH H+"));
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIf());
      assertEquals(12, node0.getLength());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getSourcePosition());
      assertEquals("2dxY9'-WvOVH", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(51, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertEquals(51, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(1, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotSame(jSDocInfo0, jSDocInfo1);
      assertNotSame(jSDocInfo1, jSDocInfo0);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertFalse(set0.contains("3JF:kImFlH H+"));
      assertFalse(jSDocInfo1.equals((Object)jSDocInfo0));
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(40, node0.getType());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIf());
      assertEquals(12, node0.getLength());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getSourcePosition());
      assertEquals("2dxY9'-WvOVH", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(51, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertEquals(51, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(1, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertFalse(jSDocInfo0.hasModifies());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNull(jSDocInfo1.getMeaning());
      assertFalse(jSDocInfo1.isConstant());
      assertNull(jSDocInfo1.getLendsName());
      assertFalse(jSDocInfo1.hasThisType());
      assertNull(jSDocInfo1.getFileOverview());
      assertEquals("2dxY9'-WvOVH", jSDocInfo1.getOriginalCommentString());
      assertFalse(jSDocInfo1.hasModifies());
      assertFalse(jSDocInfo1.isConstructor());
      assertFalse(jSDocInfo1.isNoShadow());
      assertFalse(jSDocInfo1.isInterface());
      assertFalse(jSDocInfo1.isExpose());
      assertFalse(jSDocInfo1.isJaggerInject());
      assertNull(jSDocInfo1.getBlockDescription());
      assertFalse(jSDocInfo1.isIdGenerator());
      assertEquals(0, jSDocInfo1.getImplementedInterfaceCount());
      assertFalse(jSDocInfo1.isNoCompile());
      assertFalse(jSDocInfo1.isNgInject());
      assertEquals(0, jSDocInfo1.getParameterCount());
      assertFalse(jSDocInfo1.hasEnumParameterType());
      assertFalse(jSDocInfo1.makesDicts());
      assertEquals(51, jSDocInfo1.getOriginalCommentPosition());
      assertTrue(jSDocInfo1.hasType());
      assertEquals("JSDocInfo", jSDocInfo1.toString());
      assertFalse(jSDocInfo1.shouldPreserveTry());
      assertNull(jSDocInfo1.getDescription());
      assertFalse(jSDocInfo1.makesStructs());
      assertFalse(jSDocInfo1.isNoSideEffects());
      assertFalse(jSDocInfo1.hasReturnType());
      assertFalse(jSDocInfo1.isNoAlias());
      assertFalse(jSDocInfo1.isJaggerProvide());
      assertFalse(jSDocInfo1.isStableIdGenerator());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo1.getVisibility());
      assertFalse(jSDocInfo1.isJavaDispatch());
      assertEquals(0, jSDocInfo1.getExtendedInterfacesCount());
      assertFalse(jSDocInfo1.isDisposes());
      assertFalse(jSDocInfo1.isDefine());
      assertFalse(jSDocInfo1.isImplicitCast());
      assertFalse(jSDocInfo1.isDeprecated());
      assertFalse(jSDocInfo1.isMappedIdGenerator());
      assertFalse(jSDocInfo1.isHidden());
      assertFalse(jSDocInfo1.hasFileOverview());
      assertNull(jSDocInfo1.getDeprecationReason());
      assertFalse(jSDocInfo1.isExterns());
      assertFalse(jSDocInfo1.isJaggerModule());
      assertTrue(jSDocInfo1.containsDeclaration());
      assertFalse(jSDocInfo1.hasBaseType());
      assertFalse(jSDocInfo1.isOverride());
      assertFalse(jSDocInfo1.isExport());
      assertFalse(jSDocInfo1.hasTypedefType());
      assertFalse(jSDocInfo1.isWizaction());
      assertNull(jSDocInfo1.getVersion());
      assertNull(jSDocInfo1.getReturnDescription());
      assertFalse(jSDocInfo1.isConsistentIdGenerator());
      assertNull(jSDocInfo1.getLicense());
      assertFalse(jSDocInfo1.isNoTypeCheck());
      assertNotNull(jSDocInfo1);
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Context context0 = Context.enter();
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertNotNull(errorReporter0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isConstructor());
      assertNotNull(jSDocInfo0);
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isConstructor());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isConstructor());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("error reporter");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, errorReporter0);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(set0.contains("error reporter"));
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isConstructor());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.COMMA;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(set0.contains("error reporter"));
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isConstructor());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNull(node0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertFalse(set0.contains("error reporter"));
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isConstructor());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(6, 6, token_CommentType0, ">p1eX>DAtK+WMNJC");
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(6, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals(">p1eX>DAtK+WMNJC", comment0.getValue());
      assertEquals(6, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals(6, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNotNull(comment0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains(">p1eX>DAtK+WMNJC"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("function", (-1529), 4);
      assertNotNull(jsDocTokenStream0);
      
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString("function");
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNumber());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertNotNull(node0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("function"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertFalse(linkedHashSet0.contains("function"));
      assertEquals(6, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals(">p1eX>DAtK+WMNJC", comment0.getValue());
      assertEquals(6, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals(6, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNumber());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertFalse(linkedHashSet0.contains("function"));
      assertEquals(6, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals(">p1eX>DAtK+WMNJC", comment0.getValue());
      assertEquals(6, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals(6, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node0.getLineno());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNumber());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWhile());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(1642, 1642, token_CommentType0, "E");
      assertEquals(1, Node.LEFT);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1642, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals("E", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(1642, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals((-1), comment0.getLineno());
      assertEquals(1642, comment0.getAbsolutePosition());
      assertNotNull(comment0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isConstructor());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertNotNull(jSDocInfo0);
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertFalse(set0.contains("E"));
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isConstructor());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertFalse(set0.contains("E"));
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isConstructor());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("X54WJWxaPqt*6<krFeC2", 9, 14);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, errorCollector0);
      assertEquals(1, Node.LEFT);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertFalse(set0.contains("E"));
      assertEquals(1642, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals("E", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(1642, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals((-1), comment0.getLineno());
      assertEquals(1642, comment0.getAbsolutePosition());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isConstructor());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNotSame(jSDocInfo0, jSDocInfo1);
      assertNotSame(jSDocInfo1, jSDocInfo0);
      assertEquals(1, Node.LEFT);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertFalse(set0.contains("E"));
      assertFalse(jSDocInfo1.equals((Object)jSDocInfo0));
      assertEquals(1642, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals("E", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(1642, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals((-1), comment0.getLineno());
      assertEquals(1642, comment0.getAbsolutePosition());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isConstructor());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, jSDocInfo1.getOriginalCommentPosition());
      assertNull(jSDocInfo1.getFileOverview());
      assertNull(jSDocInfo1.getMeaning());
      assertFalse(jSDocInfo1.hasThisType());
      assertFalse(jSDocInfo1.isConstant());
      assertFalse(jSDocInfo1.hasModifies());
      assertFalse(jSDocInfo1.isJaggerInject());
      assertFalse(jSDocInfo1.isNgInject());
      assertFalse(jSDocInfo1.isWizaction());
      assertNull(jSDocInfo1.getBlockDescription());
      assertNull(jSDocInfo1.getVersion());
      assertFalse(jSDocInfo1.isNoShadow());
      assertEquals("JSDocInfo", jSDocInfo1.toString());
      assertFalse(jSDocInfo1.isExpose());
      assertFalse(jSDocInfo1.isOverride());
      assertEquals(0, jSDocInfo1.getImplementedInterfaceCount());
      assertNull(jSDocInfo1.getLendsName());
      assertFalse(jSDocInfo1.isExport());
      assertFalse(jSDocInfo1.isJaggerModule());
      assertFalse(jSDocInfo1.isNoTypeCheck());
      assertFalse(jSDocInfo1.isHidden());
      assertFalse(jSDocInfo1.isExterns());
      assertFalse(jSDocInfo1.isConsistentIdGenerator());
      assertFalse(jSDocInfo1.hasTypedefType());
      assertNull(jSDocInfo1.getLicense());
      assertFalse(jSDocInfo1.hasBaseType());
      assertFalse(jSDocInfo1.isJaggerProvide());
      assertNull(jSDocInfo1.getReturnDescription());
      assertNull(jSDocInfo1.getOriginalCommentString());
      assertFalse(jSDocInfo1.isStableIdGenerator());
      assertFalse(jSDocInfo1.isDisposes());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo1.getVisibility());
      assertFalse(jSDocInfo1.hasFileOverview());
      assertFalse(jSDocInfo1.isNoSideEffects());
      assertFalse(jSDocInfo1.isMappedIdGenerator());
      assertFalse(jSDocInfo1.isJavaDispatch());
      assertFalse(jSDocInfo1.isDeprecated());
      assertEquals(0, jSDocInfo1.getExtendedInterfacesCount());
      assertFalse(jSDocInfo1.makesDicts());
      assertTrue(jSDocInfo1.containsDeclaration());
      assertFalse(jSDocInfo1.isImplicitCast());
      assertFalse(jSDocInfo1.isNoAlias());
      assertFalse(jSDocInfo1.hasReturnType());
      assertNull(jSDocInfo1.getDeprecationReason());
      assertFalse(jSDocInfo1.isNoCompile());
      assertFalse(jSDocInfo1.isInterface());
      assertFalse(jSDocInfo1.isIdGenerator());
      assertFalse(jSDocInfo1.isConstructor());
      assertNull(jSDocInfo1.getDescription());
      assertFalse(jSDocInfo1.makesStructs());
      assertTrue(jSDocInfo1.hasType());
      assertFalse(jSDocInfo1.isDefine());
      assertFalse(jSDocInfo1.shouldPreserveTry());
      assertEquals(0, jSDocInfo1.getParameterCount());
      assertFalse(jSDocInfo1.hasEnumParameterType());
      assertNotNull(jSDocInfo1);
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNotNull(jSDocInfo0);
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(");\n");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertFalse(set0.contains(");\n"));
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(set0.contains(");\n"));
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(boolean0);
      
      boolean boolean1 = jsDocInfoParser0.parse();
      assertFalse(set0.contains(");\n"));
      assertTrue(boolean1 == boolean0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{U\"opr`Ix:");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(4, 19, token_CommentType0, "{U\"opr`Ix:");
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(4, comment0.getPosition());
      assertEquals("{U\"opr`Ix:", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(161, comment0.getType());
      assertEquals(19, comment0.getLength());
      assertEquals(4, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertNotNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("{U\"opr`Ix:"));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, false);
      assertFalse(treeSet0.contains("{U\"opr`Ix:"));
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertFalse(treeSet0.contains("{U\"opr`Ix:"));
      assertEquals(4, comment0.getPosition());
      assertEquals("{U\"opr`Ix:", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(161, comment0.getType());
      assertEquals(19, comment0.getLength());
      assertEquals(4, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertFalse(treeSet0.contains("{U\"opr`Ix:"));
      assertEquals(4, comment0.getPosition());
      assertEquals("{U\"opr`Ix:", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(161, comment0.getType());
      assertEquals(19, comment0.getLength());
      assertEquals(4, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Context context0 = Context.getCurrentContext();
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("language version");
      assertNotNull(node0);
      
      node0.setSourceFileForTesting("error reporter");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("(I)V", (-1933942685), 57);
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(110, 6, token_CommentType0, "(I)V");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertEquals(0, node0.getSourcePosition());
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("util");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(4095, 26, token_CommentType0, "util");
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser((JsDocTokenStream) null, comment0, node0, config0, toolErrorReporter0);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString("^2QIs!+j/A@\"V(9%Xp");
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("^2QIs!+j/A@\"V(9%Xp", 48);
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      jsDocInfoParser0.parseInlineTypeDoc();
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("undefined");
      assertEquals(0, node0.getSourcePosition());
      assertTrue(node0.isString());
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("[(!6Xstclm");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("[2dxJ9<'-WvO>VH", 13);
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString("[2dxJ9<'-WvO>VH", 13, (-19));
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getModifies();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(");\n");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, errorCollector0);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("HrrXC,x(9E#U}b%j");
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString("msg.undef.to.object", (-4787), (-848));
      Locale locale0 = new Locale("HrrXC,x(9E#U}b%j", "1Ko'Sc>Nk");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertFalse(jSDocInfo1.isJavaDispatch());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("pK}6:'");
      assertNotNull(node0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getModifies();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser((JsDocTokenStream) null, (Comment) null, node0, config0, errorReporter0);
      com.google.javascript.rhino.Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.getJsDocBuilderForNode();
      jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
      assertEquals(0, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Context context0 = Context.enter();
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("error reporter");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, errorReporter0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("$Rc|tr|\"$\"9L[d");
      assertEquals(3, node0.getChildCount());
      assertNotNull(node0);
      assertEquals(301, node0.getType());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Context context0 = Context.enter();
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getModifies();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("x");
      com.google.javascript.rhino.Node node0 = new com.google.javascript.rhino.Node(7);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorReporter0);
      boolean boolean0 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Context context0 = new Context();
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getModifies();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, true);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(");\n");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, errorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.EOC;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertTrue(boolean0);
  }
}
