/*
 * This file was automatically generated by EvoSuite
 * Thu Feb 25 19:15:28 GMT 2021
 */

package com.google.javascript.jscomp.parsing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocToken;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Token;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsDocInfoParser_ESTest extends JsDocInfoParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("#N");
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNew());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertNotNull(node0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(2, 29, token_CommentType0, "A0f8");
      assertEquals(29, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("A0f8", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(2, comment0.getAbsolutePosition());
      assertEquals(2, comment0.getPosition());
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertNotNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("A0f8"));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertFalse(treeSet0.contains("A0f8"));
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertNotNull(errorReporter0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Changing attributes not supported for ");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertFalse(treeSet0.contains("A0f8"));
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNew());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(29, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("A0f8", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(2, comment0.getAbsolutePosition());
      assertEquals(2, comment0.getPosition());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertFalse(treeSet0.contains("A0f8"));
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNew());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAnd());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(29, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("A0f8", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(2, comment0.getAbsolutePosition());
      assertEquals(2, comment0.getPosition());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(context0.generateObserverCount);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("#N~");
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getChangeTime());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWith());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals(3, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*lkh~VR|7sB'YYGq1JR", 394);
      assertNotNull(jsDocTokenStream0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNotNull(jSDocInfo0);
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertFalse(set0.contains("#N~"));
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertFalse(set0.contains("#N~"));
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(set0.contains("#N~"));
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getChangeTime());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWith());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals(3, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertFalse(set0.contains("#N~"));
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getChangeTime());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWith());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals(3, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNull(jSDocInfo1);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("#N");
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChangeTime());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isInc());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertNotNull(node0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(2, 29, token_CommentType0, "A0f8");
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(29, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("A0f8", comment0.getValue());
      assertEquals(2, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(2, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertNotNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("#N"));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertFalse(treeSet0.contains("#N"));
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertNotNull(errorReporter0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Changing attributes not supported for ");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertFalse(treeSet0.contains("Changing attributes not supported for "));
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChangeTime());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isInc());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(29, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("A0f8", comment0.getValue());
      assertEquals(2, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(2, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertFalse(treeSet0.contains("Changing attributes not supported for "));
      assertFalse(node0.isDefaultCase());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isTry());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getChangeTime());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isIn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isInc());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(29, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("A0f8", comment0.getValue());
      assertEquals(2, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(2, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertTrue(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(2, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals("A0f8", jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertTrue(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertNotNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("uFqn~7|Y,+");
      assertNotNull(jsDocTokenStream0);
      
      Node node0 = new Node((-1725922376));
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertEquals((-1725922376), node0.getType());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTry());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getLength());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertNotNull(node0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("uFqn~7|Y,+"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertEquals((-1725922376), node0.getType());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTry());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getLength());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(linkedHashSet0.contains("uFqn~7|Y,+"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertEquals((-1725922376), node0.getType());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTry());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getLength());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isHook());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isInc());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isString());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isCast());
      assertFalse(node1.isAnd());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOptionalArg());
      assertEquals(3, node1.getChildCount());
      assertFalse(node1.isAssign());
      assertFalse(node1.isReturn());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isOr());
      assertFalse(node1.isLabel());
      assertEquals(301, node1.getType());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isFromExterns());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertEquals(8, node1.getSourcePosition());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isLocalResultCall());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isNull());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isAdd());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isContinue());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNumber());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isIn());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isWith());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isBlock());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertEquals(0, node1.getLength());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isCatch());
      assertEquals(8, node1.getCharno());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("#N");
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAnd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNotNull(jSDocInfo0);
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertFalse(set0.contains("#N"));
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      assertFalse(set0.contains("#N"));
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("A");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(set0.contains("A"));
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAnd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.BANG;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(set0.contains("A"));
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNumber());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAnd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isName());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isIn());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isNE());
      assertFalse(node1.isSyntheticBlock());
      assertEquals((-1), node1.getSourceOffset());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetProp());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isTry());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isHook());
      assertFalse(node1.isFor());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getLineno());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isFunction());
      assertFalse(node1.isThrow());
      assertFalse(node1.isDo());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isName());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isReturn());
      assertEquals(0, node1.getSideEffectFlags());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isBlock());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isParamList());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isArrayLit());
      assertEquals(306, node1.getType());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isVar());
      assertFalse(node1.equals((Object)node0));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("#N");
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*lkh~VR|7sB'YYGq1JR", 394);
      assertNotNull(jsDocTokenStream0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getVersion());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNotNull(jSDocInfo0);
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertFalse(set0.contains("#N"));
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getVersion());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertFalse(set0.contains("#N"));
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getVersion());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(set0.contains("#N"));
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getVersion());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(set0.contains("#N"));
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getVersion());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isAnd());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isScript());
      assertFalse(node1.isThis());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isComma());
      assertFalse(node1.isThrow());
      assertEquals(394, node1.getLineno());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertEquals(0, node1.getLength());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isOr());
      assertFalse(node1.isContinue());
      assertFalse(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isDec());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTypeOf());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isAssign());
      assertFalse(node1.isFalse());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isCast());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isNot());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isFunction());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isVarArgs());
      assertTrue(node1.mayMutateArguments());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNew());
      assertFalse(node1.isVoid());
      assertFalse(node1.isAdd());
      assertFalse(node1.isTrue());
      assertEquals(1613824, node1.getSourcePosition());
      assertEquals(304, node1.getType());
      assertFalse(node1.isNE());
      assertFalse(node1.isIn());
      assertFalse(node1.isNull());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertFalse(node1.isBlock());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isHook());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isLabel());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isTry());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.equals((Object)node0));
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(52, Node.LENGTH);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("8aLbuWZNQB{)3CKh");
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLineno());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVarArgs());
      assertEquals(40, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertEquals(10, node0.getLength());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("oH<,**.hRE/", 36);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(1852, 2019, token_CommentType0, "8aLbuWZNQB{)3CKh");
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(2019, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals(1852, comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals("8aLbuWZNQB{)3CKh", comment0.getValue());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals(1852, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertNotNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("8aLbuWZNQB{)3CKh"));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertFalse(treeSet0.contains("8aLbuWZNQB{)3CKh"));
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertNotNull(context0);
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertNotNull(errorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertFalse(treeSet0.contains("8aLbuWZNQB{)3CKh"));
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLineno());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVarArgs());
      assertEquals(40, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertEquals(10, node0.getLength());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(2019, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals(1852, comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals("8aLbuWZNQB{)3CKh", comment0.getValue());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals(1852, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNotNull(jSDocInfo0);
      
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      assertFalse(treeSet0.contains("8aLbuWZNQB{)3CKh"));
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLineno());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVarArgs());
      assertEquals(40, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertEquals(10, node0.getLength());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(2019, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals(1852, comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals("8aLbuWZNQB{)3CKh", comment0.getValue());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals(1852, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertFalse(treeSet0.contains("8aLbuWZNQB{)3CKh"));
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLineno());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNew());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVarArgs());
      assertEquals(40, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertEquals(10, node0.getLength());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(2019, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals(1852, comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals("8aLbuWZNQB{)3CKh", comment0.getValue());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals(1852, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(jSDocInfo1.isNoAlias());
      assertFalse(jSDocInfo1.isExport());
      assertFalse(jSDocInfo1.hasBaseType());
      assertEquals(0, jSDocInfo1.getParameterCount());
      assertNull(jSDocInfo1.getReturnDescription());
      assertFalse(jSDocInfo1.isConstructor());
      assertFalse(jSDocInfo1.isDefine());
      assertFalse(jSDocInfo1.hasTypedefType());
      assertFalse(jSDocInfo1.isJaggerInject());
      assertFalse(jSDocInfo1.hasFileOverview());
      assertFalse(jSDocInfo1.hasEnumParameterType());
      assertFalse(jSDocInfo1.hasThisType());
      assertFalse(jSDocInfo1.hasModifies());
      assertNull(jSDocInfo1.getOriginalCommentString());
      assertFalse(jSDocInfo1.isDisposes());
      assertFalse(jSDocInfo1.hasType());
      assertFalse(jSDocInfo1.isStableIdGenerator());
      assertFalse(jSDocInfo1.isJaggerProvide());
      assertFalse(jSDocInfo1.isImplicitCast());
      assertNull(jSDocInfo1.getVersion());
      assertFalse(jSDocInfo1.isNoTypeCheck());
      assertFalse(jSDocInfo1.isConsistentIdGenerator());
      assertNull(jSDocInfo1.getLicense());
      assertFalse(jSDocInfo1.isWizaction());
      assertFalse(jSDocInfo1.isJavaDispatch());
      assertFalse(jSDocInfo1.isOverride());
      assertFalse(jSDocInfo1.isJaggerModule());
      assertEquals(0, jSDocInfo1.getOriginalCommentPosition());
      assertFalse(jSDocInfo1.isConstant());
      assertFalse(jSDocInfo1.isNoShadow());
      assertFalse(jSDocInfo1.isDeprecated());
      assertFalse(jSDocInfo1.isNgInject());
      assertEquals(0, jSDocInfo1.getImplementedInterfaceCount());
      assertFalse(jSDocInfo1.isExpose());
      assertFalse(jSDocInfo1.isHidden());
      assertNull(jSDocInfo1.getBlockDescription());
      assertFalse(jSDocInfo1.isInterface());
      assertFalse(jSDocInfo1.isNoCompile());
      assertNull(jSDocInfo1.getDeprecationReason());
      assertFalse(jSDocInfo1.isExterns());
      assertFalse(jSDocInfo1.isIdGenerator());
      assertNull(jSDocInfo1.getVisibility());
      assertNull(jSDocInfo1.getFileOverview());
      assertFalse(jSDocInfo1.isMappedIdGenerator());
      assertNull(jSDocInfo1.getLendsName());
      assertNull(jSDocInfo1.getDescription());
      assertFalse(jSDocInfo1.shouldPreserveTry());
      assertFalse(jSDocInfo1.containsDeclaration());
      assertFalse(jSDocInfo1.makesDicts());
      assertFalse(jSDocInfo1.makesStructs());
      assertEquals(0, jSDocInfo1.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo1.toString());
      assertNull(jSDocInfo1.getMeaning());
      assertFalse(jSDocInfo1.hasReturnType());
      assertFalse(jSDocInfo1.isNoSideEffects());
      assertSame(jSDocInfo1, jSDocInfo0);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertFalse(context0.generateObserverCount);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertNotNull(jSDocInfo1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.CANADA_FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser((JsDocTokenStream) null, (Comment) null, (Node) null, config0, toolErrorReporter0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(jsDocInfoParser0);
      
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression((Node) null);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_CA", locale0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNull(jSTypeExpression0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("*g@&vxJIvZAM!pn\"J");
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertEquals(302, node0.getType());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*g@&vxJIvZAM!pn\"J");
      assertNotNull(jsDocTokenStream0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("*g@&vxJIvZAM!pn\"J"));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertFalse(treeSet0.contains("*g@&vxJIvZAM!pn\"J"));
      assertNotNull(config0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, (ErrorReporter) null);
      assertFalse(treeSet0.contains("*g@&vxJIvZAM!pn\"J"));
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertEquals(302, node0.getType());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotNull(jsDocInfoParser0);
      
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression(node0);
      assertFalse(treeSet0.contains("*g@&vxJIvZAM!pn\"J"));
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertEquals(302, node0.getType());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isNew());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.wasEmptyNode());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotNull(jSTypeExpression0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsDocInfoParser.parseTypeString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(": -wWZNQN{)3CK");
      assertNotNull(jsDocTokenStream0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains(": -wWZNQN{)3CK"));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
      assertFalse(hashSet0.contains(": -wWZNQN{)3CK"));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, errorCollector0);
      assertFalse(hashSet0.contains(": -wWZNQN{)3CK"));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("asin");
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWith());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNot());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("asin", 55);
      assertNotNull(jsDocTokenStream0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains("asin"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      jsDocTokenStream0.sourceCursor = 96;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
      assertFalse(hashSet0.contains("asin"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      assertFalse(hashSet0.contains("asin"));
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isNew());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWith());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNot());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("*g@&vxJIvZAM!pn\"J");
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getChildCount());
      assertEquals(302, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFalse());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(node0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains("*g@&vxJIvZAM!pn\"J"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
      assertFalse(hashSet0.contains("*g@&vxJIvZAM!pn\"J"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser((JsDocTokenStream) null, (Comment) null, node0, config0, errorCollector0);
      assertFalse(hashSet0.contains("*g@&vxJIvZAM!pn\"J"));
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVar());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getChildCount());
      assertEquals(302, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFalse());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("asin");
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCase());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertTrue(node0.isString());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("asin", 55);
      assertNotNull(jsDocTokenStream0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains("asin"));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
      assertFalse(hashSet0.contains("asin"));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      assertFalse(hashSet0.contains("asin"));
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCase());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertTrue(node0.isString());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.EOC;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Node node0 = Node.newString("(0))K");
      assertEquals(40, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("(0))K");
      assertNotNull(jsDocTokenStream0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertNotNull(jSDocInfo0);
      
      jsDocTokenStream0.sourceCursor = (-1882507587);
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertFalse(set0.contains("(0))K"));
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertFalse(set0.contains("(0))K"));
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      assertFalse(set0.contains("(0))K"));
      assertEquals(40, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWhile());
      assertFalse(node0.isFalse());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Node node0 = Node.newString("generated bytecode for method exceeds 64K limit.");
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertNotNull(node0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("generated bytecode for method exceeds 64K limit."));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      assertFalse(linkedHashSet0.contains("generated bytecode for method exceeds 64K limit."));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser((JsDocTokenStream) null, (Comment) null, node0, config0, errorCollector0);
      assertFalse(linkedHashSet0.contains("generated bytecode for method exceeds 64K limit."));
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isThis());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.GT;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("a bwWZNQB{)3CK");
      assertFalse(node0.isScript());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals(1, node0.getLength());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVoid());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertNotNull(node0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(30, 30, token_CommentType0, "a bwWZNQB{)3CK");
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals(30, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals("a bwWZNQB{)3CK", comment0.getValue());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(30, comment0.getAbsolutePosition());
      assertEquals(30, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertNotNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("a bwWZNQB{)3CK"));
      assertNotNull(treeSet0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Node tree inequality:\nTree1:\n", 1);
      assertNotNull(jsDocTokenStream0);
      
      jsDocTokenStream0.sourceCursor = 52;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      assertFalse(treeSet0.contains("Node tree inequality:\nTree1:\n"));
      assertNotNull(config0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, (ErrorReporter) null);
      assertFalse(treeSet0.contains("Node tree inequality:\nTree1:\n"));
      assertFalse(node0.isScript());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertEquals(1, node0.getLength());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isName());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVoid());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals(30, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals("a bwWZNQB{)3CK", comment0.getValue());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(30, comment0.getAbsolutePosition());
      assertEquals(30, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("prok=cte");
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssign());
      assertFalse(node0.isStringKey());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isBlock());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isComma());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isThis());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("prok=cte");
      assertNotNull(jsDocTokenStream0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = null;
      try {
        jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("*g@&vxJIvZAM!pn\"J");
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertEquals(302, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*g@&vxJIvZAM!pn\"J");
      assertNotNull(jsDocTokenStream0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("*g@&vxJIvZAM!pn\"J"));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, false);
      assertFalse(treeSet0.contains("*g@&vxJIvZAM!pn\"J"));
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(treeSet0.contains("*g@&vxJIvZAM!pn\"J"));
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertEquals(302, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.EOL;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(treeSet0.contains("*g@&vxJIvZAM!pn\"J"));
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertEquals(302, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNull(node1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertFalse(treeSet0.contains("*g@&vxJIvZAM!pn\"J"));
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertEquals(302, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("[\n");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("{#Ctn'VU}cg.z");
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getLineno());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertEquals(309, node0.getType());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isFor());
      assertEquals(1, node0.getSourcePosition());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTry());
      assertEquals(1, node0.getChildCount());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("{==1");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("[sO]");
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertEquals(308, node0.getType());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNew());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertTrue(node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("[8\"uk0,{0w");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("(xIDwDQK n$[T%8H6f");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("eP|m&$G.cC+$bN|");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("V9fz_iW!|4E,o'W");
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBreak());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(301, node0.getType());
      assertEquals(3, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertEquals(9, node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(9, node0.getSourcePosition());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNumber());
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("undefined");
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOr());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertEquals(9, node0.getLength());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("function");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("ROB6QaD|[WE%");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("L.ilF|p6Ud9!KDN#r'");
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isInc());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.hasOneChild());
      assertEquals(6, node0.getSourcePosition());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCatch());
      assertEquals(6, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(301, node0.getType());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("f0nct?Don");
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFor());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateArguments());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLineno());
      assertEquals(5, node0.getSourcePosition());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThis());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertEquals(304, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWith());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(5, node0.getCharno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDo());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("!");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("?>N_<%uLJ:4==\"");
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNumber());
      assertFalse(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNE());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(304, node0.getType());
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Node node0 = Node.newString("#N");
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertEquals(40, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*lkh~VR|7sB'YYGq1JR", 42);
      assertNotNull(jsDocTokenStream0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNotNull(jSDocInfo0);
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertFalse(set0.contains("#N"));
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertFalse(set0.contains("#N"));
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      assertFalse(set0.contains("#N"));
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertEquals(40, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotNull(jsDocInfoParser0);
      
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      assertFalse(set0.contains("#N"));
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertEquals(40, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(jsDocInfoParser1.equals((Object)jsDocInfoParser0));
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotNull(jsDocInfoParser1);
      
      JSDocInfo jSDocInfo1 = jsDocInfoParser1.parseInlineTypeDoc();
      assertFalse(set0.contains("#N"));
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertEquals(40, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(jSDocInfo1.isJaggerProvide());
      assertFalse(jSDocInfo1.isStableIdGenerator());
      assertFalse(jSDocInfo1.isDisposes());
      assertFalse(jSDocInfo1.isJavaDispatch());
      assertEquals(0, jSDocInfo1.getExtendedInterfacesCount());
      assertNull(jSDocInfo1.getOriginalCommentString());
      assertFalse(jSDocInfo1.isDefine());
      assertFalse(jSDocInfo1.isImplicitCast());
      assertFalse(jSDocInfo1.isMappedIdGenerator());
      assertFalse(jSDocInfo1.isDeprecated());
      assertFalse(jSDocInfo1.isHidden());
      assertFalse(jSDocInfo1.hasFileOverview());
      assertNull(jSDocInfo1.getDeprecationReason());
      assertFalse(jSDocInfo1.isExterns());
      assertFalse(jSDocInfo1.hasBaseType());
      assertTrue(jSDocInfo1.containsDeclaration());
      assertFalse(jSDocInfo1.isExport());
      assertFalse(jSDocInfo1.isOverride());
      assertFalse(jSDocInfo1.isWizaction());
      assertFalse(jSDocInfo1.hasTypedefType());
      assertNull(jSDocInfo1.getVersion());
      assertNull(jSDocInfo1.getReturnDescription());
      assertFalse(jSDocInfo1.isJaggerModule());
      assertFalse(jSDocInfo1.isConsistentIdGenerator());
      assertNull(jSDocInfo1.getLicense());
      assertEquals(0, jSDocInfo1.getOriginalCommentPosition());
      assertFalse(jSDocInfo1.isNoTypeCheck());
      assertFalse(jSDocInfo1.isConstant());
      assertNull(jSDocInfo1.getMeaning());
      assertFalse(jSDocInfo1.hasThisType());
      assertNull(jSDocInfo1.getFileOverview());
      assertFalse(jSDocInfo1.isConstructor());
      assertNull(jSDocInfo1.getLendsName());
      assertNull(jSDocInfo1.getBlockDescription());
      assertFalse(jSDocInfo1.isInterface());
      assertFalse(jSDocInfo1.isNoShadow());
      assertFalse(jSDocInfo1.isExpose());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo1.getVisibility());
      assertFalse(jSDocInfo1.isJaggerInject());
      assertFalse(jSDocInfo1.hasModifies());
      assertFalse(jSDocInfo1.isIdGenerator());
      assertEquals(0, jSDocInfo1.getImplementedInterfaceCount());
      assertFalse(jSDocInfo1.isNoCompile());
      assertEquals(0, jSDocInfo1.getParameterCount());
      assertFalse(jSDocInfo1.hasEnumParameterType());
      assertFalse(jSDocInfo1.isNgInject());
      assertFalse(jSDocInfo1.makesDicts());
      assertFalse(jSDocInfo1.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo1.toString());
      assertNull(jSDocInfo1.getDescription());
      assertFalse(jSDocInfo1.makesStructs());
      assertFalse(jSDocInfo1.isNoSideEffects());
      assertTrue(jSDocInfo1.hasType());
      assertFalse(jSDocInfo1.isNoAlias());
      assertFalse(jSDocInfo1.hasReturnType());
      assertNotSame(jSDocInfo0, jSDocInfo1);
      assertNotSame(jsDocInfoParser1, jsDocInfoParser0);
      assertNotSame(jSDocInfo1, jSDocInfo0);
      assertFalse(jsDocInfoParser1.equals((Object)jsDocInfoParser0));
      assertFalse(jSDocInfo1.equals((Object)jSDocInfo0));
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotNull(jSDocInfo1);
      
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(set0.contains("#N"));
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertEquals(40, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isScript());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.makesDicts());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isHook());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isInc());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isThis());
      assertFalse(node1.isComma());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isWith());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isFor());
      assertFalse(node1.hasOneChild());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isTry());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isTrue());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isNumber());
      assertEquals(7, node1.getCharno());
      assertFalse(node1.isDo());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isVar());
      assertFalse(node1.isQuotedString());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isName());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isParamList());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isNull());
      assertEquals(304, node1.getType());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCatch());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isReturn());
      assertFalse(node1.isWhile());
      assertEquals(172039, node1.getSourcePosition());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isBlock());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isRegExp());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(42, node1.getLineno());
      assertFalse(node1.isCast());
      assertFalse(node1.isIf());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isNE());
      assertFalse(node1.isNot());
      assertFalse(node1.isIn());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isFunction());
      assertFalse(node1.isFalse());
      assertNotSame(jSDocInfo0, jSDocInfo1);
      assertNotSame(jsDocInfoParser0, jsDocInfoParser1);
      assertFalse(jSDocInfo0.equals((Object)jSDocInfo1));
      assertFalse(jsDocInfoParser0.equals((Object)jsDocInfoParser1));
      assertFalse(node1.equals((Object)node0));
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("?)");
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLineno());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(304, node0.getType());
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("msg.jsdoc.expose");
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(16, node0.getLength());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertTrue(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertNotNull(node0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment((-1), 13, token_CommentType0, "X97Sd");
      assertEquals(13, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals("X97Sd", comment0.getValue());
      assertEquals((-1), comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertNotNull(comment0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("X97Sd"));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertFalse(treeSet0.contains("X97Sd"));
      assertNotNull(config0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Wi5'}zS6vkC|~SAo");
      assertNotNull(jsDocTokenStream0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertFalse(treeSet0.contains("X97Sd"));
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(16, node0.getLength());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertTrue(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(13, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals("X97Sd", comment0.getValue());
      assertEquals((-1), comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertFalse(treeSet0.contains("X97Sd"));
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(16, node0.getLength());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertTrue(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(13, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals("X97Sd", comment0.getValue());
      assertEquals((-1), comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertTrue(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getDescription());
      assertTrue(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasBaseType());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals((-1), jSDocInfo0.getOriginalCommentPosition());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isHidden());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertEquals("X97Sd", jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertNotNull(jSDocInfo0);
      
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(treeSet0.contains("X97Sd"));
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(16, node0.getLength());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isBreak());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertTrue(node0.isString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertEquals(40, node0.getType());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(13, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals("X97Sd", comment0.getValue());
      assertEquals((-1), comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isFunction());
      assertFalse(node1.isVoid());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDebugger());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isTrue());
      assertFalse(node1.isTry());
      assertEquals(304, node1.getType());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChangeTime());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isName());
      assertEquals(4, node1.getSourcePosition());
      assertFalse(node1.isFor());
      assertFalse(node1.isNE());
      assertFalse(node1.isCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isOr());
      assertFalse(node1.isCase());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNumber());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isParamList());
      assertFalse(node1.isVar());
      assertFalse(node1.isArrayLit());
      assertEquals(0, node1.getChildCount());
      assertEquals(4, node1.getCharno());
      assertFalse(node1.isWith());
      assertFalse(node1.isNot());
      assertFalse(node1.isAnd());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isDec());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isComma());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isAssign());
      assertFalse(node1.isThis());
      assertFalse(node1.isReturn());
      assertFalse(node1.isHook());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isWhile());
      assertFalse(node1.isIn());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isString());
      assertFalse(node1.isInc());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isFalse());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.equals((Object)node0));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertNotNull(node1);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("?]@!%9j");
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDo());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertEquals(304, node0.getType());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDebugger());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(1, node0.getSourcePosition());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("#N");
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*lkh~VR|7sB'YYGq1JR", 394);
      assertNotNull(jsDocTokenStream0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNotNull(jSDocInfo0);
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertFalse(set0.contains("#N"));
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertFalse(set0.contains("#N"));
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(set0.contains("#N"));
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.EQUALS;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(set0.contains("#N"));
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertNull(node1);
      
      JsDocToken jsDocToken1 = JsDocToken.QMARK;
      Node node2 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertFalse(set0.contains("#N"));
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isNumber());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isWizaction());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(node2.isFalse());
      assertEquals(0, node2.getLength());
      assertFalse(node2.isThrow());
      assertFalse(node2.isNoSideEffectsCall());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isHook());
      assertFalse(node2.isComma());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isBreak());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isNot());
      assertFalse(node2.isThis());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isString());
      assertFalse(node2.isCase());
      assertFalse(node2.isGetProp());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCast());
      assertFalse(node2.isFor());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isNE());
      assertFalse(node2.isFunction());
      assertFalse(node2.isIf());
      assertFalse(node2.isWith());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isContinue());
      assertFalse(node2.isIn());
      assertEquals(304, node2.getType());
      assertFalse(node2.isInc());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isVar());
      assertFalse(node2.isBlock());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isNull());
      assertFalse(node2.isParamList());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isCatch());
      assertFalse(node2.isOnlyModifiesArgumentsCall());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isReturn());
      assertEquals((-1), node2.getSourcePosition());
      assertEquals(0, node2.getChangeTime());
      assertTrue(node2.mayMutateArguments());
      assertFalse(node2.isWhile());
      assertTrue(node2.mayMutateGlobalStateOrThrow());
      assertFalse(node2.isNumber());
      assertFalse(node2.isTry());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTrue());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isLocalResultCall());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isVoid());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isExprResult());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOr());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertNotSame(jsDocToken1, jsDocToken0);
      assertFalse(jsDocToken1.equals((Object)jsDocToken0));
      assertFalse(node2.equals((Object)node0));
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNotNull(node2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("?,Y)qP`");
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDo());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isContinue());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isFunction());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isSetterDef());
      assertEquals(304, node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("NJW1d\"$n.<pqHL3");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Node node0 = Node.newString("msg.jsdoc.expEose");
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isIn());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsdoc.expEose", 47, 1);
      assertNotNull(jsDocTokenStream0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isExport());
      assertNotNull(jSDocInfo0);
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertFalse(set0.contains("msg.jsdoc.expEose"));
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertFalse(set0.contains("msg.jsdoc.expEose"));
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(set0.contains("msg.jsdoc.expEose"));
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isIn());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotNull(jsDocInfoParser0);
      
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.parseInlineTypeDoc();
      assertFalse(set0.contains("msg.jsdoc.expEose"));
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isIn());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(jSDocInfo1.isNoShadow());
      assertNull(jSDocInfo1.getBlockDescription());
      assertFalse(jSDocInfo1.isExpose());
      assertEquals(0, jSDocInfo1.getImplementedInterfaceCount());
      assertFalse(jSDocInfo1.isOverride());
      assertFalse(jSDocInfo1.makesStructs());
      assertFalse(jSDocInfo1.isExterns());
      assertFalse(jSDocInfo1.isIdGenerator());
      assertNull(jSDocInfo1.getDeprecationReason());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo1.getVisibility());
      assertFalse(jSDocInfo1.isInterface());
      assertNull(jSDocInfo1.getLendsName());
      assertTrue(jSDocInfo1.containsDeclaration());
      assertNull(jSDocInfo1.getMeaning());
      assertFalse(jSDocInfo1.isDeprecated());
      assertNull(jSDocInfo1.getVersion());
      assertFalse(jSDocInfo1.isJaggerModule());
      assertEquals("JSDocInfo", jSDocInfo1.toString());
      assertFalse(jSDocInfo1.makesDicts());
      assertFalse(jSDocInfo1.isWizaction());
      assertFalse(jSDocInfo1.isNgInject());
      assertFalse(jSDocInfo1.isJavaDispatch());
      assertFalse(jSDocInfo1.isMappedIdGenerator());
      assertFalse(jSDocInfo1.isConstant());
      assertEquals(0, jSDocInfo1.getOriginalCommentPosition());
      assertFalse(jSDocInfo1.isNoTypeCheck());
      assertFalse(jSDocInfo1.hasModifies());
      assertFalse(jSDocInfo1.isHidden());
      assertFalse(jSDocInfo1.isDisposes());
      assertFalse(jSDocInfo1.isConsistentIdGenerator());
      assertNull(jSDocInfo1.getLicense());
      assertFalse(jSDocInfo1.isStableIdGenerator());
      assertNull(jSDocInfo1.getOriginalCommentString());
      assertNull(jSDocInfo1.getReturnDescription());
      assertFalse(jSDocInfo1.isJaggerProvide());
      assertFalse(jSDocInfo1.hasTypedefType());
      assertFalse(jSDocInfo1.hasBaseType());
      assertFalse(jSDocInfo1.shouldPreserveTry());
      assertFalse(jSDocInfo1.hasReturnType());
      assertFalse(jSDocInfo1.hasFileOverview());
      assertFalse(jSDocInfo1.isNoAlias());
      assertFalse(jSDocInfo1.isExport());
      assertFalse(jSDocInfo1.isImplicitCast());
      assertEquals(0, jSDocInfo1.getExtendedInterfacesCount());
      assertFalse(jSDocInfo1.hasThisType());
      assertFalse(jSDocInfo1.isNoSideEffects());
      assertFalse(jSDocInfo1.isConstructor());
      assertFalse(jSDocInfo1.isJaggerInject());
      assertFalse(jSDocInfo1.isNoCompile());
      assertFalse(jSDocInfo1.hasEnumParameterType());
      assertTrue(jSDocInfo1.hasType());
      assertNull(jSDocInfo1.getFileOverview());
      assertNull(jSDocInfo1.getDescription());
      assertFalse(jSDocInfo1.isDefine());
      assertEquals(0, jSDocInfo1.getParameterCount());
      assertNotSame(jSDocInfo0, jSDocInfo1);
      assertNotSame(jSDocInfo1, jSDocInfo0);
      assertFalse(jSDocInfo1.equals((Object)jSDocInfo0));
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotNull(jSDocInfo1);
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(set0.contains("msg.jsdoc.expEose"));
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isContinue());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isFor());
      assertEquals(40, node0.getType());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isCall());
      assertFalse(node0.isIn());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isCase());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoShadow());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertNotSame(jSDocInfo0, jSDocInfo1);
      assertFalse(jSDocInfo0.equals((Object)jSDocInfo1));
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("; ");
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertEquals(1, node0.getLength());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("; ");
      assertNotNull(jsDocTokenStream0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("; "));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertFalse(treeSet0.contains("; "));
      assertNotNull(config0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, (ErrorReporter) null);
      assertFalse(treeSet0.contains("; "));
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isNot());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNew());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertEquals(1, node0.getLength());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isScript());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("asin");
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.isString());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("asin");
      assertNotNull(jsDocTokenStream0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("asin"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("asin"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("asin"));
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.isString());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.EOC;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(linkedHashSet0.contains("asin"));
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.isString());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNull(node1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.contains("asin"));
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isBreak());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isWith());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.isString());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isTry());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("*g@&vxJIvZAM!pn\"J");
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(302, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.wasEmptyNode());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotNull(node0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("*g@&vxJIvZAM!pn\"J"));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertFalse(treeSet0.contains("*g@&vxJIvZAM!pn\"J"));
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("=", 43, 31);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(treeSet0.contains("="));
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(302, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.wasEmptyNode());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertFalse(treeSet0.contains("="));
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(302, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.wasEmptyNode());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Node node0 = Node.newString("*g@&vxJIvZAM!pn\"J");
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*g@&vxJIvZAM!pn\"J");
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("*g@&vxJIvZAM!pn\"J"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("*g@&vxJIvZAM!pn\"J"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("*g@&vxJIvZAM!pn\"J"));
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.ELLIPSIS;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(linkedHashSet0.contains("*g@&vxJIvZAM!pn\"J"));
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNull(node1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertFalse(linkedHashSet0.contains("*g@&vxJIvZAM!pn\"J"));
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isScript());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNew());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFor());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Node node0 = Node.newString("a buWZNQB{)3CK");
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVoid());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNE());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertNotNull(node0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(30, 30, token_CommentType0, "a buWZNQB{)3CK");
      assertFalse(comment0.hasChildren());
      assertEquals("a buWZNQB{)3CK", comment0.getValue());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(30, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(30, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(30, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertNotNull(comment0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("a buWZNQB{)3CK"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("a buWZNQB{)3CK"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(")qH(?r>y", 47);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertFalse(linkedHashSet0.contains("a buWZNQB{)3CK"));
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isBreak());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVoid());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNE());
      assertFalse(node0.isReturn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFunction());
      assertFalse(comment0.hasChildren());
      assertEquals("a buWZNQB{)3CK", comment0.getValue());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(30, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(30, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(30, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("function", 40, 40);
      assertNotNull(jsDocTokenStream0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("function"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("function"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("function"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.RC;
      Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(linkedHashSet0.contains("function"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertNull(node0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertFalse(linkedHashSet0.contains("function"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Node node0 = Node.newString("*g@&vxJIvZAM!pn\"J");
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCall());
      assertTrue(node0.mayMutateArguments());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*g@&vxJIvZAM!pn\"J");
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("*g@&vxJIvZAM!pn\"J"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("*g@&vxJIvZAM!pn\"J"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("*g@&vxJIvZAM!pn\"J"));
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCall());
      assertTrue(node0.mayMutateArguments());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.RB;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(linkedHashSet0.contains("*g@&vxJIvZAM!pn\"J"));
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCall());
      assertTrue(node0.mayMutateArguments());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertNull(node1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertFalse(linkedHashSet0.contains("*g@&vxJIvZAM!pn\"J"));
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCase());
      assertFalse(node0.isDo());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCall());
      assertTrue(node0.mayMutateArguments());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isIn());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("?8_5|Q4l{VYtqsrAsT%a");
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCase());
      assertEquals(5, node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isQuotedString());
      assertEquals(5, node0.getSourcePosition());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDo());
      assertEquals(301, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertTrue(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("?8_5|Q4l{VYtqsrAsT%a");
      assertNotNull(jsDocTokenStream0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("?8_5|Q4l{VYtqsrAsT%a"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("?8_5|Q4l{VYtqsrAsT%a"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("?8_5|Q4l{VYtqsrAsT%a"));
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCase());
      assertEquals(5, node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isQuotedString());
      assertEquals(5, node0.getSourcePosition());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDo());
      assertEquals(301, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertTrue(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.PIPE;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(linkedHashSet0.contains("?8_5|Q4l{VYtqsrAsT%a"));
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCase());
      assertEquals(5, node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isQuotedString());
      assertEquals(5, node0.getSourcePosition());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDo());
      assertEquals(301, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertTrue(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertNull(node1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertFalse(linkedHashSet0.contains("?8_5|Q4l{VYtqsrAsT%a"));
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isString());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCase());
      assertEquals(5, node0.getCharno());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.isQuotedString());
      assertEquals(5, node0.getSourcePosition());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDo());
      assertEquals(301, node0.getType());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertTrue(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNull());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(1440, 1440, token_CommentType0, "?8_5|Q4e{VYtqsrVsT%a");
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals(1440, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals(1440, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals("?8_5|Q4e{VYtqsrVsT%a", comment0.getValue());
      assertEquals(1440, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertNotNull(comment0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("?8_5|Q4e{VYtqsrVsT%a"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      assertFalse(linkedHashSet0.contains("?8_5|Q4e{VYtqsrVsT%a"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("?8_5|Q4e{VYtqsrVsT%a");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, errorCollector0);
      assertFalse(linkedHashSet0.contains("?8_5|Q4e{VYtqsrVsT%a"));
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals(1440, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals(1440, comment0.getAbsolutePosition());
      assertEquals(161, comment0.getType());
      assertEquals("?8_5|Q4e{VYtqsrVsT%a", comment0.getValue());
      assertEquals(1440, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("@\n", 15, 57);
      assertNotNull(jsDocTokenStream0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("@\n"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("@\n"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("@\n"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.LT;
      Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(linkedHashSet0.contains("@\n"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNull(node0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertFalse(linkedHashSet0.contains("@\n"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("(xIDwDQK n$[T%8H6f", 8, (-862048943));
      assertNotNull(jsDocTokenStream0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains("(xIDwDQK n$[T%8H6f"));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
      assertFalse(hashSet0.contains("(xIDwDQK n$[T%8H6f"));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, toolErrorReporter0);
      assertFalse(hashSet0.contains("(xIDwDQK n$[T%8H6f"));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertFalse(hashSet0.contains("(xIDwDQK n$[T%8H6f"));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("ms.jsoc.expose");
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(14, node0.getLength());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{1");
      assertNotNull(jsDocTokenStream0);
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNotNull(jSDocInfo0);
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertFalse(set0.contains("ms.jsoc.expose"));
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertFalse(set0.contains("ms.jsoc.expose"));
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(config0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, (ErrorReporter) null);
      assertFalse(set0.contains("ms.jsoc.expose"));
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals(14, node0.getLength());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("a bwWZNQB{)3CK");
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertEquals(1, node0.getLength());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDelProp());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertNotNull(node0);
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("a bwWZNQB{)3CK"));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertFalse(treeSet0.contains("a bwWZNQB{)3CK"));
      assertNotNull(config0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("[");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, (ErrorReporter) null);
      assertFalse(treeSet0.contains("["));
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertEquals(1, node0.getLength());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isNew());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDelProp());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertNotNull(jsDocInfoParser0);
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("@");
      assertNotNull(jsDocTokenStream0);
      
      Node node0 = Node.newString("@", 26, 26);
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAdd());
      assertEquals(26, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertEquals(106522, node0.getSourcePosition());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getLength());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(26, node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertNotNull(node0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains("@"));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(hashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
      assertFalse(hashSet0.contains("@"));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertNotNull(config0);
      
      JsDocToken jsDocToken0 = JsDocToken.GT;
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(hashSet0.contains("@"));
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAdd());
      assertEquals(26, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertEquals(106522, node0.getSourcePosition());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getLength());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(26, node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertNotNull(jsDocInfoParser0);
      
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(hashSet0.contains("@"));
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAdd());
      assertEquals(26, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertEquals(106522, node0.getSourcePosition());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getLength());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(26, node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertNull(node1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertFalse(hashSet0.contains("@"));
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAdd());
      assertEquals(26, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCast());
      assertFalse(node0.isVar());
      assertFalse(node0.isLabelName());
      assertEquals(106522, node0.getSourcePosition());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertFalse(node0.isParamList());
      assertFalse(node0.isScript());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isHook());
      assertFalse(node0.isIf());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getLength());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(26, node0.getLineno());
      assertFalse(node0.isCase());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("^VU'\"");
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertEquals(5, node0.getLength());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("K");
      assertNotNull(jsDocTokenStream0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("K"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("K"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("K"));
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertEquals(5, node0.getLength());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.COLON;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(linkedHashSet0.contains("K"));
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertEquals(5, node0.getLength());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertNull(node1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertFalse(linkedHashSet0.contains("K"));
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertEquals(5, node0.getLength());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isIn());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("@\n", 15, 57);
      assertNotNull(jsDocTokenStream0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("@\n"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("@\n"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("@\n"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.COMMA;
      Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(linkedHashSet0.contains("@\n"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertNull(node0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertFalse(linkedHashSet0.contains("@\n"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!", 4, 43);
      assertNotNull(jsDocTokenStream0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains("!"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(hashSet0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
      assertFalse(hashSet0.contains("!"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertNotNull(config0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, toolErrorReporter0);
      assertFalse(hashSet0.contains("!"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(jsDocInfoParser0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertFalse(hashSet0.contains("!"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("-I;}s");
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("-I;}s"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("-I;}s"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(toolErrorReporter0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("-I;}s"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotNull(jsDocInfoParser0);
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(linkedHashSet0.contains("-I;}s"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isInc());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isContinue());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals(3, node0.getLength());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFunction());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isCase());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertNotNull(node0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("msg.jsdoc.expose");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*lkh~VR|7sB'YYGq1JR", 48);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.ANNOTATION;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertEquals(0, node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("a bwWZNQB{)3CK");
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(30, 30, token_CommentType0, "a bwWZNQB{)3CK");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Node tree inequality:\nTree1:\n");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("@\n", 15, 57);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.ANNOTATION;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{-1");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, toolErrorReporter0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Node node0 = Node.newString("*g@&vxJIvZAM!pn\"J");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*g@&vxJIvZAM!pn\"J", 1);
      node0.setSourceFileForTesting(";");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertFalse(jSDocInfo0.hasThisType());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("null");
      assertEquals(0, node0.getSourcePosition());
      assertEquals(4, node0.getLength());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("*g@&vxJIvZAM!pn\"J");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*g@&vxJIvZAM!pn\"J");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("*g@&vxJIvZAM!pn\"J");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*g@&vxJIvZAM!pn\"J");
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, (ErrorReporter) null);
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("msg.jsdoc.expose");
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsdoc.expose", 48);
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      Set<String> set0 = jSDocInfo0.getSuppressions();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
      assertEquals(0, node0.getSourcePosition());
      assertEquals(16, node0.getLength());
      assertEquals(0, node0.getLineno());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Node node0 = Node.newString("!");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!", 47);
      HashSet<String> hashSet0 = new HashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("(0))K");
      assertEquals(301, node0.getType());
      assertNotNull(node0);
      assertTrue(node0.hasOneChild());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("asin");
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("asin");
      HashSet<String> hashSet0 = new HashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      jsDocInfoParser0.hasParsedJSDocInfo();
      assertEquals(0, node0.getSourcePosition());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("asin");
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("asin");
      HashSet<String> hashSet0 = new HashSet<String>();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.EOC;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertTrue(boolean0);
      assertEquals(0, node0.getSourcePosition());
  }
}
