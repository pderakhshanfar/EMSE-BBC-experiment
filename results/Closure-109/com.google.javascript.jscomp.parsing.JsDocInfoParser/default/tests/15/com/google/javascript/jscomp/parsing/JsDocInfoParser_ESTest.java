/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 00:50:10 GMT 2020
 */

package com.google.javascript.jscomp.parsing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocToken;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Node;
import com.google.javascript.rhino.head.Token;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import java.nio.charset.Charset;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsDocInfoParser_ESTest extends JsDocInfoParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(36, 704, token_CommentType0, (String) null);
      assertNotNull(comment0);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(161, comment0.getType());
      assertEquals(36, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(0, comment0.depth());
      assertEquals(704, comment0.getLength());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(36, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertNull(comment0.getValue());
      assertFalse(comment0.hasChildren());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("JWGOI4` ", 3, 2);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("JWGOI4` "));
      assertNotNull(jsDocInfoParser0);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(161, comment0.getType());
      assertEquals(36, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(0, comment0.depth());
      assertEquals(704, comment0.getLength());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(36, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertNull(comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocToken jsDocToken0 = JsDocToken.RC;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(linkedHashSet0.contains("JWGOI4` "));
      assertNull(node0);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(161, comment0.getType());
      assertEquals(36, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(0, comment0.depth());
      assertEquals(704, comment0.getLength());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(36, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertNull(comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(linkedHashSet0.contains("JWGOI4` "));
      assertFalse(boolean0);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.RIGHT);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(161, comment0.getType());
      assertEquals(36, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals(0, comment0.depth());
      assertEquals(704, comment0.getLength());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(36, comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertNull(comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("fuwction");
      assertNotNull(node0);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInc());
      assertEquals(8, node0.getLength());
      assertTrue(node0.isString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("fuwction");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(2, (-1879783279), token_CommentType0, "fuwction");
      assertNotNull(comment0);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(2, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(2, comment0.getAbsolutePosition());
      assertEquals((-1879783279), comment0.getLength());
      assertEquals("fuwction", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      
      Set<String> set0 = jSDocInfo0.getModifies();
      assertFalse(set0.contains("fuwction"));
      assertNotNull(set0);
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertFalse(set0.contains("fuwction"));
      assertNotNull(config0);
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, (ErrorReporter) null);
      assertFalse(set0.contains("fuwction"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInc());
      assertEquals(8, node0.getLength());
      assertTrue(node0.isString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(2, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(2, comment0.getAbsolutePosition());
      assertEquals((-1879783279), comment0.getLength());
      assertEquals("fuwction", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.parseInlineTypeDoc();
      assertFalse(jSDocInfo1.equals((Object)jSDocInfo0));
      assertFalse(set0.contains("fuwction"));
      assertNotSame(jSDocInfo0, jSDocInfo1);
      assertNotSame(jSDocInfo1, jSDocInfo0);
      assertNotNull(jSDocInfo1);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isInc());
      assertEquals(8, node0.getLength());
      assertTrue(node0.isString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(2, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(2, comment0.getAbsolutePosition());
      assertEquals((-1879783279), comment0.getLength());
      assertEquals("fuwction", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasReturnType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isExport());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getReturnDescription());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(jSDocInfo1.isJaggerProvide());
      assertFalse(jSDocInfo1.isDisposes());
      assertFalse(jSDocInfo1.isStableIdGenerator());
      assertEquals(2, jSDocInfo1.getOriginalCommentPosition());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo1.getVisibility());
      assertFalse(jSDocInfo1.isNoSideEffects());
      assertFalse(jSDocInfo1.hasFileOverview());
      assertFalse(jSDocInfo1.isMappedIdGenerator());
      assertFalse(jSDocInfo1.isJavaDispatch());
      assertFalse(jSDocInfo1.isDeprecated());
      assertTrue(jSDocInfo1.containsDeclaration());
      assertFalse(jSDocInfo1.makesDicts());
      assertEquals(0, jSDocInfo1.getExtendedInterfacesCount());
      assertFalse(jSDocInfo1.isImplicitCast());
      assertFalse(jSDocInfo1.isNoAlias());
      assertFalse(jSDocInfo1.isNoCompile());
      assertNull(jSDocInfo1.getBlockDescription());
      assertNull(jSDocInfo1.getDeprecationReason());
      assertFalse(jSDocInfo1.hasReturnType());
      assertFalse(jSDocInfo1.isIdGenerator());
      assertFalse(jSDocInfo1.isConstructor());
      assertFalse(jSDocInfo1.isInterface());
      assertTrue(jSDocInfo1.hasType());
      assertFalse(jSDocInfo1.isDefine());
      assertNull(jSDocInfo1.getDescription());
      assertFalse(jSDocInfo1.shouldPreserveTry());
      assertFalse(jSDocInfo1.makesStructs());
      assertFalse(jSDocInfo1.hasEnumParameterType());
      assertEquals(0, jSDocInfo1.getParameterCount());
      assertNull(jSDocInfo1.getFileOverview());
      assertEquals("fuwction", jSDocInfo1.getOriginalCommentString());
      assertNull(jSDocInfo1.getMeaning());
      assertFalse(jSDocInfo1.hasThisType());
      assertFalse(jSDocInfo1.isConstant());
      assertFalse(jSDocInfo1.hasModifies());
      assertEquals("JSDocInfo", jSDocInfo1.toString());
      assertFalse(jSDocInfo1.isJaggerInject());
      assertFalse(jSDocInfo1.isWizaction());
      assertFalse(jSDocInfo1.isExpose());
      assertFalse(jSDocInfo1.isOverride());
      assertNull(jSDocInfo1.getVersion());
      assertFalse(jSDocInfo1.isNoShadow());
      assertEquals(0, jSDocInfo1.getImplementedInterfaceCount());
      assertNull(jSDocInfo1.getLendsName());
      assertFalse(jSDocInfo1.isNgInject());
      assertFalse(jSDocInfo1.isExport());
      assertFalse(jSDocInfo1.isJaggerModule());
      assertFalse(jSDocInfo1.isExterns());
      assertFalse(jSDocInfo1.isNoTypeCheck());
      assertFalse(jSDocInfo1.isHidden());
      assertNull(jSDocInfo1.getReturnDescription());
      assertNull(jSDocInfo1.getLicense());
      assertFalse(jSDocInfo1.isConsistentIdGenerator());
      assertFalse(jSDocInfo1.hasBaseType());
      assertFalse(jSDocInfo1.hasTypedefType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("xz{ZAb-Wo8O");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment((-1692), (-1692), token_CommentType0, "xz{ZAb-Wo8O");
      assertNotNull(comment0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-1692), comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals((-1692), comment0.getLength());
      assertEquals((-1692), comment0.getAbsolutePosition());
      assertEquals("xz{ZAb-Wo8O", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("xz{ZAb-Wo8O");
      assertNotNull(node0);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDebugger());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      
      Locale locale0 = Locale.KOREA;
      assertNotNull(locale0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains("xz{ZAb-Wo8O"));
      assertNotNull(set0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      assertFalse(set0.contains("xz{ZAb-Wo8O"));
      assertNotNull(config0);
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertFalse(set0.contains("xz{ZAb-Wo8O"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-1692), comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals((-1692), comment0.getLength());
      assertEquals((-1692), comment0.getAbsolutePosition());
      assertEquals("xz{ZAb-Wo8O", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDebugger());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertFalse(set0.contains("xz{ZAb-Wo8O"));
      assertNotNull(jSDocInfo0);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals((-1692), comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals((-1692), comment0.getLength());
      assertEquals((-1692), comment0.getAbsolutePosition());
      assertEquals("xz{ZAb-Wo8O", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isCase());
      assertFalse(node0.isThis());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isInc());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isName());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDebugger());
      assertEquals(2, node0.getLength());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCall());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isLabel());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertEquals("KR", locale0.getCountry());
      assertEquals("ko_KR", locale0.toString());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("KOR", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getVersion());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertTrue(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertTrue(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertEquals("xz{ZAb-Wo8O", jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getBlockDescription());
      assertEquals((-1692), jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getReturnDescription());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isDeprecated());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("D^<|ElEb|VE]");
      assertNotNull(node0);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVar());
      assertEquals(301, node0.getType());
      assertFalse(node0.isOr());
      assertEquals(3, node0.getChildCount());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLocalResultCall());
      assertEquals(4, node0.getSourcePosition());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(4, node0.getCharno());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("D^<|ElEb|VE]");
      assertNotNull(jsDocTokenStream0);
      
      Locale locale0 = Locale.FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains("D^<|ElEb|VE]"));
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertFalse(set0.contains("D^<|ElEb|VE]"));
      assertNotNull(config0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Context context0 = new Context();
      assertNotNull(context0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertNotNull(errorReporter0);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorReporter0);
      assertFalse(set0.contains("D^<|ElEb|VE]"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVar());
      assertEquals(301, node0.getType());
      assertFalse(node0.isOr());
      assertEquals(3, node0.getChildCount());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLocalResultCall());
      assertEquals(4, node0.getSourcePosition());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(4, node0.getCharno());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(set0.contains("D^<|ElEb|VE]"));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isContinue());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVar());
      assertEquals(301, node0.getType());
      assertFalse(node0.isOr());
      assertEquals(3, node0.getChildCount());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLocalResultCall());
      assertEquals(4, node0.getSourcePosition());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isThis());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isWith());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertEquals(4, node0.getCharno());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(context0.isGeneratingSource());
      assertFalse(context0.isSealed());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertTrue(node1.hasMoreThanOneChild());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isHook());
      assertFalse(node1.isNoSideEffectsCall());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNE());
      assertFalse(node1.isBreak());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIf());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isIn());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isScript());
      assertEquals(4, node1.getCharno());
      assertFalse(node1.isTry());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isCatch());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isParamList());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isNew());
      assertFalse(node1.isDo());
      assertFalse(node1.isBlock());
      assertFalse(node1.isWhile());
      assertFalse(node1.isVar());
      assertFalse(node1.isCall());
      assertFalse(node1.wasEmptyNode());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isContinue());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isNull());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isName());
      assertEquals(4, node1.getSourcePosition());
      assertFalse(node1.isOr());
      assertFalse(node1.isAdd());
      assertFalse(node1.isFunction());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isAnd());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isComma());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isDec());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isReturn());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(3, node1.getChildCount());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isObjectLit());
      assertEquals(301, node1.getType());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isNot());
      assertFalse(node1.isString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      
      Set<String> set0 = charset0.aliases();
      assertNotNull(set0);
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, true);
      assertNotNull(config0);
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("~-\"/h).Nn\"1r1([U");
      assertNotNull(jsDocTokenStream0);
      
      com.google.javascript.rhino.Node node0 = new com.google.javascript.rhino.Node(14, 14, 14);
      assertNotNull(node0);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertEquals(14, node0.getLineno());
      assertEquals(57358, node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(14, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOr());
      assertEquals(14, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(set0.contains("~-\"/h).Nn\"1r1([U"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertEquals(14, node0.getLineno());
      assertEquals(57358, node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(14, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOr());
      assertEquals(14, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      
      JsDocToken jsDocToken0 = JsDocToken.LP;
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(set0.contains("~-\"/h).Nn\"1r1([U"));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertEquals(14, node0.getLineno());
      assertEquals(57358, node0.getSourcePosition());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isNull());
      assertFalse(node0.isCall());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(14, node0.getCharno());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOr());
      assertEquals(14, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isCast());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertFalse(node1.isName());
      assertFalse(node1.isQuotedString());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isWhile());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isBlock());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isCatch());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isDo());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTrue());
      assertFalse(node1.isOr());
      assertFalse(node1.isCast());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isExprResult());
      assertTrue(node1.hasOneChild());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isFunction());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAnd());
      assertFalse(node1.isReturn());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isGetProp());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isFromExterns());
      assertEquals(301, node1.getType());
      assertFalse(node1.isString());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isBreak());
      assertFalse(node1.isThis());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isComma());
      assertFalse(node1.isIn());
      assertFalse(node1.isInstanceOf());
      assertTrue(node1.hasChildren());
      assertFalse(node1.isIf());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isOptionalArg());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isTry());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDefaultCase());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isFor());
      assertFalse(node1.isWith());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isCase());
      assertFalse(node1.isScript());
      assertFalse(node1.isNumber());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isGetterDef());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("xz{ZAb-Wo8O");
      assertNotNull(jsDocTokenStream0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains("xz{ZAb-Wo8O"));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
      assertFalse(hashSet0.contains("xz{ZAb-Wo8O"));
      assertNotNull(config0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("CoeQ9!8$T&_2f?6Pl");
      assertNotNull(node0);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertEquals(5, node0.getCharno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertEquals(306, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFor());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(5, node0.getSourcePosition());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, (ErrorReporter) null);
      assertFalse(hashSet0.contains("CoeQ9!8$T&_2f?6Pl"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertEquals(5, node0.getCharno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertEquals(306, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFor());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(5, node0.getSourcePosition());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      assertFalse(hashSet0.contains("CoeQ9!8$T&_2f?6Pl"));
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertEquals(5, node0.getCharno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertEquals(306, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFor());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(5, node0.getSourcePosition());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isDefine());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExpose());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      
      JSDocInfo jSDocInfo1 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertFalse(hashSet0.contains("CoeQ9!8$T&_2f?6Pl"));
      assertSame(jSDocInfo1, jSDocInfo0);
      assertNotNull(jSDocInfo1);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDo());
      assertEquals(5, node0.getCharno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isBreak());
      assertEquals(306, node0.getType());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isHook());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFor());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(5, node0.getSourcePosition());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(jSDocInfo1.isJaggerProvide());
      assertFalse(jSDocInfo1.isStableIdGenerator());
      assertFalse(jSDocInfo1.hasType());
      assertFalse(jSDocInfo1.isDisposes());
      assertFalse(jSDocInfo1.isJavaDispatch());
      assertEquals(0, jSDocInfo1.getExtendedInterfacesCount());
      assertNull(jSDocInfo1.getOriginalCommentString());
      assertFalse(jSDocInfo1.isDefine());
      assertFalse(jSDocInfo1.isImplicitCast());
      assertFalse(jSDocInfo1.isMappedIdGenerator());
      assertFalse(jSDocInfo1.isDeprecated());
      assertFalse(jSDocInfo1.isHidden());
      assertFalse(jSDocInfo1.hasFileOverview());
      assertNull(jSDocInfo1.getDeprecationReason());
      assertFalse(jSDocInfo1.isExterns());
      assertFalse(jSDocInfo1.hasBaseType());
      assertFalse(jSDocInfo1.isExport());
      assertFalse(jSDocInfo1.isOverride());
      assertFalse(jSDocInfo1.isWizaction());
      assertFalse(jSDocInfo1.hasTypedefType());
      assertNull(jSDocInfo1.getVersion());
      assertNull(jSDocInfo1.getReturnDescription());
      assertFalse(jSDocInfo1.isJaggerModule());
      assertNull(jSDocInfo1.getLicense());
      assertFalse(jSDocInfo1.isConsistentIdGenerator());
      assertEquals(0, jSDocInfo1.getOriginalCommentPosition());
      assertFalse(jSDocInfo1.isNoTypeCheck());
      assertFalse(jSDocInfo1.isConstant());
      assertFalse(jSDocInfo1.hasThisType());
      assertNull(jSDocInfo1.getMeaning());
      assertNull(jSDocInfo1.getFileOverview());
      assertNull(jSDocInfo1.getVisibility());
      assertFalse(jSDocInfo1.isConstructor());
      assertNull(jSDocInfo1.getLendsName());
      assertNull(jSDocInfo1.getBlockDescription());
      assertFalse(jSDocInfo1.isInterface());
      assertFalse(jSDocInfo1.isNoShadow());
      assertFalse(jSDocInfo1.isExpose());
      assertFalse(jSDocInfo1.isJaggerInject());
      assertFalse(jSDocInfo1.hasModifies());
      assertFalse(jSDocInfo1.isIdGenerator());
      assertEquals(0, jSDocInfo1.getImplementedInterfaceCount());
      assertFalse(jSDocInfo1.isNoCompile());
      assertEquals(0, jSDocInfo1.getParameterCount());
      assertFalse(jSDocInfo1.hasEnumParameterType());
      assertFalse(jSDocInfo1.containsDeclaration());
      assertFalse(jSDocInfo1.isNgInject());
      assertFalse(jSDocInfo1.makesDicts());
      assertFalse(jSDocInfo1.shouldPreserveTry());
      assertEquals("JSDocInfo", jSDocInfo1.toString());
      assertFalse(jSDocInfo1.isNoSideEffects());
      assertFalse(jSDocInfo1.makesStructs());
      assertNull(jSDocInfo1.getDescription());
      assertFalse(jSDocInfo1.isNoAlias());
      assertFalse(jSDocInfo1.hasReturnType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("[&HX t*BhE9~3}");
      assertNull(node0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(1, 12, token_CommentType0, "[&HX t*BhE9~3}");
      assertNotNull(comment0);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(1, comment0.getPosition());
      assertEquals(12, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals("[&HX t*BhE9~3}", comment0.getValue());
      assertNull(comment0.getJsDoc());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      
      Set<String> set0 = charset0.aliases();
      assertFalse(set0.contains("[&HX t*BhE9~3}"));
      assertNotNull(set0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertFalse(set0.contains("[&HX t*BhE9~3}"));
      assertNotNull(config0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Z`e", 12);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertFalse(set0.contains("[&HX t*BhE9~3}"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(1, comment0.getPosition());
      assertEquals(12, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals("[&HX t*BhE9~3}", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression((com.google.javascript.rhino.Node) null);
      assertFalse(set0.contains("[&HX t*BhE9~3}"));
      assertNull(jSTypeExpression0);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(1, comment0.getPosition());
      assertEquals(12, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals("[&HX t*BhE9~3}", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("xz{ZAb-Wo8O");
      assertNotNull(jsDocTokenStream0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains("xz{ZAb-Wo8O"));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
      assertFalse(hashSet0.contains("xz{ZAb-Wo8O"));
      assertNotNull(config0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("CoeQ9!8$T&_2f?6Pl");
      assertNotNull(node0);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getLength());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isComma());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isScript());
      assertEquals(306, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertEquals(5, node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertEquals(5, node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, (ErrorReporter) null);
      assertFalse(hashSet0.contains("CoeQ9!8$T&_2f?6Pl"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getLength());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isComma());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isScript());
      assertEquals(306, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertEquals(5, node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertEquals(5, node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression(node0);
      assertFalse(hashSet0.contains("CoeQ9!8$T&_2f?6Pl"));
      assertNotNull(jSTypeExpression0);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTry());
      assertFalse(node0.isHook());
      assertFalse(node0.isTrue());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertEquals(0, node0.getLength());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFor());
      assertFalse(node0.isComma());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isScript());
      assertEquals(306, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDefaultCase());
      assertEquals(5, node0.getSourcePosition());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertEquals(5, node0.getCharno());
      assertFalse(node0.isDo());
      assertFalse(node0.isNumber());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isName());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInc());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsDocInfoParser.parseTypeString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{f<_0+:", 52, (-3683));
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(46, 52, token_CommentType0, "{f<_0+:");
      assertNotNull(comment0);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, comment0.depth());
      assertEquals(46, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(46, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals("{f<_0+:", comment0.getValue());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(52, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("{f<_0+:"));
      assertNotNull(config0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, errorCollector0);
      assertFalse(linkedHashSet0.contains("{f<_0+:"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.RIGHT);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, comment0.depth());
      assertEquals(46, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(46, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals("{f<_0+:", comment0.getValue());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(52, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("genrated btecode for methd exceedB 64K lif .");
      assertNotNull(node0);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertEquals(8, node0.getLength());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("genrated btecode for methd exceedB 64K lif .");
      assertNotNull(jsDocTokenStream0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains("genrated btecode for methd exceedB 64K lif ."));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      jsDocTokenStream0.sourceCursor = 4095;
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
      assertFalse(hashSet0.contains("genrated btecode for methd exceedB 64K lif ."));
      assertNotNull(config0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, (ErrorReporter) null);
      assertFalse(hashSet0.contains("genrated btecode for methd exceedB 64K lif ."));
      assertNotNull(jsDocInfoParser0);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertEquals(8, node0.getLength());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertTrue(node0.isString());
      assertFalse(node0.isName());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("Object#Element");
      assertNotNull(node0);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isCatch());
      assertEquals(14, node0.getLength());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isScript());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertFalse(set0.contains("Object#Element"));
      assertNotNull(set0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertFalse(set0.contains("Object#Element"));
      assertNotNull(config0);
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser((JsDocTokenStream) null, (Comment) null, node0, config0, errorCollector0);
      assertFalse(set0.contains("Object#Element"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertFalse(node0.isWhile());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isCatch());
      assertEquals(14, node0.getLength());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isScript());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsdoc.nocheck");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(29, 54, token_CommentType0, "msg.jsdoc.nocheck");
      assertNotNull(comment0);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(29, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals("msg.jsdoc.nocheck", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(29, comment0.getAbsolutePosition());
      assertEquals(54, comment0.getLength());
      assertEquals("161", comment0.toString());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      assertFalse(linkedHashSet0.contains("msg.jsdoc.nocheck"));
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, errorCollector0);
      assertFalse(linkedHashSet0.contains("msg.jsdoc.nocheck"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(29, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertEquals("msg.jsdoc.nocheck", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(29, comment0.getAbsolutePosition());
      assertEquals(54, comment0.getLength());
      assertEquals("161", comment0.toString());
      
      JsDocToken jsDocToken0 = JsDocToken.ELLIPSIS;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("w`2^aNLJbZK,");
      assertNotNull(node0);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertEquals(11, node0.getLength());
      assertFalse(node0.isRegExp());
      assertEquals(40, node0.getType());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(1, 12, token_CommentType0, "w`2^aNLJbZK,");
      assertNotNull(comment0);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals("161", comment0.toString());
      assertEquals(1, comment0.getPosition());
      assertEquals("w`2^aNLJbZK,", comment0.getValue());
      assertEquals(12, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("w`2^aNLJbZK,"));
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      assertFalse(linkedHashSet0.contains("w`2^aNLJbZK,"));
      assertNotNull(config0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("w`2^aNLJbZK,", 1);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("w`2^aNLJbZK,"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInc());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getChildCount());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertEquals(11, node0.getLength());
      assertFalse(node0.isRegExp());
      assertEquals(40, node0.getType());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals("161", comment0.toString());
      assertEquals(1, comment0.getPosition());
      assertEquals("w`2^aNLJbZK,", comment0.getValue());
      assertEquals(12, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      jsDocTokenStream0.sourceCursor = 55;
      JsDocToken jsDocToken0 = JsDocToken.LP;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString("Kji2j");
      assertNotNull(node0);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCatch());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCall());
      assertTrue(node0.isString());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(1, 12, token_CommentType0, "Kji2j");
      assertNotNull(comment0);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertNull(comment0.getJsDoc());
      assertEquals(1, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals("Kji2j", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(12, comment0.getLength());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("Kji2j"));
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      assertFalse(linkedHashSet0.contains("Kji2j"));
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Kji2j", 1);
      assertNotNull(jsDocTokenStream0);
      
      jsDocTokenStream0.sourceCursor = (-1196);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("Kji2j"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.LEFT);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isHook());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isCatch());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCall());
      assertTrue(node0.isString());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isTry());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNoSideEffectsCall());
      assertNull(comment0.getJsDoc());
      assertEquals(1, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals("Kji2j", comment0.getValue());
      assertEquals(0, comment0.depth());
      assertEquals(12, comment0.getLength());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("fuwction");
      assertNotNull(node0);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertEquals(8, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isBlock());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAdd());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(35, 55, token_CommentType0, "fuwction");
      assertNotNull(comment0);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals(55, comment0.getLength());
      assertEquals("fuwction", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(35, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(35, comment0.getAbsolutePosition());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = null;
      try {
        jsDocInfoParser0 = new JsDocInfoParser((JsDocTokenStream) null, comment0, node0, (Config) null, errorCollector0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("sr");
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("sr"));
      assertNotNull(config0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("sr"));
      assertNotNull(jsDocInfoParser0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocToken jsDocToken0 = JsDocToken.EOL;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(linkedHashSet0.contains("sr"));
      assertNull(node0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(linkedHashSet0.contains("sr"));
      assertFalse(boolean0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("{f<_0+:");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("{f2_-0+:V");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("{>{G:w4)}06I^X%'?@");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("[&HX t*BhE9~3}");
      assertNull(node0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(1, 12, token_CommentType0, "[&HX t*BhE9~3}");
      assertNotNull(comment0);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals("[&HX t*BhE9~3}", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(12, comment0.getLength());
      assertEquals(1, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      Set<String> set0 = charset0.aliases();
      assertFalse(set0.contains("[&HX t*BhE9~3}"));
      assertNotNull(set0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertFalse(set0.contains("[&HX t*BhE9~3}"));
      assertNotNull(config0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("8Wq5<,{L", (-1727635388));
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertFalse(set0.contains("8Wq5<,{L"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals("[&HX t*BhE9~3}", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(12, comment0.getLength());
      assertEquals(1, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocToken jsDocToken0 = JsDocToken.LB;
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(set0.contains("8Wq5<,{L"));
      assertNull(node1);
      assertEquals(0, Node.BOTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals("[&HX t*BhE9~3}", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(12, comment0.getLength());
      assertEquals(1, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("(I)Ljava/lang/Integer;");
      assertNotNull(node0);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertEquals(301, node0.getType());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isWith());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAdd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isName());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("(I)Ljava/lang/Integer;", 1395);
      assertNotNull(jsDocTokenStream0);
      
      Locale locale0 = Locale.ITALY;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertFalse(set0.contains("(I)Ljava/lang/Integer;"));
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertFalse(set0.contains("(I)Ljava/lang/Integer;"));
      assertNotNull(config0);
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      assertFalse(set0.contains("(I)Ljava/lang/Integer;"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertEquals(301, node0.getType());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isWith());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAdd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isName());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertFalse(set0.contains("(I)Ljava/lang/Integer;"));
      assertNull(jSDocInfo0);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertEquals(301, node0.getType());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isWith());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isScript());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isContinue());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAdd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isName());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("IT", locale0.getCountry());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ITA", locale0.getISO3Country());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("?(X1j#>9s]$d]");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("mJ|x,!)UGJ");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("undefined");
      assertNotNull(node0);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.isCatch());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isIn());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(9, node0.getLength());
      assertFalse(node0.isFunction());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isWith());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDo());
      assertFalse(node0.isExprResult());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getCharno());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("null");
      assertNotNull(node0);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isInc());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTrue());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isWith());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getLineno());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("function");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("*o}g");
      assertNotNull(node0);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isParamList());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isHook());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isCast());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOr());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(302, node0.getType());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isSyntheticBlock());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      com.google.javascript.rhino.Node node0 = new com.google.javascript.rhino.Node(57343);
      assertNotNull(node0);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isString());
      assertEquals(57343, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.hasOneChild());
      
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(">", (-538), 4095);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains(">"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isString());
      assertEquals(57343, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.hasOneChild());
      
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(linkedHashSet0.contains(">"));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isString());
      assertEquals(57343, node0.getType());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAssign());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isIn());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.hasOneChild());
      assertFalse(node1.isComma());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isWith());
      assertFalse(node1.isInc());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isIn());
      assertEquals(0, node1.getLength());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCast());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isContinue());
      assertFalse(node1.isAssign());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isString());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isSyntheticBlock());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isParamList());
      assertFalse(node1.isQuotedString());
      assertEquals(304, node1.getType());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isCatch());
      assertEquals(0, node1.getChildCount());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isBlock());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isVoid());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.isName());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isEmpty());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isFor());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isScript());
      assertFalse(node1.isSwitch());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isTry());
      assertFalse(node1.isCase());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isStringKey());
      assertEquals((-1), node1.getCharno());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("[&HX t*BhE9~3}");
      assertNull(node0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(1, 12, token_CommentType0, "[&HX t*BhE9~3}");
      assertNotNull(comment0);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals("[&HX t*BhE9~3}", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(12, comment0.getLength());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(1, comment0.getPosition());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      
      Set<String> set0 = charset0.aliases();
      assertFalse(set0.contains("[&HX t*BhE9~3}"));
      assertNotNull(set0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertFalse(set0.contains("[&HX t*BhE9~3}"));
      assertNotNull(config0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("8Wq5<,{L", (-1727635388));
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertFalse(set0.contains("[&HX t*BhE9~3}"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals("[&HX t*BhE9~3}", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(12, comment0.getLength());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(1, comment0.getPosition());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocToken jsDocToken0 = JsDocToken.PIPE;
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(set0.contains("[&HX t*BhE9~3}"));
      assertNull(node1);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals("[&HX t*BhE9~3}", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(12, comment0.getLength());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(1, comment0.getPosition());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocToken jsDocToken1 = JsDocToken.QMARK;
      com.google.javascript.rhino.Node node2 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertFalse(jsDocToken1.equals((Object)jsDocToken0));
      assertFalse(set0.contains("[&HX t*BhE9~3}"));
      assertNotSame(jsDocToken1, jsDocToken0);
      assertNotNull(node2);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals("[&HX t*BhE9~3}", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(12, comment0.getLength());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(1, comment0.getPosition());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(node2.hasChildren());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isDec());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isLabelName());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isCast());
      assertFalse(node2.isLabel());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isReturn());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAssign());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isBreak());
      assertEquals(0, node2.getChangeTime());
      assertFalse(node2.isNull());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isThrow());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isQuotedString());
      assertTrue(node2.mayMutateGlobalStateOrThrow());
      assertFalse(node2.isName());
      assertFalse(node2.isCall());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isComma());
      assertFalse(node2.isFalse());
      assertFalse(node2.isString());
      assertFalse(node2.isWhile());
      assertFalse(node2.isAnd());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isNE());
      assertFalse(node2.isFor());
      assertFalse(node2.isEmpty());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFunction());
      assertFalse(node2.isLocalResultCall());
      assertFalse(node2.isInc());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isIn());
      assertEquals(304, node2.getType());
      assertFalse(node2.isThis());
      assertFalse(node2.isParamList());
      assertFalse(node2.isStringKey());
      assertEquals(0, node2.getLength());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isVar());
      assertFalse(node2.isHook());
      assertFalse(node2.isBlock());
      assertFalse(node2.isCatch());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isWith());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isScript());
      assertFalse(node2.isCase());
      assertTrue(node2.mayMutateArguments());
      assertFalse(node2.isTry());
      assertFalse(node2.isSwitch());
      assertFalse(node2.hasOneChild());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isNumber());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(1, 12, token_CommentType0, "[&HX t*BhE9~3}");
      assertNotNull(comment0);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("[&HX t*BhE9~3}", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals(1, comment0.getPosition());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals(12, comment0.getLength());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      
      Set<String> set0 = charset0.aliases();
      assertFalse(set0.contains("[&HX t*BhE9~3}"));
      assertNotNull(set0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertFalse(set0.contains("[&HX t*BhE9~3}"));
      assertNotNull(config0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("))", 2340);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertFalse(set0.contains("))"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("[&HX t*BhE9~3}", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals(1, comment0.getPosition());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals(12, comment0.getLength());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(set0.contains("))"));
      assertNotNull(node0);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(2, Node.RIGHT);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("[&HX t*BhE9~3}", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals(1, comment0.getPosition());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals(12, comment0.getLength());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDo());
      assertFalse(node0.isTypeOf());
      assertEquals(2340, node0.getLineno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertEquals(9584640, node0.getSourcePosition());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isThis());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIf());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAnd());
      assertEquals(304, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isComma());
      assertFalse(node0.isCast());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isString());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("[&HX t*BhE9~3}");
      assertNull(node0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(1, 12, token_CommentType0, "[&HX t*BhE9~3}");
      assertNotNull(comment0);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(12, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(1, comment0.getPosition());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("[&HX t*BhE9~3}", comment0.getValue());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      
      Set<String> set0 = charset0.aliases();
      assertFalse(set0.contains("[&HX t*BhE9~3}"));
      assertNotNull(set0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertFalse(set0.contains("[&HX t*BhE9~3}"));
      assertNotNull(config0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("8Wq5<,{L", (-1727635388));
      assertNotNull(jsDocTokenStream0);
      
      JsDocToken jsDocToken0 = jsDocTokenStream0.getJsDocToken();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertFalse(set0.contains("[&HX t*BhE9~3}"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(12, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(1, comment0.getPosition());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("[&HX t*BhE9~3}", comment0.getValue());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocToken jsDocToken1 = JsDocToken.QMARK;
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertFalse(jsDocToken1.equals((Object)jsDocToken0));
      assertFalse(set0.contains("[&HX t*BhE9~3}"));
      assertNotSame(jsDocToken1, jsDocToken0);
      assertNotNull(node1);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(12, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(1, comment0.getPosition());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("[&HX t*BhE9~3}", comment0.getValue());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node1.isDo());
      assertFalse(node1.isNew());
      assertFalse(node1.isAdd());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isQuotedString());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isWhile());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isLabel());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isVarArgs());
      assertEquals((-1), node1.getSourcePosition());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNumber());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVoid());
      assertFalse(node1.isExprResult());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isCall());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isName());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isTrue());
      assertFalse(node1.isInc());
      assertFalse(node1.isSwitch());
      assertEquals((-1), node1.getCharno());
      assertFalse(node1.isString());
      assertFalse(node1.isCase());
      assertFalse(node1.isFalse());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isHook());
      assertFalse(node1.isThrow());
      assertFalse(node1.isGetterDef());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isAnd());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isSyntheticBlock());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isFunction());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isWith());
      assertFalse(node1.isScript());
      assertFalse(node1.isCast());
      assertFalse(node1.isCatch());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFor());
      assertFalse(node1.isThis());
      assertFalse(node1.isNE());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isIf());
      assertEquals((-1), node1.getLineno());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertEquals(304, node1.getType());
      assertFalse(node1.isIn());
      assertEquals(0, node1.getLength());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("Upa}[:-64>@gQ}?");
      assertNotNull(jsDocTokenStream0);
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains("Upa}[:-64>@gQ}?"));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
      assertFalse(hashSet0.contains("Upa}[:-64>@gQ}?"));
      assertNotNull(config0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString("CoeQ9!8$T&_2f?6Pl");
      assertNotNull(node0);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isDebugger());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, (ErrorReporter) null);
      assertFalse(hashSet0.contains("Upa}[:-64>@gQ}?"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isDebugger());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(node1.equals((Object)node0));
      assertFalse(hashSet0.contains("Upa}[:-64>@gQ}?"));
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
      assertNotNull(node1);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVar());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isDebugger());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNE());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNumber());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isAssign());
      assertFalse(node1.isOr());
      assertFalse(node1.isDec());
      assertFalse(node1.isLabel());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isReturn());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertFalse(node1.isLabelName());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isExprResult());
      assertTrue(node1.isString());
      assertFalse(node1.isWhile());
      assertFalse(node1.isBlock());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isNot());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isThis());
      assertFalse(node1.isAnd());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isFalse());
      assertFalse(node1.isWith());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isFunction());
      assertEquals(40, node1.getType());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isThrow());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isNE());
      assertFalse(node1.isIf());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isFor());
      assertFalse(node1.isDelProp());
      assertEquals(3, node1.getLength());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isDebugger());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isHook());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isParamList());
      assertFalse(node1.isComma());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isVarArgs());
      assertEquals(0, node1.getChangeTime());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isCall());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isName());
      assertFalse(node1.isBreak());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNew());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isVar());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isDo());
      assertFalse(node1.isAdd());
      assertFalse(node1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(1, 12, token_CommentType0, "[&HX t*BhE9~3}");
      assertNotNull(comment0);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertNull(comment0.getJsDoc());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(1, comment0.getPosition());
      assertEquals("[&HX t*BhE9~3}", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals(12, comment0.getLength());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      
      Set<String> set0 = charset0.aliases();
      assertFalse(set0.contains("[&HX t*BhE9~3}"));
      assertNotNull(set0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertFalse(set0.contains("[&HX t*BhE9~3}"));
      assertNotNull(config0);
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("[&HX t*BhE9~3}", 12);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertFalse(set0.contains("[&HX t*BhE9~3}"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertNull(comment0.getJsDoc());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(1, comment0.getPosition());
      assertEquals("[&HX t*BhE9~3}", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals(12, comment0.getLength());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(set0.contains("[&HX t*BhE9~3}"));
      assertNull(node0);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertNull(comment0.getJsDoc());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(1, comment0.getPosition());
      assertEquals("[&HX t*BhE9~3}", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals(12, comment0.getLength());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(1, 12, token_CommentType0, "[&cHX t*BhE9~3}");
      assertNotNull(comment0);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(12, comment0.getLength());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(1, comment0.getPosition());
      assertEquals("[&cHX t*BhE9~3}", comment0.getValue());
      assertEquals(161, comment0.getType());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      
      Set<String> set0 = charset0.aliases();
      assertFalse(set0.contains("[&cHX t*BhE9~3}"));
      assertNotNull(set0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      assertFalse(set0.contains("[&cHX t*BhE9~3}"));
      assertNotNull(config0);
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(" ", 43, 4);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertFalse(set0.contains("[&cHX t*BhE9~3}"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(12, comment0.getLength());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(1, comment0.getPosition());
      assertEquals("[&cHX t*BhE9~3}", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocToken jsDocToken0 = JsDocToken.PIPE;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(set0.contains("[&cHX t*BhE9~3}"));
      assertNull(node0);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(12, comment0.getLength());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(1, comment0.getPosition());
      assertEquals("[&cHX t*BhE9~3}", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(set0.contains("[&cHX t*BhE9~3}"));
      assertFalse(boolean0);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(0, Node.BOTH);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(12, comment0.getLength());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(1, comment0.getPosition());
      assertEquals("[&cHX t*BhE9~3}", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(1, 12, token_CommentType0, "[&cHX t*BhE9~3}");
      assertNotNull(comment0);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals("[&cHX t*BhE9~3}", comment0.getValue());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(12, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(1, comment0.getPosition());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      
      Set<String> set0 = charset0.aliases();
      assertFalse(set0.contains("[&cHX t*BhE9~3}"));
      assertNotNull(set0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertFalse(set0.contains("[&cHX t*BhE9~3}"));
      assertNotNull(config0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("[&cHX t*BhE9~3}");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertFalse(set0.contains("[&cHX t*BhE9~3}"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals("[&cHX t*BhE9~3}", comment0.getValue());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(12, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(1, comment0.getPosition());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser1 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertFalse(jsDocInfoParser1.equals((Object)jsDocInfoParser0));
      assertFalse(set0.contains("[&cHX t*BhE9~3}"));
      assertNotNull(jsDocInfoParser1);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals("[&cHX t*BhE9~3}", comment0.getValue());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(12, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(1, comment0.getPosition());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(jsDocInfoParser0.equals((Object)jsDocInfoParser1));
      assertFalse(set0.contains("[&cHX t*BhE9~3}"));
      assertNotSame(jsDocInfoParser0, jsDocInfoParser1);
      assertNull(node0);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals("[&cHX t*BhE9~3}", comment0.getValue());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(12, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(1, comment0.getPosition());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      boolean boolean0 = jsDocInfoParser1.parse();
      assertFalse(jsDocInfoParser1.equals((Object)jsDocInfoParser0));
      assertFalse(set0.contains("[&cHX t*BhE9~3}"));
      assertNotSame(jsDocInfoParser1, jsDocInfoParser0);
      assertFalse(boolean0);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(1, Node.LEFT);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals("[&cHX t*BhE9~3}", comment0.getValue());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals(12, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(1, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(1, comment0.getPosition());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("ebugge;\n");
      assertNotNull(node0);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isIf());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(7, node0.getLength());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isLocalResultCall());
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(1, 32, token_CommentType0, "ebugge;\n");
      assertNotNull(comment0);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(1, comment0.getPosition());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(32, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals("ebugge;\n", comment0.getValue());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      
      Set<String> set0 = charset0.aliases();
      assertFalse(set0.contains("ebugge;\n"));
      assertNotNull(set0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertFalse(set0.contains("ebugge;\n"));
      assertNotNull(config0);
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("ebugge;\n", 1);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertFalse(set0.contains("ebugge;\n"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isIf());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(7, node0.getLength());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isLocalResultCall());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(1, comment0.getPosition());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(32, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals("ebugge;\n", comment0.getValue());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(set0.contains("ebugge;\n"));
      assertFalse(boolean0);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.LEFT);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertEquals(40, node0.getType());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isIf());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertEquals(7, node0.getLength());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isLocalResultCall());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(1, comment0.getPosition());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(32, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals("ebugge;\n", comment0.getValue());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.canEncode());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("sr");
      assertNotNull(jsDocTokenStream0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("sr"));
      assertNotNull(config0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("sr"));
      assertNotNull(jsDocInfoParser0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      JsDocToken jsDocToken0 = JsDocToken.EQUALS;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(linkedHashSet0.contains("sr"));
      assertNull(node0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(linkedHashSet0.contains("sr"));
      assertFalse(boolean0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString(0, "fQ");
      assertNotNull(node0);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.mayMutateArguments());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("...[");
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(48, 4, token_CommentType0, "voig");
      assertNotNull(comment0);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertNull(comment0.getJsDoc());
      assertEquals(48, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals("voig", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(48, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(4, comment0.getLength());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("fQ"));
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("fQ"));
      assertNotNull(config0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      ContextFactory contextFactory0 = new ContextFactory();
      assertNotNull(contextFactory0);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      
      Context context0 = contextFactory0.enterContext();
      assertNotNull(context0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertNotNull(errorReporter0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertFalse(linkedHashSet0.contains("fQ"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.mayMutateArguments());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertNull(comment0.getJsDoc());
      assertEquals(48, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals("voig", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(48, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(4, comment0.getLength());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(linkedHashSet0.contains("fQ"));
      assertFalse(boolean0);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(1, Node.LEFT);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(130, Context.VERSION_1_3);
      assertFalse(context0.generateObserverCount);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isWith());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isExprResult());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isFunction());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.mayMutateArguments());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isNE());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isComma());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertNull(comment0.getJsDoc());
      assertEquals(48, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals("voig", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(48, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(4, comment0.getLength());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(contextFactory0.isSealed());
      assertFalse(contextFactory0.hasExplicitGlobal());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getLanguageVersion());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("sr");
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("sr"));
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("sr"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocToken jsDocToken0 = JsDocToken.RP;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(linkedHashSet0.contains("sr"));
      assertNull(node0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(linkedHashSet0.contains("sr"));
      assertFalse(boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("rro");
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      assertFalse(linkedHashSet0.contains("rro"));
      assertNotNull(config0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("rro"));
      assertNotNull(jsDocInfoParser0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocToken jsDocToken0 = JsDocToken.RB;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(linkedHashSet0.contains("rro"));
      assertNull(node0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(linkedHashSet0.contains("rro"));
      assertFalse(boolean0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("?");
      assertNotNull(jsDocTokenStream0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("?"));
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(53, 1, token_CommentType0, "language version");
      assertNotNull(comment0);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals("language version", comment0.getValue());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals(1, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals(53, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(53, comment0.getPosition());
      assertEquals(161, comment0.getType());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("language version"));
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("language version"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals("language version", comment0.getValue());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals(1, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals(53, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(53, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(linkedHashSet0.contains("language version"));
      assertFalse(boolean0);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals("language version", comment0.getValue());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals(1, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals(53, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(53, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("sr");
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("sr"));
      assertNotNull(config0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("sr"));
      assertNotNull(jsDocInfoParser0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocToken jsDocToken0 = JsDocToken.LT;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(linkedHashSet0.contains("sr"));
      assertNull(node0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(linkedHashSet0.contains("sr"));
      assertFalse(boolean0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("w`2^aNLJbZK,");
      assertNotNull(node0);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertEquals(11, node0.getLength());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isInc());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDo());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains("w`2^aNLJbZK,"));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("(if6E[tXGu@8Cw", (-1046));
      assertNotNull(jsDocTokenStream0);
      
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
      assertFalse(hashSet0.contains("w`2^aNLJbZK,"));
      assertNotNull(config0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertFalse(hashSet0.contains("w`2^aNLJbZK,"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertEquals(11, node0.getLength());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isInc());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDo());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(hashSet0.contains("w`2^aNLJbZK,"));
      assertFalse(boolean0);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLineno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVar());
      assertEquals(11, node0.getLength());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isIn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCast());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isWith());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isInc());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDo());
      assertFalse(node0.isFor());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isScript());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("x{{Zb-Wo=O");
      assertNotNull(jsDocTokenStream0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("x{{Zb-Wo=O"));
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("x{{Zb-Wo=O"));
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, (ErrorReporter) null);
      assertFalse(linkedHashSet0.contains("x{{Zb-Wo=O"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JsDocToken jsDocToken0 = JsDocToken.BANG;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(linkedHashSet0.contains("x{{Zb-Wo=O"));
      assertNotNull(node0);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isHook());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isNot());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertFalse(node0.isFunction());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertEquals(1, node0.getCharno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabelName());
      assertEquals(1, node0.getSourcePosition());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(306, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isEmpty());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(1, 12, token_CommentType0, "[&HX t*BhE9~3}");
      assertNotNull(comment0);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals("[&HX t*BhE9~3}", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals(1, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(12, comment0.getLength());
      assertEquals(1, comment0.getAbsolutePosition());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      
      Set<String> set0 = charset0.aliases();
      assertFalse(set0.contains("[&HX t*BhE9~3}"));
      assertNotNull(set0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertFalse(set0.contains("[&HX t*BhE9~3}"));
      assertNotNull(config0);
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("[&HX t*BhE9~3}", 21, 2);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertFalse(set0.contains("[&HX t*BhE9~3}"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals("[&HX t*BhE9~3}", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals(1, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(12, comment0.getLength());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(set0.contains("[&HX t*BhE9~3}"));
      assertFalse(boolean0);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals("[&HX t*BhE9~3}", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals(1, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(12, comment0.getLength());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("8;\"");
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("8;\""));
      assertNotNull(config0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("8;\""));
      assertNotNull(jsDocInfoParser0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocToken jsDocToken0 = JsDocToken.GT;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(linkedHashSet0.contains("8;\""));
      assertNull(node0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(linkedHashSet0.contains("8;\""));
      assertFalse(boolean0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("sr");
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      assertFalse(linkedHashSet0.contains("sr"));
      assertNotNull(config0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("sr"));
      assertNotNull(jsDocInfoParser0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocToken jsDocToken0 = JsDocToken.COLON;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(linkedHashSet0.contains("sr"));
      assertNull(node0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(linkedHashSet0.contains("sr"));
      assertFalse(boolean0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("sr");
      assertNotNull(jsDocTokenStream0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      assertFalse(linkedHashSet0.contains("sr"));
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("sr"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocToken jsDocToken0 = JsDocToken.COMMA;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(linkedHashSet0.contains("sr"));
      assertNull(node0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(linkedHashSet0.contains("sr"));
      assertFalse(boolean0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("8;\"");
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      assertFalse(linkedHashSet0.contains("8;\""));
      assertNotNull(config0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newNumber(1249.86783);
      assertNotNull(node0);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isString());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, (ErrorReporter) null);
      assertFalse(linkedHashSet0.contains("8;\""));
      assertNotNull(jsDocInfoParser0);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isAssign());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.hasChildren());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isBlock());
      assertFalse(node0.isString());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(1, 12, token_CommentType0, "[&cHX t*BhE9~3}");
      assertNotNull(comment0);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals((-1), comment0.getLineno());
      assertEquals("[&cHX t*BhE9~3}", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals(1, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals(12, comment0.getLength());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      
      Set<String> set0 = charset0.aliases();
      assertFalse(set0.contains("[&cHX t*BhE9~3}"));
      assertNotNull(set0);
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      assertFalse(set0.contains("[&cHX t*BhE9~3}"));
      assertNotNull(config0);
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("[&cHX t*BhE9~3}");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertFalse(set0.contains("[&cHX t*BhE9~3}"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals((-1), comment0.getLineno());
      assertEquals("[&cHX t*BhE9~3}", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals(1, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals(12, comment0.getLength());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocToken jsDocToken0 = JsDocToken.BANG;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertFalse(set0.contains("[&cHX t*BhE9~3}"));
      assertNull(node0);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals((-1), comment0.getLineno());
      assertEquals("[&cHX t*BhE9~3}", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals(1, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals(12, comment0.getLength());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocToken jsDocToken1 = JsDocToken.ANNOTATION;
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertFalse(jsDocToken1.equals((Object)jsDocToken0));
      assertFalse(set0.contains("[&cHX t*BhE9~3}"));
      assertNotSame(jsDocToken1, jsDocToken0);
      assertNull(node1);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals((-1), comment0.getLineno());
      assertEquals("[&cHX t*BhE9~3}", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals(1, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals(12, comment0.getLength());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(set0.contains("[&cHX t*BhE9~3}"));
      assertFalse(boolean0);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals((-1), comment0.getLineno());
      assertEquals("[&cHX t*BhE9~3}", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals(1, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals(12, comment0.getLength());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(1, 12, token_CommentType0, "[&cHX t*BhE9~3}");
      assertNotNull(comment0);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(12, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals(1, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals("[&cHX t*BhE9~3}", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      
      Set<String> set0 = charset0.aliases();
      assertFalse(set0.contains("[&cHX t*BhE9~3}"));
      assertNotNull(set0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, true);
      assertFalse(set0.contains("[&cHX t*BhE9~3}"));
      assertNotNull(config0);
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("*\"_wSB- SbI");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      assertFalse(set0.contains("[&cHX t*BhE9~3}"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(12, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals(1, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals("[&cHX t*BhE9~3}", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(set0.contains("[&cHX t*BhE9~3}"));
      assertFalse(boolean0);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(0, Node.BOTH);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(12, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals(1, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals("[&cHX t*BhE9~3}", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertTrue(charset0.isRegistered());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("ebugge;\n");
      assertNotNull(node0);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertEquals(7, node0.getLength());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("ebugge;\n", 4095, 53);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(40, 1, token_CommentType0, "ebugge;\n");
      assertNotNull(comment0);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertNull(comment0.getJsDoc());
      assertEquals(40, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(40, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals("ebugge;\n", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(1, comment0.getLength());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("ebugge;\n"));
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      assertFalse(linkedHashSet0.contains("ebugge;\n"));
      assertNotNull(config0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertFalse(linkedHashSet0.contains("ebugge;\n"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertEquals(7, node0.getLength());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertNull(comment0.getJsDoc());
      assertEquals(40, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(40, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals("ebugge;\n", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(1, comment0.getLength());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(linkedHashSet0.contains("ebugge;\n"));
      assertFalse(boolean0);
      assertEquals(42, com.google.javascript.rhino.Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, com.google.javascript.rhino.Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, com.google.javascript.rhino.Node.EMPTY_BLOCK);
      assertEquals(48, com.google.javascript.rhino.Node.DIRECTIVES);
      assertEquals(4095, com.google.javascript.rhino.Node.COLUMN_MASK);
      assertEquals(40, com.google.javascript.rhino.Node.ORIGINALNAME_PROP);
      assertEquals(43, com.google.javascript.rhino.Node.IS_CONSTANT_NAME);
      assertEquals(38, com.google.javascript.rhino.Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, com.google.javascript.rhino.Node.SLASH_V);
      assertEquals(1, com.google.javascript.rhino.Node.DECR_FLAG);
      assertEquals(51, com.google.javascript.rhino.Node.STATIC_SOURCE_FILE);
      assertEquals(46, com.google.javascript.rhino.Node.IS_NAMESPACE);
      assertEquals(50, com.google.javascript.rhino.Node.FREE_CALL);
      assertEquals(2, com.google.javascript.rhino.Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, com.google.javascript.rhino.Node.POST_FLAG);
      assertEquals(4, com.google.javascript.rhino.Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, com.google.javascript.rhino.Node.OPT_ARG_NAME);
      assertEquals(56, com.google.javascript.rhino.Node.CHANGE_TIME);
      assertEquals(47, com.google.javascript.rhino.Node.IS_DISPATCHER);
      assertEquals(32, com.google.javascript.rhino.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.Node.COLUMN_BITS);
      assertEquals(0, com.google.javascript.rhino.Node.SIDE_EFFECTS_ALL);
      assertEquals(30, com.google.javascript.rhino.Node.VAR_ARGS_NAME);
      assertEquals(36, com.google.javascript.rhino.Node.QUOTED_PROP);
      assertEquals(15, com.google.javascript.rhino.Node.NO_SIDE_EFFECTS);
      assertEquals(53, com.google.javascript.rhino.Node.INPUT_ID);
      assertEquals(49, com.google.javascript.rhino.Node.DIRECT_EVAL);
      assertEquals(16, com.google.javascript.rhino.Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, com.google.javascript.rhino.Node.LAST_PROP);
      assertEquals(55, com.google.javascript.rhino.Node.INFERRED_FUNCTION);
      assertEquals(1, com.google.javascript.rhino.Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, com.google.javascript.rhino.Node.REFLECTED_OBJECT);
      assertEquals(4095, com.google.javascript.rhino.Node.MAX_COLUMN_NUMBER);
      assertEquals(29, com.google.javascript.rhino.Node.JSDOC_INFO_PROP);
      assertEquals(52, com.google.javascript.rhino.Node.LENGTH);
      assertEquals(8, com.google.javascript.rhino.Node.FLAG_NO_THROWS);
      assertEquals(2, Node.SPECIALCALL_WITH);
      assertEquals(13, Node.INCRDECR_PROP);
      assertEquals(20, Node.GENERATOR_END_PROP);
      assertEquals(12, Node.OBJECT_IDS_PROP);
      assertEquals(1, Node.FUNCTION_PROP);
      assertEquals(19, Node.PARENTHESIZED_PROP);
      assertEquals(17, Node.NAME_PROP);
      assertEquals(25, Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, Node.END_YIELDS);
      assertEquals(15, Node.LABEL_ID_PROP);
      assertEquals(1, Node.SPECIALCALL_EVAL);
      assertEquals(2, Node.LOCAL_PROP);
      assertEquals(24, Node.JSDOC_PROP);
      assertEquals(1, Node.END_DROPS_OFF);
      assertEquals(18, Node.CONTROL_BLOCK_PROP);
      assertEquals(23, Node.DESTRUCTURING_PARAMS);
      assertEquals(6, Node.TARGETBLOCK_PROP);
      assertEquals(14, Node.CATCH_SCOPE_PROP);
      assertEquals(4, Node.DESCENDANTS_FLAG);
      assertEquals(8, Node.ISNUMBER_PROP);
      assertEquals(5, Node.CASEARRAY_PROP);
      assertEquals(4, Node.END_RETURNS_VALUE);
      assertEquals(21, Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, Node.END_UNREACHED);
      assertEquals(10, Node.SPECIALCALL_PROP);
      assertEquals(3, Node.LOCAL_BLOCK_PROP);
      assertEquals(1, Node.LEFT);
      assertEquals(0, Node.NON_SPECIALCALL);
      assertEquals(11, Node.SKIP_INDEXES_PROP);
      assertEquals(2, Node.RIGHT);
      assertEquals(2, Node.END_RETURNS);
      assertEquals(4, Node.REGEXP_PROP);
      assertEquals(16, Node.MEMBER_TYPE_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(7, Node.VARIABLE_PROP);
      assertEquals(26, Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, Node.BOTH);
      assertEquals(26, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(9, Node.DIRECTCALL_PROP);
      assertEquals(1, Node.PROPERTY_FLAG);
      assertEquals(2, Node.ATTRIBUTE_FLAG);
      assertEquals(22, Node.DESTRUCTURING_NAMES);
      assertEquals(40, node0.getType());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertEquals(7, node0.getLength());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.isNumber());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertTrue(node0.isString());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isIf());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isThis());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertNull(comment0.getJsDoc());
      assertEquals(40, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(40, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals("ebugge;\n", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(1, comment0.getLength());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("sr");
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.EOC;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{PVgB^i]4");
      Locale locale0 = Locale.ENGLISH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      MockPrintStream mockPrintStream0 = new MockPrintStream("{PVgB^i]4");
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false, mockPrintStream0);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = com.google.javascript.rhino.Node.newString("w`2^aNLJbZK,");
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(1, 12, token_CommentType0, "w`2^aNLJbZK,");
      node0.setSourceFileForTesting("w`2^aNLJbZK,");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("w`2^aNLJbZK,", 1);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.EOL;
      com.google.javascript.rhino.Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("error");
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.ANNOTATION;
      com.google.javascript.rhino.Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("genrated btecode for methd exceedB 64K lif .");
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("q5/EL?0_neXX+3");
      HashSet<String> hashSet0 = new HashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, (ErrorReporter) null);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertEquals(0, node0.getSourcePosition());
      assertNotNull(jSDocInfo0);
      assertTrue(node0.isString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("sr");
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      jsDocInfoParser0.parse();
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("ebugge;\n");
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("ebugge;\n", 4095, 53);
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(40, 1, token_CommentType0, "ebugge;\n");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      com.google.javascript.rhino.Node.FileLevelJsDocBuilder node_FileLevelJsDocBuilder0 = node0.new FileLevelJsDocBuilder();
      jsDocInfoParser0.setFileLevelJsDocBuilder(node_FileLevelJsDocBuilder0);
      assertEquals(7, node0.getLength());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, true);
      Context context0 = Context.enter();
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser((JsDocTokenStream) null, (Comment) null, (com.google.javascript.rhino.Node) null, config0, errorReporter0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      com.google.javascript.rhino.Node node0 = JsDocInfoParser.parseTypeString("D^<|ElEb|VE]");
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("language", 56);
      HashSet<String> hashSet0 = new HashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      jsDocInfoParser0.hasParsedJSDocInfo();
      assertEquals(3, node0.getChildCount());
      assertEquals(301, node0.getType());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("sr");
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (com.google.javascript.rhino.Node) null, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.EOC;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertTrue(boolean0);
  }
}
