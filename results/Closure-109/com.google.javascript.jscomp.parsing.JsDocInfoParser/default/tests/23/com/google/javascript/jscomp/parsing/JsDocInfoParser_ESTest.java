/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 00:53:57 GMT 2020
 */

package com.google.javascript.jscomp.parsing;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.google.javascript.jscomp.parsing.Config;
import com.google.javascript.jscomp.parsing.JsDocInfoParser;
import com.google.javascript.jscomp.parsing.JsDocToken;
import com.google.javascript.jscomp.parsing.JsDocTokenStream;
import com.google.javascript.rhino.JSDocInfo;
import com.google.javascript.rhino.JSTypeExpression;
import com.google.javascript.rhino.Node;
import com.google.javascript.rhino.head.Context;
import com.google.javascript.rhino.head.ContextFactory;
import com.google.javascript.rhino.head.ErrorReporter;
import com.google.javascript.rhino.head.Token;
import com.google.javascript.rhino.head.ast.Comment;
import com.google.javascript.rhino.head.ast.ErrorCollector;
import com.google.javascript.rhino.head.tools.ToolErrorReporter;
import java.io.PrintStream;
import java.util.Comparator;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Locale;
import java.util.Set;
import java.util.TreeSet;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class JsDocInfoParser_ESTest extends JsDocInfoParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("", 0);
      assertNotNull(jsDocTokenStream0);
      
      Node node0 = Node.newString(20, "0/3\"", 2, (-1286));
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertNotNull(node0);
      assertFalse(node0.isNE());
      assertEquals(20, node0.getType());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(""));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      assertFalse(treeSet0.contains(""));
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertFalse(treeSet0.contains(""));
      assertNotNull(jsDocInfoParser0);
      assertFalse(node0.isNE());
      assertEquals(20, node0.getType());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.retrieveAndResetParsedJSDocInfo();
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertFalse(treeSet0.contains(""));
      assertNull(jSDocInfo0);
      assertFalse(node0.isNE());
      assertEquals(20, node0.getType());
      assertFalse(node0.isIf());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIn());
      assertFalse(node0.isComma());
      assertFalse(node0.isSetterDef());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVar());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getCharno());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Node node0 = new Node(8);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(node0);
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertEquals(8, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("t&E *", 38, 42);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(1, 12, token_CommentType0, "t&E *");
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertNotNull(comment0);
      assertEquals(0, comment0.depth());
      assertEquals("t&E *", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(1, comment0.getPosition());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals(12, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertFalse(treeSet0.contains("t&E *"));
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertFalse(treeSet0.contains("t&E *"));
      assertNotNull(jsDocInfoParser0);
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertEquals(8, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(0, comment0.depth());
      assertEquals("t&E *", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(1, comment0.getPosition());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals(12, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertFalse(treeSet0.contains("t&E *"));
      assertNotNull(jSDocInfo0);
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNull());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isName());
      assertFalse(node0.isCall());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isQuotedString());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isIf());
      assertFalse(node0.isFor());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertEquals(8, node0.getType());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(0, comment0.depth());
      assertEquals("t&E *", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(1, comment0.getPosition());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals(12, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(jSDocInfo0.makesDicts());
      assertTrue(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getVersion());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertEquals("t&E *", jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getDescription());
      assertTrue(jSDocInfo0.hasType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(1, jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasThisType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isDefine());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, false);
      assertNotNull(config0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("lp0ASt#[f^;Wm");
      assertNotNull(jsDocTokenStream0);
      
      Comment comment0 = new Comment((-3515), 14, token_CommentType0, "ungdefined");
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertNotNull(comment0);
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals("ungdefined", comment0.getValue());
      assertEquals((-3515), comment0.getAbsolutePosition());
      assertEquals(14, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals((-3515), comment0.getPosition());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      
      Node node0 = JsDocInfoParser.parseTypeString("B[7?zi8`@-zG!");
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertNotNull(node0);
      assertEquals(40, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLength());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertFalse(set0.contains("lp0ASt#[f^;Wm"));
      assertNotNull(jsDocInfoParser0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals("ungdefined", comment0.getValue());
      assertEquals((-3515), comment0.getAbsolutePosition());
      assertEquals(14, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals((-3515), comment0.getPosition());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertEquals(40, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLength());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertFalse(set0.contains("lp0ASt#[f^;Wm"));
      assertNotNull(jSDocInfo0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals("ungdefined", comment0.getValue());
      assertEquals((-3515), comment0.getAbsolutePosition());
      assertEquals(14, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals((-3515), comment0.getPosition());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertEquals(40, node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isNull());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssignAdd());
      assertEquals(1, node0.getLength());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isWizaction());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isHidden());
      assertEquals((-3515), jSDocInfo0.getOriginalCommentPosition());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertTrue(jSDocInfo0.containsDeclaration());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isConstant());
      assertEquals("ungdefined", jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isExport());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertTrue(jSDocInfo0.hasType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Node node0 = JsDocInfoParser.parseTypeString("!Ix|lm");
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotNull(node0);
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBreak());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(301, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!Ix|lm", 8233);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(12, 125, token_CommentType0, "language version");
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertNotNull(comment0);
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals(125, comment0.getLength());
      assertEquals(12, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals("language version", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(12, comment0.getAbsolutePosition());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertFalse(set0.contains("language version"));
      assertNotNull(jsDocInfoParser0);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBreak());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(301, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals(125, comment0.getLength());
      assertEquals(12, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals("language version", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(12, comment0.getAbsolutePosition());
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(set0.contains("language version"));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThis());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isScript());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isIn());
      assertFalse(node0.isNE());
      assertFalse(node0.isNull());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isBreak());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(301, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNot());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals(125, comment0.getLength());
      assertEquals(12, comment0.getPosition());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals("language version", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals(12, comment0.getAbsolutePosition());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertEquals(4, node1.getCharno());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isScript());
      assertFalse(node1.isNot());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isBreak());
      assertEquals(0, node1.getLength());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isThis());
      assertFalse(node1.isExprResult());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isWith());
      assertFalse(node1.isHook());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isComma());
      assertFalse(node1.isDec());
      assertFalse(node1.isContinue());
      assertEquals(33722372, node1.getSourcePosition());
      assertFalse(node1.isString());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isWhile());
      assertEquals(301, node1.getType());
      assertFalse(node1.isInc());
      assertFalse(node1.isNE());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isIn());
      assertFalse(node1.isThrow());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isFunction());
      assertEquals(8233, node1.getLineno());
      assertEquals(2, node1.getChildCount());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isVoid());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNull());
      assertFalse(node1.isParamList());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isCall());
      assertFalse(node1.isName());
      assertFalse(node1.isFor());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isTry());
      assertEquals((-1), node1.getSourceOffset());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isBlock());
      assertTrue(node1.hasChildren());
      assertTrue(node1.mayMutateArguments());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isDo());
      assertFalse(node1.isCase());
      assertTrue(node1.hasMoreThanOneChild());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isAdd());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isNumber());
      assertFalse(node1.isOr());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNew());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isLabel());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsdoc.export");
      assertNotNull(jsDocTokenStream0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("msg.jsdoc.export"));
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, false);
      assertFalse(linkedHashSet0.contains("msg.jsdoc.export"));
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, errorCollector0);
      assertFalse(linkedHashSet0.contains("msg.jsdoc.export"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression((Node) null);
      assertFalse(linkedHashSet0.contains("msg.jsdoc.export"));
      assertNull(jSTypeExpression0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("WQ^");
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotNull(node0);
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isHook());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals(3, node0.getLength());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("WQ^");
      assertNotNull(jsDocTokenStream0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(43);
      assertFalse(linkedHashSet0.contains("WQ^"));
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      TreeSet<String> treeSet0 = new TreeSet<String>(comparator0);
      assertFalse(treeSet0.contains("WQ^"));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, treeSet0, true, config_LanguageMode0, false);
      assertFalse(linkedHashSet0.contains("WQ^"));
      assertFalse(treeSet0.contains("WQ^"));
      assertNotNull(config0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false, (PrintStream) null);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(linkedHashSet0.contains("WQ^"));
      assertFalse(treeSet0.contains("WQ^"));
      assertNotNull(jsDocInfoParser0);
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isHook());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals(3, node0.getLength());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JSTypeExpression jSTypeExpression0 = jsDocInfoParser0.createJSTypeExpression(node0);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(linkedHashSet0.contains("WQ^"));
      assertFalse(treeSet0.contains("WQ^"));
      assertNotNull(jSTypeExpression0);
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isFor());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isHook());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertEquals(40, node0.getType());
      assertFalse(node0.isThrow());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isCast());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isAnd());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssign());
      assertFalse(node0.isNull());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getSourcePosition());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isName());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.isTry());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertEquals(3, node0.getLength());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(jSTypeExpression0.isVarArgs());
      assertFalse(jSTypeExpression0.isOptionalArg());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        JsDocInfoParser.parseTypeString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(")", 31, (-3312));
      assertNotNull(jsDocTokenStream0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains(")"));
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains(")"));
      assertNotNull(config0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, errorCollector0);
      assertFalse(linkedHashSet0.contains(")"));
      assertNotNull(jsDocInfoParser0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Node node0 = new Node(8);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertNotNull(node0);
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertEquals(8, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("t&E *", 38, 42);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(1, 12, token_CommentType0, "t&E *");
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertNotNull(comment0);
      assertEquals(0, comment0.depth());
      assertEquals("t&E *", comment0.getValue());
      assertEquals(1, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(12, comment0.getLength());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertFalse(treeSet0.contains("t&E *"));
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertFalse(treeSet0.contains("t&E *"));
      assertNotNull(jsDocInfoParser0);
      assertFalse(node0.isHook());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isBreak());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertEquals(8, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTry());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCast());
      assertFalse(node0.isFor());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNE());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals(0, comment0.depth());
      assertEquals("t&E *", comment0.getValue());
      assertEquals(1, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(12, comment0.getLength());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      jsDocTokenStream0.sourceCursor = 310;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser((JsDocTokenStream) null, (Comment) null, (Node) null, config0, toolErrorReporter0);
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseInlineTypeDoc();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, false, config_LanguageMode0, true);
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Node node0 = JsDocInfoParser.parseTypeString("$bF<W%T");
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertNotNull(node0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertEquals(7, node0.getLength());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getLineno());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("$bF<W%T", 54);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(8, 160, token_CommentType0, "$bF<W%T");
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertNotNull(comment0);
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("$bF<W%T", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(8, comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals(160, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals(8, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertFalse(linkedHashSet0.contains("$bF<W%T"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIn());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isCase());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertEquals(7, node0.getLength());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOr());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isWith());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertEquals(0, node0.getLineno());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("$bF<W%T", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(8, comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals(160, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals(8, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      
      jsDocTokenStream0.sourceCursor = 52;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Node node0 = Node.newString(12, "error reporter", 12, 140);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertNotNull(node0);
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertEquals(12, node0.getType());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertEquals(140, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(12, node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertEquals(49292, node0.getSourcePosition());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("error reporter");
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertFalse(treeSet0.contains("error reporter"));
      assertNotNull(config0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, (ErrorReporter) null);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(54, Node.SLASH_V);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertFalse(treeSet0.contains("error reporter"));
      assertNotNull(jsDocInfoParser0);
      assertFalse(node0.isInc());
      assertFalse(node0.isString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isHook());
      assertEquals(12, node0.getType());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isInstanceOf());
      assertEquals(140, node0.getCharno());
      assertFalse(node0.isIn());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.wasEmptyNode());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(12, node0.getLineno());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTry());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertEquals(49292, node0.getSourcePosition());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Node node0 = Node.newString("{yy#GpiKquw:\")riA");
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotNull(node0);
      assertFalse(node0.isWith());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isInc());
      assertFalse(node0.isDo());
      assertFalse(node0.isSwitch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isThis());
      assertFalse(node0.isParamList());
      assertFalse(node0.isHook());
      assertFalse(node0.isTry());
      assertTrue(node0.isString());
      assertFalse(node0.isScript());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isRegExp());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNE());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isIn());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNew());
      assertFalse(node0.isWhile());
      assertFalse(node0.isContinue());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCall());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isTypeOf());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isComma());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsdoc.visibility.private");
      assertNotNull(jsDocTokenStream0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = null;
      try {
        jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, (Config) null, toolErrorReporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Node node0 = Node.newNumber((double) 22);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertNotNull(node0);
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, true);
      assertNotNull(config0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!Ix|lm", 6);
      assertNotNull(jsDocTokenStream0);
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertFalse(treeSet0.contains("!Ix|lm"));
      assertNotNull(jsDocInfoParser0);
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVoid());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetterDef());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isWhile());
      assertTrue(node0.isNumber());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isContinue());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isIn());
      assertFalse(node0.isString());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isBreak());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      
      JsDocToken jsDocToken0 = JsDocToken.LP;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      Node node0 = Node.newNumber((-418.494813));
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertNotNull(node0);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isHook());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("[native code for ", 6, (-1749));
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(4095, 0, token_CommentType0, "aD|f0/ O)|9imA;");
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertNotNull(comment0);
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(0, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals("aD|f0/ O)|9imA;", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(4095, comment0.getAbsolutePosition());
      assertEquals(4095, comment0.getPosition());
      assertEquals(161, comment0.getType());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertFalse(linkedHashSet0.contains("aD|f0/ O)|9imA;"));
      assertNotNull(jsDocInfoParser0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isHook());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(0, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals("aD|f0/ O)|9imA;", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(4095, comment0.getAbsolutePosition());
      assertEquals(4095, comment0.getPosition());
      assertEquals(161, comment0.getType());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertFalse(linkedHashSet0.contains("aD|f0/ O)|9imA;"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOr());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isThrow());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isContinue());
      assertFalse(node0.isIn());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isIf());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCase());
      assertFalse(node0.isString());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isRegExp());
      assertTrue(node0.isNumber());
      assertFalse(node0.isHook());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isDo());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isDefaultCase());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(0, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals("aD|f0/ O)|9imA;", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(4095, comment0.getAbsolutePosition());
      assertEquals(4095, comment0.getPosition());
      assertEquals(161, comment0.getType());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Node node0 = JsDocInfoParser.parseTypeString("language version");
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertNotNull(node0);
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.wasEmptyNode());
      assertEquals(8, node0.getLength());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChangeTime());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("pff*`m");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertFalse(set0.contains("language version"));
      assertNotNull(jsDocInfoParser0);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.wasEmptyNode());
      assertEquals(8, node0.getLength());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChangeTime());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(set0.contains("language version"));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.wasEmptyNode());
      assertEquals(8, node0.getLength());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChangeTime());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
      assertFalse(node1.isDo());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isWhile());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isNew());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isVar());
      assertFalse(node1.isBlock());
      assertFalse(node1.isReturn());
      assertFalse(node1.isAssign());
      assertFalse(node1.isDec());
      assertFalse(node1.isName());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertEquals(304, node1.getType());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOr());
      assertFalse(node1.isNull());
      assertFalse(node1.isWith());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isCatch());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isScript());
      assertFalse(node1.isTry());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isLabelName());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isNumber());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isParamList());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isCase());
      assertFalse(node1.isString());
      assertEquals(3, node1.getCharno());
      assertFalse(node1.isInc());
      assertTrue(node1.hasChildren());
      assertEquals(1, node1.getChildCount());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertTrue(node1.hasOneChild());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isIf());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isBreak());
      assertFalse(node1.isIn());
      assertFalse(node1.isVoid());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isNE());
      assertFalse(node1.isTrue());
      assertFalse(node1.isNot());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isFunction());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isComma());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isNoSideEffectsCall());
      assertEquals(3, node1.getSourcePosition());
      assertFalse(node1.isFalse());
      assertFalse(node1.isCast());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isGetProp());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isAnd());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isSyntheticBlock());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertFalse(set0.contains("language version"));
      assertFalse(node0.equals((Object)node1));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAnd());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertFalse(node0.wasEmptyNode());
      assertEquals(8, node0.getLength());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isFor());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isScript());
      assertEquals(0, node0.getLineno());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChangeTime());
      assertEquals(40, node0.getType());
      assertFalse(node0.isNull());
      assertFalse(node0.isName());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isWhile());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isGetProp());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertNotNull(set0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, false, config_LanguageMode0, false);
      assertNotNull(config0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Node node0 = JsDocInfoParser.parseTypeString("$bF<W%T");
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertNotNull(node0);
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertEquals(7, node0.getLength());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.hasChildren());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("`fSRBlTPyFtd1n5}", (-1619359533));
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.BLOCK_COMMENT;
      Comment comment0 = new Comment(8, 160, token_CommentType0, "#&D");
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertNotNull(comment0);
      assertEquals(161, comment0.getType());
      assertEquals("#&D", comment0.getValue());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertFalse(comment0.hasChildren());
      assertEquals(160, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals((-1), comment0.getLineno());
      assertEquals(8, comment0.getPosition());
      assertEquals(8, comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertFalse(set0.contains("`fSRBlTPyFtd1n5}"));
      assertNotNull(jsDocInfoParser0);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertEquals(7, node0.getLength());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.hasChildren());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertEquals(161, comment0.getType());
      assertEquals("#&D", comment0.getValue());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertFalse(comment0.hasChildren());
      assertEquals(160, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals((-1), comment0.getLineno());
      assertEquals(8, comment0.getPosition());
      assertEquals(8, comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      
      JsDocToken jsDocToken0 = JsDocToken.EOC;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertFalse(set0.contains("`fSRBlTPyFtd1n5}"));
      assertNull(node1);
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertEquals(7, node0.getLength());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.hasChildren());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertEquals(161, comment0.getType());
      assertEquals("#&D", comment0.getValue());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertFalse(comment0.hasChildren());
      assertEquals(160, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals((-1), comment0.getLineno());
      assertEquals(8, comment0.getPosition());
      assertEquals(8, comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertTrue(boolean0);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertFalse(set0.contains("`fSRBlTPyFtd1n5}"));
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(node0.isScript());
      assertFalse(node0.isWith());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isSwitch());
      assertTrue(node0.isString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isVar());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBlock());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isLabelName());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertEquals(7, node0.getLength());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTry());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isContinue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isReturn());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.hasChildren());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetProp());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertEquals(161, comment0.getType());
      assertEquals("#&D", comment0.getValue());
      assertEquals(Token.CommentType.BLOCK_COMMENT, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertFalse(comment0.hasChildren());
      assertEquals(160, comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals((-1), comment0.getLineno());
      assertEquals(8, comment0.getPosition());
      assertEquals(8, comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("[\n");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("\"{4,@c1CP@9:E^$", (-562), (-1908874351));
      assertNotNull(jsDocTokenStream0);
      
      int int0 = jsDocTokenStream0.getChar();
      assertEquals(34, int0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(65534, (-2926), token_CommentType0, "error reporter");
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertNotNull(comment0);
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("error reporter", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(65534, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals((-2926), comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals(65534, comment0.getPosition());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      assertFalse(treeSet0.contains("error reporter"));
      assertNotNull(config0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, toolErrorReporter0);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertFalse(treeSet0.contains("error reporter"));
      assertNotNull(jsDocInfoParser0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("error reporter", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(65534, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals((-2926), comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals(65534, comment0.getPosition());
      
      JsDocToken jsDocToken0 = JsDocToken.LP;
      Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertFalse(treeSet0.contains("error reporter"));
      assertNull(node0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("error reporter", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals(65534, comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals((-2926), comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals(65534, comment0.getPosition());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("{ =vVQJJ0ZX");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("SvYV,ocN3Z^;.O6", (-304));
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((-304), (-304), token_CommentType0, "0\"0\"!O^");
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertNotNull(comment0);
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("0\"0\"!O^", comment0.getValue());
      assertEquals((-304), comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals((-304), comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals((-304), comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      
      Node node0 = Node.newNumber((-0.6073233059684843));
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotNull(node0);
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isWizaction());
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertFalse(set0.contains("0\"0\"!O^"));
      assertNotNull(set0);
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isWizaction());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertFalse(set0.contains("0\"0\"!O^"));
      assertNotNull(config0);
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isWizaction());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, (ErrorReporter) null);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(set0.contains("0\"0\"!O^"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertEquals("0\"0\"!O^", comment0.getValue());
      assertEquals((-304), comment0.getLength());
      assertEquals(0, comment0.depth());
      assertEquals((-304), comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals((-304), comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isRegExp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isIf());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertEquals((-1), node0.getCharno());
      assertEquals(39, node0.getType());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isCast());
      assertFalse(node0.isAssign());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.hasThisType());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertNull(jSDocInfo0.getFileOverview());
      assertNull(jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isExterns());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.hasType());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasBaseType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isWizaction());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      JsDocToken jsDocToken0 = JsDocToken.LB;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.jscomp.parsing.JsDocInfoParser$ErrorReporterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      MockPrintStream mockPrintStream0 = new MockPrintStream("-s");
      assertNotNull(mockPrintStream0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false, mockPrintStream0);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("(new,Booleanatrue))", 102);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      String string0 = jsDocTokenStream0.getRemainingJSDocLine();
      assertEquals("(new,Booleanatrue))", string0);
      assertNotNull(string0);
      
      Comment comment0 = new Comment(102, 102, token_CommentType0, "(new,Booleanatrue))");
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertNotNull(comment0);
      assertEquals(102, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(102, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals("(new,Booleanatrue))", comment0.getValue());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(102, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      
      Node node0 = Node.newString("(new,Booleanatrue))");
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotNull(node0);
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains("(new,Booleanatrue))"));
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
      assertFalse(hashSet0.contains("(new,Booleanatrue))"));
      assertNotNull(config0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(hashSet0.contains("(new,Booleanatrue))"));
      assertNotNull(jsDocInfoParser0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(102, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(102, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals("(new,Booleanatrue))", comment0.getValue());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(102, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      JsDocToken jsDocToken0 = JsDocToken.EOL;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(hashSet0.contains("(new,Booleanatrue))"));
      assertNull(node1);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(102, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(102, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals("(new,Booleanatrue))", comment0.getValue());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(102, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      JsDocToken jsDocToken1 = JsDocToken.STRING;
      Node node2 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(hashSet0.contains("(new,Booleanatrue))"));
      assertFalse(jsDocToken1.equals((Object)jsDocToken0));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertEquals(102, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(102, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals("(new,Booleanatrue))", comment0.getValue());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(102, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertFalse(node0.isBreak());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertEquals(40, node2.getType());
      assertFalse(node2.isCatch());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTry());
      assertTrue(node2.mayMutateGlobalStateOrThrow());
      assertTrue(node2.mayMutateArguments());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isSetterDef());
      assertEquals(19, node2.getLength());
      assertFalse(node2.isFor());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isEmpty());
      assertEquals(0, node2.getChangeTime());
      assertFalse(node2.isNull());
      assertFalse(node2.isVoid());
      assertFalse(node2.isTrue());
      assertFalse(node2.isNE());
      assertFalse(node2.isIf());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isLocalResultCall());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isOr());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isLabel());
      assertFalse(node2.isNew());
      assertTrue(node2.isString());
      assertFalse(node2.isBlock());
      assertFalse(node2.isAdd());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isCase());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isNumber());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isVar());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isParamList());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isNot());
      assertFalse(node2.isWith());
      assertFalse(node2.isAnd());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isGetProp());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isScript());
      assertFalse(node2.isGetElem());
      assertEquals(417792, node2.getSourcePosition());
      assertFalse(node2.isHook());
      assertFalse(node2.isDec());
      assertEquals(102, node2.getLineno());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isThis());
      assertFalse(node2.isComma());
      assertFalse(node2.isAssign());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isOnlyModifiesArgumentsCall());
      assertFalse(node2.isBreak());
      assertFalse(node2.isContinue());
      assertFalse(node2.isWhile());
      assertFalse(node2.isIn());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isReturn());
      assertFalse(node2.isInc());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isThrow());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isFalse());
      assertFalse(node2.isCast());
      assertFalse(node2.isFunction());
      assertNotSame(node0, node2);
      assertNotSame(jsDocToken1, jsDocToken0);
      assertNotSame(node2, node0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MockFile mockFile0 = new MockFile("-s", "(new,Booleanatrue))");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false, mockPrintStream0);
      assertNotNull(toolErrorReporter0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/-s", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals("(new,Booleanatrue))", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/-s/(new,Booleanatrue))", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("(new,Booleanatrue))", 96);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(96, 96, token_CommentType0, "(new,Booleanatrue))");
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertNotNull(comment0);
      assertEquals(0, comment0.depth());
      assertEquals(96, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals(96, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(96, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals("(new,Booleanatrue))", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      
      Node node0 = Node.newString("(new,Booleanatrue))");
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotNull(node0);
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLength());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains("-s"));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(hashSet0, hashSet0, false, config_LanguageMode0, false);
      assertFalse(hashSet0.contains("-s"));
      assertNotNull(config0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertFalse(hashSet0.contains("-s"));
      assertNotNull(jsDocInfoParser0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/-s", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals("(new,Booleanatrue))", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/-s/(new,Booleanatrue))", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertEquals(0, comment0.depth());
      assertEquals(96, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals(96, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(96, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals("(new,Booleanatrue))", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLength());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      JsDocToken jsDocToken0 = JsDocToken.EOL;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(36, Node.QUOTED_PROP);
      assertFalse(hashSet0.contains("-s"));
      assertNull(node1);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isAbsolute());
      assertEquals("/experiment/-s", mockFile0.getParent());
      assertTrue(mockFile0.canWrite());
      assertEquals("(new,Booleanatrue))", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isDirectory());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals("/experiment/-s/(new,Booleanatrue))", mockFile0.toString());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertEquals(0, comment0.depth());
      assertEquals(96, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(161, comment0.getType());
      assertEquals(96, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(96, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals("(new,Booleanatrue))", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals((-1), comment0.getLineno());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(40, node0.getType());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNot());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLength());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isScript());
      assertFalse(node0.isHook());
      assertFalse(node0.isWith());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      JsDocToken jsDocToken1 = JsDocToken.STRING;
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("undefined");
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertNotNull(node0);
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isOr());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.hasChildren());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.isString());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isScript());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNull());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isHook());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertEquals(9, node0.getLength());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNot());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isFunction());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("null key in entry: null=");
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertNotNull(node0);
      assertTrue(node0.isString());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.isVar());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAdd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isName());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isNot());
      assertEquals(40, node0.getType());
      assertEquals(0, node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCast());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isComma());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isThis());
      assertFalse(node0.isFor());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isWith());
      assertFalse(node0.isBreak());
      assertEquals(4, node0.getLength());
      assertFalse(node0.isScript());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTrue());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isParamList());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("function");
      assertNull(node0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("*IESd=I*kqd`6B");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node0);
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDefaultCase());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNew());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOr());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertEquals(302, node0.getType());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNumber());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertEquals(0, node0.getCharno());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("Za#qdTsjO`RO&Kv#!");
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertNotNull(node0);
      assertFalse(node0.isParamList());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isName());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isContinue());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVar());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isIf());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIn());
      assertFalse(node0.isNumber());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isScript());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isHook());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(306, node0.getType());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isThis());
      assertEquals(16, node0.getCharno());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isInc());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isString());
      assertFalse(node0.isOr());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isLocalResultCall());
      assertEquals(16, node0.getSourcePosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isCall());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isGetElem());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("Aq?y&+k2c.>Ji");
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertNotNull(node0);
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertTrue(node0.hasChildren());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isFor());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isCase());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFunction());
      assertFalse(node0.isString());
      assertFalse(node0.isSyntheticBlock());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isVar());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNew());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(2, node0.getCharno());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isDo());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isName());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isContinue());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isAnd());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(304, node0.getType());
      assertFalse(node0.isHook());
      assertFalse(node0.isThrow());
      assertFalse(node0.isBlock());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isInc());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      assertEquals(2, node0.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Node node0 = new Node(8);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node0);
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(8, node0.getType());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("t&E *", 38, 42);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(1, 12, token_CommentType0, "t&E *");
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertNotNull(comment0);
      assertEquals(12, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals(1, comment0.getPosition());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals("t&E *", comment0.getValue());
      assertNull(comment0.getJsDoc());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertFalse(treeSet0.contains("t&E *"));
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertFalse(treeSet0.contains("t&E *"));
      assertNotNull(jsDocInfoParser0);
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(8, node0.getType());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertEquals(12, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals(1, comment0.getPosition());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals("t&E *", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      JsDocToken jsDocToken1 = JsDocToken.EOC;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertFalse(treeSet0.contains("t&E *"));
      assertFalse(jsDocToken1.equals((Object)jsDocToken0));
      assertNull(node1);
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(8, node0.getType());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertEquals(12, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals(1, comment0.getPosition());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals("t&E *", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotSame(jsDocToken1, jsDocToken0);
      
      Node node2 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(53, Node.INPUT_ID);
      assertFalse(treeSet0.contains("t&E *"));
      assertFalse(jsDocToken0.equals((Object)jsDocToken1));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isStringKey());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(8, node0.getType());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isOptionalArg());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isComma());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isName());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertEquals(12, comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertEquals(1, comment0.getPosition());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals("t&E *", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isTry());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isVoid());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isLocalResultCall());
      assertFalse(node2.isNE());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isTrue());
      assertFalse(node2.isSyntheticBlock());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isIn());
      assertEquals(304, node2.getType());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isFunction());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isHook());
      assertEquals(0, node2.getLength());
      assertFalse(node2.isInc());
      assertFalse(node2.isParamList());
      assertFalse(node2.isSwitch());
      assertEquals(155689, node2.getSourcePosition());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isOnlyModifiesArgumentsCall());
      assertFalse(node2.isCatch());
      assertEquals(41, node2.getCharno());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isCase());
      assertFalse(node2.isRegExp());
      assertTrue(node2.mayMutateArguments());
      assertFalse(node2.isWith());
      assertFalse(node2.isFor());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isBlock());
      assertFalse(node2.isThis());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isCast());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isScript());
      assertFalse(node2.isNumber());
      assertFalse(node2.isNot());
      assertFalse(node2.isOr());
      assertFalse(node2.isAnd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isDo());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isThrow());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isLabel());
      assertFalse(node2.isVar());
      assertFalse(node2.isFalse());
      assertFalse(node2.isName());
      assertFalse(node2.isAdd());
      assertFalse(node2.isNew());
      assertFalse(node2.isCall());
      assertFalse(node2.isBreak());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isNull());
      assertFalse(node2.isString());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isTypeOf());
      assertEquals(0, node2.getChangeTime());
      assertEquals(38, node2.getLineno());
      assertFalse(node2.isDec());
      assertFalse(node2.isWhile());
      assertTrue(node2.mayMutateGlobalStateOrThrow());
      assertFalse(node2.isAssign());
      assertFalse(node2.isComma());
      assertFalse(node2.isReturn());
      assertFalse(node2.hasChildren());
      assertNotSame(node0, node2);
      assertNotSame(jsDocToken0, jsDocToken1);
      assertNotSame(node2, node0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      Node node0 = JsDocInfoParser.parseTypeString("W[(J'ST-Cu");
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node0);
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isAnd());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getLength());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("error reporter", 57);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(55, 1, token_CommentType0, "CharMatcher.BREAKING_WHITESPACE");
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertNotNull(comment0);
      assertEquals(1, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(55, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals("CharMatcher.BREAKING_WHITESPACE", comment0.getValue());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(55, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertFalse(linkedHashSet0.contains("W[(J'ST-Cu"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isAnd());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getLength());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertEquals(1, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(55, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals("CharMatcher.BREAKING_WHITESPACE", comment0.getValue());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(55, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      
      JsDocToken jsDocToken0 = JsDocToken.GT;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertFalse(linkedHashSet0.contains("W[(J'ST-Cu"));
      assertNull(node1);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isAnd());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getLength());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertEquals(1, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(55, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals("CharMatcher.BREAKING_WHITESPACE", comment0.getValue());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(55, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      
      JsDocToken jsDocToken1 = JsDocToken.QMARK;
      Node node2 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertFalse(linkedHashSet0.contains("W[(J'ST-Cu"));
      assertFalse(jsDocToken1.equals((Object)jsDocToken0));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.wasEmptyNode());
      assertTrue(node0.isString());
      assertFalse(node0.isBlock());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isCall());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDec());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isParamList());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getCharno());
      assertEquals(40, node0.getType());
      assertFalse(node0.isTry());
      assertFalse(node0.isAnd());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCast());
      assertFalse(node0.isCatch());
      assertEquals(1, node0.getLength());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isFunction());
      assertFalse(node0.isWith());
      assertFalse(node0.isNE());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isHook());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThis());
      assertFalse(node0.isComma());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getSourcePosition());
      assertFalse(node0.isName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOr());
      assertEquals(1, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(55, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals("CharMatcher.BREAKING_WHITESPACE", comment0.getValue());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(55, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), node2.getSourcePosition());
      assertFalse(node2.isNumber());
      assertFalse(node2.isTypeOf());
      assertFalse(node2.isDec());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isAssignAdd());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isCast());
      assertFalse(node2.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node2.getLineno());
      assertFalse(node2.isReturn());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isLabel());
      assertFalse(node2.wasEmptyNode());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isAssign());
      assertFalse(node2.isContinue());
      assertFalse(node2.hasMoreThanOneChild());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isNew());
      assertFalse(node2.isDo());
      assertFalse(node2.isAdd());
      assertFalse(node2.isOr());
      assertFalse(node2.isNull());
      assertEquals(0, node2.getChangeTime());
      assertFalse(node2.isComma());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isName());
      assertFalse(node2.isThrow());
      assertTrue(node2.mayMutateGlobalStateOrThrow());
      assertFalse(node2.isCall());
      assertFalse(node2.isNoSideEffectsCall());
      assertFalse(node2.isFalse());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isAnd());
      assertFalse(node2.isWhile());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.isNot());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isString());
      assertFalse(node2.isNE());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isFor());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isIf());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isFunction());
      assertFalse(node2.isLocalResultCall());
      assertFalse(node2.isInc());
      assertFalse(node2.isTrue());
      assertFalse(node2.isVoid());
      assertFalse(node2.isDefaultCase());
      assertEquals(304, node2.getType());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isIn());
      assertFalse(node2.isThis());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isParamList());
      assertFalse(node2.isHook());
      assertEquals(0, node2.getLength());
      assertFalse(node2.isInstanceOf());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isCatch());
      assertFalse(node2.isVar());
      assertFalse(node2.isWith());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isScript());
      assertFalse(node2.isRegExp());
      assertEquals((-1), node2.getCharno());
      assertFalse(node2.isCase());
      assertFalse(node2.isBlock());
      assertFalse(node2.isTry());
      assertTrue(node2.mayMutateArguments());
      assertFalse(node2.isSwitch());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.isGetterDef());
      assertNotSame(jsDocToken1, jsDocToken0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Node node0 = JsDocInfoParser.parseTypeString("!Ix|lm");
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertNotNull(node0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals(301, node0.getType());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLineno());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVarArgs());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!Ix|lm", 38);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(hashSet0.contains("!Ix|lm"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals(301, node0.getType());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLineno());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVarArgs());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertFalse(hashSet0.contains("!Ix|lm"));
      assertNotNull(jSDocInfo0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals(301, node0.getType());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLineno());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVarArgs());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertTrue(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.isNoAlias());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertTrue(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.makesDicts());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.makesStructs());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getLendsName());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertNull(jSDocInfo0.getLicense());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(52, Node.LENGTH);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(hashSet0.contains("!Ix|lm"));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isVoid());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertEquals(301, node0.getType());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isString());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isInc());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLineno());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isAnd());
      assertFalse(node0.isFalse());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFunction());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertFalse(node0.isOr());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isWhile());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isAdd());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isVarArgs());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isFor());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isIf());
      assertEquals(38, node1.getLineno());
      assertFalse(node1.isNE());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isTry());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isIn());
      assertEquals(155651, node1.getSourcePosition());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isString());
      assertEquals(3, node1.getCharno());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isSyntheticBlock());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isParamList());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isArrayLit());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isThrow());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertEquals(304, node1.getType());
      assertFalse(node1.isBlock());
      assertFalse(node1.isInc());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCase());
      assertFalse(node1.isWith());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isRegExp());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.isInstanceOf());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isDec());
      assertFalse(node1.isNumber());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isOr());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isScript());
      assertFalse(node1.isFromExterns());
      assertFalse(node1.isNot());
      assertFalse(node1.isDo());
      assertFalse(node1.isAnd());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isContinue());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isLabel());
      assertFalse(node1.isCast());
      assertFalse(node1.isName());
      assertFalse(node1.isNull());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.isVar());
      assertFalse(node1.isComma());
      assertFalse(node1.isAdd());
      assertFalse(node1.isNew());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isWhile());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isReturn());
      assertFalse(node1.isTrue());
      assertFalse(node1.isVoid());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isCall());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isBreak());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(")", 0);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(0, (-1219), token_CommentType0, ")");
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertNotNull(comment0);
      assertEquals(0, comment0.depth());
      assertEquals(0, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(")", comment0.getValue());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.getAbsolutePosition());
      assertEquals((-1219), comment0.getLength());
      
      Node node0 = Node.newNumber((-418.494813));
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNotNull(node0);
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertEquals(39, node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCast());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertTrue(node0.isNumber());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      assertNotNull(jSDocInfo0);
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      
      Set<String> set0 = jSDocInfo0.getSuppressions();
      assertFalse(set0.contains(")"));
      assertNotNull(set0);
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertFalse(set0.contains(")"));
      assertNotNull(config0);
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Context context0 = new Context();
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertNotNull(context0);
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertNotNull(errorReporter0);
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertFalse(set0.contains(")"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, comment0.depth());
      assertEquals(0, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(")", comment0.getValue());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.getAbsolutePosition());
      assertEquals((-1219), comment0.getLength());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertEquals(39, node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCast());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertTrue(node0.isNumber());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertFalse(context0.generateObserverCount);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(set0.contains(")"));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(0, comment0.depth());
      assertEquals(0, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(")", comment0.getValue());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.getAbsolutePosition());
      assertEquals((-1219), comment0.getLength());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertEquals(39, node0.getType());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isDec());
      assertFalse(node0.isName());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isFunction());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCast());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertTrue(node0.isNumber());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.hasOneChild());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDisposes());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getFileOverview());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.hasModifies());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isNgInject());
      assertFalse(jSDocInfo0.isNoShadow());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertNull(jSDocInfo0.getLendsName());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isNoAlias());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getBlockDescription());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.makesStructs());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(node1.isThrow());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isBreak());
      assertFalse(node1.isSwitch());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isCase());
      assertFalse(node1.isNot());
      assertFalse(node1.isWith());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isString());
      assertFalse(node1.isScript());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isHook());
      assertFalse(node1.isThis());
      assertFalse(node1.isFor());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isAssign());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDelProp());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isArrayLit());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isOr());
      assertFalse(node1.isVoid());
      assertFalse(node1.isTrue());
      assertFalse(node1.isDo());
      assertFalse(node1.isLabel());
      assertFalse(node1.isNew());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isAssignAdd());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isDefaultCase());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isName());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isCall());
      assertFalse(node1.isAdd());
      assertFalse(node1.isParamList());
      assertEquals(0, node1.getSourcePosition());
      assertFalse(node1.isNull());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isCatch());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertFalse(node1.isFromExterns());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isTypeOf());
      assertEquals(0, node1.getChangeTime());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isDec());
      assertFalse(node1.isWhile());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isReturn());
      assertFalse(node1.isBlock());
      assertFalse(node1.isCast());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isIf());
      assertFalse(node1.isNE());
      assertEquals(0, node1.getCharno());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isIn());
      assertEquals(0, node1.getLineno());
      assertFalse(node1.isInc());
      assertEquals(304, node1.getType());
      assertFalse(node1.isFunction());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(",t&[O3tk", 10, 10);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(10, 10, token_CommentType0, ",t&[O3tk");
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertNotNull(comment0);
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertFalse(comment0.hasChildren());
      assertEquals(10, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(",t&[O3tk", comment0.getValue());
      assertEquals(10, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(10, comment0.getPosition());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(",t&[O3tk"));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, false);
      assertFalse(treeSet0.contains(",t&[O3tk"));
      assertNotNull(config0);
      
      Node node0 = new Node(20);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertNotNull(node0);
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(20, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertFalse(treeSet0.contains(",t&[O3tk"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertFalse(comment0.hasChildren());
      assertEquals(10, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(",t&[O3tk", comment0.getValue());
      assertEquals(10, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(10, comment0.getPosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(20, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      
      JsDocToken jsDocToken0 = JsDocToken.QMARK;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertFalse(treeSet0.contains(",t&[O3tk"));
      assertFalse(node1.equals((Object)node0));
      assertNotNull(node1);
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertFalse(comment0.hasChildren());
      assertEquals(10, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(",t&[O3tk", comment0.getValue());
      assertEquals(10, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(10, comment0.getPosition());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isThrow());
      assertFalse(node0.isAssign());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBreak());
      assertFalse(node0.isOr());
      assertFalse(node0.isString());
      assertFalse(node0.isContinue());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourcePosition());
      assertEquals(20, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isRegExp());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isName());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isCall());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isIn());
      assertFalse(node0.isNull());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isDo());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isHook());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node1.isGetProp());
      assertFalse(node1.isComma());
      assertFalse(node1.isThis());
      assertFalse(node1.isThrow());
      assertFalse(node1.isObjectLit());
      assertFalse(node1.isNot());
      assertFalse(node1.isScript());
      assertFalse(node1.isHook());
      assertEquals(0, node1.getLength());
      assertFalse(node1.isGetElem());
      assertFalse(node1.isWith());
      assertFalse(node1.isAssign());
      assertFalse(node1.isInstanceOf());
      assertFalse(node1.isBreak());
      assertFalse(node1.isExprResult());
      assertFalse(node1.isOnlyModifiesThisCall());
      assertFalse(node1.isLabel());
      assertFalse(node1.isAssignAdd());
      assertFalse(node1.isOr());
      assertFalse(node1.isFor());
      assertFalse(node1.isOptionalArg());
      assertFalse(node1.isCase());
      assertEquals((-1), node1.getSourceOffset());
      assertFalse(node1.isGetterDef());
      assertFalse(node1.isDo());
      assertFalse(node1.hasOneChild());
      assertFalse(node1.isNumber());
      assertFalse(node1.isEmpty());
      assertFalse(node1.isNew());
      assertFalse(node1.isSwitch());
      assertFalse(node1.isDefaultCase());
      assertEquals(10, node1.getLineno());
      assertFalse(node1.isVar());
      assertFalse(node1.isStringKey());
      assertFalse(node1.isLabelName());
      assertFalse(node1.isVarArgs());
      assertFalse(node1.isArrayLit());
      assertEquals(304, node1.getType());
      assertTrue(node1.mayMutateGlobalStateOrThrow());
      assertEquals(0, node1.getChangeTime());
      assertEquals(0, node1.getChildCount());
      assertFalse(node1.isParamList());
      assertFalse(node1.isNull());
      assertFalse(node1.isQuotedString());
      assertFalse(node1.isSetterDef());
      assertFalse(node1.isAdd());
      assertFalse(node1.isBlock());
      assertFalse(node1.isRegExp());
      assertFalse(node1.isTry());
      assertFalse(node1.isVoid());
      assertTrue(node1.mayMutateArguments());
      assertFalse(node1.isWhile());
      assertFalse(node1.isTrue());
      assertFalse(node1.wasEmptyNode());
      assertFalse(node1.hasMoreThanOneChild());
      assertFalse(node1.isName());
      assertFalse(node1.isDelProp());
      assertFalse(node1.isOnlyModifiesArgumentsCall());
      assertEquals(10, node1.getCharno());
      assertFalse(node1.isLocalResultCall());
      assertFalse(node1.isCatch());
      assertFalse(node1.isCall());
      assertEquals(40970, node1.getSourcePosition());
      assertFalse(node1.isFromExterns());
      assertEquals(0, node1.getSideEffectFlags());
      assertFalse(node1.isTypeOf());
      assertFalse(node1.isDec());
      assertFalse(node1.isIf());
      assertFalse(node1.hasChildren());
      assertFalse(node1.isReturn());
      assertFalse(node1.isSyntheticBlock());
      assertFalse(node1.isNE());
      assertFalse(node1.isString());
      assertFalse(node1.isIn());
      assertFalse(node1.isInc());
      assertFalse(node1.isDebugger());
      assertFalse(node1.isFunction());
      assertFalse(node1.isNoSideEffectsCall());
      assertFalse(node1.isFalse());
      assertFalse(node1.isAnd());
      assertFalse(node1.isContinue());
      assertFalse(node1.isCast());
      assertNotSame(node0, node1);
      assertNotSame(node1, node0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("(new,Booleanatrue))", 102);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      String string0 = jsDocTokenStream0.getRemainingJSDocLine();
      assertEquals("(new,Booleanatrue))", string0);
      assertNotNull(string0);
      
      Comment comment0 = new Comment(102, 102, token_CommentType0, "(new,Booleanatrue))");
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertNotNull(comment0);
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals("(new,Booleanatrue))", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(102, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(102, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(102, comment0.getLength());
      
      Node node0 = Node.newString("(new,Booleanatrue))");
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotNull(node0);
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      
      HashSet<String> hashSet0 = new HashSet<String>();
      assertFalse(hashSet0.contains("(new,Booleanatrue))"));
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
      assertFalse(hashSet0.contains("(new,Booleanatrue))"));
      assertNotNull(config0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(hashSet0.contains("(new,Booleanatrue))"));
      assertNotNull(jsDocInfoParser0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals("(new,Booleanatrue))", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(102, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(102, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(102, comment0.getLength());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      JsDocToken jsDocToken0 = JsDocToken.LT;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(hashSet0.contains("(new,Booleanatrue))"));
      assertNull(node1);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals("(new,Booleanatrue))", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(102, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(102, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(102, comment0.getLength());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      JsDocToken jsDocToken1 = JsDocToken.STRING;
      Node node2 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertFalse(hashSet0.contains("(new,Booleanatrue))"));
      assertFalse(jsDocToken1.equals((Object)jsDocToken0));
      assertFalse(node2.equals((Object)node0));
      assertNotNull(node2);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals("(new,Booleanatrue))", comment0.getValue());
      assertNull(comment0.getJsDoc());
      assertEquals(102, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(102, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals(102, comment0.getLength());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isIf());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isIn());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isEmpty());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTrue());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.isVoid());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFunction());
      assertEquals(40, node0.getType());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isCast());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOr());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isWith());
      assertFalse(node0.isWhile());
      assertFalse(node0.isBlock());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNull());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isVar());
      assertTrue(node0.isString());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isScript());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDefaultCase());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(node2.isNew());
      assertFalse(node2.isAdd());
      assertFalse(node2.isContinue());
      assertFalse(node2.isCall());
      assertFalse(node2.isName());
      assertFalse(node2.isStringKey());
      assertFalse(node2.isTypeOf());
      assertTrue(node2.mayMutateGlobalStateOrThrow());
      assertFalse(node2.isNumber());
      assertEquals(102, node2.getLineno());
      assertFalse(node2.hasChildren());
      assertFalse(node2.isFromExterns());
      assertFalse(node2.isDec());
      assertFalse(node2.isAssign());
      assertFalse(node2.isGetElem());
      assertFalse(node2.isOnlyModifiesArgumentsCall());
      assertFalse(node2.hasMoreThanOneChild());
      assertEquals(0, node2.getSideEffectFlags());
      assertFalse(node2.isQuotedString());
      assertFalse(node2.hasOneChild());
      assertFalse(node2.wasEmptyNode());
      assertTrue(node2.isString());
      assertFalse(node2.isBlock());
      assertFalse(node2.isReturn());
      assertEquals(0, node2.getChangeTime());
      assertFalse(node2.isWhile());
      assertFalse(node2.isScript());
      assertFalse(node2.isLocalResultCall());
      assertFalse(node2.isTrue());
      assertFalse(node2.isDefaultCase());
      assertFalse(node2.isVoid());
      assertFalse(node2.isExprResult());
      assertFalse(node2.isArrayLit());
      assertFalse(node2.isLabelName());
      assertFalse(node2.isParamList());
      assertFalse(node2.isVarArgs());
      assertFalse(node2.isNull());
      assertFalse(node2.isEmpty());
      assertFalse(node2.isOr());
      assertEquals(19, node2.getLength());
      assertFalse(node2.isVar());
      assertEquals(0, node2.getChildCount());
      assertFalse(node2.isDo());
      assertFalse(node2.isOnlyModifiesThisCall());
      assertFalse(node2.isLabel());
      assertFalse(node2.isAssignAdd());
      assertFalse(node2.isOptionalArg());
      assertFalse(node2.isSwitch());
      assertFalse(node2.isInc());
      assertFalse(node2.isSyntheticBlock());
      assertFalse(node2.isThis());
      assertFalse(node2.isBreak());
      assertFalse(node2.isGetProp());
      assertFalse(node2.isGetterDef());
      assertFalse(node2.isDelProp());
      assertFalse(node2.isComma());
      assertEquals((-1), node2.getSourceOffset());
      assertFalse(node2.isInstanceOf());
      assertFalse(node2.isHook());
      assertFalse(node2.isCase());
      assertFalse(node2.isFor());
      assertFalse(node2.isTry());
      assertTrue(node2.mayMutateArguments());
      assertFalse(node2.isRegExp());
      assertFalse(node2.isFunction());
      assertEquals(0, node2.getCharno());
      assertFalse(node2.isDebugger());
      assertFalse(node2.isNot());
      assertFalse(node2.isWith());
      assertFalse(node2.isCatch());
      assertFalse(node2.isCast());
      assertFalse(node2.isObjectLit());
      assertFalse(node2.isAnd());
      assertFalse(node2.isIf());
      assertFalse(node2.isNE());
      assertFalse(node2.isSetterDef());
      assertFalse(node2.isFalse());
      assertFalse(node2.isIn());
      assertEquals(417792, node2.getSourcePosition());
      assertFalse(node2.isNoSideEffectsCall());
      assertEquals(40, node2.getType());
      assertFalse(node2.isThrow());
      assertNotSame(node0, node2);
      assertNotSame(jsDocToken1, jsDocToken0);
      assertNotSame(node2, node0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Node node0 = Node.newString(12, "language version");
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertNotNull(node0);
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCase());
      assertEquals(12, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("language version", 38, 42);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(1, 12, token_CommentType0, "language version");
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertNotNull(comment0);
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(12, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals(1, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals("language version", comment0.getValue());
      assertFalse(comment0.hasChildren());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertFalse(treeSet0.contains("language version"));
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertFalse(treeSet0.contains("language version"));
      assertNotNull(jsDocInfoParser0);
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCase());
      assertEquals(12, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(12, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals(1, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals("language version", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocToken jsDocToken0 = JsDocToken.LT;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertFalse(treeSet0.contains("language version"));
      assertNull(node1);
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCase());
      assertEquals(12, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(12, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals(1, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals("language version", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocToken jsDocToken1 = JsDocToken.STRING;
      Node node2 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken1);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertFalse(treeSet0.contains("language version"));
      assertFalse(jsDocToken1.equals((Object)jsDocToken0));
      assertNull(node2);
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCase());
      assertEquals(12, node0.getType());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isBreak());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isNE());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isWith());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isParamList());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isWhile());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isNew());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNull());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isAnd());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isLocalResultCall());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isString());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(1, comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(12, comment0.getLength());
      assertNull(comment0.getJsDoc());
      assertEquals(1, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals("language version", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNotSame(jsDocToken1, jsDocToken0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((-2824), 7, token_CommentType0, "B'a9\"242jd,45[2[g@!");
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertNotNull(comment0);
      assertEquals((-2824), comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals("B'a9\"242jd,45[2[g@!", comment0.getValue());
      assertEquals((-2824), comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(7, comment0.getLength());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!H}Ys_=SvE/}gK!ZH");
      assertNotNull(jsDocTokenStream0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, true);
      assertFalse(treeSet0.contains("!H}Ys_=SvE/}gK!ZH"));
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, toolErrorReporter0);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertFalse(treeSet0.contains("!H}Ys_=SvE/}gK!ZH"));
      assertNotNull(jsDocInfoParser0);
      assertEquals((-2824), comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals("B'a9\"242jd,45[2[g@!", comment0.getValue());
      assertEquals((-2824), comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(7, comment0.getLength());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      Node node0 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertFalse(treeSet0.contains("!H}Ys_=SvE/}gK!ZH"));
      assertNotNull(node0);
      assertEquals((-2824), comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertEquals("B'a9\"242jd,45[2[g@!", comment0.getValue());
      assertEquals((-2824), comment0.getPosition());
      assertNull(comment0.getJsDoc());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(7, comment0.getLength());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertTrue(node0.hasOneChild());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTrue());
      assertFalse(node0.isString());
      assertTrue(node0.mayMutateArguments());
      assertEquals(2, node0.getCharno());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isLocalResultCall());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isNull());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isParamList());
      assertFalse(node0.isName());
      assertFalse(node0.isAdd());
      assertEquals(306, node0.getType());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNew());
      assertFalse(node0.isDo());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOr());
      assertFalse(node0.isWhile());
      assertFalse(node0.isWith());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isReturn());
      assertFalse(node0.isBlock());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isThis());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isComma());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getChangeTime());
      assertEquals(2, node0.getSourcePosition());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCast());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!", 2119);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment((-1596), (-1596), token_CommentType0, "!");
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertNotNull(comment0);
      assertEquals("!", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals((-1596), comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals((-1596), comment0.getPosition());
      assertEquals((-1596), comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      
      Node node0 = Node.newNumber((double) 22);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertNotNull(node0);
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("!"));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, false);
      assertFalse(treeSet0.contains("!"));
      assertNotNull(config0);
      
      MockFile mockFile0 = new MockFile("!", "!");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false, mockPrintStream0);
      assertNotNull(toolErrorReporter0);
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("!", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/!/!", mockFile0.toString());
      assertEquals("/experiment/!", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertFalse(treeSet0.contains("!"));
      assertNotNull(jsDocInfoParser0);
      assertEquals("!", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals((-1596), comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals((-1596), comment0.getPosition());
      assertEquals((-1596), comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("!", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/!/!", mockFile0.toString());
      assertEquals("/experiment/!", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocToken jsDocToken0 = JsDocToken.LC;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertFalse(treeSet0.contains("!"));
      assertNull(node1);
      assertEquals("!", comment0.getValue());
      assertEquals((-1), comment0.getLineno());
      assertEquals((-1596), comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertNull(comment0.getJsDoc());
      assertFalse(comment0.hasChildren());
      assertEquals((-1596), comment0.getPosition());
      assertEquals((-1596), comment0.getAbsolutePosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals(0, comment0.depth());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasChildren());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isContinue());
      assertFalse(node0.isDo());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAdd());
      assertFalse(node0.isThrow());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isWhile());
      assertFalse(node0.isReturn());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isFromExterns());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isString());
      assertTrue(node0.isNumber());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isVoid());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFunction());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isArrayLit());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isStringKey());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isWith());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getCharno());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals("!", mockFile0.getName());
      assertTrue(mockFile0.isAbsolute());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canWrite());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canRead());
      assertEquals("/experiment/!/!", mockFile0.toString());
      assertEquals("/experiment/!", mockFile0.getParent());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Node node0 = Node.newString(" for ");
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotNull(node0);
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTrue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isObjectLit());
      assertEquals(40, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getChangeTime());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(" for ", 38);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(hashSet0.contains(" for "));
      assertNotNull(jsDocInfoParser0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTrue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isObjectLit());
      assertEquals(40, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getChangeTime());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertFalse(hashSet0.contains(" for "));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isTrue());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isThis());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isWith());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.hasOneChild());
      assertTrue(node0.isString());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isOr());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isWhile());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isDec());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isName());
      assertFalse(node0.isNull());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isObjectLit());
      assertEquals(40, node0.getType());
      assertFalse(node0.isAnd());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isBreak());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVoid());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getChangeTime());
      assertEquals((-1), node0.getSourcePosition());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Node node0 = new Node((-1724164528), (-1724164528), (-1724164528));
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertNotNull(node0);
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isBreak());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isComma());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertEquals((-1724164528), node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(hashSet0, treeSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("t&E *");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(hashSet0.contains("t&E *"));
      assertFalse(treeSet0.contains("t&E *"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isBreak());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isComma());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertEquals((-1724164528), node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(hashSet0.contains("t&E *"));
      assertFalse(treeSet0.contains("t&E *"));
      assertNotNull(jSDocInfo0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isBreak());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isComma());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertEquals((-1724164528), node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.isDeprecated());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertTrue(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isNoAlias());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.isDefine());
      assertTrue(jSDocInfo0.hasType());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getDescription());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertFalse(jSDocInfo0.isConstant());
      assertNull(jSDocInfo0.getFileOverview());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getMeaning());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isConstructor());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isExpose());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isOverride());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.isNgInject());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.isJaggerModule());
      assertFalse(jSDocInfo0.isExterns());
      assertFalse(jSDocInfo0.isHidden());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertFalse(jSDocInfo0.isDisposes());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isJaggerProvide());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertFalse(hashSet0.contains("t&E *"));
      assertFalse(treeSet0.contains("t&E *"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isCast());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isReturn());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isWith());
      assertFalse(node0.hasMoreThanOneChild());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isCall());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isBreak());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isName());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isComma());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isOptionalArg());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isFor());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIf());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isDelProp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThis());
      assertEquals((-1724164528), node0.getType());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isHook());
      assertFalse(node0.isCatch());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isNE());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(1366, 1366, token_CommentType0, "[_tfT");
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertNotNull(comment0);
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals(1366, comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals("[_tfT", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(1366, comment0.getPosition());
      assertEquals(1366, comment0.getLength());
      
      Node node0 = Node.newString(2, "xJfx9mSesv:lz");
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertNotNull(node0);
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCast());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertEquals(2, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.hasOneChild());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("[_tfT"));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertFalse(treeSet0.contains("[_tfT"));
      assertNotNull(config0);
      
      Context context0 = Context.enter();
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertNotNull(context0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertNotNull(errorReporter0);
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("=4d&y'%k8u|O%.[cqW");
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertFalse(treeSet0.contains("[_tfT"));
      assertNotNull(jsDocInfoParser0);
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals(1366, comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals("[_tfT", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(1366, comment0.getPosition());
      assertEquals(1366, comment0.getLength());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCast());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertEquals(2, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.hasOneChild());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(52, Node.LENGTH);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertFalse(context0.generateObserverCount);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertFalse(treeSet0.contains("[_tfT"));
      assertEquals("161", comment0.toString());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.depth());
      assertEquals(1366, comment0.getAbsolutePosition());
      assertNull(comment0.getJsDoc());
      assertEquals("[_tfT", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(1366, comment0.getPosition());
      assertEquals(1366, comment0.getLength());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isInc());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isThrow());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isComma());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isNull());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isAnd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isName());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAssign());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.hasChildren());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isReturn());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isDec());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isCast());
      assertFalse(node0.isDo());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isCatch());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isScript());
      assertFalse(node0.isRegExp());
      assertEquals(2, node0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isFor());
      assertFalse(node0.wasEmptyNode());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.hasOneChild());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getLanguageVersion());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, hashSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Node node0 = JsDocInfoParser.parseTypeString("!Ix|lm");
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInc());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(301, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOptionalArg());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!Ix|lm", 57);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(150, 2, token_CommentType0, "QSL:E+y@");
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertNotNull(comment0);
      assertEquals(2, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals("QSL:E+y@", comment0.getValue());
      assertEquals(150, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(150, comment0.getAbsolutePosition());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertFalse(hashSet0.contains("!Ix|lm"));
      assertFalse(linkedHashSet0.contains("!Ix|lm"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInc());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(301, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOptionalArg());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(2, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals("QSL:E+y@", comment0.getValue());
      assertEquals(150, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(150, comment0.getAbsolutePosition());
      
      JsDocToken jsDocToken0 = JsDocToken.ELLIPSIS;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertFalse(hashSet0.contains("!Ix|lm"));
      assertFalse(linkedHashSet0.contains("!Ix|lm"));
      assertNull(node1);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInc());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(301, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOptionalArg());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(2, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals("QSL:E+y@", comment0.getValue());
      assertEquals(150, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(150, comment0.getAbsolutePosition());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertFalse(hashSet0.contains("!Ix|lm"));
      assertFalse(linkedHashSet0.contains("!Ix|lm"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isTry());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFunction());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isQuotedString());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isInc());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIn());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNE());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isWith());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isExprResult());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isComma());
      assertFalse(node0.isThis());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNumber());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isString());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertEquals(0, node0.getSideEffectFlags());
      assertEquals(301, node0.getType());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isDec());
      assertFalse(node0.isReturn());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOptionalArg());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVoid());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(2, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals("QSL:E+y@", comment0.getValue());
      assertEquals(150, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals(150, comment0.getAbsolutePosition());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream(")", 0);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(0, 0, token_CommentType0, ")");
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertNotNull(comment0);
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(0, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(0, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(0, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(")", comment0.getValue());
      
      Node node0 = Node.newString(2, ")");
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertNotNull(node0);
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertEquals(2, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains(")"));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, false);
      assertFalse(treeSet0.contains(")"));
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertFalse(treeSet0.contains(")"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(0, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(0, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(0, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(")", comment0.getValue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertEquals(2, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertFalse(treeSet0.contains(")"));
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(0, comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(0, comment0.getAbsolutePosition());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(0, comment0.getPosition());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals(")", comment0.getValue());
      assertFalse(node0.isIn());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isNE());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isSwitch());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isHook());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isDebugger());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isFor());
      assertFalse(node0.isString());
      assertFalse(node0.isCase());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getSourceOffset());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isNull());
      assertFalse(node0.isComma());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isBreak());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isAdd());
      assertFalse(node0.isVar());
      assertFalse(node0.isTrue());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDo());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isDec());
      assertFalse(node0.isNumber());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isReturn());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isCast());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isExprResult());
      assertEquals(2, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isWhile());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isScript());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isThis());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isWith());
      assertFalse(node0.isCatch());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFunction());
      assertFalse(node0.isThrow());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, false);
      assertNotNull(config0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Node node0 = JsDocInfoParser.parseTypeString("!Ix|lm");
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertNotNull(node0);
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNull());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isName());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertEquals(301, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCast());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("msg.jsdoc.idgen.bad", 57);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(hashSet0.contains("msg.jsdoc.idgen.bad"));
      assertNotNull(jsDocInfoParser0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNull());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isName());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertEquals(301, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCast());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      
      JsDocToken jsDocToken0 = JsDocToken.RC;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(hashSet0.contains("msg.jsdoc.idgen.bad"));
      assertNull(node1);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNull());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isName());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertEquals(301, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCast());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertFalse(hashSet0.contains("msg.jsdoc.idgen.bad"));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isTrue());
      assertFalse(node0.isVoid());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isIf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isNull());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isQuotedString());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isName());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isCall());
      assertFalse(node0.isBlock());
      assertFalse(node0.isCatch());
      assertFalse(node0.isRegExp());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isDo());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOr());
      assertFalse(node0.isNumber());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isVar());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isScript());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isAnd());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNot());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDec());
      assertFalse(node0.isThis());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isFromExterns());
      assertEquals(0, node0.getLength());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isReturn());
      assertFalse(node0.isComma());
      assertFalse(node0.isWith());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isInc());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isIn());
      assertEquals(301, node0.getType());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCast());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isFunction());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, hashSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Node node0 = JsDocInfoParser.parseTypeString("!KPgXuX%]?@\"Gu=o");
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertNotNull(node0);
      assertFalse(node0.isCatch());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertEquals(8, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(306, node0.getType());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertEquals(8, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!KPgXuX%]?@\"Gu=o", 57);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(150, 2, token_CommentType0, "QSL:E+y@");
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertNotNull(comment0);
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(150, comment0.getAbsolutePosition());
      assertEquals(2, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals(150, comment0.getPosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals("QSL:E+y@", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertFalse(hashSet0.contains("!KPgXuX%]?@\"Gu=o"));
      assertFalse(linkedHashSet0.contains("!KPgXuX%]?@\"Gu=o"));
      assertNotNull(jsDocInfoParser0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertEquals(8, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(306, node0.getType());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertEquals(8, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(150, comment0.getAbsolutePosition());
      assertEquals(2, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals(150, comment0.getPosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals("QSL:E+y@", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      
      JsDocToken jsDocToken0 = JsDocToken.LP;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertFalse(hashSet0.contains("!KPgXuX%]?@\"Gu=o"));
      assertFalse(linkedHashSet0.contains("!KPgXuX%]?@\"Gu=o"));
      assertNull(node1);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertEquals(8, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(306, node0.getType());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertEquals(8, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(150, comment0.getAbsolutePosition());
      assertEquals(2, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals(150, comment0.getPosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals("QSL:E+y@", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(54, Node.SLASH_V);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertFalse(hashSet0.contains("!KPgXuX%]?@\"Gu=o"));
      assertFalse(linkedHashSet0.contains("!KPgXuX%]?@\"Gu=o"));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(node0.isCatch());
      assertFalse(node0.isNull());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isVar());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isAdd());
      assertFalse(node0.isDo());
      assertFalse(node0.isNew());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.hasMoreThanOneChild());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertEquals(1, node0.getChildCount());
      assertFalse(node0.isIf());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isNE());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isNumber());
      assertFalse(node0.isScript());
      assertFalse(node0.isFor());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTry());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertFalse(node0.isAnd());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isThis());
      assertFalse(node0.isNot());
      assertFalse(node0.isComma());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertEquals(8, node0.getCharno());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertEquals(306, node0.getType());
      assertFalse(node0.isInc());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isReturn());
      assertFalse(node0.isContinue());
      assertFalse(node0.isOr());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isGetElem());
      assertEquals(8, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDebugger());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.hasOneChild());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertEquals(0, comment0.depth());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(150, comment0.getAbsolutePosition());
      assertEquals(2, comment0.getLength());
      assertEquals((-1), comment0.getLineno());
      assertEquals(150, comment0.getPosition());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals("QSL:E+y@", comment0.getValue());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      Node node0 = JsDocInfoParser.parseTypeString("!Ix|lm");
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertNotNull(node0);
      assertFalse(node0.isCatch());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isInc());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(301, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLocalResultCall());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!Ix|lm", 38);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(hashSet0.contains("!Ix|lm"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isCatch());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isInc());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(301, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLocalResultCall());
      
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(hashSet0.contains("!Ix|lm"));
      assertNotNull(jSDocInfo0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isCatch());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isInc());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(301, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLocalResultCall());
      assertFalse(jSDocInfo0.isDisposes());
      assertEquals(0, jSDocInfo0.getExtendedInterfacesCount());
      assertFalse(jSDocInfo0.shouldPreserveTry());
      assertNull(jSDocInfo0.getReturnDescription());
      assertFalse(jSDocInfo0.isJaggerProvide());
      assertFalse(jSDocInfo0.isImplicitCast());
      assertFalse(jSDocInfo0.isConsistentIdGenerator());
      assertFalse(jSDocInfo0.isStableIdGenerator());
      assertNull(jSDocInfo0.getLicense());
      assertFalse(jSDocInfo0.hasBaseType());
      assertFalse(jSDocInfo0.hasFileOverview());
      assertEquals(0, jSDocInfo0.getParameterCount());
      assertNull(jSDocInfo0.getOriginalCommentString());
      assertFalse(jSDocInfo0.isDefine());
      assertFalse(jSDocInfo0.isNoCompile());
      assertFalse(jSDocInfo0.isHidden());
      assertFalse(jSDocInfo0.hasEnumParameterType());
      assertFalse(jSDocInfo0.makesDicts());
      assertFalse(jSDocInfo0.hasReturnType());
      assertFalse(jSDocInfo0.isNoAlias());
      assertTrue(jSDocInfo0.hasType());
      assertEquals(JSDocInfo.Visibility.INHERITED, jSDocInfo0.getVisibility());
      assertNull(jSDocInfo0.getDescription());
      assertFalse(jSDocInfo0.isMappedIdGenerator());
      assertFalse(jSDocInfo0.isDeprecated());
      assertEquals(0, jSDocInfo0.getImplementedInterfaceCount());
      assertFalse(jSDocInfo0.isNgInject());
      assertEquals("JSDocInfo", jSDocInfo0.toString());
      assertFalse(jSDocInfo0.isNoSideEffects());
      assertNull(jSDocInfo0.getMeaning());
      assertNull(jSDocInfo0.getLendsName());
      assertEquals(0, jSDocInfo0.getOriginalCommentPosition());
      assertFalse(jSDocInfo0.makesStructs());
      assertFalse(jSDocInfo0.isNoShadow());
      assertFalse(jSDocInfo0.hasThisType());
      assertNull(jSDocInfo0.getBlockDescription());
      assertFalse(jSDocInfo0.isExpose());
      assertFalse(jSDocInfo0.isIdGenerator());
      assertFalse(jSDocInfo0.hasModifies());
      assertFalse(jSDocInfo0.isInterface());
      assertFalse(jSDocInfo0.isConstructor());
      assertFalse(jSDocInfo0.isExterns());
      assertNull(jSDocInfo0.getFileOverview());
      assertTrue(jSDocInfo0.containsDeclaration());
      assertFalse(jSDocInfo0.isExport());
      assertFalse(jSDocInfo0.hasTypedefType());
      assertNull(jSDocInfo0.getDeprecationReason());
      assertFalse(jSDocInfo0.isNoTypeCheck());
      assertFalse(jSDocInfo0.isJaggerInject());
      assertFalse(jSDocInfo0.isWizaction());
      assertFalse(jSDocInfo0.isConstant());
      assertFalse(jSDocInfo0.isJavaDispatch());
      assertFalse(jSDocInfo0.isOverride());
      assertNull(jSDocInfo0.getVersion());
      assertFalse(jSDocInfo0.isJaggerModule());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(54, Node.SLASH_V);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(52, Node.LENGTH);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertFalse(hashSet0.contains("!Ix|lm"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isCatch());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isSetterDef());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isTry());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isVar());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isFunction());
      assertFalse(node0.isParamList());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isIn());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isInc());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isCase());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isFor());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertFalse(node0.isNE());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isIf());
      assertTrue(node0.hasChildren());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNot());
      assertFalse(node0.isWith());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isThis());
      assertFalse(node0.isScript());
      assertFalse(node0.isGetProp());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isAdd());
      assertEquals(301, node0.getType());
      assertFalse(node0.isNew());
      assertFalse(node0.isCall());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDec());
      assertFalse(node0.isComma());
      assertFalse(node0.isNull());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isName());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isBreak());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isLocalResultCall());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("?sh%0$PVU", 0);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(0, 0, token_CommentType0, ":r6v!~+Y<U3,}nI");
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertNotNull(comment0);
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.getLength());
      assertEquals(":r6v!~+Y<U3,}nI", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.getPosition());
      
      Node node0 = Node.newString((-1880744308), "?sh%0$PVU", 5, 12);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertNotNull(node0);
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDec());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertEquals(20492, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertEquals((-1880744308), node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertEquals(5, node0.getLineno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertEquals(12, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isParamList());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, false);
      assertFalse(treeSet0.contains(":r6v!~+Y<U3,}nI"));
      assertNotNull(config0);
      
      Context context0 = Context.enter();
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertNotNull(context0);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertNotNull(errorReporter0);
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertFalse(treeSet0.contains(":r6v!~+Y<U3,}nI"));
      assertNotNull(jsDocInfoParser0);
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.getLength());
      assertEquals(":r6v!~+Y<U3,}nI", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.getPosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDec());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertEquals(20492, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertEquals((-1880744308), node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertEquals(5, node0.getLineno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertEquals(12, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isParamList());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(54, Node.SLASH_V);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(120, Context.VERSION_1_2);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(140, Context.VERSION_1_4);
      assertFalse(treeSet0.contains(":r6v!~+Y<U3,}nI"));
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals(0, comment0.getAbsolutePosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.getLength());
      assertEquals(":r6v!~+Y<U3,}nI", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(0, comment0.getPosition());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isContinue());
      assertFalse(node0.isNew());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isVar());
      assertFalse(node0.isBlock());
      assertFalse(node0.isDec());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssign());
      assertFalse(node0.isName());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isOr());
      assertFalse(node0.isAdd());
      assertEquals(20492, node0.getSourcePosition());
      assertFalse(node0.isNull());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isVoid());
      assertEquals((-1880744308), node0.getType());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isString());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isHook());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertEquals(5, node0.getLineno());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isIf());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isIn());
      assertFalse(node0.isTrue());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isCatch());
      assertFalse(node0.isScript());
      assertEquals(12, node0.getCharno());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isTry());
      assertFalse(node0.isInstanceOf());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isThis());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isFor());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isNumber());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isParamList());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isSealed());
      assertEquals(0, context0.getOptimizationLevel());
      assertFalse(context0.isGeneratingDebugChanged());
      assertTrue(context0.isGeneratingSource());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertNotNull(treeSet0);
      
      Node node0 = Node.newString(12, "language version");
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node0);
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(12, node0.getType());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("language version", 38, 42);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(1, 12, token_CommentType0, "language version");
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertNotNull(comment0);
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(12, comment0.getLength());
      assertEquals(1, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals("language version", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(1, comment0.getAbsolutePosition());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      assertFalse(treeSet0.contains("language version"));
      assertNotNull(config0);
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertFalse(treeSet0.contains("language version"));
      assertNotNull(jsDocInfoParser0);
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(12, node0.getType());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(12, comment0.getLength());
      assertEquals(1, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals("language version", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(1, comment0.getAbsolutePosition());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      JsDocToken jsDocToken0 = JsDocToken.LT;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertFalse(treeSet0.contains("language version"));
      assertNull(node1);
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(12, node0.getType());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(12, comment0.getLength());
      assertEquals(1, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals("language version", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(1, comment0.getAbsolutePosition());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertFalse(treeSet0.contains("language version"));
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertFalse(node0.isFunction());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChildCount());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(12, node0.getType());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isString());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isSyntheticBlock());
      assertEquals((-1), node0.getCharno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isCase());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThrow());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isFalse());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isBlock());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isIf());
      assertFalse(node0.isNE());
      assertFalse(node0.isScript());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isCast());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isAssign());
      assertFalse(node0.isWith());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDec());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isNot());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNumber());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isCall());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isDo());
      assertFalse(node0.isWhile());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isComma());
      assertFalse(node0.isReturn());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isBreak());
      assertFalse(node0.isName());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNull());
      assertFalse(node0.isTrue());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.JSDOC, comment0.getCommentType());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      assertEquals(12, comment0.getLength());
      assertEquals(1, comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertEquals("language version", comment0.getValue());
      assertFalse(comment0.hasChildren());
      assertEquals(1, comment0.getAbsolutePosition());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;", 1804);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment((-544), 21, token_CommentType0, "(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;");
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertNotNull(comment0);
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals((-544), comment0.getPosition());
      assertEquals(21, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals("(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;", comment0.getValue());
      assertEquals((-544), comment0.getAbsolutePosition());
      
      Locale locale0 = Locale.CHINA;
      assertNotNull(locale0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertFalse(set0.contains("(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;"));
      assertNotNull(set0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(set0, set0, true, config_LanguageMode0, true);
      assertFalse(set0.contains("(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;"));
      assertNotNull(config0);
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, errorCollector0);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertFalse(set0.contains("(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;"));
      assertNotNull(jsDocInfoParser0);
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals((-544), comment0.getPosition());
      assertEquals(21, comment0.getLength());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertEquals("(Ljava/lang/Object;Ljava/lang/Class;)Ljava/lang/Object;", comment0.getValue());
      assertEquals((-544), comment0.getAbsolutePosition());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{yy#GpiKquw:\")riA", (-1795762537), (-1795762537));
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((-1795762537), (-1795762537), token_CommentType0, "{yy#GpiKquw:\")riA");
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertNotNull(comment0);
      assertEquals((-1795762537), comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals((-1795762537), comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals((-1795762537), comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals("{yy#GpiKquw:\")riA", comment0.getValue());
      assertEquals(161, comment0.getType());
      
      Node node0 = new Node(8);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertNotNull(node0);
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertEquals(8, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isName());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      assertFalse(linkedHashSet0.contains("{yy#GpiKquw:\")riA"));
      assertNotNull(config0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      ErrorCollector errorCollector0 = new ErrorCollector();
      assertNotNull(errorCollector0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(54, Node.SLASH_V);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertFalse(linkedHashSet0.contains("{yy#GpiKquw:\")riA"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals((-1795762537), comment0.getLength());
      assertFalse(comment0.hasChildren());
      assertNull(comment0.getJsDoc());
      assertEquals(0, comment0.depth());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals((-1795762537), comment0.getAbsolutePosition());
      assertEquals("161", comment0.toString());
      assertEquals((-1795762537), comment0.getPosition());
      assertEquals((-1), comment0.getLineno());
      assertEquals("{yy#GpiKquw:\")riA", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertFalse(node0.isWith());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isScript());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isThrow());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertEquals(8, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isOr());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isName());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isDelProp());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isComma());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isVoid());
      assertFalse(node0.isCall());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isRegExp());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isTry());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isParamList());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isVar());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isCase());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isIn());
      assertFalse(node0.isInc());
      assertFalse(node0.isIf());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertEquals((-1), node0.getLineno());
      assertEquals(0, node0.getLength());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isCatch());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      
      // Undeclared exception!
      try { 
        jsDocInfoParser0.parse();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.javascript.rhino.head.ast.ErrorCollector", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!", 2119);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment((-1596), (-1596), token_CommentType0, "!");
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertNotNull(comment0);
      assertEquals((-1596), comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("!", comment0.getValue());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals((-1596), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals((-1596), comment0.getAbsolutePosition());
      
      Node node0 = Node.newNumber((double) 22);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertNotNull(node0);
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertTrue(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      
      TreeSet<String> treeSet0 = new TreeSet<String>();
      assertFalse(treeSet0.contains("!"));
      assertNotNull(treeSet0);
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, false);
      assertFalse(treeSet0.contains("!"));
      assertNotNull(config0);
      
      Context context0 = new Context();
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertNotNull(context0);
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertNotNull(errorReporter0);
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorReporter0);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(treeSet0.contains("!"));
      assertNotNull(jsDocInfoParser0);
      assertEquals((-1596), comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("!", comment0.getValue());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals((-1596), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals((-1596), comment0.getAbsolutePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertTrue(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      
      JsDocToken jsDocToken0 = JsDocToken.GT;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(treeSet0.contains("!"));
      assertNull(node1);
      assertEquals((-1596), comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("!", comment0.getValue());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals((-1596), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals((-1596), comment0.getAbsolutePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertTrue(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(52, Node.LENGTH);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(8, Context.FEATURE_STRICT_VARS);
      assertEquals(100, Context.VERSION_1_0);
      assertEquals((-1), Context.VERSION_UNKNOWN);
      assertEquals(12, Context.FEATURE_WARNING_AS_ERROR);
      assertEquals(140, Context.VERSION_1_4);
      assertEquals(10, Context.FEATURE_LOCATION_INFORMATION_IN_ERROR);
      assertEquals(4, Context.FEATURE_TO_STRING_AS_SOURCE);
      assertEquals(3, Context.FEATURE_RESERVED_KEYWORD_AS_IDENTIFIER);
      assertEquals(11, Context.FEATURE_STRICT_MODE);
      assertEquals(2, Context.FEATURE_MEMBER_EXPR_AS_FUNCTION_NAME);
      assertEquals(9, Context.FEATURE_STRICT_EVAL);
      assertEquals(13, Context.FEATURE_ENHANCED_JAVA_ACCESS);
      assertFalse(context0.generateObserverCount);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPERTIES);
      assertEquals(170, Context.VERSION_1_7);
      assertEquals(130, Context.VERSION_1_3);
      assertEquals(6, Context.FEATURE_E4X);
      assertEquals(180, Context.VERSION_1_8);
      assertEquals(150, Context.VERSION_1_5);
      assertEquals(1, Context.FEATURE_NON_ECMA_GET_YEAR);
      assertEquals(7, Context.FEATURE_DYNAMIC_SCOPE);
      assertEquals(110, Context.VERSION_1_1);
      assertEquals(0, Context.VERSION_DEFAULT);
      assertEquals(160, Context.VERSION_1_6);
      assertEquals(5, Context.FEATURE_PARENT_PROTO_PROPRTIES);
      assertEquals(120, Context.VERSION_1_2);
      assertFalse(treeSet0.contains("!"));
      assertEquals((-1596), comment0.getLength());
      assertEquals("161", comment0.toString());
      assertEquals(161, comment0.getType());
      assertEquals((-1), comment0.getLineno());
      assertEquals("!", comment0.getValue());
      assertEquals(Token.CommentType.LINE, comment0.getCommentType());
      assertFalse(comment0.hasChildren());
      assertEquals((-1596), comment0.getPosition());
      assertEquals(0, comment0.depth());
      assertNull(comment0.getJsDoc());
      assertEquals((-1596), comment0.getAbsolutePosition());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isThis());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isWith());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertFalse(node0.isFalse());
      assertFalse(node0.isCast());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isGetProp());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isScript());
      assertFalse(node0.isNot());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isContinue());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isCase());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isBlock());
      assertFalse(node0.isHook());
      assertEquals(39, node0.getType());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThrow());
      assertFalse(node0.isIf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isNE());
      assertFalse(node0.isIn());
      assertFalse(node0.isCatch());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isFunction());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isVarArgs());
      assertTrue(node0.mayMutateArguments());
      assertEquals(0, node0.getChangeTime());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFor());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isTry());
      assertFalse(node0.isArrayLit());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isParamList());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertTrue(node0.isNumber());
      assertFalse(node0.isAssignAdd());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isReturn());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isAssign());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isDec());
      assertFalse(node0.isCall());
      assertFalse(node0.isName());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isVar());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isBreak());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isNew());
      assertFalse(node0.isVoid());
      assertFalse(node0.isTrue());
      assertFalse(node0.isAdd());
      assertFalse(node0.isNull());
      assertFalse(node0.isOr());
      assertEquals(0, context0.getOptimizationLevel());
      assertTrue(context0.isGeneratingSource());
      assertEquals(Integer.MAX_VALUE, context0.getMaximumInterpreterStackDepth());
      assertEquals(0, context0.getInstructionObserverThreshold());
      assertFalse(context0.isGeneratingDebugChanged());
      assertFalse(context0.isGeneratingDebug());
      assertEquals(0, context0.getLanguageVersion());
      assertFalse(context0.isSealed());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      assertNotNull(toolErrorReporter0);
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, hashSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Node node0 = JsDocInfoParser.parseTypeString("!Ix|lm");
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertNotNull(node0);
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDo());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isThrow());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals(301, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVoid());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!Ix|lm", 57);
      assertNotNull(jsDocTokenStream0);
      
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment(150, 55, token_CommentType0, "error reporter");
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertNotNull(comment0);
      assertEquals(150, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(55, comment0.getLength());
      assertEquals("error reporter", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(150, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertFalse(hashSet0.contains("error reporter"));
      assertFalse(linkedHashSet0.contains("error reporter"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDo());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isThrow());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals(301, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVoid());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(150, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(55, comment0.getLength());
      assertEquals("error reporter", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(150, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      
      JsDocToken jsDocToken0 = JsDocToken.COLON;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertFalse(hashSet0.contains("error reporter"));
      assertFalse(linkedHashSet0.contains("error reporter"));
      assertNull(node1);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDo());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isThrow());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals(301, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVoid());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(150, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(55, comment0.getLength());
      assertEquals("error reporter", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(150, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(52, Node.LENGTH);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(8, com.google.javascript.rhino.head.Node.END_YIELDS);
      assertEquals(2, com.google.javascript.rhino.head.Node.LOCAL_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.NON_SPECIALCALL);
      assertEquals(11, com.google.javascript.rhino.head.Node.SKIP_INDEXES_PROP);
      assertEquals(9, com.google.javascript.rhino.head.Node.DIRECTCALL_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.DESCENDANTS_FLAG);
      assertEquals(26, com.google.javascript.rhino.head.Node.LAST_PROP);
      assertEquals(0, com.google.javascript.rhino.head.Node.END_UNREACHED);
      assertEquals(0, com.google.javascript.rhino.head.Node.BOTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.END_DROPS_OFF);
      assertEquals(2, com.google.javascript.rhino.head.Node.SPECIALCALL_WITH);
      assertEquals(12, com.google.javascript.rhino.head.Node.OBJECT_IDS_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.LEFT);
      assertEquals(14, com.google.javascript.rhino.head.Node.CATCH_SCOPE_PROP);
      assertEquals(8, com.google.javascript.rhino.head.Node.ISNUMBER_PROP);
      assertEquals(15, com.google.javascript.rhino.head.Node.LABEL_ID_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.SPECIALCALL_EVAL);
      assertEquals(2, com.google.javascript.rhino.head.Node.END_RETURNS);
      assertEquals(2, com.google.javascript.rhino.head.Node.RIGHT);
      assertEquals(3, com.google.javascript.rhino.head.Node.LOCAL_BLOCK_PROP);
      assertEquals(25, com.google.javascript.rhino.head.Node.EXPRESSION_CLOSURE_PROP);
      assertEquals(5, com.google.javascript.rhino.head.Node.CASEARRAY_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.DECR_FLAG);
      assertEquals(24, com.google.javascript.rhino.head.Node.JSDOC_PROP);
      assertEquals(19, com.google.javascript.rhino.head.Node.PARENTHESIZED_PROP);
      assertEquals(23, com.google.javascript.rhino.head.Node.DESTRUCTURING_PARAMS);
      assertEquals(6, com.google.javascript.rhino.head.Node.TARGETBLOCK_PROP);
      assertEquals(26, com.google.javascript.rhino.head.Node.DESTRUCTURING_SHORTHAND);
      assertEquals(18, com.google.javascript.rhino.head.Node.CONTROL_BLOCK_PROP);
      assertEquals(1, com.google.javascript.rhino.head.Node.FUNCTION_PROP);
      assertEquals(22, com.google.javascript.rhino.head.Node.DESTRUCTURING_NAMES);
      assertEquals(17, com.google.javascript.rhino.head.Node.NAME_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.ATTRIBUTE_FLAG);
      assertEquals(10, com.google.javascript.rhino.head.Node.SPECIALCALL_PROP);
      assertEquals(16, com.google.javascript.rhino.head.Node.MEMBER_TYPE_PROP);
      assertEquals(21, com.google.javascript.rhino.head.Node.DESTRUCTURING_ARRAY_LENGTH);
      assertEquals(1, com.google.javascript.rhino.head.Node.PROPERTY_FLAG);
      assertEquals(13, com.google.javascript.rhino.head.Node.INCRDECR_PROP);
      assertEquals(2, com.google.javascript.rhino.head.Node.POST_FLAG);
      assertEquals(7, com.google.javascript.rhino.head.Node.VARIABLE_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.END_RETURNS_VALUE);
      assertEquals(20, com.google.javascript.rhino.head.Node.GENERATOR_END_PROP);
      assertEquals(4, com.google.javascript.rhino.head.Node.REGEXP_PROP);
      assertFalse(hashSet0.contains("error reporter"));
      assertFalse(linkedHashSet0.contains("error reporter"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertTrue(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(node0.isDec());
      assertFalse(node0.isAssign());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isNumber());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isDo());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isOr());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isBreak());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isFalse());
      assertFalse(node0.isName());
      assertFalse(node0.isThrow());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isComma());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isNull());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isCall());
      assertFalse(node0.isString());
      assertFalse(node0.isWhile());
      assertFalse(node0.isNot());
      assertFalse(node0.isAnd());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isDebugger());
      assertEquals(301, node0.getType());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isIf());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertFalse(node0.isNE());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isVoid());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isDefaultCase());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isFunction());
      assertFalse(node0.isTrue());
      assertFalse(node0.isIn());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVar());
      assertFalse(node0.isThis());
      assertFalse(node0.isHook());
      assertFalse(node0.isInstanceOf());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isCatch());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isWith());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isBlock());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isTry());
      assertFalse(node0.isCase());
      assertFalse(node0.isScript());
      assertEquals((-1), node0.getSourceOffset());
      assertEquals(150, comment0.getPosition());
      assertFalse(comment0.hasChildren());
      assertEquals(55, comment0.getLength());
      assertEquals("error reporter", comment0.getValue());
      assertEquals(161, comment0.getType());
      assertEquals("161", comment0.toString());
      assertEquals(Token.CommentType.HTML, comment0.getCommentType());
      assertEquals(150, comment0.getAbsolutePosition());
      assertEquals(0, comment0.depth());
      assertEquals((-1), comment0.getLineno());
      assertNull(comment0.getJsDoc());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Node node0 = Node.newString("!Ix|lm");
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertNotNull(node0);
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertTrue(node0.isString());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!Ix|lm", 38);
      assertNotNull(jsDocTokenStream0);
      
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
      assertFalse(hashSet0.contains("!Ix|lm"));
      assertNotNull(config0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertFalse(hashSet0.contains("!Ix|lm"));
      assertNotNull(jsDocInfoParser0);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertTrue(node0.isString());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      
      JsDocToken jsDocToken0 = JsDocToken.COMMA;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertFalse(hashSet0.contains("!Ix|lm"));
      assertNull(node1);
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertTrue(node0.isString());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(52, Node.LENGTH);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertFalse(hashSet0.contains("!Ix|lm"));
      assertEquals(0, hashSet0.size());
      assertTrue(hashSet0.isEmpty());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isTry());
      assertFalse(node0.isVoid());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTrue());
      assertFalse(node0.isDebugger());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isFor());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertFalse(node0.isEmpty());
      assertEquals(0, node0.getChildCount());
      assertFalse(node0.isParamList());
      assertEquals(40, node0.getType());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isNew());
      assertFalse(node0.isVar());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDo());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isAdd());
      assertFalse(node0.isReturn());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.isComma());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertEquals(0, node0.getChangeTime());
      assertFalse(node0.isNull());
      assertFalse(node0.isBreak());
      assertFalse(node0.hasChildren());
      assertFalse(node0.isName());
      assertFalse(node0.isDec());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isAssign());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isExprResult());
      assertFalse(node0.isGetElem());
      assertFalse(node0.hasOneChild());
      assertEquals((-1), node0.getSourcePosition());
      assertFalse(node0.isNumber());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isNot());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isScript());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isAnd());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isFalse());
      assertFalse(node0.isLabelName());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      assertTrue(node0.isString());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isSwitch());
      assertEquals((-1), node0.getCharno());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isBlock());
      assertFalse(node0.isThrow());
      assertFalse(node0.isCase());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertEquals((-1), node0.getLineno());
      assertFalse(node0.isIn());
      assertFalse(node0.isThis());
      assertFalse(node0.isNE());
      assertFalse(node0.isWith());
      assertFalse(node0.isIf());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isCatch());
      assertFalse(node0.hasMoreThanOneChild());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      assertNotNull(hashSet0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      assertNotNull(toolErrorReporter0);
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(hashSet0, hashSet0, true, config_LanguageMode0, true);
      assertNotNull(config0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      
      Node node0 = JsDocInfoParser.parseTypeString("!Ix|lm");
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertNotNull(node0);
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertEquals(301, node0.getType());
      assertFalse(node0.isNE());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("!Ix|lm", 38);
      assertNotNull(jsDocTokenStream0);
      
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, toolErrorReporter0);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(hashSet0.contains("!Ix|lm"));
      assertNotNull(jsDocInfoParser0);
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertEquals(301, node0.getType());
      assertFalse(node0.isNE());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
      assertEquals(4095, Node.COLUMN_MASK);
      assertEquals(1, Node.FLAG_GLOBAL_STATE_UNMODIFIED);
      assertEquals(55, Node.INFERRED_FUNCTION);
      assertEquals(8, Node.FLAG_NO_THROWS);
      assertEquals(48, Node.DIRECTIVES);
      assertEquals(36, Node.QUOTED_PROP);
      assertEquals(16, Node.FLAG_LOCAL_RESULTS);
      assertEquals(43, Node.IS_CONSTANT_NAME);
      assertEquals(57, Node.REFLECTED_OBJECT);
      assertEquals(4095, Node.MAX_COLUMN_NUMBER);
      assertEquals(29, Node.JSDOC_INFO_PROP);
      assertEquals(53, Node.INPUT_ID);
      assertEquals(52, Node.LENGTH);
      assertEquals(40, Node.ORIGINALNAME_PROP);
      assertEquals(2, Node.POST_FLAG);
      assertEquals(15, Node.NO_SIDE_EFFECTS);
      assertEquals(39, Node.EMPTY_BLOCK);
      assertEquals(47, Node.IS_DISPATCHER);
      assertEquals(30, Node.VAR_ARGS_NAME);
      assertEquals(57, Node.LAST_PROP);
      assertEquals(42, Node.SIDE_EFFECT_FLAGS);
      assertEquals(12, Node.COLUMN_BITS);
      assertEquals(32, Node.INCRDECR_PROP);
      assertEquals(51, Node.STATIC_SOURCE_FILE);
      assertEquals(1, Node.DECR_FLAG);
      assertEquals(37, Node.OPT_ARG_NAME);
      assertEquals(49, Node.DIRECT_EVAL);
      assertEquals(46, Node.IS_NAMESPACE);
      assertEquals(54, Node.SLASH_V);
      assertEquals(56, Node.CHANGE_TIME);
      assertEquals(0, Node.SIDE_EFFECTS_ALL);
      assertEquals(50, Node.FREE_CALL);
      assertEquals(31, Node.SIDE_EFFECTS_FLAGS_MASK);
      assertEquals(2, Node.FLAG_THIS_UNMODIFIED);
      assertEquals(4, Node.FLAG_ARGUMENTS_UNMODIFIED);
      assertEquals(38, Node.SYNTHETIC_BLOCK_PROP);
      assertFalse(hashSet0.contains("!Ix|lm"));
      assertTrue(hashSet0.isEmpty());
      assertEquals(0, hashSet0.size());
      assertFalse(toolErrorReporter0.isReportingWarnings());
      assertFalse(toolErrorReporter0.hasReportedError());
      assertFalse(node0.isArrayLit());
      assertFalse(node0.isTry());
      assertFalse(node0.isOptionalArg());
      assertFalse(node0.isDebugger());
      assertTrue(node0.mayMutateArguments());
      assertFalse(node0.isTrue());
      assertFalse(node0.isFor());
      assertFalse(node0.isDefaultCase());
      assertFalse(node0.isGetterDef());
      assertEquals((-1), node0.getSourceOffset());
      assertFalse(node0.isEmpty());
      assertFalse(node0.isIn());
      assertEquals(301, node0.getType());
      assertFalse(node0.isNE());
      assertTrue(node0.hasMoreThanOneChild());
      assertFalse(node0.isIf());
      assertFalse(node0.isLocalResultCall());
      assertFalse(node0.isRegExp());
      assertFalse(node0.isVoid());
      assertFalse(node0.isDelProp());
      assertFalse(node0.isCall());
      assertFalse(node0.isCatch());
      assertTrue(node0.hasChildren());
      assertFalse(node0.isHook());
      assertFalse(node0.isStringKey());
      assertFalse(node0.isName());
      assertFalse(node0.isBlock());
      assertEquals(4, node0.getSourcePosition());
      assertFalse(node0.isVar());
      assertFalse(node0.isNull());
      assertFalse(node0.isDo());
      assertFalse(node0.isCase());
      assertFalse(node0.isNew());
      assertFalse(node0.isAdd());
      assertFalse(node0.isOnlyModifiesThisCall());
      assertFalse(node0.isLabel());
      assertFalse(node0.isAssignAdd());
      assertFalse(node0.isParamList());
      assertFalse(node0.isVarArgs());
      assertFalse(node0.isSwitch());
      assertFalse(node0.isLabelName());
      assertFalse(node0.hasOneChild());
      assertFalse(node0.isNumber());
      assertFalse(node0.isFromExterns());
      assertFalse(node0.isNot());
      assertFalse(node0.isScript());
      assertFalse(node0.isInstanceOf());
      assertFalse(node0.isOnlyModifiesArgumentsCall());
      assertEquals(0, node0.getSideEffectFlags());
      assertFalse(node0.isOr());
      assertFalse(node0.wasEmptyNode());
      assertFalse(node0.isThis());
      assertFalse(node0.isReturn());
      assertFalse(node0.isWhile());
      assertFalse(node0.isDec());
      assertFalse(node0.isBreak());
      assertFalse(node0.isWith());
      assertFalse(node0.isComma());
      assertEquals(4, node0.getCharno());
      assertFalse(node0.isAssign());
      assertFalse(node0.isTypeOf());
      assertFalse(node0.isGetElem());
      assertFalse(node0.isExprResult());
      assertEquals(0, node0.getLength());
      assertFalse(node0.isNoSideEffectsCall());
      assertFalse(node0.isThrow());
      assertEquals(0, node0.getChangeTime());
      assertTrue(node0.mayMutateGlobalStateOrThrow());
      assertFalse(node0.isGetProp());
      assertFalse(node0.isQuotedString());
      assertFalse(node0.isString());
      assertFalse(node0.isInc());
      assertFalse(node0.isSetterDef());
      assertFalse(node0.isObjectLit());
      assertFalse(node0.isAnd());
      assertEquals(2, node0.getChildCount());
      assertFalse(node0.isSyntheticBlock());
      assertFalse(node0.isFunction());
      assertFalse(node0.isFalse());
      assertEquals(0, node0.getLineno());
      assertFalse(node0.isContinue());
      assertFalse(node0.isCast());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("\"{42@cnCP@9:E^$", (-562), (-1908874351));
      jsDocTokenStream0.getChar();
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(65534, (-2926), token_CommentType0, "error reporter");
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, (Node) null, config0, toolErrorReporter0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNull(jSDocInfo0);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{yy#GpiKquw:\")riA", 1413, 4095);
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ContextFactory contextFactory0 = ContextFactory.getGlobal();
      Context context0 = contextFactory0.enter();
      ErrorReporter errorReporter0 = context0.getErrorReporter();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, (Node) null, config0, errorReporter0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Node node0 = Node.newNumber((-418.494813));
      TreeSet<String> treeSet0 = new TreeSet<String>();
      node0.setSourceFileForTesting("Wt]Mm;Z*uj{");
      Comment comment0 = new Comment(36, 15, token_CommentType0, "language version");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("error reporter");
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.LC;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNotNull(node1);
      assertTrue(node1.isString());
      assertEquals(0, node1.getSourcePosition());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashSet<String> hashSet0 = new HashSet<String>();
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, hashSet0, true, config_LanguageMode0, true);
      Node node0 = JsDocInfoParser.parseTypeString("aDN#O6@b;1\"#0.Cf~");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("aDN#O6@b;1\"#0.Cf~", 57);
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Comment comment0 = new Comment(150, 2, token_CommentType0, "QSL:E+y@");
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.LP;
      Node node1 = jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      assertNull(node1);
      
      boolean boolean0 = jsDocInfoParser0.parse();
      assertEquals(0, node0.getSourcePosition());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Node node0 = JsDocInfoParser.parseTypeString("(new,Boo8leanatrue))");
      assertNotNull(node0);
      
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("(new,Boo8leanatrue))", (-95), 43);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, false);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, (Comment) null, node0, config0, errorCollector0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.parseInlineTypeDoc();
      assertEquals(301, node0.getType());
      assertTrue(node0.hasMoreThanOneChild());
      assertNotNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Token.CommentType token_CommentType0 = Token.CommentType.LINE;
      Node node0 = Node.newNumber((-418.494813));
      JSDocInfo jSDocInfo0 = new JSDocInfo();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Comment comment0 = new Comment(36, 15, token_CommentType0, "language version");
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("error reporter", 3);
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5_STRICT;
      Config config0 = new Config(treeSet0, treeSet0, false, config_LanguageMode0, false);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      jsDocInfoParser0.setFileOverviewJSDocInfo(jSDocInfo0);
      assertFalse(jSDocInfo0.makesStructs());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("{yy#GpiKquw:\")riA", (-1795762537), (-1795762537));
      Token.CommentType token_CommentType0 = Token.CommentType.HTML;
      Comment comment0 = new Comment((-1795762537), (-1795762537), token_CommentType0, "{yy#GpiKquw:\")riA");
      Node node0 = new Node(8);
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT3;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ErrorCollector errorCollector0 = new ErrorCollector();
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, errorCollector0);
      jsDocInfoParser0.setFileLevelJsDocBuilder((Node.FileLevelJsDocBuilder) null);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Node node0 = new Node(8);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("language version", 38, 42);
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(1, 12, token_CommentType0, "language version");
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JSDocInfo jSDocInfo0 = jsDocInfoParser0.getFileOverviewJSDocInfo();
      assertNull(jSDocInfo0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(linkedHashSet0, linkedHashSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(false);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser((JsDocTokenStream) null, (Comment) null, (Node) null, config0, toolErrorReporter0);
      boolean boolean0 = jsDocInfoParser0.hasParsedJSDocInfo();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TreeSet<String> treeSet0 = new TreeSet<String>();
      Node node0 = new Node(8);
      JsDocTokenStream jsDocTokenStream0 = new JsDocTokenStream("language version", 38, 42);
      Token.CommentType token_CommentType0 = Token.CommentType.JSDOC;
      Comment comment0 = new Comment(1, 12, token_CommentType0, "language version");
      Config.LanguageMode config_LanguageMode0 = Config.LanguageMode.ECMASCRIPT5;
      Config config0 = new Config(treeSet0, treeSet0, true, config_LanguageMode0, true);
      ToolErrorReporter toolErrorReporter0 = new ToolErrorReporter(true);
      JsDocInfoParser jsDocInfoParser0 = new JsDocInfoParser(jsDocTokenStream0, comment0, node0, config0, toolErrorReporter0);
      JsDocToken jsDocToken0 = JsDocToken.EOC;
      jsDocInfoParser0.parseAndRecordTypeNode(jsDocToken0);
      boolean boolean0 = jsDocInfoParser0.parse();
      assertTrue(boolean0);
  }
}
