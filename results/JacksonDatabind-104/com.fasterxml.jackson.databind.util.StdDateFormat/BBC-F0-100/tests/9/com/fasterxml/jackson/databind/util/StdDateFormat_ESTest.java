/*
 * This file was automatically generated by EvoSuite
 * Fri Aug 06 19:42:12 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.io.StringWriter;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockDateFormat;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdDateFormat_ESTest extends StdDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      stdDateFormat0.parse("0000-01-00");
      assertTrue(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      Date date0 = stdDateFormat0.parse("0004-00-00");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      Date date0 = stdDateFormat0.parse("0090-00-00");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.KOREAN;
      Boolean boolean0 = Boolean.valueOf("Timestamp value %s out of 64-bit value range");
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0, false);
      ParsePosition parsePosition0 = new ParsePosition(1535);
      try { 
        stdDateFormat0._parseAsISO8601("com.fasterxml.jackson.databind.util.StdDateFormat", parsePosition0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"com.fasterxml.jackson.databind.util.StdDateFormat\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? false)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition(2142);
      Date date0 = stdDateFormat0._parseDate("2.2250738585072012e-308", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition(9);
      Date date0 = stdDateFormat0._parseDate("j", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("hX8v*f]!T~gY.}3rIO");
      Boolean boolean0 = Boolean.valueOf("hX8v*f]!T~gY.}3rIO");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, (Locale) null, boolean0, true);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone0);
      assertFalse(stdDateFormat1.isLenient());
      assertSame(stdDateFormat1, stdDateFormat0);
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ITALIAN;
      Boolean boolean0 = new Boolean("");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
      assertFalse(stdDateFormat1.isLenient());
      assertSame(stdDateFormat1, stdDateFormat0);
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat2 = stdDateFormat1.withLenient(boolean0);
      assertFalse(stdDateFormat2.isLenient());
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.KOREAN;
      Boolean boolean0 = Boolean.valueOf("Timestamp value %s out of 64-bit value range");
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0, false);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat1.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(1580);
      stdDateFormat0.parseAsRFC1123("", parsePosition0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(2);
      stdDateFormat0.parseAsISO8601("0000-00-00", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(3788);
      TimeZone timeZone0 = TimeZone.getTimeZone("%a`%?W7_up\"b");
      Locale locale0 = Locale.PRC;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      stdDateFormat0.parse("0000-0yZ-00", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.KOREAN;
      Boolean boolean0 = Boolean.valueOf("Timestamp value %s out of 64-bit value range");
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0, false);
      boolean boolean1 = stdDateFormat0.looksLikeISO8601("0000-00-00");
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertNull(timeZone0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(11, "3#)zS8q`Oe[^&H");
      Locale locale0 = Locale.KOREA;
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0);
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2400), "a+");
      Locale locale0 = Locale.CHINA;
      Boolean boolean0 = new Boolean("a+");
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
      StdDateFormat stdDateFormat1 = stdDateFormat0.clone();
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat1.isLenient());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      stdDateFormat0._parseAsISO8601("2000-00-00", (ParsePosition) null);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.KOREAN;
      Boolean boolean0 = Boolean.valueOf("Timestamp value %s out of 64-bit value range");
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0, false);
      stdDateFormat0._getCalendar(zoneInfo0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer((-622));
      boolean boolean0 = StdDateFormat._equals(integer0, integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      // Undeclared exception!
      try { 
        stdDateFormat0.withLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, (Boolean) null);
      // Undeclared exception!
      try { 
        stdDateFormat0.setTimeZone((TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("hX8v*f]!T~gY.}3rIO");
      Locale locale0 = Locale.PRC;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      // Undeclared exception!
      try { 
        stdDateFormat0.parseAsRFC1123("yyyy-MM-dd'T'HH:mm:ss.SSSZ", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.UK;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, (Boolean) null);
      ParsePosition parsePosition0 = new ParsePosition(55);
      // Undeclared exception!
      try { 
        stdDateFormat0.parseAsISO8601("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      Boolean boolean0 = Boolean.TRUE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      ParsePosition parsePosition0 = new ParsePosition((-1964));
      // Undeclared exception!
      try { 
        stdDateFormat0.parseAsISO8601((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition((-2962));
      // Undeclared exception!
      try { 
        stdDateFormat0.parseAsISO8601("0000-00-00T00:00", parsePosition0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition((-963));
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("yyyy-MM-dd'T'HH:mm:ss.SSSZ", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(1580);
      // Undeclared exception!
      try { 
        stdDateFormat0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition(9);
      // Undeclared exception!
      try { 
        stdDateFormat0.instance.parse("0000-00-00T00:00", parsePosition0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, (Boolean) null);
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      // Undeclared exception!
      try { 
        stdDateFormat0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("0000-00-00T00:00");
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      // Undeclared exception!
      try { 
        stdDateFormat0.looksLikeISO8601((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      // Undeclared exception!
      try { 
        StdDateFormat.getRFC1123Format(timeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("com.fasterxml.jackson.core.io.NumberInput");
      // Undeclared exception!
      try { 
        StdDateFormat.getISO8601Format(timeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      FieldPosition fieldPosition0 = new FieldPosition(45);
      // Undeclared exception!
      try { 
        stdDateFormat0.format((Date) null, stringBuffer0, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(3788);
      TimeZone timeZone0 = TimeZone.getTimeZone("hX8v*f]!T~gY.}3rIO");
      Locale locale0 = Locale.PRC;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      try { 
        stdDateFormat0._parseDate("0000-0-00", parsePosition0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"0000-0-00\": while it seems to fit format 'yyyy-MM-dd', parsing fails (leniency? null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(3788);
      parsePosition0.setIndex((-3034));
      TimeZone timeZone0 = TimeZone.getTimeZone("hX8v*f]!T~gY.}3rIO");
      Locale locale0 = Locale.PRC;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      // Undeclared exception!
      try { 
        stdDateFormat0._parseDate("+00:00", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      // Undeclared exception!
      try { 
        stdDateFormat0._parseDate("t6P%8", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("KU|");
      Locale locale0 = Locale.JAPANESE;
      ParsePosition parsePosition0 = new ParsePosition(809);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      // Undeclared exception!
      try { 
        stdDateFormat0._parseDate("0000-00-00T00:00", parsePosition0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      ParsePosition parsePosition0 = new ParsePosition(3788);
      Locale locale0 = Locale.PRC;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      // Undeclared exception!
      try { 
        stdDateFormat0._parseAsISO8601("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(4761);
      // Undeclared exception!
      try { 
        stdDateFormat0._parseAsISO8601((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, (Boolean) null);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "DateFormat com.fasterxml.jackson.databind.util.StdDateFormat: (timezone: sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null], locale: zh_TW, lenient: null)");
      // Undeclared exception!
      try { 
        stdDateFormat0.instance._format((TimeZone) null, locale0, (Date) null, stringBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      stdDateFormat0.clone();
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("0000-00-00");
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      Boolean boolean0 = Boolean.valueOf("t6P%8");
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
      boolean boolean1 = stdDateFormat1.isLenient();
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      Boolean boolean0 = Boolean.TRUE;
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, boolean0, false);
      boolean boolean1 = stdDateFormat0.isLenient();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      Boolean boolean0 = Boolean.TRUE;
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
      StdDateFormat stdDateFormat2 = stdDateFormat1.withLenient((Boolean) null);
      assertNotSame(stdDateFormat2, stdDateFormat1);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertNotSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-15), "d9$N)6T7]},");
      Locale locale0 = Locale.GERMANY;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, false);
      ParsePosition parsePosition0 = new ParsePosition(10);
      stdDateFormat0._parseDate("d9$N)6T7]},", parsePosition0);
      assertEquals(10, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=10,errorIndex=10]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      Locale locale0 = Locale.FRENCH;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-72), "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      stdDateFormat0.instance._timezone = (TimeZone) simpleTimeZone0;
      ParsePosition parsePosition0 = new ParsePosition((-72));
      // Undeclared exception!
      try { 
        stdDateFormat0.parseAsRFC1123("yyyy-MM-dd'T'HH:mm:ss.SSSZ", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition(4);
      // Undeclared exception!
      try { 
        stdDateFormat0._parseAsISO8601("0000-00-00T00:00", parsePosition0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(57);
      try { 
        stdDateFormat0.parseAsISO8601("Value \"", parsePosition0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"Value \"\": while it seems to fit format 'yyyy-MM-dd', parsing fails (leniency? null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("t6P%8");
      Locale locale0 = Locale.TAIWAN;
      Boolean boolean0 = Boolean.TRUE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      ParsePosition parsePosition0 = new ParsePosition(0);
      Date date0 = stdDateFormat0._parseDate("0000-00-00", parsePosition0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      try { 
        stdDateFormat0.parse("0000(00-=00T^0:00");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"0000(00-=00T^0:00\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      try { 
        stdDateFormat0.parse("5XrRiX9");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"5XrRiX9\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      boolean boolean0 = stdDateFormat0.equals(stdDateFormat0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.KOREAN;
      Boolean boolean0 = Boolean.valueOf("Timestamp value %s out of 64-bit value range");
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0, false);
      MockDateFormat mockDateFormat0 = new MockDateFormat();
      boolean boolean1 = stdDateFormat0.equals(mockDateFormat0);
      assertFalse(stdDateFormat0.isLenient());
      assertFalse(boolean1);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("Timestamp value %s out of 64-bit value range");
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0);
      String string0 = stdDateFormat0.toPattern();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertEquals("[one of: 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', 'EEE, dd MMM yyyy HH:mm:ss zzz' (strict)]", string0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      MockDate mockDate0 = new MockDate((-1825), 16, 16, 16, 3);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 839);
      stdDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      assertEquals(54, stringBuffer0.length());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSZ0076-05-16T16:03:00.000+0000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("t6P%8");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Boolean boolean0 = Boolean.valueOf("\" can not be represented as BigDecimal");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      MockDate mockDate0 = new MockDate((-1445), 4799, (-1445));
      StringWriter stringWriter0 = new StringWriter(9);
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      stdDateFormat0._format(timeZone0, locale0, mockDate0, stringBuffer0);
      assertEquals(29, stringBuffer0.length());
      assertEquals("0850-12-16T00:00:00.000+00:00", stringWriter0.toString());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2400), "a+");
      Locale locale0 = Locale.CHINA;
      Boolean boolean0 = new Boolean("a+");
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
      MockDate mockDate0 = new MockDate((-2400), (-2400), (-2400), (-2400), (-2400));
      StringBuffer stringBuffer0 = new StringBuffer();
      stdDateFormat0.format((Date) mockDate0, stringBuffer0, (FieldPosition) null);
      assertEquals("0708-02-23T07:59:57.600-00:00", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(57, "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      Locale locale0 = Locale.ENGLISH;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
      Boolean boolean0 = new Boolean(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      stdDateFormat0.format(date0, stringBuffer0, fieldPosition0);
      assertEquals(54, stringBuffer0.length());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSZ1582-10-15T00:00:00.057+0000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      Date date0 = stdDateFormat0.parse("7");
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(3788);
      TimeZone timeZone0 = TimeZone.getTimeZone("hX8v*f]!T~gY.}3rIO");
      Locale locale0 = Locale.PRC;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      stdDateFormat0._parseDate("+0000", parsePosition0);
      assertEquals(3788, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=3788,errorIndex=3788]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      Date date0 = stdDateFormat0.parse("0400-00-60");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      try { 
        stdDateFormat0.parse("0000-v00-0");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"0000-v00-0\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-15), "d9$N)6T7]},");
      Locale locale0 = Locale.GERMANY;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, false);
      ParsePosition parsePosition0 = new ParsePosition(10);
      try { 
        stdDateFormat0._parseAsISO8601("yyyy-MM-dd'T'HH:mm:ss.SSSZ", parsePosition0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? false)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("com.fasterxml.jackson.core.io.NumberInput");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      StdDateFormat._equals(mockGregorianCalendar0, mockGregorianCalendar0);
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      String string0 = stdDateFormat0.instance.toPattern();
      assertEquals("[one of: 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', 'EEE, dd MMM yyyy HH:mm:ss zzz' (lenient)]", string0);
      
      ParsePosition parsePosition0 = new ParsePosition(92);
      stdDateFormat0.instance._parseDate("yyyy-MM-dd'T'HH:mm:ss.SSSZ", parsePosition0);
      stdDateFormat0.isLenient();
      stdDateFormat0.setTimeZone(timeZone0);
      StdDateFormat stdDateFormat1 = new StdDateFormat(timeZone0, (Locale) null);
      stdDateFormat1.instance.setLenient(true);
      stdDateFormat0.looksLikeISO8601("[one of: 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', 'EEE, dd MMM yyyy HH:mm:ss zzz' (lenient)]");
      String string1 = stdDateFormat0.toString();
      assertEquals("DateFormat com.fasterxml.jackson.databind.util.StdDateFormat: (timezone: sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null], locale: en_US, lenient: null)", string1);
      
      Calendar calendar0 = stdDateFormat1._getCalendar(timeZone0);
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.ENGLISH;
      Boolean boolean0 = new Boolean(true);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      stdDateFormat0.setLenient(true);
      assertTrue(stdDateFormat0.isLenient());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("hX8v*f]!T~gY.}3rIO");
      Locale locale0 = Locale.PRC;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(false);
      assertSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
      boolean boolean0 = stdDateFormat1.isColonIncludedInTimeZone();
      assertTrue(boolean0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CANADA;
      Boolean boolean0 = Boolean.TRUE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
      assertSame(stdDateFormat1, stdDateFormat0);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("hX8v*f]!T~gY.}3rIO");
      Locale locale0 = Locale.PRC;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      Locale locale0 = Locale.ENGLISH;
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertNotSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("hX8v*f]!T~gY.}3rIO");
      Locale locale0 = Locale.PRC;
      TimeZone timeZone1 = TimeZone.getDefault();
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone1, locale0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone0);
      assertSame(stdDateFormat1, stdDateFormat0);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, (Boolean) null);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone((TimeZone) null);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertNotSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      Locale locale0 = Locale.KOREA;
      Boolean boolean0 = new Boolean("L%&.{yCO[X");
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, boolean0);
      stdDateFormat0.hashCode();
      assertFalse(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-15), "d9$N)6T7]},");
      Locale locale0 = Locale.GERMANY;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, false);
      stdDateFormat0.instance._clearFormats();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, (Boolean) null);
      boolean boolean0 = stdDateFormat0.isColonIncludedInTimeZone();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)StdDateFormat.getISO8601Format((TimeZone) null, locale0);
      assertEquals("aaaa-MM-jj'T'HH:mm:ss.SSSZ", mockSimpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)StdDateFormat.getRFC1123Format((TimeZone) null, locale0);
      assertEquals("EEE, jj MMM aaaa HH:mm:ss zzz", mockSimpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      try { 
        stdDateFormat0.parse("-");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Timestamp value - out of 64-bit value range
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-15), "d9$N)6T7]},");
      Locale locale0 = Locale.GERMANY;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, false);
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertFalse(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Locale locale0 = Locale.US;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, (Boolean) null);
      stdDateFormat0.setTimeZone(timeZone0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition(1027);
      Date date0 = stdDateFormat0.parse("0000-00-00", parsePosition0);
      assertNotNull(date0);
      
      String string0 = stdDateFormat0.format(date0);
      assertEquals("2014-02-14T20:21:21.320+0000", string0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ";];%/)5{)LZ");
      Locale locale0 = Locale.FRENCH;
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0);
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertNotNull(timeZone0);
  }
}
