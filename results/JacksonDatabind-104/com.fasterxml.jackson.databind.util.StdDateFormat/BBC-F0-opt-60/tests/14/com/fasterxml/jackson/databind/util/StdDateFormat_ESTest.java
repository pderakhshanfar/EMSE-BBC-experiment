/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 17:07:20 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.text.DateFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdDateFormat_ESTest extends StdDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      stdDateFormat0.parse("0000-00-20");
      assertTrue(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      Date date0 = stdDateFormat0.parse("0003-00-00");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      Date date0 = stdDateFormat0.parse("0600-00-00");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      Date date0 = stdDateFormat0.parse("8000-00-00");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(0);
      stdDateFormat0.parse("262250738585072012e-308", parsePosition0);
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getErrorIndex());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMANY;
      Boolean boolean0 = new Boolean(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      ParsePosition parsePosition0 = new ParsePosition(58);
      stdDateFormat0.parse("GPVgP\"^", parsePosition0);
      assertFalse(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      Boolean boolean0 = new Boolean("r");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      try { 
        stdDateFormat0.parse("r");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"r\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMANY;
      Boolean boolean0 = new Boolean(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      ParsePosition parsePosition0 = new ParsePosition(17);
      Object object0 = stdDateFormat0.parseObject("9", parsePosition0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertNotNull(object0);
      assertFalse(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.ITALY;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0);
      MockDate mockDate0 = new MockDate(1914L);
      StringBuffer stringBuffer0 = new StringBuffer(0);
      stdDateFormat0._format(zoneInfo0, locale0, mockDate0, stringBuffer0);
      assertEquals("1970-01-01T00:00:01.914+0000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.TAIWAN;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      stdDateFormat0._clearFormats();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      Boolean boolean0 = new Boolean("r");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone0);
      assertSame(stdDateFormat1, stdDateFormat0);
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat1.isLenient());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(9);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALIAN;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
      StdDateFormat stdDateFormat2 = stdDateFormat1.withLocale(locale0);
      assertSame(stdDateFormat2, stdDateFormat1);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat2.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      Boolean boolean0 = new Boolean("B+2");
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, boolean0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(90);
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      Date date0 = stdDateFormat0.parseAsISO8601("0000-00-00", parsePosition0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      boolean boolean0 = stdDateFormat0.looksLikeISO8601("0187-10-28T19:52:02.000+0000");
      assertTrue(boolean0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMANY;
      Boolean boolean0 = new Boolean(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      boolean boolean1 = stdDateFormat0.isColonIncludedInTimeZone();
      assertFalse(boolean1);
      assertFalse(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.GERMANY;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2393, "2.2250738585072012e-308");
      Boolean boolean0 = Boolean.valueOf("2.2250738585072012e-308");
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertNotNull(timeZone0);
      assertFalse(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2704), "");
      Locale locale0 = Locale.FRANCE;
      Boolean boolean0 = Boolean.valueOf("");
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertFalse(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Dyg41U=5at{;fD");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)StdDateFormat.getRFC1123Format(timeZone0, locale0);
      assertEquals("EEE, jj nnn aaaa HH:mm:ss zzz", mockSimpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      StdDateFormat stdDateFormat1 = stdDateFormat0.clone();
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMANY;
      Boolean boolean0 = new Boolean(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
      StdDateFormat stdDateFormat2 = stdDateFormat1.clone();
      assertFalse(stdDateFormat2.isLenient());
      assertTrue(stdDateFormat2.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(3585);
      Date date0 = stdDateFormat0._parseDate("0000-00-00", parsePosition0);
      assertNotNull(date0);
      assertEquals((-1), parsePosition0.getErrorIndex());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      stdDateFormat0._getCalendar(timeZone0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("g:;7`(EYcK`s5dw*XA%");
      Locale locale0 = Locale.ITALY;
      Boolean boolean0 = new Boolean(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      Calendar calendar0 = stdDateFormat0._getCalendar(timeZone0);
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Locale locale0 = Locale.forLanguageTag("Ijnccc(UFd");
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)StdDateFormat.getISO8601Format(timeZone0, locale0);
      boolean boolean0 = StdDateFormat._equals((Object) timeZone0, (Object) mockSimpleDateFormat0);
      assertTrue(mockSimpleDateFormat0.isLenient());
      assertFalse(boolean0);
      assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSZ", mockSimpleDateFormat0.toPattern());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, (Locale) null);
      // Undeclared exception!
      try { 
        stdDateFormat0.withLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      // Undeclared exception!
      try { 
        stdDateFormat0.instance.setTimeZone((TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("8bknwY\"Byz+");
      Locale locale0 = Locale.US;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1337));
      // Undeclared exception!
      try { 
        stdDateFormat0.parseAsRFC1123("lenient", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, (Locale) null, (Boolean) null, false);
      // Undeclared exception!
      try { 
        stdDateFormat0.parseAsRFC1123("m}LunF;JEw|L^#fs4", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      ParsePosition parsePosition0 = new ParsePosition((-1729));
      Locale locale0 = Locale.JAPANESE;
      Boolean boolean0 = Boolean.valueOf("");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      // Undeclared exception!
      try { 
        stdDateFormat0.parseAsISO8601("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(0);
      // Undeclared exception!
      try { 
        stdDateFormat0.parseAsISO8601((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMANY;
      Boolean boolean0 = new Boolean(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      ParsePosition parsePosition0 = new ParsePosition(58);
      // Undeclared exception!
      try { 
        stdDateFormat0.parseAsISO8601("0000-00-00T00:00", parsePosition0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition((-1184));
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("[5uky", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition(3);
      // Undeclared exception!
      try { 
        stdDateFormat0.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("m7NIckzYUH");
      Locale locale0 = Locale.CANADA;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(58);
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("0000-00-00T00:00", parsePosition0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1579, "");
      Locale locale0 = Locale.FRENCH;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, (Locale) null, (Boolean) null, false);
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("', '");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      // Undeclared exception!
      try { 
        stdDateFormat0.looksLikeISO8601((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      // Undeclared exception!
      try { 
        StdDateFormat.getISO8601Format(zoneInfo0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.ofTotalSeconds(9);
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.ITALIAN;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      Instant instant0 = MockInstant.ofEpochSecond(2428L, 4830L);
      Date date0 = Date.from(instant0);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 9);
      // Undeclared exception!
      try { 
        stdDateFormat0.format(date0, (StringBuffer) null, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition((-214));
      try { 
        stdDateFormat0._parseDate("0000-00<00", parsePosition0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"0000-00<00\": while it seems to fit format 'yyyy-MM-dd', parsing fails (leniency? null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.CANADA_FRENCH;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-309));
      // Undeclared exception!
      try { 
        stdDateFormat0._parseDate("', '", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      // Undeclared exception!
      try { 
        stdDateFormat0._parseDate((String) null, (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(673);
      // Undeclared exception!
      try { 
        stdDateFormat0._parseDate("0000-00-00T00:00", parsePosition0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      Boolean boolean0 = new Boolean(true);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      ParsePosition parsePosition0 = new ParsePosition((-3243));
      try { 
        stdDateFormat0._parseAsISO8601("f", parsePosition0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"f\": while it seems to fit format 'yyyy-MM-dd', parsing fails (leniency? true)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.PRC;
      Boolean boolean0 = new Boolean("r");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      ParsePosition parsePosition0 = new ParsePosition(2801);
      // Undeclared exception!
      try { 
        stdDateFormat0._parseAsISO8601("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition(1103);
      // Undeclared exception!
      try { 
        stdDateFormat0._parseAsISO8601((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition((-2836));
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      // Undeclared exception!
      try { 
        stdDateFormat0._parseAsISO8601("0000-00-00T00:00", parsePosition0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("m7NIckzYUH");
      Locale locale0 = Locale.CANADA;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        stdDateFormat0._format(timeZone0, locale0, (Date) null, stringBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      boolean boolean0 = stdDateFormat0.isLenient();
      assertTrue(boolean0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMANY;
      Boolean boolean0 = new Boolean(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient((Boolean) null);
      assertFalse(stdDateFormat0.isLenient());
      assertTrue(stdDateFormat1.isLenient());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale locale0 = new Locale(">3g?#_)jGG<B", ">3g?#_)jGG<B");
      Boolean boolean0 = new Boolean(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, boolean0);
      DateFormat.getTimeInstance();
      stdDateFormat0.clone();
      ParsePosition parsePosition0 = new ParsePosition(57);
      stdDateFormat0.instance.parseAsRFC1123("yyyy-MM-dd'T'HH:mm:ss.SSSZ", parsePosition0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
      String string0 = stdDateFormat0.toString();
      assertEquals("DateFormat com.fasterxml.jackson.databind.util.StdDateFormat: (timezone: null, locale: >3g?#_)jgg<b_>3G?#_)JGG<B, lenient: false)", string0);
      
      StdDateFormat stdDateFormat2 = stdDateFormat0.withLocale(locale0);
      boolean boolean1 = StdDateFormat._equals((MockCalendar) null, (MockCalendar) null);
      assertTrue(boolean1);
      
      stdDateFormat1.setLenient(false);
      Boolean boolean2 = Boolean.TRUE;
      StdDateFormat stdDateFormat3 = stdDateFormat0.withLenient(boolean2);
      assertTrue(stdDateFormat3.isLenient());
      
      Date date0 = stdDateFormat2.parseAsRFC1123("*}>Ro~", parsePosition0);
      assertFalse(stdDateFormat2.isColonIncludedInTimeZone());
      assertNull(date0);
      assertNotSame(stdDateFormat2, stdDateFormat3);
      assertSame(stdDateFormat2, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMANY;
      Boolean boolean0 = new Boolean(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      ParsePosition parsePosition0 = new ParsePosition(17);
      stdDateFormat0.parse("yyyy-MM-dd'T'HH:mm:ss.SSSZ", parsePosition0);
      try { 
        stdDateFormat0.parse("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("0000-00-00T00:00");
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition((-1206));
      Date date0 = stdDateFormat0.parse("0000-00<00", parsePosition0);
      assertNull(date0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = StdDateFormat.DEFAULT_LOCALE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(2316);
      try { 
        stdDateFormat0.instance.parseAsISO8601("yyyy-MM-dd'T'HH:mm:ss.SSSZ", parsePosition0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = StdDateFormat.DEFAULT_LOCALE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(2316);
      Date date0 = stdDateFormat0._parseAsISO8601("0000-00-00", parsePosition0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      boolean boolean0 = stdDateFormat0.looksLikeISO8601("5`X8#*(&ctep(,]");
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.TAIWAN;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-2814));
      // Undeclared exception!
      try { 
        stdDateFormat0.parseObject("61F&lGHQP#z", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition(3);
      Date date0 = stdDateFormat0._parseDate("Greenwich Mean Time", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      boolean boolean0 = stdDateFormat0.equals(stdDateFormat0);
      assertTrue(boolean0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      boolean boolean0 = stdDateFormat0.equals("Greenwich Mean Time");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMANY;
      Boolean boolean0 = Boolean.valueOf("K.|#tUZ%");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      String string0 = stdDateFormat0.toPattern();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertEquals("[one of: 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', 'EEE, dd MMM yyyy HH:mm:ss zzz' (strict)]", string0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      String string0 = stdDateFormat0.toPattern();
      assertEquals("[one of: 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', 'EEE, dd MMM yyyy HH:mm:ss zzz' (lenient)]", string0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      MockDate mockDate0 = new MockDate((-1886), 17, (-1886), 17, 1498);
      String string0 = stdDateFormat0.format((Date) mockDate0);
      assertEquals("0010-04-02T17:58:00.000+0000", string0);
      assertTrue(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      MockDate mockDate0 = new MockDate();
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
      String string0 = stdDateFormat1.format((Date) mockDate0);
      assertEquals("2014-02-14T20:21:21.320+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMANY;
      Boolean boolean0 = new Boolean(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
      StringBuffer stringBuffer0 = new StringBuffer();
      FieldPosition fieldPosition0 = new FieldPosition(9);
      MockDate mockDate0 = new MockDate(9, 9, 48, (-12), 48);
      stdDateFormat1.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      assertEquals(29, stringBuffer0.length());
      assertFalse(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      timeZone0.setRawOffset(9);
      Locale locale0 = Locale.GERMANY;
      Boolean boolean0 = new Boolean(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      StringBuffer stringBuffer0 = new StringBuffer();
      FieldPosition fieldPosition0 = new FieldPosition(9);
      MockDate mockDate0 = new MockDate(9, 9, 48, (-12), 48);
      stdDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      assertEquals("1909-11-16T12:48:00.009+0000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      try { 
        stdDateFormat0.parse("+0000");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"+0000\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      try { 
        stdDateFormat0.parse("-");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Timestamp value - out of 64-bit value range
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      try { 
        stdDateFormat0.parse("0000-`0U00");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"0000-`0U00\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Locale locale0 = Locale.GERMANY;
      Boolean boolean0 = Boolean.TRUE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      boolean boolean1 = stdDateFormat0.isLenient();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(2097, 3, 2097, 3, 3);
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      stdDateFormat0.setLenient(false);
      StringBuffer stringBuffer0 = new StringBuffer();
      FieldPosition fieldPosition0 = new FieldPosition(2097);
      stdDateFormat0.format(date0, stringBuffer0, fieldPosition0);
      assertFalse(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      stdDateFormat0.instance.setTimeZone(zoneInfo0);
      int int0 = 48;
      stdDateFormat0.instance.withColonInTimeZone(true);
      ParsePosition parsePosition0 = new ParsePosition(48);
      int int1 = 8;
      parsePosition0.setIndex(8);
      // Undeclared exception!
      try { 
        MockCalendar.getInstance((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertNotSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("m7NIckzYUH");
      Locale locale0 = Locale.CANADA;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone0);
      assertFalse(stdDateFormat1.isLenient());
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone((TimeZone) null);
      assertNotSame(stdDateFormat1, stdDateFormat0);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      stdDateFormat0.hashCode();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      stdDateFormat0.setLenient(false);
      boolean boolean0 = stdDateFormat0.isLenient();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.UK;
      Boolean boolean0 = Boolean.TRUE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      boolean boolean1 = stdDateFormat0.isColonIncludedInTimeZone();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.UTC;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      // Undeclared exception!
      try { 
        StdDateFormat.getRFC1123Format(timeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "w'7");
      Locale locale0 = Locale.ITALIAN;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertFalse(stdDateFormat0.isLenient());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      Date date0 = stdDateFormat0.parse("0090-00-04");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Locale locale0 = Locale.FRANCE;
      Boolean boolean0 = new Boolean("*gb,oL O8hh>");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      stdDateFormat0.setTimeZone(timeZone0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition((-444));
      Date date0 = stdDateFormat0.parse("7", parsePosition0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertNotNull(date0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = StdDateFormat.DEFAULT_LOCALE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      stdDateFormat0.instance.withColonInTimeZone(false);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }
}
