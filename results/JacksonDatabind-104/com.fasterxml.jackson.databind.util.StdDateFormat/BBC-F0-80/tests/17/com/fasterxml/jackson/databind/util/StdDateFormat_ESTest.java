/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 08 02:09:24 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdDateFormat_ESTest extends StdDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      Date date0 = stdDateFormat0.parse("0000-00-01");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      Date date0 = stdDateFormat0.parse("0700-10-00");
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(58, "\" can not be represented as BigDecimal");
      Locale locale0 = Locale.ITALY;
      Boolean boolean0 = Boolean.valueOf(true);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      ParsePosition parsePosition0 = new ParsePosition(58);
      try { 
        stdDateFormat0.parseAsISO8601("\" can not be represented as BigDecimal", parsePosition0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"\" can not be represented as BigDecimal\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? true)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("O)g_(3^=vDF7s\"h");
      Locale locale0 = Locale.US;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(822);
      stdDateFormat0._parseDate("2.2250738585072012e-308", parsePosition0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("O)g_(3^=vDF7s\"h");
      Locale locale0 = Locale.US;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      try { 
        stdDateFormat0.parse("\"nFTLFa");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"\"nFTLFa\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("O)g_(3^=vDF7s\"h");
      Locale locale0 = Locale.US;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      try { 
        stdDateFormat0.parse("`");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"`\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("O)g_(3^=vDF7s\"h");
      Locale locale0 = Locale.US;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      try { 
        stdDateFormat0.parse("W7_9");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"W7_9\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("+0000");
      Locale locale0 = Locale.KOREAN;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      stdDateFormat0._clearFormats();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      assertTrue(stdDateFormat0.isLenient());
      
      ParsePosition parsePosition0 = new ParsePosition(52);
      stdDateFormat0.instance.parse("1970-01-01T00:00:00.026+0000", parsePosition0);
      assertEquals("java.text.ParsePosition[index=52,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.KOREAN;
      Boolean boolean0 = Boolean.valueOf(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertSame(stdDateFormat1, stdDateFormat0);
      assertFalse(stdDateFormat1.isLenient());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
      Locale locale0 = Locale.GERMANY;
      StdDateFormat stdDateFormat2 = stdDateFormat1.withLocale(locale0);
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
      assertNotSame(stdDateFormat2, stdDateFormat1);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("7");
      Locale locale0 = new Locale("7", "", "");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
      Boolean boolean0 = Boolean.valueOf(true);
      StdDateFormat stdDateFormat2 = stdDateFormat1.withLenient(boolean0);
      assertNotSame(stdDateFormat2, stdDateFormat1);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition(2);
      Date date0 = stdDateFormat0.parseAsRFC1123("yyyy-MM-dd'T'HH:mm:ss.SSS", parsePosition0);
      assertNull(date0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition((-3683));
      Date date0 = stdDateFormat0.parseAsISO8601("0000-00-00", parsePosition0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("0000-00-00");
      Locale locale0 = Locale.KOREAN;
      Boolean boolean0 = Boolean.valueOf(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      boolean boolean1 = stdDateFormat0.looksLikeISO8601("0000-00-00T00:00");
      assertFalse(stdDateFormat0.isLenient());
      assertTrue(boolean1);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      boolean boolean0 = stdDateFormat0.looksLikeISO8601("YV%");
      assertFalse(boolean0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(54, "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      Locale locale0 = Locale.US;
      Boolean boolean0 = new Boolean((String) null);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
      boolean boolean1 = stdDateFormat0.isColonIncludedInTimeZone();
      assertTrue(boolean1);
      assertFalse(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "ZG");
      TimeZone timeZone0 = TimeZone.getTimeZone("H=,rv?avF{i");
      Locale locale0 = Locale.US;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      stdDateFormat0.setTimeZone(simpleTimeZone0);
      stdDateFormat0.getTimeZone();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(simpleTimeZone0);
      TimeZone timeZone0 = stdDateFormat1.getTimeZone();
      assertNotNull(timeZone0);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Value \"");
      Locale locale0 = Locale.FRENCH;
      Boolean boolean0 = new Boolean("ZG");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      StdDateFormat stdDateFormat1 = stdDateFormat0.clone();
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat1.isLenient());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("-m=StRM*(^9");
      Locale locale0 = Locale.FRENCH;
      Boolean boolean0 = new Boolean(true);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      stdDateFormat0.clone();
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition(9);
      stdDateFormat0._parseDate("0000-00-00", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3622), ";Mi}Z=%ygA");
      Locale locale0 = Locale.JAPANESE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1201);
      stdDateFormat0._parseAsISO8601("0000-00-00", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("+0000");
      Locale locale0 = Locale.KOREAN;
      Boolean boolean0 = Boolean.valueOf("+0000");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      stdDateFormat0._getCalendar(timeZone0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Integer integer0 = new Integer((-1306));
      boolean boolean0 = StdDateFormat._equals(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, (Locale) null, boolean0);
      // Undeclared exception!
      try { 
        stdDateFormat0.withLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition((-3265));
      // Undeclared exception!
      try { 
        stdDateFormat0.parseAsRFC1123("+0000", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3622), ";Mi}Z=%ygA");
      Locale locale0 = Locale.JAPANESE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0);
      // Undeclared exception!
      try { 
        stdDateFormat0.parseAsRFC1123("strict", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(100, "");
      Locale locale0 = Locale.ITALY;
      Boolean boolean0 = Boolean.valueOf(true);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      ParsePosition parsePosition0 = new ParsePosition((-34));
      // Undeclared exception!
      try { 
        stdDateFormat0.parseAsISO8601("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3622), ";Mi}Z=%ygA");
      Locale locale0 = Locale.JAPANESE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-3622));
      // Undeclared exception!
      try { 
        stdDateFormat0.parseAsISO8601((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3622), "ZG");
      Locale locale0 = Locale.JAPANESE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(2216);
      // Undeclared exception!
      try { 
        stdDateFormat0.parseAsISO8601("0000-00-00T00:00", parsePosition0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition((-854));
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition(0);
      // Undeclared exception!
      try { 
        stdDateFormat0.instance.parse((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(3311);
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("0000-00-00T00:00", parsePosition0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      // Undeclared exception!
      try { 
        stdDateFormat0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("O)g_(3^=vDF7s\"h");
      Locale locale0 = Locale.US;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("0000-00-00T00:00");
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("+0000");
      Locale locale0 = Locale.GERMAN;
      Boolean boolean0 = new Boolean((String) null);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      // Undeclared exception!
      try { 
        stdDateFormat0.looksLikeISO8601((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        StdDateFormat.getRFC1123Format((TimeZone) null, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        StdDateFormat.getISO8601Format((TimeZone) null, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("O)g_(3^=vDF7s\"h");
      Locale locale0 = Locale.US;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      StringBuffer stringBuffer0 = new StringBuffer();
      FieldPosition fieldPosition0 = new FieldPosition((-1312));
      // Undeclared exception!
      try { 
        stdDateFormat0.format((Date) null, stringBuffer0, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition((-783));
      try { 
        stdDateFormat0._parseDate("1970-01-01T00:00:00.186+0000", parsePosition0);
       //  fail("Expecting exception: ParseException");
       // Unstable assertion
      } catch(ParseException e) {
         //
         // Cannot parse date \"1970-01-01T00:00:00.186+0000\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition((-924));
      // Undeclared exception!
      try { 
        stdDateFormat0._parseDate("rSC!", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition(1);
      // Undeclared exception!
      try { 
        stdDateFormat0._parseDate((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition(52);
      try { 
        stdDateFormat0._parseAsISO8601("1970-01-01T00:00:00.026+0000", parsePosition0);
       //  fail("Expecting exception: ParseException");
       // Unstable assertion
      } catch(ParseException e) {
         //
         // Cannot parse date \"1970-01-01T00:00:00.026+0000\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = new Locale("", ".GHR", "");
      Boolean boolean0 = Boolean.TRUE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      ParsePosition parsePosition0 = new ParsePosition(2520);
      // Undeclared exception!
      try { 
        stdDateFormat0._parseAsISO8601("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3622), "ZG");
      Locale locale0 = Locale.JAPANESE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-1747));
      // Undeclared exception!
      try { 
        stdDateFormat0._parseAsISO8601((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("+0000");
      Locale locale0 = Locale.KOREAN;
      ParsePosition parsePosition0 = new ParsePosition(45);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      // Undeclared exception!
      try { 
        stdDateFormat0._parseAsISO8601("0000-00-00T00:00", parsePosition0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Locale locale0 = new Locale("%+HO#x/", "%+HO#x/", "T\"[02,}Ge~<,n-8#");
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, (Boolean) null, true);
      stdDateFormat0._getCalendar((TimeZone) null);
      // Undeclared exception!
      try { 
        stdDateFormat0._getCalendar((TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("+0000");
      Locale locale0 = Locale.KOREAN;
      Boolean boolean0 = Boolean.TRUE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      StringBuffer stringBuffer0 = new StringBuffer(11);
      // Undeclared exception!
      try { 
        stdDateFormat0._format(timeZone0, locale0, (Date) null, stringBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      String string0 = stdDateFormat0.toPattern();
      assertEquals("[one of: 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', 'EEE, dd MMM yyyy HH:mm:ss zzz' (lenient)]", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("_0)");
      Locale locale0 = new Locale("com.fasterxml.jackson.core.io.NumberInput", "_0)");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      boolean boolean0 = stdDateFormat0.isLenient();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("0000-00-00");
      Locale locale0 = Locale.KOREAN;
      Boolean boolean0 = Boolean.valueOf(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      boolean boolean1 = stdDateFormat0.isLenient();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = new Locale("", ".GHR", "");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, (Boolean) null, false);
      stdDateFormat0.setLenient(true);
      boolean boolean0 = stdDateFormat0.isLenient();
      assertTrue(boolean0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      Boolean boolean0 = new Boolean(false);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
      stdDateFormat1.setLenient(false);
      assertFalse(stdDateFormat1.isLenient());
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = StdDateFormat._equals((String) null, "lenient");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Locale locale0 = new Locale("com.fasterxml.jackson.core.io.NumberInput", "_0)");
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)StdDateFormat.getISO8601Format((TimeZone) null, locale0);
      assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSZ", mockSimpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition(46);
      // Undeclared exception!
      try { 
        stdDateFormat0._parseDate("0000-00-00T00:00", parsePosition0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition((-351));
      try { 
        stdDateFormat0.parseAsISO8601("YV%", parsePosition0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"YV%\": while it seems to fit format 'yyyy-MM-dd', parsing fails (leniency? null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("0000-00-00");
      Locale locale0 = Locale.KOREAN;
      Boolean boolean0 = Boolean.valueOf(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      ParsePosition parsePosition0 = new ParsePosition(15);
      try { 
        stdDateFormat0.parseAsISO8601("yyyy-MM-dd'T'HH:mm:ss.SSSZ", parsePosition0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? false)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      try { 
        stdDateFormat0.parse("00B0*0-CQ");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"00B0*0-CQ\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = new Locale("", ".GHR", "");
      Boolean boolean0 = Boolean.valueOf(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      ParsePosition parsePosition0 = new ParsePosition(15);
      stdDateFormat0.parse("6*plxovu5mjT:$i\"Vb2", parsePosition0);
      assertEquals("java.text.ParsePosition[index=15,errorIndex=15]", parsePosition0.toString());
      assertEquals(15, parsePosition0.getErrorIndex());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("O)g_(3^=vDF7s\"h");
      Locale locale0 = Locale.US;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      boolean boolean0 = stdDateFormat0.equals(stdDateFormat0);
      assertTrue(boolean0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("O)g_(3^=vDF7s\"h");
      Locale locale0 = Locale.US;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
      boolean boolean1 = stdDateFormat1.equals(stdDateFormat0);
      assertFalse(stdDateFormat1.isLenient());
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("0000-00-00");
      Locale locale0 = Locale.CANADA;
      Boolean boolean0 = Boolean.valueOf(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      String string0 = stdDateFormat0.toPattern();
      assertEquals("[one of: 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', 'EEE, dd MMM yyyy HH:mm:ss zzz' (strict)]", string0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      MockDate mockDate0 = new MockDate((-1612), (-2351), 45, 45, (-1612));
      String string0 = stdDateFormat0.format((Object) mockDate0);
      assertEquals("0092-03-16T18:08:00.000+0000", string0);
      assertTrue(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Integer integer0 = new Integer((-1025));
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
      String string0 = stdDateFormat1.format((Object) integer0);
      assertEquals("1969-12-31T23:59:58.975+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(26, "!!yAvD!)^+");
      Locale locale0 = Locale.ITALY;
      Boolean boolean0 = Boolean.valueOf(true);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-3354), 4860, 4860, (-13), (-1537), (-3354));
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
      stdDateFormat0._format(simpleTimeZone0, locale0, date0, stringBuffer0);
      assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSZ1582-10-15T00:00:00.026+00:00", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3622), ";Mi}Z=%ygA");
      Locale locale0 = Locale.JAPANESE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1730), (-13), 14, 71, (-982), (-2195));
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "ZG");
      stdDateFormat0._format(simpleTimeZone0, locale0, date0, stringBuffer0);
      assertEquals("ZG1582-10-04T23:59:56.378-0000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = new Locale("", ".GHR", "");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, (Boolean) null, false);
      MockDate mockDate0 = new MockDate(1213, 1213, 160);
      FieldPosition fieldPosition0 = new FieldPosition((Format.Field) null, 160);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      stdDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      assertEquals(54, stringBuffer0.length());
      assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSZ3214-07-10T00:00:00.000+0000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition((-854));
      Date date0 = stdDateFormat0.parse("4", parsePosition0);
      assertNotNull(date0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      stdDateFormat0.parse("0009-00-00");
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      try { 
        stdDateFormat0.parse("0000-$ 0-00T00:00");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"0000-$ 0-00T00:00\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2718), "MviS&wcK");
      stdDateFormat0.setTimeZone(simpleTimeZone0);
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("O)g_(3^=vDF7s\"h");
      Locale locale0 = Locale.US;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      stdDateFormat0.setTimeZone(timeZone0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("0000-00-00");
      Locale locale0 = Locale.KOREAN;
      Boolean boolean0 = Boolean.valueOf(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(false);
      assertFalse(stdDateFormat1.isLenient());
      assertSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3622), "ZG");
      Locale locale0 = Locale.JAPANESE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient((Boolean) null);
      assertSame(stdDateFormat1, stdDateFormat0);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(54, "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      Locale locale0 = Locale.US;
      Boolean boolean0 = new Boolean("Value \"");
      SimpleTimeZone simpleTimeZone1 = new SimpleTimeZone(54, "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone1, locale0, boolean0, true);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(simpleTimeZone0);
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat1.isLenient());
      assertSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone0);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone((TimeZone) null);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertNotSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(4, "yyyy-MM-dd'T'HH:mm:ss.SSSZ", 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(simpleTimeZone0);
      TimeZone timeZone0 = stdDateFormat1.getTimeZone();
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("_0)");
      Locale locale0 = new Locale("com.fasterxml.jackson.core.io.NumberInput", "_0)");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      stdDateFormat0.hashCode();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("O)g_(3^=vDF7s\"h");
      Locale locale0 = Locale.US;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      boolean boolean0 = stdDateFormat0.isColonIncludedInTimeZone();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("+0000");
      Locale locale0 = Locale.KOREAN;
      Boolean boolean0 = Boolean.valueOf("+0000");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      ParsePosition parsePosition0 = new ParsePosition(29);
      stdDateFormat0.parse("+0000", parsePosition0);
      assertEquals("java.text.ParsePosition[index=29,errorIndex=29]", parsePosition0.toString());
      assertFalse(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("0000-00-00");
      Locale locale0 = Locale.KOREAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)StdDateFormat.getRFC1123Format(timeZone0, locale0);
      assertEquals("EEE, dd MMM yyyy HH:mm:ss zzz", mockSimpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      try { 
        stdDateFormat0.parse("-");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Timestamp value - out of 64-bit value range
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      String string0 = stdDateFormat0.toString();
      assertEquals("DateFormat com.fasterxml.jackson.databind.util.StdDateFormat: (timezone: null, locale: en_US, lenient: null)", string0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      assertEquals("UTC", timeZone0.getID());
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      StdDateFormat stdDateFormat1 = stdDateFormat0.clone();
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
      // Undeclared exception!
      try { 
        stdDateFormat0.setTimeZone((TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }
}
