/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 16 21:28:05 GMT 2020
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdDateFormat_ESTest extends StdDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(48);
      try { 
        stdDateFormat0._parseAsISO8601("com.fasterxml.jackson.core.io.NumberInput", parsePosition0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"com.fasterxml.jackson.core.io.NumberInput\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("0000-00-00");
      Locale locale0 = Locale.CHINESE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      try { 
        stdDateFormat0.parse("2.2250738585072012e-308");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"2.2250738585072012e-308\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Cannot parse date \"%s\": while it seems to fit format '%s', parsing fails (leniency? %s)");
      Locale locale0 = Locale.FRENCH;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(16);
      stdDateFormat0.parse("Value \"", parsePosition0);
      assertEquals("java.text.ParsePosition[index=16,errorIndex=16]", parsePosition0.toString());
      assertEquals(16, parsePosition0.getErrorIndex());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CHINESE;
      Boolean boolean0 = Boolean.TRUE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      ParsePosition parsePosition0 = new ParsePosition((-1293));
      // Undeclared exception!
      try { 
        stdDateFormat0._parseDate("D", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      try { 
        stdDateFormat0.parse("p%d=y'&40<53Zc9");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"p%d=y'&40<53Zc9\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.PRC;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, (Boolean) null);
      MockDate mockDate0 = new MockDate((-2554), 1805, (-2554));
      StringBuffer stringBuffer0 = new StringBuffer("0000-00-00T00:00");
      stdDateFormat0._format(timeZone0, locale0, mockDate0, stringBuffer0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Locale locale0 = Locale.ROOT;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      stdDateFormat0._clearFormats();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("0000-00-00");
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2160, "0000-00-00T00:00");
      Boolean boolean0 = Boolean.valueOf(true);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
      StdDateFormat stdDateFormat2 = stdDateFormat1.withTimeZone(simpleTimeZone0);
      assertSame(stdDateFormat2, stdDateFormat1);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat2.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, boolean0, true);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat1.isLenient());
      assertSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CHINESE;
      Boolean boolean0 = Boolean.valueOf("r_\"bi]>xCf~#<");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(false);
      assertFalse(stdDateFormat1.isLenient());
      assertSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CHINESE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(642);
      stdDateFormat0.parseAsRFC1123("", parsePosition0);
      assertEquals("java.text.ParsePosition[index=642,errorIndex=642]", parsePosition0.toString());
      assertEquals(642, parsePosition0.getErrorIndex());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("0000-00-00");
      Locale locale0 = Locale.forLanguageTag("0000-00-00");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, (Boolean) null, false);
      ParsePosition parsePosition0 = new ParsePosition(57);
      stdDateFormat0.parseAsISO8601("0000-00-00", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = StdDateFormat.DEFAULT_LOCALE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, (Boolean) null);
      ParsePosition parsePosition0 = new ParsePosition(2223);
      stdDateFormat0.parse("0000-00-qs00T00:00", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2563), "0000-00-00T00:00");
      Locale locale0 = Locale.JAPANESE;
      Boolean boolean0 = new Boolean(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, false);
      boolean boolean1 = stdDateFormat0.looksLikeISO8601("0000-00-00T00:00");
      assertTrue(boolean1);
      assertFalse(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Cannot parse date \"%s\": while it seems to fit format '%s', parsing fails (leniency? %s)");
      Locale locale0 = Locale.FRENCH;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      boolean boolean0 = stdDateFormat0.looksLikeISO8601("W{G#?H6+`4N0");
      assertFalse(boolean0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Locale locale0 = Locale.forLanguageTag(":gMRLX|{");
      Boolean boolean0 = Boolean.TRUE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      boolean boolean1 = stdDateFormat0.isColonIncludedInTimeZone();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0);
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "EkF{3t?EF5-aW", 1, 1, 1, 1, 1, 1, 1, 1);
      Locale locale0 = Locale.ITALIAN;
      Boolean boolean0 = new Boolean("EkF{3t?EF5-aW");
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, false);
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertFalse(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(54, "");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Boolean boolean0 = Boolean.valueOf(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
      StdDateFormat stdDateFormat1 = stdDateFormat0.clone();
      assertFalse(stdDateFormat1.isLenient());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Locale locale0 = Locale.forLanguageTag(":gMRLX|{");
      Boolean boolean0 = Boolean.TRUE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      ParsePosition parsePosition0 = new ParsePosition(0);
      stdDateFormat0._parseDate("[one of: 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', 'EEE, dd MMM yyyy HH:mm:ss zzz' (lenient)]", parsePosition0);
      assertEquals(0, parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("0000-00-00");
      Locale locale0 = Locale.forLanguageTag("0000-00-00");
      Boolean boolean0 = Boolean.TRUE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      stdDateFormat0._parseAsISO8601("0000-00-00", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Boolean boolean0 = Boolean.valueOf(false);
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1673, "', '");
      stdDateFormat0._getCalendar(simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      Locale locale0 = Locale.TAIWAN;
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone((TimeZone) null);
      stdDateFormat1.instance._getCalendar((TimeZone) null);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = StdDateFormat._equals((MockCalendar) null, (MockCalendar) null);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      // Undeclared exception!
      try { 
        stdDateFormat0.withLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      Boolean boolean0 = new Boolean("BEg(h#DZc");
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, boolean0);
      // Undeclared exception!
      try { 
        stdDateFormat0.instance.setTimeZone((TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Locale locale0 = Locale.forLanguageTag(":gMRLX|{");
      Boolean boolean0 = Boolean.TRUE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      // Undeclared exception!
      try { 
        stdDateFormat0.parseAsRFC1123(":gMRLX|{", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(2);
      try { 
        stdDateFormat0.parseAsISO8601("$?-9Lna5UhQeJm/Hpdp", parsePosition0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"$?-9Lna5UhQeJm/Hpdp\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Boolean boolean0 = Boolean.valueOf(false);
      ParsePosition parsePosition0 = new ParsePosition(1673);
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      // Undeclared exception!
      try { 
        stdDateFormat0.parseAsISO8601("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition(110);
      // Undeclared exception!
      try { 
        stdDateFormat0.instance.parseAsISO8601((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Boolean boolean0 = Boolean.valueOf(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0);
      ParsePosition parsePosition0 = new ParsePosition(13);
      // Undeclared exception!
      try { 
        stdDateFormat0.parseAsISO8601("0000-00-00T00:00", parsePosition0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0);
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      // Undeclared exception!
      try { 
        stdDateFormat0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Locale locale0 = Locale.forLanguageTag(":gMRLX|{");
      Boolean boolean0 = Boolean.TRUE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("0000-00-00T00:00");
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.UK;
      Boolean boolean0 = Boolean.valueOf("$SHDQG");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      // Undeclared exception!
      try { 
        stdDateFormat0.looksLikeISO8601((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      // Undeclared exception!
      try { 
        StdDateFormat.getRFC1123Format(timeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        StdDateFormat.getISO8601Format((TimeZone) null, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.CHINA;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 57);
      // Undeclared exception!
      try { 
        stdDateFormat0.format((Date) null, (StringBuffer) null, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = StdDateFormat.DEFAULT_LOCALE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, (Boolean) null);
      try { 
        stdDateFormat0._parseDate("0000-0}0-00T00:0", (ParsePosition) null);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"0000-0}0-00T00:0\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      // Undeclared exception!
      try { 
        stdDateFormat0._parseDate("96-,@),?$\"U1sq", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition(116);
      // Undeclared exception!
      try { 
        stdDateFormat0.instance._parseDate("0000-00-00T00:00", parsePosition0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CHINESE;
      Boolean boolean0 = Boolean.TRUE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      ParsePosition parsePosition0 = new ParsePosition(0);
      // Undeclared exception!
      try { 
        stdDateFormat0._parseAsISO8601("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Locale locale0 = Locale.forLanguageTag(":gMRLX|{");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(1);
      // Undeclared exception!
      try { 
        stdDateFormat0._parseAsISO8601((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Boolean boolean0 = Boolean.valueOf(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, boolean0);
      ParsePosition parsePosition0 = new ParsePosition(48);
      // Undeclared exception!
      try { 
        stdDateFormat0._parseAsISO8601("0000-00-00T00:00", parsePosition0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Boolean boolean0 = Boolean.valueOf(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, boolean0);
      MockDate mockDate0 = new MockDate((-695), 1673, (-695));
      StringBuffer stringBuffer0 = new StringBuffer("");
      // Undeclared exception!
      try { 
        stdDateFormat0._format((TimeZone) null, locale0, mockDate0, stringBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Cannot parse date \"%s\": while it seems to fit format '%s', parsing fails (leniency? %s)");
      Locale locale0 = Locale.FRENCH;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      boolean boolean0 = stdDateFormat0.isLenient();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Boolean boolean0 = Boolean.valueOf(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0);
      boolean boolean1 = stdDateFormat0.isLenient();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Boolean boolean0 = Boolean.TRUE;
      Locale locale0 = Locale.ITALY;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      boolean boolean1 = stdDateFormat0.isLenient();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Boolean boolean0 = Boolean.valueOf(true);
      Locale locale0 = Locale.FRENCH;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      Boolean boolean1 = new Boolean(true);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean1);
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
      assertSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      boolean boolean0 = StdDateFormat._equals((String) null, "");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2563), "0000-00-00T00:00");
      Locale locale0 = Locale.JAPANESE;
      Boolean boolean0 = new Boolean(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, false);
      ParsePosition parsePosition0 = new ParsePosition((-2563));
      // Undeclared exception!
      try { 
        stdDateFormat0.parseAsRFC1123("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Locale locale0 = Locale.UK;
      Boolean boolean0 = new Boolean(false);
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      String string0 = "_XqU!JT\"!0g";
      MockDate mockDate0 = new MockDate((-1039L));
      StringBuffer stringBuffer0 = new StringBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 57);
      // Undeclared exception!
      try { 
        stdDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.PRC;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, (Boolean) null);
      ParsePosition parsePosition0 = new ParsePosition((-715));
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("0000-00-00T00:00", parsePosition0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Locale locale0 = new Locale("");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(60000);
      try { 
        stdDateFormat0._parseAsISO8601("yyyy-MM-dd'T'HH:mm:ss.SSSZ", parsePosition0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition((-8));
      // Undeclared exception!
      try { 
        stdDateFormat0._parseDate("0000-|0-I0", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, (Boolean) null);
      boolean boolean0 = stdDateFormat0.equals(stdDateFormat0);
      assertTrue(boolean0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      TimeZone timeZone0 = TimeZone.getTimeZone("\" can not be represented as BigDecimal");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2333), 1746, 10);
      boolean boolean0 = stdDateFormat0.equals(mockGregorianCalendar0);
      assertFalse(boolean0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.forLanguageTag("r_\"bi]>xCf~#<");
      Boolean boolean0 = Boolean.valueOf("");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      String string0 = stdDateFormat0.toPattern();
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertEquals("[one of: 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', 'EEE, dd MMM yyyy HH:mm:ss zzz' (strict)]", string0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Locale locale0 = Locale.forLanguageTag(":gMRLX|{");
      Boolean boolean0 = Boolean.TRUE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      String string0 = stdDateFormat0.toPattern();
      assertEquals("[one of: 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', 'EEE, dd MMM yyyy HH:mm:ss zzz' (lenient)]", string0);
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      MockDate mockDate0 = new MockDate((-1706), (-1556), (-723));
      StringBuffer stringBuffer0 = new StringBuffer();
      FieldPosition fieldPosition0 = new FieldPosition(75);
      // Undeclared exception!
      try { 
        stdDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      MockDate mockDate0 = new MockDate();
      StringBuffer stringBuffer0 = new StringBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, (-1954));
      Locale locale0 = Locale.CHINESE;
      Boolean boolean0 = Boolean.valueOf(true);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
      stdDateFormat1.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      //  // Unstable assertion: assertEquals("2014-02-14T20:21:21.320+00:00", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("0000-00-00");
      MockDate mockDate0 = new MockDate(1805, 1805, 122);
      StringBuffer stringBuffer0 = new StringBuffer(1805);
      FieldPosition fieldPosition0 = new FieldPosition(10);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2160, "0000-00-00T00:00");
      Boolean boolean0 = Boolean.valueOf(true);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
      stdDateFormat1.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      assertEquals("3855-09-30T00:00:02.160+00:00", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("0000-00-00");
      MockDate mockDate0 = new MockDate(1805, 1805, 122);
      StringBuffer stringBuffer0 = new StringBuffer(1805);
      FieldPosition fieldPosition0 = new FieldPosition(10);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2160, "0000-00-00T00:00");
      Boolean boolean0 = Boolean.valueOf(true);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      stdDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      assertEquals("3855-09-30T00:00:02.160+0000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Locale locale0 = StdDateFormat.DEFAULT_LOCALE;
      ZoneOffset zoneOffset0 = ZoneOffset.MIN;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      Boolean boolean0 = new Boolean("*r0qf]");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      MockDate mockDate0 = new MockDate(1805, 7, 964);
      StringBuffer stringBuffer0 = new StringBuffer(7);
      FieldPosition fieldPosition0 = new FieldPosition((-2554));
      stdDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      assertEquals("3708-03-20T06:00:00.000-1800", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Locale locale0 = Locale.CHINESE;
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, (Boolean) null);
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("+5", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      try { 
        stdDateFormat0.parse("0000#00-0,00:$00");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"0000#00-0,00:$00\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("0090-00-00");
      TimeZone timeZone0 = TimeZone.getDefault();
      ParsePosition parsePosition0 = new ParsePosition((-8));
      Boolean boolean0 = new Boolean(true);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      Date date0 = stdDateFormat0._parseDate("0090-00-00", parsePosition0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.forLanguageTag("r_\"bi]>xCf~#<");
      MockDate mockDate0 = new MockDate((-1039L));
      StringBuffer stringBuffer0 = new StringBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 57);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      Boolean boolean0 = new Boolean("#1jBs+$_S:O");
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
      StdDateFormat stdDateFormat2 = stdDateFormat1.withTimeZone(timeZone0);
      stdDateFormat2.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      assertEquals(28, stringBuffer0.length());
      assertEquals("1969-12-31T23:59:58.961+0000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Cannot parse date \"%s\": while it seems to fit format '%s', parsing fails (leniency? %s)");
      Locale locale0 = Locale.FRENCH;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      Boolean boolean0 = Boolean.valueOf("0AyLx.}");
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
      stdDateFormat1.setLenient(false);
      assertFalse(stdDateFormat1.isLenient());
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      String string0 = "";
      ParsePosition parsePosition0 = null;
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      TimeZone.getDefault();
      stdDateFormat0.instance.setTimeZone(timeZone0);
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("", (ParsePosition) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      stdDateFormat0.instance.setTimeZone(timeZone0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      Locale locale0 = Locale.forLanguageTag("0000-00-00T00:00");
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
      try { 
        stdDateFormat1.parse("0bl`k@U|C0");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"0bl`k@U|C0\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Cannot parse date \"%s\": while it seems to fit format '%s', parsing fails (leniency? %s)");
      TimeZone timeZone1 = TimeZone.getTimeZone("bFDWR\"ln?DX3#:0~_0N");
      Locale locale0 = Locale.FRENCH;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone1);
      assertSame(stdDateFormat1, stdDateFormat0);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      stdDateFormat0.setLenient(true);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CHINESE;
      Boolean boolean0 = Boolean.TRUE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      boolean boolean1 = stdDateFormat0.isColonIncludedInTimeZone();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.CHINESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)StdDateFormat.getISO8601Format(timeZone0, locale0);
      assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSZ", mockSimpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.PRC;
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)StdDateFormat.getRFC1123Format(timeZone0, locale0);
      assertEquals("EEE, jj nnn aaaa HH:mm:ss zzz", mockSimpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      Date date0 = stdDateFormat0.parse("3");
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2563), "0000-00-00T00:00");
      Locale locale0 = Locale.JAPANESE;
      Boolean boolean0 = new Boolean(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, false);
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("Cannot parse date \"%s\": while it seems to fit format '%s', parsing fails (leniency? %s)");
      Locale locale0 = Locale.FRENCH;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      String string0 = stdDateFormat0.toString();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertEquals("DateFormat com.fasterxml.jackson.databind.util.StdDateFormat: (timezone: sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null], locale: fr, lenient: null)", string0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Boolean boolean0 = Boolean.TRUE;
      Locale locale0 = Locale.ITALY;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      stdDateFormat0.hashCode();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("0000-00-00");
      TimeZone timeZone0 = TimeZone.getDefault();
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition(40);
      stdDateFormat0.parse("0000-00-00", parsePosition0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      Locale locale0 = Locale.forLanguageTag("0090-00-00");
      TimeZone timeZone0 = TimeZone.getDefault();
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.clone();
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
  }
}
