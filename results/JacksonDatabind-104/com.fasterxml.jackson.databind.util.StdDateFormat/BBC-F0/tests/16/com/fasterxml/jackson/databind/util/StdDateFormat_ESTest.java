/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 16 21:30:08 GMT 2020
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.text.DateFormat;
import java.text.FieldPosition;
import java.text.ParseException;
import java.text.ParsePosition;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.time.chrono.ChronoLocalDate;
import java.time.chrono.HijrahDate;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.chrono.MockHijrahDate;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdDateFormat_ESTest extends StdDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2347, "ylO-aNfPNT3");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=ylO-aNfPNT3,offset=2347,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("ylO-aNfPNT3", simpleTimeZone0.getID());
      assertEquals(2347, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      assertNotNull(stdDateFormat0);
      assertEquals("java.util.SimpleTimeZone[id=ylO-aNfPNT3,offset=2347,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("ylO-aNfPNT3", simpleTimeZone0.getID());
      assertEquals(2347, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      ParsePosition parsePosition0 = new ParsePosition(2347);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=2347,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2347, parsePosition0.getIndex());
      
      try { 
        stdDateFormat0.parseAsISO8601("Rh*", parsePosition0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"Rh*\": while it seems to fit format 'yyyy-MM-dd', parsing fails (leniency? true)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      assertNotNull(stdDateFormat0);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("0000!00-00", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, (Boolean) null);
      assertNotNull(stdDateFormat0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      try { 
        stdDateFormat0.parse("Value \"");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"Value \"\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      assertNotNull(stdDateFormat0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("%", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2347, "ylO-aNfPNT3");
      assertNotNull(simpleTimeZone0);
      assertEquals(2347, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("ylO-aNfPNT3", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=ylO-aNfPNT3,offset=2347,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
      assertNotNull(stdDateFormat0);
      assertEquals(2347, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("ylO-aNfPNT3", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=ylO-aNfPNT3,offset=2347,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(stdDateFormat0.isLenient());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(simpleTimeZone0);
      assertNotNull(stdDateFormat1);
      assertEquals(2347, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("ylO-aNfPNT3", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=ylO-aNfPNT3,offset=2347,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("fr", locale0.getLanguage());
      assertTrue(stdDateFormat0.isLenient());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat1.isLenient());
      assertSame(stdDateFormat0, stdDateFormat1);
      assertSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      assertNotNull(stdDateFormat0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      Locale locale0 = Locale.US;
      assertNotNull(locale0);
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
      assertNotNull(stdDateFormat1);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("en_US", locale0.toString());
      assertEquals("US", locale0.getCountry());
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat1.isLenient());
      assertSame(stdDateFormat0, stdDateFormat1);
      assertSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2347, "ylO-aNfPNT3");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=ylO-aNfPNT3,offset=2347,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(2347, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("ylO-aNfPNT3", simpleTimeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      Boolean boolean0 = new Boolean(")]");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
      assertNotNull(stdDateFormat0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=ylO-aNfPNT3,offset=2347,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(2347, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("ylO-aNfPNT3", simpleTimeZone0.getID());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
      
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
      assertNotNull(stdDateFormat1);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=ylO-aNfPNT3,offset=2347,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals(2347, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("ylO-aNfPNT3", simpleTimeZone0.getID());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat1.isLenient());
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
      assertSame(stdDateFormat0, stdDateFormat1);
      assertSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      assertNotNull(stdDateFormat0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      
      Date date0 = stdDateFormat0.parseAsRFC1123("Cannot parse date \"%s\": while it seems to fit format '%s', parsing fails (leniency? %s)", parsePosition0);
      assertNull(date0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=0]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getErrorIndex());
      assertEquals(0, parsePosition0.getIndex());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      assertNotNull(timeZone0);
      assertEquals("UTC", timeZone0.getID());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      assertNotNull(stdDateFormat0);
      assertEquals("UTC", timeZone0.getID());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertFalse(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      ParsePosition parsePosition0 = new ParsePosition((-1170));
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=-1170,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1170), parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      Date date0 = stdDateFormat0.parseAsISO8601("0000-00-00", parsePosition0);
      assertNotNull(date0);
      assertEquals("UTC", timeZone0.getID());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fr", locale0.getLanguage());
      assertFalse(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertEquals("java.text.ParsePosition[index=-1170,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1170), parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      assertNotNull(stdDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      boolean boolean0 = stdDateFormat0.looksLikeISO8601("0000-00-00");
      assertTrue(boolean0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CN", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, (Boolean) null);
      assertNotNull(stdDateFormat0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      boolean boolean0 = stdDateFormat0.looksLikeISO8601("1H7RDf,c3[A`seTz[");
      assertFalse(boolean0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      assertNotNull(stdDateFormat0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertNull(timeZone0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2347, "ylO-aNfPNT3");
      assertNotNull(simpleTimeZone0);
      assertEquals("java.util.SimpleTimeZone[id=ylO-aNfPNT3,offset=2347,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(2347, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("ylO-aNfPNT3", simpleTimeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      assertNotNull(stdDateFormat0);
      assertEquals("java.util.SimpleTimeZone[id=ylO-aNfPNT3,offset=2347,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(2347, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("ylO-aNfPNT3", simpleTimeZone0.getID());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertNotNull(timeZone0);
      assertEquals("java.util.SimpleTimeZone[id=ylO-aNfPNT3,offset=2347,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals(2347, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("ylO-aNfPNT3", simpleTimeZone0.getID());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de", locale0.getLanguage());
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(timeZone0.useDaylightTime());
      assertEquals(0, timeZone0.getDSTSavings());
      assertEquals("ylO-aNfPNT3", timeZone0.getID());
      assertEquals("java.util.SimpleTimeZone[id=ylO-aNfPNT3,offset=2347,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
      assertEquals(2347, timeZone0.getRawOffset());
      assertSame(simpleTimeZone0, timeZone0);
      assertSame(timeZone0, simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2347, "ylO-aNfPNT3");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(2347, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=ylO-aNfPNT3,offset=2347,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("ylO-aNfPNT3", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      Boolean boolean0 = new Boolean(true);
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Locale locale0 = Locale.CANADA_FRENCH;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
      assertNotNull(stdDateFormat0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(2347, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=ylO-aNfPNT3,offset=2347,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("ylO-aNfPNT3", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertTrue(stdDateFormat0.isLenient());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      
      StdDateFormat stdDateFormat1 = stdDateFormat0.clone();
      assertNotNull(stdDateFormat1);
      assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(2347, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=ylO-aNfPNT3,offset=2347,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("ylO-aNfPNT3", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fr_CA", locale0.toString());
      assertTrue(stdDateFormat0.isLenient());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat1.isLenient());
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
      assertNotSame(stdDateFormat0, stdDateFormat1);
      assertNotSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      assertNotNull(stdDateFormat0);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      ParsePosition parsePosition0 = new ParsePosition(3);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=3,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(3, parsePosition0.getIndex());
      
      Date date0 = stdDateFormat0._parseDate("Fu>x", parsePosition0);
      assertNull(date0);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertEquals(3, parsePosition0.getErrorIndex());
      assertEquals(3, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=3,errorIndex=3]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      assertNotNull(stdDateFormat0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      ParsePosition parsePosition0 = new ParsePosition(2332);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=2332,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2332, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      Date date0 = stdDateFormat0._parseDate("0000-00-00", parsePosition0);
      assertNotNull(date0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      assertEquals("java.text.ParsePosition[index=2332,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2332, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      //  // Unstable assertion: assertNotNull(stdDateFormat0);
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertTrue(stdDateFormat0.isLenient());
      
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3509, "yyyy-MM-dd");
      //  // Unstable assertion: assertNotNull(simpleTimeZone0);
      //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id=yyyy-MM-dd,offset=3509,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      //  // Unstable assertion: assertFalse(simpleTimeZone0.useDaylightTime());
      //  // Unstable assertion: assertEquals("yyyy-MM-dd", simpleTimeZone0.getID());
      //  // Unstable assertion: assertEquals(3509, simpleTimeZone0.getRawOffset());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Calendar calendar0 = stdDateFormat0._getCalendar(simpleTimeZone0);
      //  // Unstable assertion: assertNotNull(calendar0);
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertTrue(stdDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id=yyyy-MM-dd,offset=3509,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      //  // Unstable assertion: assertFalse(simpleTimeZone0.useDaylightTime());
      //  // Unstable assertion: assertEquals("yyyy-MM-dd", simpleTimeZone0.getID());
      //  // Unstable assertion: assertEquals(3509, simpleTimeZone0.getRawOffset());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
      //  // Unstable assertion: assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertEquals(1, calendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertTrue(calendar0.isLenient());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=yyyy-MM-dd,offset=3509,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      assertNotNull(zoneOffset0);
      
      HijrahDate hijrahDate0 = MockHijrahDate.now((ZoneId) zoneOffset0);
      assertNotNull(hijrahDate0);
      
      boolean boolean0 = StdDateFormat._equals((ChronoLocalDate) hijrahDate0, (ChronoLocalDate) hijrahDate0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      assertNotNull(stdDateFormat0);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      // Undeclared exception!
      try { 
        stdDateFormat0.withLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
      assertNotNull(stdDateFormat0);
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getISO3Country());
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      // Undeclared exception!
      try { 
        stdDateFormat0.instance.setTimeZone((TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      assertNotNull(zoneInfo0);
      assertEquals("UTC", zoneInfo0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      
      Boolean boolean0 = Boolean.valueOf("M");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0);
      assertNotNull(stdDateFormat0);
      assertEquals("UTC", zoneInfo0.getID());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
      
      ParsePosition parsePosition0 = new ParsePosition((-2401));
      assertNotNull(parsePosition0);
      assertEquals((-2401), parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=-2401,errorIndex=-1]", parsePosition0.toString());
      
      // Undeclared exception!
      try { 
        stdDateFormat0.parseAsRFC1123("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      assertNotNull(stdDateFormat0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      ParsePosition parsePosition0 = new ParsePosition(14);
      assertNotNull(parsePosition0);
      assertEquals(14, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=14,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      // Undeclared exception!
      try { 
        stdDateFormat0.instance.parseAsRFC1123((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = new Locale(",W0Kz", "v#JB_/x", "v#JB_/x");
      assertNotNull(locale0);
      assertEquals(",w0kz", locale0.getLanguage());
      assertEquals("V#JB_/X", locale0.getCountry());
      assertEquals("v#JB_/x", locale0.getVariant());
      assertEquals(",w0kz_V#JB_/X_v#JB_/x", locale0.toString());
      
      Boolean boolean0 = Boolean.FALSE;
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
      assertNotNull(stdDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals(",w0kz", locale0.getLanguage());
      assertEquals("V#JB_/X", locale0.getCountry());
      assertEquals("v#JB_/x", locale0.getVariant());
      assertEquals(",w0kz_V#JB_/X_v#JB_/x", locale0.toString());
      assertFalse(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      assertEquals(0, parsePosition0.getIndex());
      
      // Undeclared exception!
      try { 
        stdDateFormat0.parseAsISO8601("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      assertNotNull(stdDateFormat0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      ParsePosition parsePosition0 = new ParsePosition(84);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=84,errorIndex=-1]", parsePosition0.toString());
      assertEquals(84, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      // Undeclared exception!
      try { 
        stdDateFormat0.parseAsISO8601((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "84GF{(*rg");
      //  // Unstable assertion: assertNotNull(simpleTimeZone0);
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
      //  // Unstable assertion: assertEquals("84GF{(*rg", simpleTimeZone0.getID());
      //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id=84GF{(*rg,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      //  // Unstable assertion: assertFalse(simpleTimeZone0.useDaylightTime());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getRawOffset());
      
      Locale locale0 = Locale.FRANCE;
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("FRA", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("fra", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("FR", locale0.getCountry());
      //  // Unstable assertion: assertEquals("fr_FR", locale0.toString());
      //  // Unstable assertion: assertEquals("fr", locale0.getLanguage());
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0);
      //  // Unstable assertion: assertNotNull(stdDateFormat0);
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getDSTSavings());
      //  // Unstable assertion: assertEquals("84GF{(*rg", simpleTimeZone0.getID());
      //  // Unstable assertion: assertEquals("java.util.SimpleTimeZone[id=84GF{(*rg,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      //  // Unstable assertion: assertFalse(simpleTimeZone0.useDaylightTime());
      //  // Unstable assertion: assertEquals(0, simpleTimeZone0.getRawOffset());
      //  // Unstable assertion: assertEquals("FRA", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("fra", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("FR", locale0.getCountry());
      //  // Unstable assertion: assertEquals("fr_FR", locale0.toString());
      //  // Unstable assertion: assertEquals("fr", locale0.getLanguage());
      //  // Unstable assertion: assertTrue(stdDateFormat0.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      ParsePosition parsePosition0 = new ParsePosition(0);
      //  // Unstable assertion: assertNotNull(parsePosition0);
      //  // Unstable assertion: assertEquals(0, parsePosition0.getIndex());
      //  // Unstable assertion: assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      //  // Unstable assertion: assertEquals((-1), parsePosition0.getErrorIndex());
      
      // Undeclared exception!
      try { 
        stdDateFormat0.parseAsISO8601("0000-00-00T00:00", parsePosition0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      assertNotNull(stdDateFormat0);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      ParsePosition parsePosition0 = new ParsePosition((-67));
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=-67,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-67), parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("|=oaul=o:J}fT&XTO9", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      assertNotNull(timeZone0);
      assertEquals("UTC", timeZone0.getID());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      
      Boolean boolean0 = Boolean.valueOf("`!");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      assertNotNull(stdDateFormat0);
      assertEquals("UTC", timeZone0.getID());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FR", locale0.getCountry());
      assertFalse(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      //  // Unstable assertion: assertNotNull(timeZone0);
      //  // Unstable assertion: assertEquals("UTC", timeZone0.getID());
      
      Locale locale0 = Locale.FRANCE;
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("fr_FR", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("fra", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("fr", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("FRA", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("FR", locale0.getCountry());
      
      Boolean boolean0 = Boolean.valueOf("");
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotNull(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      //  // Unstable assertion: assertNotNull(stdDateFormat0);
      //  // Unstable assertion: assertEquals("UTC", timeZone0.getID());
      //  // Unstable assertion: assertEquals("fr_FR", locale0.toString());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("fra", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("fr", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("FRA", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("FR", locale0.getCountry());
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertFalse(stdDateFormat0.isLenient());
      
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("0000-00-00T00:00");
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      assertNotNull(zoneInfo0);
      assertEquals("UTC", zoneInfo0.getID());
      
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0);
      assertNotNull(stdDateFormat0);
      assertEquals("UTC", zoneInfo0.getID());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      // Undeclared exception!
      try { 
        stdDateFormat0.looksLikeISO8601((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        StdDateFormat.getRFC1123Format((TimeZone) null, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        StdDateFormat.getISO8601Format((TimeZone) null, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      assertNotNull(timeZone0);
      assertEquals("UTC", timeZone0.getID());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, (Boolean) null);
      assertNotNull(stdDateFormat0);
      assertEquals("UTC", timeZone0.getID());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(9, (-40), (-40));
      assertNotNull(mockGregorianCalendar0);
      
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      assertNotNull(date0);
      assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      assertTrue(mockGregorianCalendar0.isLenient());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=9,MONTH=-40,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=-40,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
      
      // Undeclared exception!
      try { 
        stdDateFormat0.format(date0, (StringBuffer) null, (FieldPosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      //  // Unstable assertion: assertNotNull(stdDateFormat0);
      //  // Unstable assertion: assertTrue(stdDateFormat0.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      ParsePosition parsePosition0 = new ParsePosition((-7));
      //  // Unstable assertion: assertNotNull(parsePosition0);
      //  // Unstable assertion: assertEquals((-1), parsePosition0.getErrorIndex());
      //  // Unstable assertion: assertEquals("java.text.ParsePosition[index=-7,errorIndex=-1]", parsePosition0.toString());
      //  // Unstable assertion: assertEquals((-7), parsePosition0.getIndex());
      
      try { 
        stdDateFormat0._parseDate("1970-01-01T00:00:00.000+0000", parsePosition0);
       //  fail("Expecting exception: ParseException");
       // Unstable assertion
      } catch(ParseException e) {
         //
         // Cannot parse date \"1970-01-01T00:00:00.000+0000\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      assertNotNull(stdDateFormat0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      ParsePosition parsePosition0 = new ParsePosition((-7));
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=-7,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-7), parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      // Undeclared exception!
      try { 
        stdDateFormat0._parseDate(">b^&SY/4:23S-", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      assertNotNull(stdDateFormat0);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      // Undeclared exception!
      try { 
        stdDateFormat0._parseDate("yyyy-MM-dd'T'HH:mm:ss.SSSZ", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      //  // Unstable assertion: assertNotNull(stdDateFormat0);
      //  // Unstable assertion: assertTrue(stdDateFormat0.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      ParsePosition parsePosition0 = new ParsePosition(1362);
      //  // Unstable assertion: assertNotNull(parsePosition0);
      //  // Unstable assertion: assertEquals(1362, parsePosition0.getIndex());
      //  // Unstable assertion: assertEquals("java.text.ParsePosition[index=1362,errorIndex=-1]", parsePosition0.toString());
      //  // Unstable assertion: assertEquals((-1), parsePosition0.getErrorIndex());
      
      // Undeclared exception!
      try { 
        stdDateFormat0._parseDate("0000-00-00T00:00", parsePosition0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "1H7RDf,c3[A`seTz[");
      assertNotNull(simpleTimeZone0);
      assertEquals("1H7RDf,c3[A`seTz[", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=1H7RDf,c3[A`seTz[,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, false);
      assertNotNull(stdDateFormat0);
      assertEquals("1H7RDf,c3[A`seTz[", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=1H7RDf,c3[A`seTz[,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("de_DE", locale0.toString());
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      ParsePosition parsePosition0 = new ParsePosition(43);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(43, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=43,errorIndex=-1]", parsePosition0.toString());
      
      try { 
        stdDateFormat0._parseAsISO8601("1H7RDf,c3[A`seTz[", parsePosition0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"1H7RDf,c3[A`seTz[\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? true)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      assertNotNull(timeZone0);
      assertEquals("UTC", timeZone0.getID());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      
      Boolean boolean0 = Boolean.valueOf("");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      assertNotNull(stdDateFormat0);
      assertEquals("UTC", timeZone0.getID());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("FRA", locale0.getISO3Country());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
      
      ParsePosition parsePosition0 = new ParsePosition(0);
      assertNotNull(parsePosition0);
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals(0, parsePosition0.getIndex());
      assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      
      // Undeclared exception!
      try { 
        stdDateFormat0._parseAsISO8601("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      assertNotNull(stdDateFormat0);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      ParsePosition parsePosition0 = new ParsePosition((-858));
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=-858,errorIndex=-1]", parsePosition0.toString());
      assertEquals((-1), parsePosition0.getErrorIndex());
      assertEquals((-858), parsePosition0.getIndex());
      
      // Undeclared exception!
      try { 
        stdDateFormat0._parseAsISO8601((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      //  // Unstable assertion: assertNotNull(stdDateFormat0);
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertTrue(stdDateFormat0.isLenient());
      
      ParsePosition parsePosition0 = new ParsePosition(0);
      //  // Unstable assertion: assertNotNull(parsePosition0);
      //  // Unstable assertion: assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
      //  // Unstable assertion: assertEquals(0, parsePosition0.getIndex());
      //  // Unstable assertion: assertEquals((-1), parsePosition0.getErrorIndex());
      
      // Undeclared exception!
      try { 
        stdDateFormat0._parseAsISO8601("0000-00-00T00:00", parsePosition0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      //  // Unstable assertion: assertNotNull(zoneInfo0);
      //  // Unstable assertion: assertEquals("UTC", zoneInfo0.getID());
      
      Locale locale0 = Locale.GERMANY;
      //  // Unstable assertion: assertNotNull(locale0);
      //  // Unstable assertion: assertEquals("DEU", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("DE", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("de", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("deu", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("de_DE", locale0.toString());
      
      Locale locale1 = locale0.stripExtensions();
      //  // Unstable assertion: assertNotNull(locale1);
      //  // Unstable assertion: assertEquals("DEU", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("DE", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("de", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("deu", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("de_DE", locale0.toString());
      //  // Unstable assertion: assertEquals("DE", locale1.getCountry());
      //  // Unstable assertion: assertEquals("deu", locale1.getISO3Language());
      //  // Unstable assertion: assertEquals("de_DE", locale1.toString());
      //  // Unstable assertion: assertEquals("de", locale1.getLanguage());
      //  // Unstable assertion: assertEquals("DEU", locale1.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale1.getVariant());
      //  // Unstable assertion: assertSame(locale0, locale1);
      //  // Unstable assertion: assertSame(locale1, locale0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0);
      //  // Unstable assertion: assertNotNull(stdDateFormat0);
      //  // Unstable assertion: assertEquals("UTC", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("DEU", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("DE", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("de", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("deu", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("de_DE", locale0.toString());
      //  // Unstable assertion: assertTrue(stdDateFormat0.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      StdDateFormat stdDateFormat1 = stdDateFormat0.clone();
      //  // Unstable assertion: assertNotNull(stdDateFormat1);
      //  // Unstable assertion: assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
      //  // Unstable assertion: assertEquals("UTC", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("DEU", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("DE", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("de", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("deu", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("de_DE", locale0.toString());
      //  // Unstable assertion: assertTrue(stdDateFormat0.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertTrue(stdDateFormat1.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertSame(locale0, locale1);
      //  // Unstable assertion: assertNotSame(stdDateFormat0, stdDateFormat1);
      //  // Unstable assertion: assertNotSame(stdDateFormat1, stdDateFormat0);
      
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)StdDateFormat.getISO8601Format(zoneInfo0, locale1);
      //  // Unstable assertion: assertNotNull(mockSimpleDateFormat0);
      //  // Unstable assertion: assertEquals("UTC", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("DEU", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("DE", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("de", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("deu", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("de_DE", locale0.toString());
      //  // Unstable assertion: assertEquals("DE", locale1.getCountry());
      //  // Unstable assertion: assertEquals("deu", locale1.getISO3Language());
      //  // Unstable assertion: assertEquals("de_DE", locale1.toString());
      //  // Unstable assertion: assertEquals("de", locale1.getLanguage());
      //  // Unstable assertion: assertEquals("DEU", locale1.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale1.getVariant());
      //  // Unstable assertion: assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSZ", mockSimpleDateFormat0.toPattern());
      //  // Unstable assertion: assertTrue(mockSimpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("uuuu-MM-tt'T'HH:mm:ss.SSSZ", mockSimpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertSame(locale0, locale1);
      //  // Unstable assertion: assertSame(locale1, locale0);
      
      stdDateFormat1.instance.setTimeZone(zoneInfo0);
      //  // Unstable assertion: assertFalse(stdDateFormat0.equals((Object)stdDateFormat1));
      //  // Unstable assertion: assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
      //  // Unstable assertion: assertEquals("UTC", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("DEU", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("DE", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("de", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("deu", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("de_DE", locale0.toString());
      //  // Unstable assertion: assertTrue(stdDateFormat0.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertTrue(stdDateFormat1.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertSame(locale0, locale1);
      //  // Unstable assertion: assertNotSame(stdDateFormat0, stdDateFormat1);
      //  // Unstable assertion: assertNotSame(stdDateFormat1, stdDateFormat0);
      
      Boolean boolean0 = Boolean.valueOf("");
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertNotNull(boolean0);
      
      StdDateFormat stdDateFormat2 = stdDateFormat1.withLenient(boolean0);
      //  // Unstable assertion: assertNotNull(stdDateFormat2);
      //  // Unstable assertion: assertFalse(stdDateFormat0.equals((Object)stdDateFormat1));
      //  // Unstable assertion: assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
      //  // Unstable assertion: assertFalse(stdDateFormat2.equals((Object)stdDateFormat1));
      //  // Unstable assertion: assertFalse(stdDateFormat2.equals((Object)stdDateFormat0));
      //  // Unstable assertion: assertEquals("UTC", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("DEU", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("DE", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("de", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("deu", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("de_DE", locale0.toString());
      //  // Unstable assertion: assertTrue(stdDateFormat0.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertTrue(stdDateFormat1.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertFalse(stdDateFormat2.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat2.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertSame(locale0, locale1);
      //  // Unstable assertion: assertNotSame(stdDateFormat0, stdDateFormat2);
      //  // Unstable assertion: assertNotSame(stdDateFormat0, stdDateFormat1);
      //  // Unstable assertion: assertNotSame(stdDateFormat1, stdDateFormat0);
      //  // Unstable assertion: assertNotSame(stdDateFormat1, stdDateFormat2);
      //  // Unstable assertion: assertNotSame(stdDateFormat2, stdDateFormat1);
      //  // Unstable assertion: assertNotSame(stdDateFormat2, stdDateFormat0);
      
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)stdDateFormat0.instance._getCalendar(zoneInfo0);
      //  // Unstable assertion: assertNotNull(mockGregorianCalendar0);
      //  // Unstable assertion: assertFalse(stdDateFormat0.equals((Object)stdDateFormat2));
      //  // Unstable assertion: assertFalse(stdDateFormat0.equals((Object)stdDateFormat1));
      //  // Unstable assertion: assertEquals("UTC", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("DEU", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("DE", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("de", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("deu", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("de_DE", locale0.toString());
      //  // Unstable assertion: assertTrue(stdDateFormat0.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
      //  // Unstable assertion: assertTrue(mockGregorianCalendar0.isLenient());
      //  // Unstable assertion: assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
      //  // Unstable assertion: assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
      //  // Unstable assertion: assertSame(locale0, locale1);
      //  // Unstable assertion: assertNotSame(stdDateFormat0, stdDateFormat2);
      //  // Unstable assertion: assertNotSame(stdDateFormat0, stdDateFormat1);
      
      String string0 = stdDateFormat0.toPattern();
      //  // Unstable assertion: assertEquals("[one of: 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', 'EEE, dd MMM yyyy HH:mm:ss zzz' (lenient)]", string0);
      //  // Unstable assertion: assertNotNull(string0);
      //  // Unstable assertion: assertFalse(stdDateFormat0.equals((Object)stdDateFormat2));
      //  // Unstable assertion: assertFalse(stdDateFormat0.equals((Object)stdDateFormat1));
      //  // Unstable assertion: assertEquals("UTC", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("DEU", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("DE", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("de", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("deu", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("de_DE", locale0.toString());
      //  // Unstable assertion: assertTrue(stdDateFormat0.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertSame(locale0, locale1);
      //  // Unstable assertion: assertNotSame(stdDateFormat0, stdDateFormat2);
      //  // Unstable assertion: assertNotSame(stdDateFormat0, stdDateFormat1);
      
      stdDateFormat1._clearFormats();
      //  // Unstable assertion: assertFalse(stdDateFormat0.equals((Object)stdDateFormat2));
      //  // Unstable assertion: assertFalse(stdDateFormat0.equals((Object)stdDateFormat1));
      //  // Unstable assertion: assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
      //  // Unstable assertion: assertFalse(stdDateFormat1.equals((Object)stdDateFormat2));
      //  // Unstable assertion: assertEquals("UTC", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("DEU", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("DE", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("de", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("deu", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("de_DE", locale0.toString());
      //  // Unstable assertion: assertTrue(stdDateFormat0.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertTrue(stdDateFormat1.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertSame(locale0, locale1);
      //  // Unstable assertion: assertNotSame(stdDateFormat0, stdDateFormat2);
      //  // Unstable assertion: assertNotSame(stdDateFormat0, stdDateFormat1);
      //  // Unstable assertion: assertNotSame(stdDateFormat1, stdDateFormat0);
      //  // Unstable assertion: assertNotSame(stdDateFormat1, stdDateFormat2);
      
      stdDateFormat2.setTimeZone(zoneInfo0);
      //  // Unstable assertion: assertFalse(stdDateFormat0.equals((Object)stdDateFormat2));
      //  // Unstable assertion: assertFalse(stdDateFormat0.equals((Object)stdDateFormat1));
      //  // Unstable assertion: assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
      //  // Unstable assertion: assertFalse(stdDateFormat1.equals((Object)stdDateFormat2));
      //  // Unstable assertion: assertFalse(stdDateFormat2.equals((Object)stdDateFormat1));
      //  // Unstable assertion: assertFalse(stdDateFormat2.equals((Object)stdDateFormat0));
      //  // Unstable assertion: assertEquals("UTC", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("DEU", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("DE", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("de", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("deu", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("de_DE", locale0.toString());
      //  // Unstable assertion: assertTrue(stdDateFormat0.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertTrue(stdDateFormat1.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertFalse(stdDateFormat2.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat2.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertSame(locale0, locale1);
      //  // Unstable assertion: assertNotSame(stdDateFormat0, stdDateFormat2);
      //  // Unstable assertion: assertNotSame(stdDateFormat0, stdDateFormat1);
      //  // Unstable assertion: assertNotSame(stdDateFormat1, stdDateFormat0);
      //  // Unstable assertion: assertNotSame(stdDateFormat1, stdDateFormat2);
      //  // Unstable assertion: assertNotSame(stdDateFormat2, stdDateFormat1);
      //  // Unstable assertion: assertNotSame(stdDateFormat2, stdDateFormat0);
      
      stdDateFormat1._clearFormats();
      //  // Unstable assertion: assertFalse(stdDateFormat0.equals((Object)stdDateFormat2));
      //  // Unstable assertion: assertFalse(stdDateFormat0.equals((Object)stdDateFormat1));
      //  // Unstable assertion: assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
      //  // Unstable assertion: assertFalse(stdDateFormat1.equals((Object)stdDateFormat2));
      //  // Unstable assertion: assertEquals("UTC", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("DEU", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("DE", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("de", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("deu", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("de_DE", locale0.toString());
      //  // Unstable assertion: assertTrue(stdDateFormat0.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertTrue(stdDateFormat1.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertSame(locale0, locale1);
      //  // Unstable assertion: assertNotSame(stdDateFormat0, stdDateFormat2);
      //  // Unstable assertion: assertNotSame(stdDateFormat0, stdDateFormat1);
      //  // Unstable assertion: assertNotSame(stdDateFormat1, stdDateFormat0);
      //  // Unstable assertion: assertNotSame(stdDateFormat1, stdDateFormat2);
      
      StdDateFormat stdDateFormat3 = stdDateFormat2.withColonInTimeZone(true);
      //  // Unstable assertion: assertNotNull(stdDateFormat3);
      //  // Unstable assertion: assertFalse(stdDateFormat0.equals((Object)stdDateFormat2));
      //  // Unstable assertion: assertFalse(stdDateFormat0.equals((Object)stdDateFormat1));
      //  // Unstable assertion: assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
      //  // Unstable assertion: assertFalse(stdDateFormat1.equals((Object)stdDateFormat2));
      //  // Unstable assertion: assertFalse(stdDateFormat2.equals((Object)stdDateFormat1));
      //  // Unstable assertion: assertFalse(stdDateFormat2.equals((Object)stdDateFormat0));
      //  // Unstable assertion: assertFalse(stdDateFormat3.equals((Object)stdDateFormat1));
      //  // Unstable assertion: assertFalse(stdDateFormat3.equals((Object)stdDateFormat2));
      //  // Unstable assertion: assertFalse(stdDateFormat3.equals((Object)stdDateFormat0));
      //  // Unstable assertion: assertEquals("UTC", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("DEU", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("DE", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("de", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("deu", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("de_DE", locale0.toString());
      //  // Unstable assertion: assertTrue(stdDateFormat0.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertTrue(stdDateFormat1.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertFalse(stdDateFormat2.isLenient());
      //  // Unstable assertion: assertFalse(stdDateFormat2.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertFalse(stdDateFormat3.isLenient());
      //  // Unstable assertion: assertTrue(stdDateFormat3.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertSame(locale0, locale1);
      //  // Unstable assertion: assertNotSame(stdDateFormat0, stdDateFormat2);
      //  // Unstable assertion: assertNotSame(stdDateFormat0, stdDateFormat3);
      //  // Unstable assertion: assertNotSame(stdDateFormat0, stdDateFormat1);
      //  // Unstable assertion: assertNotSame(stdDateFormat1, stdDateFormat3);
      //  // Unstable assertion: assertNotSame(stdDateFormat1, stdDateFormat0);
      //  // Unstable assertion: assertNotSame(stdDateFormat1, stdDateFormat2);
      //  // Unstable assertion: assertNotSame(stdDateFormat2, stdDateFormat1);
      //  // Unstable assertion: assertNotSame(stdDateFormat2, stdDateFormat3);
      //  // Unstable assertion: assertNotSame(stdDateFormat2, stdDateFormat0);
      //  // Unstable assertion: assertNotSame(stdDateFormat3, stdDateFormat1);
      //  // Unstable assertion: assertNotSame(stdDateFormat3, stdDateFormat2);
      //  // Unstable assertion: assertNotSame(stdDateFormat3, stdDateFormat0);
      
      boolean boolean1 = StdDateFormat._equals((DateFormat) mockSimpleDateFormat0, (DateFormat) mockSimpleDateFormat0);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertEquals("UTC", zoneInfo0.getID());
      //  // Unstable assertion: assertEquals("DEU", locale0.getISO3Country());
      //  // Unstable assertion: assertEquals("DE", locale0.getCountry());
      //  // Unstable assertion: assertEquals("", locale0.getVariant());
      //  // Unstable assertion: assertEquals("de", locale0.getLanguage());
      //  // Unstable assertion: assertEquals("deu", locale0.getISO3Language());
      //  // Unstable assertion: assertEquals("de_DE", locale0.toString());
      //  // Unstable assertion: assertEquals("DE", locale1.getCountry());
      //  // Unstable assertion: assertEquals("deu", locale1.getISO3Language());
      //  // Unstable assertion: assertEquals("de_DE", locale1.toString());
      //  // Unstable assertion: assertEquals("de", locale1.getLanguage());
      //  // Unstable assertion: assertEquals("DEU", locale1.getISO3Country());
      //  // Unstable assertion: assertEquals("", locale1.getVariant());
      //  // Unstable assertion: assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSZ", mockSimpleDateFormat0.toPattern());
      //  // Unstable assertion: assertTrue(mockSimpleDateFormat0.isLenient());
      //  // Unstable assertion: assertEquals("uuuu-MM-tt'T'HH:mm:ss.SSSZ", mockSimpleDateFormat0.toLocalizedPattern());
      //  // Unstable assertion: assertSame(locale0, locale1);
      //  // Unstable assertion: assertSame(locale1, locale0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      assertNotNull(timeZone0);
      assertEquals("UTC", timeZone0.getID());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, (Boolean) null);
      assertNotNull(stdDateFormat0);
      assertEquals("UTC", timeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      boolean boolean0 = stdDateFormat0.equals(locale0);
      assertFalse(boolean0);
      assertEquals("UTC", timeZone0.getID());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("FR", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "1H7RDf,c3[A`seTz[");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("1H7RDf,c3[A`seTz[", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=1H7RDf,c3[A`seTz[,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      
      MockDate mockDate0 = new MockDate(0, 43, 0, 1119, 1119, (-1));
      assertNotNull(mockDate0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, false);
      assertNotNull(stdDateFormat0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("1H7RDf,c3[A`seTz[", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=1H7RDf,c3[A`seTz[,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      String string0 = stdDateFormat0.format((Date) mockDate0);
      assertEquals("1903-09-16T09:38:58.999-0000", string0);
      assertNotNull(string0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("1H7RDf,c3[A`seTz[", simpleTimeZone0.getID());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=1H7RDf,c3[A`seTz[,offset=-1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals((-1), simpleTimeZone0.getRawOffset());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("Wed Sep 16 09:38:59 GMT 1903", mockDate0.toString());
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2332, "%rA[`?");
      assertNotNull(simpleTimeZone0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("%rA[`?", simpleTimeZone0.getID());
      assertEquals(2332, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=%rA[`?,offset=2332,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      
      MockDate mockDate0 = new MockDate(1, 1, 1, 1, (-4058), 1);
      assertNotNull(mockDate0);
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
      assertNotNull(stdDateFormat0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("%rA[`?", simpleTimeZone0.getID());
      assertEquals(2332, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=%rA[`?,offset=2332,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      String string0 = stdDateFormat0.format((Date) mockDate0);
      assertEquals("1901-01-29T05:22:03.332+00:00", string0);
      assertNotNull(string0);
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("%rA[`?", simpleTimeZone0.getID());
      assertEquals(2332, simpleTimeZone0.getRawOffset());
      assertEquals("java.util.SimpleTimeZone[id=%rA[`?,offset=2332,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.getLanguage());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("Tue Jan 29 05:22:01 GMT 1901", mockDate0.toString());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      assertNotNull(stdDateFormat0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      boolean boolean0 = stdDateFormat0.isLenient();
      assertTrue(boolean0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Locale locale0 = Locale.GERMAN;
      assertNotNull(locale0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      
      Boolean boolean0 = new Boolean(false);
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, boolean0, false);
      assertNotNull(stdDateFormat0);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      boolean boolean1 = stdDateFormat0.isLenient();
      assertFalse(boolean1);
      assertEquals("de", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertFalse(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      assertNotNull(timeZone0);
      assertEquals("GMT", timeZone0.getID());
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      assertNotNull(stdDateFormat0);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      boolean boolean1 = stdDateFormat0.isLenient();
      assertTrue(boolean1);
      assertEquals("GMT", timeZone0.getID());
      assertEquals("FR", locale0.getCountry());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals("fra", locale0.getISO3Language());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2347, "ylO-aNfPNT3");
      assertNotNull(simpleTimeZone0);
      assertEquals(2347, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=ylO-aNfPNT3,offset=2347,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("ylO-aNfPNT3", simpleTimeZone0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      
      Boolean boolean0 = new Boolean(")]");
      assertFalse(boolean0);
      assertNotNull(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
      assertNotNull(stdDateFormat0);
      assertEquals(2347, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=ylO-aNfPNT3,offset=2347,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("ylO-aNfPNT3", simpleTimeZone0.getID());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertFalse(stdDateFormat0.isLenient());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      
      Boolean boolean1 = new Boolean("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      assertFalse(boolean1);
      assertNotNull(boolean1);
      assertTrue(boolean1.equals((Object)boolean0));
      
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean1);
      assertNotNull(stdDateFormat1);
      assertTrue(boolean0.equals((Object)boolean1));
      assertTrue(boolean1.equals((Object)boolean0));
      assertEquals(2347, simpleTimeZone0.getRawOffset());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals("java.util.SimpleTimeZone[id=ylO-aNfPNT3,offset=2347,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("ylO-aNfPNT3", simpleTimeZone0.getID());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("de", locale0.getLanguage());
      assertFalse(stdDateFormat0.isLenient());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat1.isLenient());
      assertSame(stdDateFormat0, stdDateFormat1);
      assertSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      assertNotNull(zoneInfo0);
      assertEquals("UTC", zoneInfo0.getID());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      Boolean boolean0 = Boolean.TRUE;
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0, true);
      assertNotNull(stdDateFormat0);
      assertEquals("UTC", zoneInfo0.getID());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(stdDateFormat0.isLenient());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient((Boolean) null);
      assertNotNull(stdDateFormat1);
      assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
      assertEquals("UTC", zoneInfo0.getID());
      assertEquals("de_DE", locale0.toString());
      assertEquals("de", locale0.getLanguage());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("DE", locale0.getCountry());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(stdDateFormat0.isLenient());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat1.isLenient());
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
      assertNotSame(stdDateFormat0, stdDateFormat1);
      assertNotSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      //  // Unstable assertion: assertNotNull(stdDateFormat0);
      //  // Unstable assertion: assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      //  // Unstable assertion: assertTrue(stdDateFormat0.isLenient());
      
      ParsePosition parsePosition0 = new ParsePosition(1362);
      //  // Unstable assertion: assertNotNull(parsePosition0);
      //  // Unstable assertion: assertEquals(1362, parsePosition0.getIndex());
      //  // Unstable assertion: assertEquals("java.text.ParsePosition[index=1362,errorIndex=-1]", parsePosition0.toString());
      //  // Unstable assertion: assertEquals((-1), parsePosition0.getErrorIndex());
      
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("0000-00-00T00:00", parsePosition0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(2347, "ylO-aNfPNT3");
      assertNotNull(simpleTimeZone0);
      assertEquals("ylO-aNfPNT3", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(2347, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=ylO-aNfPNT3,offset=2347,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      
      Locale locale0 = Locale.GERMANY;
      assertNotNull(locale0);
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0);
      assertNotNull(stdDateFormat0);
      assertEquals("ylO-aNfPNT3", simpleTimeZone0.getID());
      assertEquals(0, simpleTimeZone0.getDSTSavings());
      assertEquals(2347, simpleTimeZone0.getRawOffset());
      assertFalse(simpleTimeZone0.useDaylightTime());
      assertEquals("java.util.SimpleTimeZone[id=ylO-aNfPNT3,offset=2347,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
      assertEquals("DEU", locale0.getISO3Country());
      assertEquals("deu", locale0.getISO3Language());
      assertEquals("de_DE", locale0.toString());
      assertEquals("DE", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("de", locale0.getLanguage());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
      
      ParsePosition parsePosition0 = new ParsePosition(2347);
      assertNotNull(parsePosition0);
      assertEquals("java.text.ParsePosition[index=2347,errorIndex=-1]", parsePosition0.toString());
      assertEquals(2347, parsePosition0.getIndex());
      assertEquals((-1), parsePosition0.getErrorIndex());
      
      try { 
        stdDateFormat0.parseAsISO8601("yyyy-MM-dd'T'HH:mm:ss.SSSZ", parsePosition0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      assertNotNull(stdDateFormat0);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      
      boolean boolean0 = stdDateFormat0.equals(stdDateFormat0);
      assertTrue(boolean0);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "1H7RDf,c3[\\A`seTz[";
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "1H7RDf,c3[A`seTz[");
      Locale locale0 = Locale.GERMANY;
      Boolean boolean0 = Boolean.TRUE;
      ParsePosition parsePosition0 = new ParsePosition((-1));
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(simpleTimeZone0);
      StdDateFormat stdDateFormat2 = stdDateFormat1.clone();
      parsePosition0.setIndex(1);
      stdDateFormat2.parseObject("NIQ$#V|AZUBZp", parsePosition0);
      StdDateFormat.getISO8601Format(simpleTimeZone0, locale0);
      StdDateFormat stdDateFormat3 = stdDateFormat2.withLocale(locale0);
      stdDateFormat3.setTimeZone(simpleTimeZone0);
      Boolean.valueOf("");
      Boolean boolean1 = Boolean.TRUE;
      stdDateFormat1.withLenient(boolean1);
      DateFormat.getTimeInstance(1, locale0);
      stdDateFormat0._getCalendar(simpleTimeZone0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      stdDateFormat0.instance.toPattern();
      try { 
        stdDateFormat0.parse("0000-?)-00T00:00");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"0000-?)-00T00:00\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      MockDate mockDate0 = new MockDate((-1881), 580, (-927), (-1466), (-927));
      TimeZone timeZone0 = TimeZone.getTimeZone("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      Locale locale0 = Locale.forLanguageTag("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      StringBuffer stringBuffer0 = new StringBuffer(1954);
      stdDateFormat0._format(timeZone0, locale0, mockDate0, stringBuffer0);
      assertEquals("0064-08-14T06:33:00.000+0000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.GERMANY;
      MockDate mockDate0 = new MockDate(1, (-998), 0, 43, 1, (-998));
      Boolean boolean0 = Boolean.TRUE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0, true);
      String string0 = stdDateFormat0.format((Date) mockDate0);
      assertEquals("1817-11-01T18:44:22.000+00:00", string0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      DateFormat.getDateInstance();
      MockDate mockDate0 = new MockDate((-1466), (-1466), (-1466));
      stdDateFormat0.instance.format((Date) mockDate0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition((-67));
      Date date0 = stdDateFormat0.parse("00000000", parsePosition0);
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Boolean boolean0 = new Boolean("0000-00-00T00:00");
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, (Locale) null, boolean0);
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ParsePosition parsePosition0 = new ParsePosition(4);
      String string0 = "0000-00-00";
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Locale.forLanguageTag("0000-00-00");
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(false);
      ParsePosition parsePosition1 = new ParsePosition(4599);
      Date date0 = stdDateFormat0._parseAsISO8601("0000-00-00", parsePosition1);
      // Undeclared exception!
      try { 
        stdDateFormat1.instance._format((TimeZone) null, locale0, date0, (StringBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
      Boolean boolean0 = Boolean.valueOf(false);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
      stdDateFormat1.setLenient(false);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat1.isLenient());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.instance.withColonInTimeZone(false);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "yyyy-MM-dd'T'HH:mm:ss.SSSZ", 3, 0, 0, 3, 3, 0, 0, 0, 43);
      stdDateFormat1.setTimeZone(timeZone0);
      stdDateFormat0._clearFormats();
      StdDateFormat stdDateFormat2 = stdDateFormat0.withColonInTimeZone(false);
      boolean boolean0 = StdDateFormat._equals((DateFormat) stdDateFormat1, (DateFormat) stdDateFormat2);
      assertFalse(boolean0);
      assertSame(stdDateFormat2, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
      boolean boolean0 = stdDateFormat1.isColonIncludedInTimeZone();
      assertTrue(boolean0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone((TimeZone) null);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertNotSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      stdDateFormat0.hashCode();
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      Locale locale0 = Locale.FRANCE;
      Boolean boolean0 = Boolean.valueOf("}`.B_6YWHb)^");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      assertFalse(stdDateFormat0.isLenient());
      
      stdDateFormat0.setLenient(true);
      assertTrue(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      boolean boolean0 = stdDateFormat0.isColonIncludedInTimeZone();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(38, "udOC4l0=<:vtZ`ry`Y}");
      Locale locale0 = Locale.KOREA;
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)StdDateFormat.getRFC1123Format(simpleTimeZone0, locale0);
      assertEquals("EEE, dd MMM yyyy HH:mm:ss zzz", mockSimpleDateFormat0.toPattern());
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      try { 
        stdDateFormat0.parse("-");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Timestamp value - out of 64-bit value range
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-2274), " n9&}}[N*B7.eSa");
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0);
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
      String string0 = stdDateFormat0.toString();
      assertEquals("DateFormat com.fasterxml.jackson.databind.util.StdDateFormat: (timezone: null, locale: ko, lenient: null)", string0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      Boolean boolean0 = Boolean.TRUE;
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("0000-00-00");
       //  fail("Expecting exception: NullPointerException");
       // Unstable assertion
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }
}
