* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: com.fasterxml.jackson.databind.util.StdDateFormat
* Starting Client-0
* Connecting to master process on port 4184
* Analyzing classpath: 
  - subjects/buggy-versions/JacksonDatabind-104/target/classes
  - defects4j/framework/projects/JacksonDatabind/lib/com/fasterxml/jackson/core/jackson-annotations/2.9.0/jackson-annotations-2.9.0.jar
  - defects4j/framework/projects/JacksonDatabind/lib/com/fasterxml/jackson/core/jackson-core/2.9.8/jackson-core-2.9.8.jar
* Finished analyzing classpath
* Generating tests for class com.fasterxml.jackson.databind.util.StdDateFormat
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1396
* Using seed 2801706013
* Starting evolution
* Initial Number of Goals in DynaMOSA = 666 / 1396
[MASTER] 21:22:31.988 [logback-2] ERROR TestCluster - Failed to check cache for java.time.temporal.TemporalQuery<R> : Type points to itself
[MASTER] 21:25:33.605 [logback-2] ERROR TestCluster - Failed to check cache for java.util.List<E> : Type points to itself
* Search finished after 302s and 551 generations, 161239 statements, best individual has fitness: 191.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 84%
* Total number of goals: 234
* Number of covered goals: 196
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 82%
* Total number of goals: 146
* Number of covered goals: 120
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 97%
* Total number of goals: 29
* Number of covered goals: 28
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 95%
* Total number of goals: 714
* Number of covered goals: 677
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 57%
* Total number of goals: 90
* Number of covered goals: 51
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 146
* Number of covered goals: 120
* Generated 84 tests with total length 316
* Resulting test suite's coverage: 81% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 21:26:58.752 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7114666666666667% of time used, but only 39/84 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 24%
* Compiling and checking tests
[MASTER] 21:27:19.208 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:27:19.208 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = new StdDateFormat();
ParsePosition parsePosition0 = new ParsePosition(1411);
stdDateFormat0._parseDate("0000-00-00T00:00", parsePosition0);

[MASTER] 21:27:20.923 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:27:20.924 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertNotNull(stdDateFormat0);

ParsePosition parsePosition0 = new ParsePosition(57);
assertEquals(57, parsePosition0.getIndex());
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals("java.text.ParsePosition[index=57,errorIndex=-1]", parsePosition0.toString());
assertNotNull(parsePosition0);

stdDateFormat0._parseAsISO8601("0000-00-00T00:00", parsePosition0);

[MASTER] 21:27:21.862 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:27:21.862 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TimeZone timeZone0 = TimeZone.getDefault();
assertEquals("GMT", timeZone0.getID());
assertNotNull(timeZone0);

Locale locale0 = Locale.JAPANESE;
assertEquals("jpn", locale0.getISO3Language());
assertEquals("", locale0.getVariant());
assertEquals("", locale0.getISO3Country());
assertEquals("ja", locale0.toString());
assertEquals("", locale0.getCountry());
assertEquals("ja", locale0.getLanguage());
assertNotNull(locale0);

StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
assertEquals("GMT", timeZone0.getID());
assertEquals("jpn", locale0.getISO3Language());
assertEquals("", locale0.getVariant());
assertEquals("", locale0.getISO3Country());
assertEquals("ja", locale0.toString());
assertEquals("", locale0.getCountry());
assertEquals("ja", locale0.getLanguage());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());
assertNotNull(stdDateFormat0);

stdDateFormat0.parse("0000-00-00T00:00");

[MASTER] 21:27:22.248 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:27:22.248 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TimeZone timeZone0 = TimeZone.getDefault();
assertEquals("GMT", timeZone0.getID());
assertNotNull(timeZone0);

Locale locale0 = Locale.KOREA;
assertEquals("ko_KR", locale0.toString());
assertEquals("KR", locale0.getCountry());
assertEquals("ko", locale0.getLanguage());
assertEquals("kor", locale0.getISO3Language());
assertEquals("KOR", locale0.getISO3Country());
assertEquals("", locale0.getVariant());
assertNotNull(locale0);

StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
assertEquals("GMT", timeZone0.getID());
assertEquals("ko_KR", locale0.toString());
assertEquals("KR", locale0.getCountry());
assertEquals("ko", locale0.getLanguage());
assertEquals("kor", locale0.getISO3Language());
assertEquals("KOR", locale0.getISO3Country());
assertEquals("", locale0.getVariant());
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertNotNull(stdDateFormat0);

ParsePosition parsePosition0 = new ParsePosition(16);
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals(16, parsePosition0.getIndex());
assertEquals("java.text.ParsePosition[index=16,errorIndex=-1]", parsePosition0.toString());
assertNotNull(parsePosition0);

stdDateFormat0.parse("0000-00-00T00:00", parsePosition0);

[MASTER] 21:27:22.567 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:27:22.567 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertNotNull(stdDateFormat0);

ParsePosition parsePosition0 = new ParsePosition(2448);
assertEquals("java.text.ParsePosition[index=2448,errorIndex=-1]", parsePosition0.toString());
assertEquals(2448, parsePosition0.getIndex());
assertEquals((-1), parsePosition0.getErrorIndex());
assertNotNull(parsePosition0);

stdDateFormat0.instance.parseAsISO8601("0000-00-00T00:00", parsePosition0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 5
* Writing tests to file
* Writing JUnit test case 'StdDateFormat_ESTest' to results/JacksonDatabind-104/com.fasterxml.jackson.databind.util.StdDateFormat/BBC-F0/tests/3
* Done!

* Computation finished
