* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: com.fasterxml.jackson.databind.util.StdDateFormat
* Starting Client-0
* Connecting to master process on port 21478
* Analyzing classpath: 
  - subjects/buggy-versions/JacksonDatabind-104/target/classes
  - defects4j/framework/projects/JacksonDatabind/lib/com/fasterxml/jackson/core/jackson-annotations/2.9.0/jackson-annotations-2.9.0.jar
  - defects4j/framework/projects/JacksonDatabind/lib/com/fasterxml/jackson/core/jackson-core/2.9.8/jackson-core-2.9.8.jar
* Finished analyzing classpath
* Generating tests for class com.fasterxml.jackson.databind.util.StdDateFormat
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1396
* Using seed 112782461
* Starting evolution
* Initial Number of Goals in DynaMOSA = 666 / 1396
[MASTER] 21:23:42.841 [logback-2] ERROR TestCluster - Failed to check cache for java.time.temporal.TemporalQuery<R> : Type points to itself
[MASTER] 21:24:50.766 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 302s and 637 generations, 163328 statements, best individual has fitness: 195.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 84%
* Total number of goals: 234
* Number of covered goals: 196
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 82%
* Total number of goals: 146
* Number of covered goals: 120
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 29
* Number of covered goals: 29
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 94%
* Total number of goals: 714
* Number of covered goals: 673
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 58%
* Total number of goals: 90
* Number of covered goals: 52
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 146
* Number of covered goals: 120
* Generated 72 tests with total length 329
* Resulting test suite's coverage: 82% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 21:29:24.177 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.8760333333333333% of time used, but only 20/72 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 18%
* Compiling and checking tests
[MASTER] 21:29:50.759 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NullPointerException
[MASTER] 21:29:50.759 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = new StdDateFormat();
DateFormat.getDateInstance();
MockDate mockDate0 = new MockDate((-1466), (-1466), (-1466));
stdDateFormat0.instance.format((Date) mockDate0);

[MASTER] 21:29:51.858 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NullPointerException
[MASTER] 21:29:51.859 [logback-1] WARN  JUnitAnalyzer - Failing test:
 String string0 = "1H7RDf,c3[\\A`seTz[";
SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "1H7RDf,c3[A`seTz[");
Locale locale0 = Locale.GERMANY;
Boolean boolean0 = Boolean.TRUE;
ParsePosition parsePosition0 = new ParsePosition((-1));
StdDateFormat stdDateFormat0 = StdDateFormat.instance;
StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(simpleTimeZone0);
StdDateFormat stdDateFormat2 = stdDateFormat1.clone();
parsePosition0.setIndex(1);
stdDateFormat2.parseObject("NIQ$#V|AZUBZp", parsePosition0);
StdDateFormat.getISO8601Format(simpleTimeZone0, locale0);
StdDateFormat stdDateFormat3 = stdDateFormat2.withLocale(locale0);
stdDateFormat3.setTimeZone(simpleTimeZone0);
Boolean.valueOf("");
Boolean boolean1 = Boolean.TRUE;
stdDateFormat1.withLenient(boolean1);
DateFormat.getTimeInstance(1, locale0);
stdDateFormat0._getCalendar(simpleTimeZone0);

[MASTER] 21:29:52.576 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:29:52.576 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
assertNotNull(stdDateFormat0);
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());

ParsePosition parsePosition0 = new ParsePosition(1362);
assertNotNull(parsePosition0);
assertEquals(1362, parsePosition0.getIndex());
assertEquals("java.text.ParsePosition[index=1362,errorIndex=-1]", parsePosition0.toString());
assertEquals((-1), parsePosition0.getErrorIndex());

stdDateFormat0.parse("0000-00-00T00:00", parsePosition0);

[MASTER] 21:29:54.425 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...gorianCalendar[time=[?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id="UTC",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]]> but was:<...gorianCalendar[time=[1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id="UTC",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]]>
[MASTER] 21:29:54.525 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
assertNotNull(zoneInfo0);
assertEquals("UTC", zoneInfo0.getID());

Locale locale0 = Locale.GERMANY;
assertNotNull(locale0);
assertEquals("DEU", locale0.getISO3Country());
assertEquals("DE", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("de", locale0.getLanguage());
assertEquals("deu", locale0.getISO3Language());
assertEquals("de_DE", locale0.toString());

Locale locale1 = locale0.stripExtensions();
assertNotNull(locale1);
assertEquals("DEU", locale0.getISO3Country());
assertEquals("DE", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("de", locale0.getLanguage());
assertEquals("deu", locale0.getISO3Language());
assertEquals("de_DE", locale0.toString());
assertEquals("DE", locale1.getCountry());
assertEquals("deu", locale1.getISO3Language());
assertEquals("de_DE", locale1.toString());
assertEquals("de", locale1.getLanguage());
assertEquals("DEU", locale1.getISO3Country());
assertEquals("", locale1.getVariant());
assertSame(locale0, locale1);
assertSame(locale1, locale0);

StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0);
assertNotNull(stdDateFormat0);
assertEquals("UTC", zoneInfo0.getID());
assertEquals("DEU", locale0.getISO3Country());
assertEquals("DE", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("de", locale0.getLanguage());
assertEquals("deu", locale0.getISO3Language());
assertEquals("de_DE", locale0.toString());
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());

StdDateFormat stdDateFormat1 = stdDateFormat0.clone();
assertNotNull(stdDateFormat1);
assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
assertEquals("UTC", zoneInfo0.getID());
assertEquals("DEU", locale0.getISO3Country());
assertEquals("DE", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("de", locale0.getLanguage());
assertEquals("deu", locale0.getISO3Language());
assertEquals("de_DE", locale0.toString());
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat1.isLenient());
assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
assertSame(locale0, locale1);
assertNotSame(stdDateFormat0, stdDateFormat1);
assertNotSame(stdDateFormat1, stdDateFormat0);

MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)StdDateFormat.getISO8601Format(zoneInfo0, locale1);
assertNotNull(mockSimpleDateFormat0);
assertEquals("UTC", zoneInfo0.getID());
assertEquals("DEU", locale0.getISO3Country());
assertEquals("DE", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("de", locale0.getLanguage());
assertEquals("deu", locale0.getISO3Language());
assertEquals("de_DE", locale0.toString());
assertEquals("DE", locale1.getCountry());
assertEquals("deu", locale1.getISO3Language());
assertEquals("de_DE", locale1.toString());
assertEquals("de", locale1.getLanguage());
assertEquals("DEU", locale1.getISO3Country());
assertEquals("", locale1.getVariant());
assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSZ", mockSimpleDateFormat0.toPattern());
assertTrue(mockSimpleDateFormat0.isLenient());
assertEquals("uuuu-MM-tt'T'HH:mm:ss.SSSZ", mockSimpleDateFormat0.toLocalizedPattern());
assertSame(locale0, locale1);
assertSame(locale1, locale0);

stdDateFormat1.instance.setTimeZone(zoneInfo0);
assertFalse(stdDateFormat0.equals((Object)stdDateFormat1));
assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
assertEquals("UTC", zoneInfo0.getID());
assertEquals("DEU", locale0.getISO3Country());
assertEquals("DE", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("de", locale0.getLanguage());
assertEquals("deu", locale0.getISO3Language());
assertEquals("de_DE", locale0.toString());
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat1.isLenient());
assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
assertSame(locale0, locale1);
assertNotSame(stdDateFormat0, stdDateFormat1);
assertNotSame(stdDateFormat1, stdDateFormat0);

Boolean boolean0 = Boolean.valueOf("");
assertFalse(boolean0);
assertNotNull(boolean0);

StdDateFormat stdDateFormat2 = stdDateFormat1.withLenient(boolean0);
assertNotNull(stdDateFormat2);
assertFalse(stdDateFormat0.equals((Object)stdDateFormat1));
assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
assertFalse(stdDateFormat2.equals((Object)stdDateFormat1));
assertFalse(stdDateFormat2.equals((Object)stdDateFormat0));
assertEquals("UTC", zoneInfo0.getID());
assertEquals("DEU", locale0.getISO3Country());
assertEquals("DE", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("de", locale0.getLanguage());
assertEquals("deu", locale0.getISO3Language());
assertEquals("de_DE", locale0.toString());
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat1.isLenient());
assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
assertFalse(stdDateFormat2.isLenient());
assertFalse(stdDateFormat2.isColonIncludedInTimeZone());
assertSame(locale0, locale1);
assertNotSame(stdDateFormat0, stdDateFormat2);
assertNotSame(stdDateFormat0, stdDateFormat1);
assertNotSame(stdDateFormat1, stdDateFormat0);
assertNotSame(stdDateFormat1, stdDateFormat2);
assertNotSame(stdDateFormat2, stdDateFormat1);
assertNotSame(stdDateFormat2, stdDateFormat0);

MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)stdDateFormat0.instance._getCalendar(zoneInfo0);
assertNotNull(mockGregorianCalendar0);
assertFalse(stdDateFormat0.equals((Object)stdDateFormat2));
assertFalse(stdDateFormat0.equals((Object)stdDateFormat1));
assertEquals("UTC", zoneInfo0.getID());
assertEquals("DEU", locale0.getISO3Country());
assertEquals("DE", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("de", locale0.getLanguage());
assertEquals("deu", locale0.getISO3Language());
assertEquals("de_DE", locale0.toString());
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertEquals(1, mockGregorianCalendar0.getMinimalDaysInFirstWeek());
assertTrue(mockGregorianCalendar0.isLenient());
assertEquals(1, mockGregorianCalendar0.getFirstDayOfWeek());
assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
assertSame(locale0, locale1);
assertNotSame(stdDateFormat0, stdDateFormat2);
assertNotSame(stdDateFormat0, stdDateFormat1);

String string0 = stdDateFormat0.toPattern();
assertEquals("[one of: 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', 'EEE, dd MMM yyyy HH:mm:ss zzz' (lenient)]", string0);
assertNotNull(string0);
assertFalse(stdDateFormat0.equals((Object)stdDateFormat2));
assertFalse(stdDateFormat0.equals((Object)stdDateFormat1));
assertEquals("UTC", zoneInfo0.getID());
assertEquals("DEU", locale0.getISO3Country());
assertEquals("DE", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("de", locale0.getLanguage());
assertEquals("deu", locale0.getISO3Language());
assertEquals("de_DE", locale0.toString());
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertSame(locale0, locale1);
assertNotSame(stdDateFormat0, stdDateFormat2);
assertNotSame(stdDateFormat0, stdDateFormat1);

stdDateFormat1._clearFormats();
assertFalse(stdDateFormat0.equals((Object)stdDateFormat2));
assertFalse(stdDateFormat0.equals((Object)stdDateFormat1));
assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
assertFalse(stdDateFormat1.equals((Object)stdDateFormat2));
assertEquals("UTC", zoneInfo0.getID());
assertEquals("DEU", locale0.getISO3Country());
assertEquals("DE", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("de", locale0.getLanguage());
assertEquals("deu", locale0.getISO3Language());
assertEquals("de_DE", locale0.toString());
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat1.isLenient());
assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
assertSame(locale0, locale1);
assertNotSame(stdDateFormat0, stdDateFormat2);
assertNotSame(stdDateFormat0, stdDateFormat1);
assertNotSame(stdDateFormat1, stdDateFormat0);
assertNotSame(stdDateFormat1, stdDateFormat2);

stdDateFormat2.setTimeZone(zoneInfo0);
assertFalse(stdDateFormat0.equals((Object)stdDateFormat2));
assertFalse(stdDateFormat0.equals((Object)stdDateFormat1));
assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
assertFalse(stdDateFormat1.equals((Object)stdDateFormat2));
assertFalse(stdDateFormat2.equals((Object)stdDateFormat1));
assertFalse(stdDateFormat2.equals((Object)stdDateFormat0));
assertEquals("UTC", zoneInfo0.getID());
assertEquals("DEU", locale0.getISO3Country());
assertEquals("DE", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("de", locale0.getLanguage());
assertEquals("deu", locale0.getISO3Language());
assertEquals("de_DE", locale0.toString());
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat1.isLenient());
assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
assertFalse(stdDateFormat2.isLenient());
assertFalse(stdDateFormat2.isColonIncludedInTimeZone());
assertSame(locale0, locale1);
assertNotSame(stdDateFormat0, stdDateFormat2);
assertNotSame(stdDateFormat0, stdDateFormat1);
assertNotSame(stdDateFormat1, stdDateFormat0);
assertNotSame(stdDateFormat1, stdDateFormat2);
assertNotSame(stdDateFormat2, stdDateFormat1);
assertNotSame(stdDateFormat2, stdDateFormat0);

stdDateFormat1._clearFormats();
assertFalse(stdDateFormat0.equals((Object)stdDateFormat2));
assertFalse(stdDateFormat0.equals((Object)stdDateFormat1));
assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
assertFalse(stdDateFormat1.equals((Object)stdDateFormat2));
assertEquals("UTC", zoneInfo0.getID());
assertEquals("DEU", locale0.getISO3Country());
assertEquals("DE", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("de", locale0.getLanguage());
assertEquals("deu", locale0.getISO3Language());
assertEquals("de_DE", locale0.toString());
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat1.isLenient());
assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
assertSame(locale0, locale1);
assertNotSame(stdDateFormat0, stdDateFormat2);
assertNotSame(stdDateFormat0, stdDateFormat1);
assertNotSame(stdDateFormat1, stdDateFormat0);
assertNotSame(stdDateFormat1, stdDateFormat2);

StdDateFormat stdDateFormat3 = stdDateFormat2.withColonInTimeZone(true);
assertNotNull(stdDateFormat3);
assertFalse(stdDateFormat0.equals((Object)stdDateFormat2));
assertFalse(stdDateFormat0.equals((Object)stdDateFormat1));
assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
assertFalse(stdDateFormat1.equals((Object)stdDateFormat2));
assertFalse(stdDateFormat2.equals((Object)stdDateFormat1));
assertFalse(stdDateFormat2.equals((Object)stdDateFormat0));
assertFalse(stdDateFormat3.equals((Object)stdDateFormat1));
assertFalse(stdDateFormat3.equals((Object)stdDateFormat2));
assertFalse(stdDateFormat3.equals((Object)stdDateFormat0));
assertEquals("UTC", zoneInfo0.getID());
assertEquals("DEU", locale0.getISO3Country());
assertEquals("DE", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("de", locale0.getLanguage());
assertEquals("deu", locale0.getISO3Language());
assertEquals("de_DE", locale0.toString());
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat1.isLenient());
assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
assertFalse(stdDateFormat2.isLenient());
assertFalse(stdDateFormat2.isColonIncludedInTimeZone());
assertFalse(stdDateFormat3.isLenient());
assertTrue(stdDateFormat3.isColonIncludedInTimeZone());
assertSame(locale0, locale1);
assertNotSame(stdDateFormat0, stdDateFormat2);
assertNotSame(stdDateFormat0, stdDateFormat3);
assertNotSame(stdDateFormat0, stdDateFormat1);
assertNotSame(stdDateFormat1, stdDateFormat3);
assertNotSame(stdDateFormat1, stdDateFormat0);
assertNotSame(stdDateFormat1, stdDateFormat2);
assertNotSame(stdDateFormat2, stdDateFormat1);
assertNotSame(stdDateFormat2, stdDateFormat3);
assertNotSame(stdDateFormat2, stdDateFormat0);
assertNotSame(stdDateFormat3, stdDateFormat1);
assertNotSame(stdDateFormat3, stdDateFormat2);
assertNotSame(stdDateFormat3, stdDateFormat0);

boolean boolean1 = StdDateFormat._equals((DateFormat) mockSimpleDateFormat0, (DateFormat) mockSimpleDateFormat0);
assertTrue(boolean1);
assertEquals("UTC", zoneInfo0.getID());
assertEquals("DEU", locale0.getISO3Country());
assertEquals("DE", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("de", locale0.getLanguage());
assertEquals("deu", locale0.getISO3Language());
assertEquals("de_DE", locale0.toString());
assertEquals("DE", locale1.getCountry());
assertEquals("deu", locale1.getISO3Language());
assertEquals("de_DE", locale1.toString());
assertEquals("de", locale1.getLanguage());
assertEquals("DEU", locale1.getISO3Country());
assertEquals("", locale1.getVariant());
assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSZ", mockSimpleDateFormat0.toPattern());
assertTrue(mockSimpleDateFormat0.isLenient());
assertEquals("uuuu-MM-tt'T'HH:mm:ss.SSSZ", mockSimpleDateFormat0.toLocalizedPattern());
assertSame(locale0, locale1);
assertSame(locale1, locale0);


[MASTER] 21:29:54.708 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:29:54.709 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
assertNotNull(stdDateFormat0);
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());

ParsePosition parsePosition0 = new ParsePosition(0);
assertNotNull(parsePosition0);
assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
assertEquals(0, parsePosition0.getIndex());
assertEquals((-1), parsePosition0.getErrorIndex());

stdDateFormat0._parseAsISO8601("0000-00-00T00:00", parsePosition0);

[MASTER] 21:29:55.549 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:29:55.550 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
assertNotNull(stdDateFormat0);
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());

ParsePosition parsePosition0 = new ParsePosition(1362);
assertNotNull(parsePosition0);
assertEquals(1362, parsePosition0.getIndex());
assertEquals("java.text.ParsePosition[index=1362,errorIndex=-1]", parsePosition0.toString());
assertEquals((-1), parsePosition0.getErrorIndex());

stdDateFormat0._parseDate("0000-00-00T00:00", parsePosition0);

[MASTER] 21:29:56.132 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: ParseException
[MASTER] 21:29:56.132 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = new StdDateFormat();
assertNotNull(stdDateFormat0);
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());

ParsePosition parsePosition0 = new ParsePosition((-7));
assertNotNull(parsePosition0);
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals("java.text.ParsePosition[index=-7,errorIndex=-1]", parsePosition0.toString());
assertEquals((-7), parsePosition0.getIndex());

stdDateFormat0._parseDate("1970-01-01T00:00:00.000+0000", parsePosition0);

[MASTER] 21:29:57.285 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:29:57.285 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
assertNotNull(timeZone0);
assertEquals("UTC", timeZone0.getID());

Locale locale0 = Locale.FRANCE;
assertNotNull(locale0);
assertEquals("fr_FR", locale0.toString());
assertEquals("", locale0.getVariant());
assertEquals("fra", locale0.getISO3Language());
assertEquals("fr", locale0.getLanguage());
assertEquals("FRA", locale0.getISO3Country());
assertEquals("FR", locale0.getCountry());

Boolean boolean0 = Boolean.valueOf("");
assertFalse(boolean0);
assertNotNull(boolean0);

StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
assertNotNull(stdDateFormat0);
assertEquals("UTC", timeZone0.getID());
assertEquals("fr_FR", locale0.toString());
assertEquals("", locale0.getVariant());
assertEquals("fra", locale0.getISO3Language());
assertEquals("fr", locale0.getLanguage());
assertEquals("FRA", locale0.getISO3Country());
assertEquals("FR", locale0.getCountry());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertFalse(stdDateFormat0.isLenient());

stdDateFormat0.parse("0000-00-00T00:00");

[MASTER] 21:29:57.857 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:29:57.859 [logback-1] WARN  JUnitAnalyzer - Failing test:
 SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "84GF{(*rg");
assertNotNull(simpleTimeZone0);
assertEquals(0, simpleTimeZone0.getDSTSavings());
assertEquals("84GF{(*rg", simpleTimeZone0.getID());
assertEquals("java.util.SimpleTimeZone[id=84GF{(*rg,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
assertFalse(simpleTimeZone0.useDaylightTime());
assertEquals(0, simpleTimeZone0.getRawOffset());

Locale locale0 = Locale.FRANCE;
assertNotNull(locale0);
assertEquals("FRA", locale0.getISO3Country());
assertEquals("", locale0.getVariant());
assertEquals("fra", locale0.getISO3Language());
assertEquals("FR", locale0.getCountry());
assertEquals("fr_FR", locale0.toString());
assertEquals("fr", locale0.getLanguage());

StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0);
assertNotNull(stdDateFormat0);
assertEquals(0, simpleTimeZone0.getDSTSavings());
assertEquals("84GF{(*rg", simpleTimeZone0.getID());
assertEquals("java.util.SimpleTimeZone[id=84GF{(*rg,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
assertFalse(simpleTimeZone0.useDaylightTime());
assertEquals(0, simpleTimeZone0.getRawOffset());
assertEquals("FRA", locale0.getISO3Country());
assertEquals("", locale0.getVariant());
assertEquals("fra", locale0.getISO3Language());
assertEquals("FR", locale0.getCountry());
assertEquals("fr_FR", locale0.toString());
assertEquals("fr", locale0.getLanguage());
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());

ParsePosition parsePosition0 = new ParsePosition(0);
assertNotNull(parsePosition0);
assertEquals(0, parsePosition0.getIndex());
assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
assertEquals((-1), parsePosition0.getErrorIndex());

stdDateFormat0.parseAsISO8601("0000-00-00T00:00", parsePosition0);

[MASTER] 21:29:59.523 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...gorianCalendar[time=[?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=yyyy-MM-dd,offset=3509,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]]> but was:<...gorianCalendar[time=[1392409281320,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=yyyy-MM-dd,offset=3509,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]]>
[MASTER] 21:29:59.524 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
assertNotNull(stdDateFormat0);
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());

SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3509, "yyyy-MM-dd");
assertNotNull(simpleTimeZone0);
assertEquals("java.util.SimpleTimeZone[id=yyyy-MM-dd,offset=3509,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
assertFalse(simpleTimeZone0.useDaylightTime());
assertEquals("yyyy-MM-dd", simpleTimeZone0.getID());
assertEquals(3509, simpleTimeZone0.getRawOffset());
assertEquals(0, simpleTimeZone0.getDSTSavings());

Calendar calendar0 = stdDateFormat0._getCalendar(simpleTimeZone0);
assertNotNull(calendar0);
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());
assertEquals("java.util.SimpleTimeZone[id=yyyy-MM-dd,offset=3509,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
assertFalse(simpleTimeZone0.useDaylightTime());
assertEquals("yyyy-MM-dd", simpleTimeZone0.getID());
assertEquals(3509, simpleTimeZone0.getRawOffset());
assertEquals(0, simpleTimeZone0.getDSTSavings());
assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
assertEquals(1, calendar0.getFirstDayOfWeek());
assertTrue(calendar0.isLenient());
assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=java.util.SimpleTimeZone[id=yyyy-MM-dd,offset=3509,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());


[MASTER] 21:30:08.626 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test71 -> class java.lang.AssertionError: Expecting exception: NullPointerException
[MASTER] 21:30:08.627 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
Boolean boolean0 = Boolean.TRUE;
stdDateFormat0.parse("0000-00-00");

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 4
* Writing tests to file
* Writing JUnit test case 'StdDateFormat_ESTest' to results/JacksonDatabind-104/com.fasterxml.jackson.databind.util.StdDateFormat/BBC-F0/tests/16
* Done!

* Computation finished
