* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: com.fasterxml.jackson.databind.util.StdDateFormat
* Starting Client-0
* Connecting to master process on port 11780
* Analyzing classpath: 
  - subjects/buggy-versions/JacksonDatabind-104/target/classes
  - defects4j/framework/projects/JacksonDatabind/lib/com/fasterxml/jackson/core/jackson-annotations/2.9.0/jackson-annotations-2.9.0.jar
  - defects4j/framework/projects/JacksonDatabind/lib/com/fasterxml/jackson/core/jackson-core/2.9.8/jackson-core-2.9.8.jar
* Finished analyzing classpath
* Generating tests for class com.fasterxml.jackson.databind.util.StdDateFormat
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1396
* Using seed 2127462234
* Starting evolution
* Initial Number of Goals in DynaMOSA = 666 / 1396
* Search finished after 302s and 579 generations, 158765 statements, best individual has fitness: 205.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 83%
* Total number of goals: 234
* Number of covered goals: 194
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 82%
* Total number of goals: 146
* Number of covered goals: 119
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 97%
* Total number of goals: 29
* Number of covered goals: 28
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 94%
* Total number of goals: 714
* Number of covered goals: 670
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 58%
* Total number of goals: 90
* Number of covered goals: 52
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 146
* Number of covered goals: 119
* Generated 83 tests with total length 327
* Resulting test suite's coverage: 81% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 21:29:13.088 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.67195% of time used, but only 31/83 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 28%
* Compiling and checking tests
[MASTER] 21:29:44.008 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:29:44.009 [logback-1] WARN  JUnitAnalyzer - Failing test:
 SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, ")]");
assertEquals(10, simpleTimeZone0.getRawOffset());
assertEquals("java.util.SimpleTimeZone[id=)],offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
assertEquals(0, simpleTimeZone0.getDSTSavings());
assertFalse(simpleTimeZone0.useDaylightTime());
assertEquals(")]", simpleTimeZone0.getID());
assertNotNull(simpleTimeZone0);

Locale locale0 = Locale.CHINESE;
assertEquals("", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("zh", locale0.getLanguage());
assertEquals("zho", locale0.getISO3Language());
assertEquals("", locale0.getISO3Country());
assertEquals("zh", locale0.toString());
assertNotNull(locale0);

StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0);
assertEquals(10, simpleTimeZone0.getRawOffset());
assertEquals("java.util.SimpleTimeZone[id=)],offset=10,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
assertEquals(0, simpleTimeZone0.getDSTSavings());
assertFalse(simpleTimeZone0.useDaylightTime());
assertEquals(")]", simpleTimeZone0.getID());
assertEquals("", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("zh", locale0.getLanguage());
assertEquals("zho", locale0.getISO3Language());
assertEquals("", locale0.getISO3Country());
assertEquals("zh", locale0.toString());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());
assertNotNull(stdDateFormat0);

ParsePosition parsePosition0 = new ParsePosition(9);
assertEquals(9, parsePosition0.getIndex());
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals("java.text.ParsePosition[index=9,errorIndex=-1]", parsePosition0.toString());
assertNotNull(parsePosition0);

stdDateFormat0._parseDate("0000-00-00T00:00", parsePosition0);

[MASTER] 21:29:46.260 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:29:46.260 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Locale locale0 = Locale.KOREA;
assertEquals("ko_KR", locale0.toString());
assertEquals("KR", locale0.getCountry());
assertEquals("KOR", locale0.getISO3Country());
assertEquals("ko", locale0.getLanguage());
assertEquals("", locale0.getVariant());
assertEquals("kor", locale0.getISO3Language());
assertNotNull(locale0);

StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
assertEquals("ko_KR", locale0.toString());
assertEquals("KR", locale0.getCountry());
assertEquals("KOR", locale0.getISO3Country());
assertEquals("ko", locale0.getLanguage());
assertEquals("", locale0.getVariant());
assertEquals("kor", locale0.getISO3Language());
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertNotNull(stdDateFormat0);

ParsePosition parsePosition0 = new ParsePosition(881);
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals("java.text.ParsePosition[index=881,errorIndex=-1]", parsePosition0.toString());
assertEquals(881, parsePosition0.getIndex());
assertNotNull(parsePosition0);

stdDateFormat0._parseAsISO8601("0000-00-00T00:00", parsePosition0);

[MASTER] 21:29:47.478 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: ParseException
[MASTER] 21:29:47.478 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Locale locale0 = Locale.KOREA;
assertEquals("KR", locale0.getCountry());
assertEquals("ko_KR", locale0.toString());
assertEquals("", locale0.getVariant());
assertEquals("kor", locale0.getISO3Language());
assertEquals("KOR", locale0.getISO3Country());
assertEquals("ko", locale0.getLanguage());
assertNotNull(locale0);

StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
assertEquals("KR", locale0.getCountry());
assertEquals("ko_KR", locale0.toString());
assertEquals("", locale0.getVariant());
assertEquals("kor", locale0.getISO3Language());
assertEquals("KOR", locale0.getISO3Country());
assertEquals("ko", locale0.getLanguage());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());
assertNotNull(stdDateFormat0);

ParsePosition parsePosition0 = new ParsePosition(63);
assertEquals(63, parsePosition0.getIndex());
assertEquals("java.text.ParsePosition[index=63,errorIndex=-1]", parsePosition0.toString());
assertEquals((-1), parsePosition0.getErrorIndex());
assertNotNull(parsePosition0);

stdDateFormat0._parseDate("2014-02-14T20:21:21.320+0000", parsePosition0);

[MASTER] 21:29:48.378 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:29:48.378 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());
assertNotNull(stdDateFormat0);

stdDateFormat0.instance.parse("0000-00-00T00:00");

[MASTER] 21:29:49.042 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:29:49.042 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Locale locale0 = Locale.KOREA;
assertEquals("ko", locale0.getLanguage());
assertEquals("ko_KR", locale0.toString());
assertEquals("", locale0.getVariant());
assertEquals("KOR", locale0.getISO3Country());
assertEquals("kor", locale0.getISO3Language());
assertEquals("KR", locale0.getCountry());
assertNotNull(locale0);

StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
assertEquals("ko", locale0.getLanguage());
assertEquals("ko_KR", locale0.toString());
assertEquals("", locale0.getVariant());
assertEquals("KOR", locale0.getISO3Country());
assertEquals("kor", locale0.getISO3Language());
assertEquals("KR", locale0.getCountry());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());
assertNotNull(stdDateFormat0);

ParsePosition parsePosition0 = new ParsePosition(445);
assertEquals("java.text.ParsePosition[index=445,errorIndex=-1]", parsePosition0.toString());
assertEquals(445, parsePosition0.getIndex());
assertEquals((-1), parsePosition0.getErrorIndex());
assertNotNull(parsePosition0);

stdDateFormat0.parse("0000-00-00T00:00", parsePosition0);

[MASTER] 21:29:49.414 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:29:49.415 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());
assertNotNull(stdDateFormat0);

ParsePosition parsePosition0 = new ParsePosition(2384);
assertEquals("java.text.ParsePosition[index=2384,errorIndex=-1]", parsePosition0.toString());
assertEquals(2384, parsePosition0.getIndex());
assertEquals((-1), parsePosition0.getErrorIndex());
assertNotNull(parsePosition0);

stdDateFormat0.parseAsISO8601("0000-00-00T00:00", parsePosition0);

[MASTER] 21:29:50.989 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...gorianCalendar[time=[?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id="UTC",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]]> but was:<...gorianCalendar[time=[1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id="UTC",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]]>
[MASTER] 21:29:50.990 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
assertEquals("UTC", zoneInfo0.getID());
assertNotNull(zoneInfo0);

Locale locale0 = Locale.CHINA;
assertEquals("", locale0.getVariant());
assertEquals("CHN", locale0.getISO3Country());
assertEquals("zho", locale0.getISO3Language());
assertEquals("zh_CN", locale0.toString());
assertEquals("CN", locale0.getCountry());
assertEquals("zh", locale0.getLanguage());
assertNotNull(locale0);

Boolean boolean0 = Boolean.FALSE;
assertNotNull(boolean0);
assertFalse(boolean0);

StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0);
assertEquals("UTC", zoneInfo0.getID());
assertEquals("", locale0.getVariant());
assertEquals("CHN", locale0.getISO3Country());
assertEquals("zho", locale0.getISO3Language());
assertEquals("zh_CN", locale0.toString());
assertEquals("CN", locale0.getCountry());
assertEquals("zh", locale0.getLanguage());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertFalse(stdDateFormat0.isLenient());
assertNotNull(stdDateFormat0);

Calendar calendar0 = stdDateFormat0.instance._getCalendar(zoneInfo0);
assertEquals("UTC", zoneInfo0.getID());
assertEquals("", locale0.getVariant());
assertEquals("CHN", locale0.getISO3Country());
assertEquals("zho", locale0.getISO3Language());
assertEquals("zh_CN", locale0.toString());
assertEquals("CN", locale0.getCountry());
assertEquals("zh", locale0.getLanguage());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertFalse(stdDateFormat0.isLenient());
assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
assertEquals(1, calendar0.getFirstDayOfWeek());
assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
assertTrue(calendar0.isLenient());
assertNotNull(calendar0);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'StdDateFormat_ESTest' to results/JacksonDatabind-104/com.fasterxml.jackson.databind.util.StdDateFormat/BBC-F0/tests/15
* Done!

* Computation finished
