* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: com.fasterxml.jackson.databind.util.StdDateFormat
* Starting Client-0
* Connecting to master process on port 16947
* Analyzing classpath: 
  - subjects/buggy-versions/JacksonDatabind-104/target/classes
  - defects4j/framework/projects/JacksonDatabind/lib/com/fasterxml/jackson/core/jackson-annotations/2.9.0/jackson-annotations-2.9.0.jar
  - defects4j/framework/projects/JacksonDatabind/lib/com/fasterxml/jackson/core/jackson-core/2.9.8/jackson-core-2.9.8.jar
* Finished analyzing classpath
* Generating tests for class com.fasterxml.jackson.databind.util.StdDateFormat
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1396
* Using seed 3782833170
* Starting evolution
* Initial Number of Goals in DynaMOSA = 666 / 1396
[MASTER] 21:23:34.224 [logback-2] ERROR TestCluster - Failed to check cache for java.time.temporal.TemporalQuery<R> : Type points to itself
* Search finished after 302s and 525 generations, 165086 statements, best individual has fitness: 186.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 84%
* Total number of goals: 234
* Number of covered goals: 196
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 83%
* Total number of goals: 146
* Number of covered goals: 121
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 29
* Number of covered goals: 29
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 95%
* Total number of goals: 714
* Number of covered goals: 679
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 60%
* Total number of goals: 90
* Number of covered goals: 54
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 146
* Number of covered goals: 121
* Generated 82 tests with total length 355
* Resulting test suite's coverage: 82% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 21:27:41.371 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7279333333333333% of time used, but only 22/82 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 23%
* Compiling and checking tests
[MASTER] 21:28:04.617 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[Wed Feb 08 00:00:00 GMT 1612]> but was:<[Fri Feb 14 20:21:21 GMT 2014]>
[MASTER] 21:28:04.618 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
Date date0 = stdDateFormat0.parse("0700-00-00");
assertEquals("Wed Feb 08 00:00:00 GMT 1612", date0.toString());


[MASTER] 21:28:06.449 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:28:06.450 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertNotNull(stdDateFormat0);

stdDateFormat0.parse("0000-00-00T00:00");

[MASTER] 21:28:07.967 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:28:07.968 [logback-1] WARN  JUnitAnalyzer - Failing test:
 SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "com.fasterxml.jackson.databind.util.StdDateFormat", 1, 1, 1, 1, 1, 1, 1, 1, 1);
assertEquals("java.util.SimpleTimeZone[id=com.fasterxml.jackson.databind.util.StdDateFormat,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
assertEquals("com.fasterxml.jackson.databind.util.StdDateFormat", simpleTimeZone0.getID());
assertTrue(simpleTimeZone0.useDaylightTime());
assertEquals(1, simpleTimeZone0.getRawOffset());
assertEquals(1, simpleTimeZone0.getDSTSavings());
assertNotNull(simpleTimeZone0);

Locale locale0 = Locale.TAIWAN;
assertEquals("TW", locale0.getCountry());
assertEquals("zho", locale0.getISO3Language());
assertEquals("zh_TW", locale0.toString());
assertEquals("TWN", locale0.getISO3Country());
assertEquals("", locale0.getVariant());
assertEquals("zh", locale0.getLanguage());
assertNotNull(locale0);

Boolean boolean0 = Boolean.valueOf("`&u9=");
assertNotNull(boolean0);
assertFalse(boolean0);

StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, false);
assertEquals("java.util.SimpleTimeZone[id=com.fasterxml.jackson.databind.util.StdDateFormat,offset=1,dstSavings=1,useDaylight=true,startYear=0,startMode=2,startMonth=1,startDay=1,startDayOfWeek=1,startTime=1,startTimeMode=0,endMode=2,endMonth=1,endDay=1,endDayOfWeek=1,endTime=1,endTimeMode=0]", simpleTimeZone0.toString());
assertEquals("com.fasterxml.jackson.databind.util.StdDateFormat", simpleTimeZone0.getID());
assertTrue(simpleTimeZone0.useDaylightTime());
assertEquals(1, simpleTimeZone0.getRawOffset());
assertEquals(1, simpleTimeZone0.getDSTSavings());
assertEquals("TW", locale0.getCountry());
assertEquals("zho", locale0.getISO3Language());
assertEquals("zh_TW", locale0.toString());
assertEquals("TWN", locale0.getISO3Country());
assertEquals("", locale0.getVariant());
assertEquals("zh", locale0.getLanguage());
assertFalse(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertNotNull(stdDateFormat0);

ParsePosition parsePosition0 = new ParsePosition(512);
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals(512, parsePosition0.getIndex());
assertEquals("java.text.ParsePosition[index=512,errorIndex=-1]", parsePosition0.toString());
assertNotNull(parsePosition0);

stdDateFormat0._parseAsISO8601("0000-00-00T00:00", parsePosition0);

[MASTER] 21:28:08.480 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:28:08.482 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
assertEquals("UTC", timeZone0.getID());
assertNotNull(timeZone0);

Locale locale0 = Locale.PRC;
assertEquals("zh_CN", locale0.toString());
assertEquals("", locale0.getVariant());
assertEquals("zho", locale0.getISO3Language());
assertEquals("CHN", locale0.getISO3Country());
assertEquals("zh", locale0.getLanguage());
assertEquals("CN", locale0.getCountry());
assertNotNull(locale0);

Boolean boolean0 = Boolean.FALSE;
assertNotNull(boolean0);
assertFalse(boolean0);

StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
assertEquals("UTC", timeZone0.getID());
assertEquals("zh_CN", locale0.toString());
assertEquals("", locale0.getVariant());
assertEquals("zho", locale0.getISO3Language());
assertEquals("CHN", locale0.getISO3Country());
assertEquals("zh", locale0.getLanguage());
assertEquals("CN", locale0.getCountry());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertFalse(stdDateFormat0.isLenient());
assertNotNull(stdDateFormat0);

ParsePosition parsePosition0 = new ParsePosition(3600);
assertEquals(3600, parsePosition0.getIndex());
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals("java.text.ParsePosition[index=3600,errorIndex=-1]", parsePosition0.toString());
assertNotNull(parsePosition0);

stdDateFormat0._parseDate("0000-00-00T00:00", parsePosition0);

[MASTER] 21:28:09.343 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: ParseException
[MASTER] 21:28:09.343 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = new StdDateFormat();
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertNotNull(stdDateFormat0);

ParsePosition parsePosition0 = new ParsePosition((-2829));
assertEquals("java.text.ParsePosition[index=-2829,errorIndex=-1]", parsePosition0.toString());
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals((-2829), parsePosition0.getIndex());
assertNotNull(parsePosition0);

stdDateFormat0._parseDate("1612-02-08T00:00:00.000+0000", parsePosition0);

[MASTER] 21:28:10.830 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:28:10.830 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertNotNull(stdDateFormat0);

ParsePosition parsePosition0 = new ParsePosition((-1698));
assertEquals((-1698), parsePosition0.getIndex());
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals("java.text.ParsePosition[index=-1698,errorIndex=-1]", parsePosition0.toString());
assertNotNull(parsePosition0);

stdDateFormat0.parse("0000-00-00T00:00", parsePosition0);

[MASTER] 21:28:11.347 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:28:11.347 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = new StdDateFormat();
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());
assertNotNull(stdDateFormat0);

ParsePosition parsePosition0 = new ParsePosition((-908));
assertEquals((-908), parsePosition0.getIndex());
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals("java.text.ParsePosition[index=-908,errorIndex=-1]", parsePosition0.toString());
assertNotNull(parsePosition0);

stdDateFormat0.parseAsISO8601("0000-00-00T00:00", parsePosition0);

[MASTER] 21:28:14.554 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected null, but was:<Fri Feb 14 20:21:21 GMT 2014>
[MASTER] 21:28:14.572 [logback-1] WARN  JUnitAnalyzer - Failing test:
 SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1, "com.fasterxml.jackson.databind.util.StdDateFormat");
assertEquals(1, simpleTimeZone0.getRawOffset());
assertFalse(simpleTimeZone0.useDaylightTime());
assertEquals("java.util.SimpleTimeZone[id=com.fasterxml.jackson.databind.util.StdDateFormat,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
assertEquals("com.fasterxml.jackson.databind.util.StdDateFormat", simpleTimeZone0.getID());
assertEquals(0, simpleTimeZone0.getDSTSavings());
assertNotNull(simpleTimeZone0);

Locale locale0 = Locale.TAIWAN;
assertEquals("zh_TW", locale0.toString());
assertEquals("zh", locale0.getLanguage());
assertEquals("TWN", locale0.getISO3Country());
assertEquals("zho", locale0.getISO3Language());
assertEquals("TW", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertNotNull(locale0);

Boolean boolean0 = Boolean.valueOf("`&u9=");
assertNotNull(boolean0);
assertFalse(boolean0);

StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, false);
assertEquals(1, simpleTimeZone0.getRawOffset());
assertFalse(simpleTimeZone0.useDaylightTime());
assertEquals("java.util.SimpleTimeZone[id=com.fasterxml.jackson.databind.util.StdDateFormat,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
assertEquals("com.fasterxml.jackson.databind.util.StdDateFormat", simpleTimeZone0.getID());
assertEquals(0, simpleTimeZone0.getDSTSavings());
assertEquals("zh_TW", locale0.toString());
assertEquals("zh", locale0.getLanguage());
assertEquals("TWN", locale0.getISO3Country());
assertEquals("zho", locale0.getISO3Language());
assertEquals("TW", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertFalse(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertNotNull(stdDateFormat0);

ParsePosition parsePosition0 = new ParsePosition(2);
assertEquals(2, parsePosition0.getIndex());
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
assertNotNull(parsePosition0);

Date date0 = stdDateFormat0.parse("1969-12-03T04:32:00.001+0000", parsePosition0);
assertEquals(1, simpleTimeZone0.getRawOffset());
assertFalse(simpleTimeZone0.useDaylightTime());
assertEquals("java.util.SimpleTimeZone[id=com.fasterxml.jackson.databind.util.StdDateFormat,offset=1,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
assertEquals("com.fasterxml.jackson.databind.util.StdDateFormat", simpleTimeZone0.getID());
assertEquals(0, simpleTimeZone0.getDSTSavings());
assertEquals("zh_TW", locale0.toString());
assertEquals("zh", locale0.getLanguage());
assertEquals("TWN", locale0.getISO3Country());
assertEquals("zho", locale0.getISO3Language());
assertEquals("TW", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertFalse(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertEquals(2, parsePosition0.getIndex());
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
assertNull(date0);


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'StdDateFormat_ESTest' to results/JacksonDatabind-104/com.fasterxml.jackson.databind.util.StdDateFormat/BBC-F0/tests/6
* Done!

* Computation finished
