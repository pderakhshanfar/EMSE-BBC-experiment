* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: com.fasterxml.jackson.databind.util.StdDateFormat
* Starting Client-0
* Connecting to master process on port 13030
* Analyzing classpath: 
  - subjects/buggy-versions/JacksonDatabind-104/target/classes
  - defects4j/framework/projects/JacksonDatabind/lib/com/fasterxml/jackson/core/jackson-annotations/2.9.0/jackson-annotations-2.9.0.jar
  - defects4j/framework/projects/JacksonDatabind/lib/com/fasterxml/jackson/core/jackson-core/2.9.8/jackson-core-2.9.8.jar
* Finished analyzing classpath
* Generating tests for class com.fasterxml.jackson.databind.util.StdDateFormat
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1396
* Using seed 2805792664
* Starting evolution
* Initial Number of Goals in DynaMOSA = 666 / 1396
[MASTER] 21:24:05.899 [logback-2] ERROR TestCluster - Failed to check cache for java.time.temporal.TemporalQuery<R> : Type points to itself
* Search finished after 302s and 615 generations, 187334 statements, best individual has fitness: 192.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 84%
* Total number of goals: 234
* Number of covered goals: 196
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 82%
* Total number of goals: 146
* Number of covered goals: 120
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 97%
* Total number of goals: 29
* Number of covered goals: 28
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 95%
* Total number of goals: 714
* Number of covered goals: 676
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 58%
* Total number of goals: 90
* Number of covered goals: 52
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 146
* Number of covered goals: 120
* Generated 82 tests with total length 367
* Resulting test suite's coverage: 82% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 21:29:02.992 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7190833333333333% of time used, but only 30/82 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 23%
* Compiling and checking tests
[MASTER] 21:29:25.481 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:29:25.482 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat._equals((Object) null, (Object) null);
TimeZone timeZone0 = TimeZone.getTimeZone("u[4");
Locale locale0 = new Locale("~Zaw&C", "DateFormat %s: (timezone: %s, locale: %s, lenient: %s)", "DateFormat %s: (timezone: %s, locale: %s, lenient: %s)");
StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
StdDateFormat stdDateFormat1 = stdDateFormat0.clone();
boolean boolean0 = true;
stdDateFormat1.instance.setLenient(true);
int int0 = 356;
ParsePosition parsePosition0 = new ParsePosition(356);
stdDateFormat1.instance._parseDate("0000-00-00T00:00", parsePosition0);

[MASTER] 21:29:31.706 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:29:31.707 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
assertNotNull(timeZone0);
assertEquals("UTC", timeZone0.getID());

Locale locale0 = Locale.JAPAN;
assertNotNull(locale0);
assertEquals("ja", locale0.getLanguage());
assertEquals("JPN", locale0.getISO3Country());
assertEquals("ja_JP", locale0.toString());
assertEquals("JP", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("jpn", locale0.getISO3Language());

StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
assertNotNull(stdDateFormat0);
assertEquals("UTC", timeZone0.getID());
assertEquals("ja", locale0.getLanguage());
assertEquals("JPN", locale0.getISO3Country());
assertEquals("ja_JP", locale0.toString());
assertEquals("JP", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("jpn", locale0.getISO3Language());
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());

ParsePosition parsePosition0 = new ParsePosition(2);
assertNotNull(parsePosition0);
assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
assertEquals(2, parsePosition0.getIndex());
assertEquals((-1), parsePosition0.getErrorIndex());

stdDateFormat0._parseAsISO8601("0000-00-00T00:00", parsePosition0);

[MASTER] 21:29:33.695 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:29:33.695 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TimeZone timeZone0 = TimeZone.getDefault();
assertNotNull(timeZone0);
assertEquals("GMT", timeZone0.getID());

Locale locale0 = Locale.GERMANY;
assertNotNull(locale0);
assertEquals("deu", locale0.getISO3Language());
assertEquals("de", locale0.getLanguage());
assertEquals("DEU", locale0.getISO3Country());
assertEquals("de_DE", locale0.toString());
assertEquals("DE", locale0.getCountry());
assertEquals("", locale0.getVariant());

StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
assertNotNull(stdDateFormat0);
assertEquals("GMT", timeZone0.getID());
assertEquals("deu", locale0.getISO3Language());
assertEquals("de", locale0.getLanguage());
assertEquals("DEU", locale0.getISO3Country());
assertEquals("de_DE", locale0.toString());
assertEquals("DE", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());

stdDateFormat0.parse("0000-00-00T00:00");

[MASTER] 21:29:34.170 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:29:34.171 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = new StdDateFormat();
assertNotNull(stdDateFormat0);
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());

ParsePosition parsePosition0 = new ParsePosition((-1215));
assertNotNull(parsePosition0);
assertEquals((-1215), parsePosition0.getIndex());
assertEquals("java.text.ParsePosition[index=-1215,errorIndex=-1]", parsePosition0.toString());
assertEquals((-1), parsePosition0.getErrorIndex());

stdDateFormat0.parse("0000-00-00T00:00", parsePosition0);

[MASTER] 21:29:34.890 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:29:34.891 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ParsePosition parsePosition0 = new ParsePosition(0);
assertNotNull(parsePosition0);
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals(0, parsePosition0.getIndex());
assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());

StdDateFormat stdDateFormat0 = StdDateFormat.instance;
assertNotNull(stdDateFormat0);
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());

stdDateFormat0.parseAsISO8601("0000-00-00T00:00", parsePosition0);

[MASTER] 21:29:36.812 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...gorianCalendar[time=[?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id="UTC",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]]> but was:<...gorianCalendar[time=[1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id="UTC",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]]>
[MASTER] 21:29:36.815 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
assertNotNull(stdDateFormat0);
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());

TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
assertNotNull(timeZone0);
assertEquals("UTC", timeZone0.getID());

Calendar calendar0 = stdDateFormat0.instance._getCalendar(timeZone0);
assertNotNull(calendar0);
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertEquals("UTC", timeZone0.getID());
assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"UTC\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
assertTrue(calendar0.isLenient());
assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
assertEquals(1, calendar0.getFirstDayOfWeek());


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'StdDateFormat_ESTest' to results/JacksonDatabind-104/com.fasterxml.jackson.databind.util.StdDateFormat/BBC-F0/tests/13
* Done!

* Computation finished
