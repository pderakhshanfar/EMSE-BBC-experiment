* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: com.fasterxml.jackson.databind.util.StdDateFormat
* Starting Client-0
* Connecting to master process on port 14485
* Analyzing classpath: 
  - subjects/buggy-versions/JacksonDatabind-104/target/classes
  - defects4j/framework/projects/JacksonDatabind/lib/com/fasterxml/jackson/core/jackson-annotations/2.9.0/jackson-annotations-2.9.0.jar
  - defects4j/framework/projects/JacksonDatabind/lib/com/fasterxml/jackson/core/jackson-core/2.9.8/jackson-core-2.9.8.jar
* Finished analyzing classpath
* Generating tests for class com.fasterxml.jackson.databind.util.StdDateFormat
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1396
* Using seed 4133424759
* Starting evolution
* Initial Number of Goals in DynaMOSA = 666 / 1396
[MASTER] 21:29:10.190 [logback-2] ERROR TestCluster - Failed to check cache for java.time.temporal.TemporalQuery<R> : Type points to itself
* Search finished after 302s and 492 generations, 152723 statements, best individual has fitness: 189.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 84%
* Total number of goals: 234
* Number of covered goals: 196
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 83%
* Total number of goals: 146
* Number of covered goals: 121
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 29
* Number of covered goals: 29
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 95%
* Total number of goals: 714
* Number of covered goals: 679
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 58%
* Total number of goals: 90
* Number of covered goals: 52
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 146
* Number of covered goals: 121
* Generated 89 tests with total length 341
* Resulting test suite's coverage: 82% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 21:33:58.201 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.66675% of time used, but only 37/89 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 31%
* Compiling and checking tests
[MASTER] 21:34:16.902 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected same:<DateFormat com.fasterxml.jackson.databind.util.StdDateFormat: (timezone: sun.util.calendar.ZoneInfo[id="GMT",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null], locale: en_US, lenient: null)> was not:<DateFormat com.fasterxml.jackson.databind.util.StdDateFormat: (timezone: null, locale: en_US, lenient: null)>
[MASTER] 21:34:16.903 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
Locale locale0 = Locale.PRC;
Locale locale1 = Locale.FRANCE;
locale0.getDisplayScript(locale1);
Locale locale2 = Locale.JAPAN;
TimeZone timeZone0 = TimeZone.getTimeZone("");
StdDateFormat stdDateFormat0 = StdDateFormat.instance;
StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone0);
StdDateFormat stdDateFormat2 = stdDateFormat1.clone();
ZoneInfo zoneInfo1 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
stdDateFormat2.setTimeZone(zoneInfo1);
assertSame(stdDateFormat1, stdDateFormat0);
assertSame(stdDateFormat0, stdDateFormat1);


[MASTER] 21:34:21.004 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...gorianCalendar[time=[?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id="GMT",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]]> but was:<...gorianCalendar[time=[1392409281320,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id="GMT",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]]>
[MASTER] 21:34:21.005 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TimeZone timeZone0 = TimeZone.getDefault();
Locale locale0 = Locale.KOREA;
Boolean boolean0 = Boolean.FALSE;
StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
ParsePosition parsePosition0 = new ParsePosition(45);
Calendar calendar0 = stdDateFormat0._getCalendar(timeZone0);
assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());

stdDateFormat0.parseAsISO8601("0800-00-00", parsePosition0);
assertFalse(stdDateFormat0.isLenient());


[MASTER] 21:34:22.134 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...gorianCalendar[time=[?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=null,firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=800,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=?,DST_OFFSET=?]]> but was:<...gorianCalendar[time=[1392409281320,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=null,firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]]>
[MASTER] 21:34:22.134 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());
assertNotNull(stdDateFormat0);

Calendar calendar0 = stdDateFormat0._getCalendar((TimeZone) null);
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());
assertTrue(calendar0.isLenient());
assertEquals(1, calendar0.getFirstDayOfWeek());
assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=null,firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=800,MONTH=-1,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=0,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
assertNotNull(calendar0);

TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
assertEquals("UTC", timeZone0.getID());
assertNotNull(timeZone0);

stdDateFormat0.instance._getCalendar(timeZone0);

[MASTER] 21:34:22.339 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:34:22.340 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TimeZone timeZone0 = TimeZone.getDefault();
assertEquals("GMT", timeZone0.getID());
assertNotNull(timeZone0);

Locale locale0 = Locale.KOREA;
assertEquals("kor", locale0.getISO3Language());
assertEquals("KOR", locale0.getISO3Country());
assertEquals("", locale0.getVariant());
assertEquals("KR", locale0.getCountry());
assertEquals("ko_KR", locale0.toString());
assertEquals("ko", locale0.getLanguage());
assertNotNull(locale0);

Boolean boolean0 = Boolean.FALSE;
assertFalse(boolean0);
assertNotNull(boolean0);

StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
assertEquals("GMT", timeZone0.getID());
assertEquals("kor", locale0.getISO3Language());
assertEquals("KOR", locale0.getISO3Country());
assertEquals("", locale0.getVariant());
assertEquals("KR", locale0.getCountry());
assertEquals("ko_KR", locale0.toString());
assertEquals("ko", locale0.getLanguage());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertFalse(stdDateFormat0.isLenient());
assertNotNull(stdDateFormat0);

ParsePosition parsePosition0 = new ParsePosition(45);
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals(45, parsePosition0.getIndex());
assertEquals("java.text.ParsePosition[index=45,errorIndex=-1]", parsePosition0.toString());
assertNotNull(parsePosition0);

stdDateFormat0._parseAsISO8601("0000-00-00T00:00", parsePosition0);

[MASTER] 21:34:22.920 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:34:22.921 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertNotNull(stdDateFormat0);

ParsePosition parsePosition0 = new ParsePosition(1576);
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals(1576, parsePosition0.getIndex());
assertEquals("java.text.ParsePosition[index=1576,errorIndex=-1]", parsePosition0.toString());
assertNotNull(parsePosition0);

stdDateFormat0._parseDate("0000-00-00T00:00", parsePosition0);

[MASTER] 21:34:24.831 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:34:24.832 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TimeZone timeZone0 = TimeZone.getDefault();
assertEquals("GMT", timeZone0.getID());
assertNotNull(timeZone0);

Locale locale0 = Locale.KOREA;
assertEquals("KOR", locale0.getISO3Country());
assertEquals("ko", locale0.getLanguage());
assertEquals("", locale0.getVariant());
assertEquals("kor", locale0.getISO3Language());
assertEquals("KR", locale0.getCountry());
assertEquals("ko_KR", locale0.toString());
assertNotNull(locale0);

Boolean boolean0 = Boolean.FALSE;
assertFalse(boolean0);
assertNotNull(boolean0);

StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
assertEquals("GMT", timeZone0.getID());
assertEquals("KOR", locale0.getISO3Country());
assertEquals("ko", locale0.getLanguage());
assertEquals("", locale0.getVariant());
assertEquals("kor", locale0.getISO3Language());
assertEquals("KR", locale0.getCountry());
assertEquals("ko_KR", locale0.toString());
assertFalse(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertNotNull(stdDateFormat0);

stdDateFormat0.parse("0000-00-00T00:00");

[MASTER] 21:34:25.508 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:34:25.508 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());
assertNotNull(stdDateFormat0);

ParsePosition parsePosition0 = new ParsePosition(223);
assertEquals(223, parsePosition0.getIndex());
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals("java.text.ParsePosition[index=223,errorIndex=-1]", parsePosition0.toString());
assertNotNull(parsePosition0);

stdDateFormat0.parse("0000-00-00T00:00", parsePosition0);

[MASTER] 21:34:25.927 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:34:25.927 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Locale locale0 = new Locale("*]^V2ao");
assertEquals("", locale0.getISO3Country());
assertEquals("", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("*]^v2ao", locale0.getLanguage());
assertEquals("*]^v2ao", locale0.toString());
assertNotNull(locale0);

SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(34, "k~\"XgGr?S)13");
assertEquals("java.util.SimpleTimeZone[id=k~\"XgGr?S)13,offset=34,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
assertFalse(simpleTimeZone0.useDaylightTime());
assertEquals(0, simpleTimeZone0.getDSTSavings());
assertEquals(34, simpleTimeZone0.getRawOffset());
assertEquals("k~\"XgGr?S)13", simpleTimeZone0.getID());
assertNotNull(simpleTimeZone0);

StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, (Boolean) null, false);
assertEquals("", locale0.getISO3Country());
assertEquals("", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("*]^v2ao", locale0.getLanguage());
assertEquals("*]^v2ao", locale0.toString());
assertEquals("java.util.SimpleTimeZone[id=k~\"XgGr?S)13,offset=34,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
assertFalse(simpleTimeZone0.useDaylightTime());
assertEquals(0, simpleTimeZone0.getDSTSavings());
assertEquals(34, simpleTimeZone0.getRawOffset());
assertEquals("k~\"XgGr?S)13", simpleTimeZone0.getID());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());
assertNotNull(stdDateFormat0);

ParsePosition parsePosition0 = new ParsePosition(1400);
assertEquals(1400, parsePosition0.getIndex());
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals("java.text.ParsePosition[index=1400,errorIndex=-1]", parsePosition0.toString());
assertNotNull(parsePosition0);

stdDateFormat0.parseAsISO8601("0000-00-00T00:00", parsePosition0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 3
* Writing tests to file
* Writing JUnit test case 'StdDateFormat_ESTest' to results/JacksonDatabind-104/com.fasterxml.jackson.databind.util.StdDateFormat/BBC-F0/tests/24
* Done!

* Computation finished
