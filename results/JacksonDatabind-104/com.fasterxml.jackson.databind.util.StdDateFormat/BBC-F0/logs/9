* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: com.fasterxml.jackson.databind.util.StdDateFormat
* Starting Client-0
* Connecting to master process on port 3074
* Analyzing classpath: 
  - subjects/buggy-versions/JacksonDatabind-104/target/classes
  - defects4j/framework/projects/JacksonDatabind/lib/com/fasterxml/jackson/core/jackson-annotations/2.9.0/jackson-annotations-2.9.0.jar
  - defects4j/framework/projects/JacksonDatabind/lib/com/fasterxml/jackson/core/jackson-core/2.9.8/jackson-core-2.9.8.jar
* Finished analyzing classpath
* Generating tests for class com.fasterxml.jackson.databind.util.StdDateFormat
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1396
* Using seed 567865164
* Starting evolution
* Initial Number of Goals in DynaMOSA = 666 / 1396
[MASTER] 21:23:49.139 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 302s and 653 generations, 191545 statements, best individual has fitness: 195.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 84%
* Total number of goals: 234
* Number of covered goals: 196
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 83%
* Total number of goals: 146
* Number of covered goals: 121
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 29
* Number of covered goals: 29
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 94%
* Total number of goals: 714
* Number of covered goals: 673
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 59%
* Total number of goals: 90
* Number of covered goals: 53
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 146
* Number of covered goals: 121
* Generated 86 tests with total length 319
* Resulting test suite's coverage: 82% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 21:28:16.855 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6818833333333333% of time used, but only 36/86 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 25%
* Compiling and checking tests
[MASTER] 21:28:44.243 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:28:44.243 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
ParsePosition parsePosition0 = new ParsePosition(1796);
stdDateFormat0._parseAsISO8601("0000-00-00T00:00", parsePosition0);

[MASTER] 21:28:45.924 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...gorianCalendar[time=[?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=null,firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]]> but was:<...gorianCalendar[time=[1392409281320,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=null,firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]]>
[MASTER] 21:28:45.925 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Locale locale0 = Locale.SIMPLIFIED_CHINESE;
assertEquals("zho", locale0.getISO3Language());
assertEquals("zh_CN", locale0.toString());
assertEquals("CN", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("CHN", locale0.getISO3Country());
assertEquals("zh", locale0.getLanguage());
assertNotNull(locale0);

Boolean boolean0 = Boolean.valueOf(true);
assertNotNull(boolean0);
assertTrue(boolean0);

StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, boolean0, true);
assertEquals("zho", locale0.getISO3Language());
assertEquals("zh_CN", locale0.toString());
assertEquals("CN", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("CHN", locale0.getISO3Country());
assertEquals("zh", locale0.getLanguage());
assertTrue(stdDateFormat0.isLenient());
assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
assertNotNull(stdDateFormat0);

Calendar calendar0 = stdDateFormat0._getCalendar((TimeZone) null);
assertEquals("zho", locale0.getISO3Language());
assertEquals("zh_CN", locale0.toString());
assertEquals("CN", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("CHN", locale0.getISO3Country());
assertEquals("zh", locale0.getLanguage());
assertTrue(stdDateFormat0.isLenient());
assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=null,firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());
assertTrue(calendar0.isLenient());
assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
assertEquals(1, calendar0.getFirstDayOfWeek());
assertNotNull(calendar0);

stdDateFormat0._getCalendar((TimeZone) null);

[MASTER] 21:28:46.367 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:28:46.367 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = new StdDateFormat();
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertNotNull(stdDateFormat0);

ParsePosition parsePosition0 = new ParsePosition(90);
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals("java.text.ParsePosition[index=90,errorIndex=-1]", parsePosition0.toString());
assertEquals(90, parsePosition0.getIndex());
assertNotNull(parsePosition0);

stdDateFormat0._parseDate("0000-00-00T00:00", parsePosition0);

[MASTER] 21:28:47.473 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NullPointerException
[MASTER] 21:28:47.473 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertNotNull(stdDateFormat0);

stdDateFormat0.parse("0000-00-00T00:00");

[MASTER] 21:28:48.022 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NullPointerException
[MASTER] 21:28:48.023 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertNotNull(stdDateFormat0);

ParsePosition parsePosition0 = new ParsePosition(45);
assertEquals("java.text.ParsePosition[index=45,errorIndex=-1]", parsePosition0.toString());
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals(45, parsePosition0.getIndex());
assertNotNull(parsePosition0);

stdDateFormat0.parse("0000-00-00T00:00", parsePosition0);

[MASTER] 21:28:48.568 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:28:48.569 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Locale locale0 = Locale.CHINA;
assertEquals("zho", locale0.getISO3Language());
assertEquals("CN", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("zh_CN", locale0.toString());
assertEquals("zh", locale0.getLanguage());
assertEquals("CHN", locale0.getISO3Country());
assertNotNull(locale0);

Boolean boolean0 = Boolean.FALSE;
assertNotNull(boolean0);
assertFalse(boolean0);

StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, boolean0);
assertEquals("zho", locale0.getISO3Language());
assertEquals("CN", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("zh_CN", locale0.toString());
assertEquals("zh", locale0.getLanguage());
assertEquals("CHN", locale0.getISO3Country());
assertFalse(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertNotNull(stdDateFormat0);

ParsePosition parsePosition0 = new ParsePosition((-103));
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals((-103), parsePosition0.getIndex());
assertEquals("java.text.ParsePosition[index=-103,errorIndex=-1]", parsePosition0.toString());
assertNotNull(parsePosition0);

stdDateFormat0.parseAsISO8601("0000-00-00T00:00", parsePosition0);

[MASTER] 21:28:48.718 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NullPointerException
[MASTER] 21:28:48.718 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertNotNull(stdDateFormat0);

stdDateFormat0._getCalendar((TimeZone) null);

[MASTER] 21:28:50.548 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NullPointerException
[MASTER] 21:28:50.548 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());
assertNotNull(stdDateFormat0);

MockDate mockDate0 = new MockDate(0, 0, 0, 0, 0);
assertNotNull(mockDate0);

StringBuffer stringBuffer0 = new StringBuffer(0);
assertEquals("", stringBuffer0.toString());
assertEquals(0, stringBuffer0.length());
assertNotNull(stringBuffer0);

Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
FieldPosition fieldPosition0 = new FieldPosition(format_Field0);
assertEquals((-1), fieldPosition0.getField());
assertEquals(0, fieldPosition0.getEndIndex());
assertEquals(0, fieldPosition0.getBeginIndex());
assertNotNull(fieldPosition0);

stdDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);

[MASTER] 21:28:59.074 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test52 -> class java.text.ParseException: Cannot parse date "lenient": while it seems to fit format 'yyyy-MM-dd', parsing fails (leniency? null)
[MASTER] 21:28:59.074 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
ParsePosition parsePosition0 = new ParsePosition((-1));
stdDateFormat0._parseAsISO8601("lenient", parsePosition0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'StdDateFormat_ESTest' to results/JacksonDatabind-104/com.fasterxml.jackson.databind.util.StdDateFormat/BBC-F0/tests/9
* Done!

* Computation finished
