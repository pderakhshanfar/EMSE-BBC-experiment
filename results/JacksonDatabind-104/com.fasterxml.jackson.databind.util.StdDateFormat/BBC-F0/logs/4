* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: com.fasterxml.jackson.databind.util.StdDateFormat
* Starting Client-0
* Connecting to master process on port 12328
* Analyzing classpath: 
  - subjects/buggy-versions/JacksonDatabind-104/target/classes
  - defects4j/framework/projects/JacksonDatabind/lib/com/fasterxml/jackson/core/jackson-annotations/2.9.0/jackson-annotations-2.9.0.jar
  - defects4j/framework/projects/JacksonDatabind/lib/com/fasterxml/jackson/core/jackson-core/2.9.8/jackson-core-2.9.8.jar
* Finished analyzing classpath
* Generating tests for class com.fasterxml.jackson.databind.util.StdDateFormat
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1396
* Using seed 2998834970
* Starting evolution
* Initial Number of Goals in DynaMOSA = 666 / 1396
[MASTER] 21:21:46.365 [logback-2] ERROR TestCluster - Failed to check cache for java.time.temporal.TemporalQuery<R> : Type points to itself
[MASTER] 21:24:33.153 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 302s and 501 generations, 161609 statements, best individual has fitness: 199.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 83%
* Total number of goals: 234
* Number of covered goals: 194
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 82%
* Total number of goals: 146
* Number of covered goals: 119
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 29
* Number of covered goals: 29
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 94%
* Total number of goals: 714
* Number of covered goals: 672
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 61%
* Total number of goals: 90
* Number of covered goals: 55
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 146
* Number of covered goals: 119
* Generated 85 tests with total length 438
* Resulting test suite's coverage: 82% (average coverage for all fitness functions)
* Generating assertions
* Resulting test suite's mutation score: 32%
* Compiling and checking tests
[MASTER] 21:27:51.246 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:27:51.246 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TimeZone timeZone0 = TimeZone.getTimeZone("");
Locale locale0 = Locale.PRC;
StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, (Boolean) null);
ParsePosition parsePosition0 = new ParsePosition((-715));
stdDateFormat0.parse("0000-00-00T00:00", parsePosition0);

[MASTER] 21:27:53.435 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:27:53.436 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Locale locale0 = Locale.CHINA;
Boolean boolean0 = Boolean.valueOf(false);
StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, boolean0);
ParsePosition parsePosition0 = new ParsePosition(48);
stdDateFormat0._parseAsISO8601("0000-00-00T00:00", parsePosition0);

[MASTER] 21:27:53.844 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:27:53.844 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
ParsePosition parsePosition0 = new ParsePosition(116);
stdDateFormat0.instance._parseDate("0000-00-00T00:00", parsePosition0);

[MASTER] 21:27:54.760 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:27:54.760 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
Locale locale0 = Locale.forLanguageTag(":gMRLX|{");
Boolean boolean0 = Boolean.TRUE;
StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
stdDateFormat0.parse("0000-00-00T00:00");

[MASTER] 21:27:55.238 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:27:55.238 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Locale locale0 = Locale.CHINESE;
ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
Boolean boolean0 = Boolean.valueOf(false);
StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0);
ParsePosition parsePosition0 = new ParsePosition(13);
stdDateFormat0.parseAsISO8601("0000-00-00T00:00", parsePosition0);

[MASTER] 21:28:04.902 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test55 -> class java.text.ParseException: Cannot parse date "l^w5k@)/": while it seems to fit format 'yyyy-MM-dd', parsing fails (leniency? null)
[MASTER] 21:28:04.902 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
ParsePosition parsePosition0 = new ParsePosition(1622);
stdDateFormat0._parseAsISO8601("l^w5k@)/", parsePosition0);

[MASTER] 21:28:04.902 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test52 -> class java.lang.AssertionError: Expecting exception: NullPointerException
[MASTER] 21:28:04.903 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Locale locale0 = Locale.UK;
Boolean boolean0 = new Boolean(false);
StdDateFormat stdDateFormat0 = StdDateFormat.instance;
String string0 = "_XqU!JT\"!0g";
MockDate mockDate0 = new MockDate((-1039L));
StringBuffer stringBuffer0 = new StringBuffer();
Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 57);
stdDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 2
* Writing tests to file
* Writing JUnit test case 'StdDateFormat_ESTest' to results/JacksonDatabind-104/com.fasterxml.jackson.databind.util.StdDateFormat/BBC-F0/tests/4
[MASTER] 21:28:04.903 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test23 -> class java.lang.AssertionError: Expecting exception: NullPointerException
[MASTER] 21:28:04.903 [logback-1] WARN  JUnitAnalyzer - Failing test:
 MockDate mockDate0 = new MockDate();
StringBuffer stringBuffer0 = new StringBuffer();
Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
Locale locale0 = Locale.TAIWAN;
StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0);
StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone((TimeZone) null);
stdDateFormat1.instance._getCalendar((TimeZone) null);

[MASTER] 21:28:04.903 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test61 -> class java.lang.AssertionError: Expecting exception: NullPointerException
[MASTER] 21:28:04.904 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TimeZone timeZone0 = TimeZone.getTimeZone("");
MockDate mockDate0 = new MockDate();
StringBuffer stringBuffer0 = new StringBuffer();
Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
FieldPosition fieldPosition0 = new FieldPosition(format_Field0, (-1954));
Locale locale0 = Locale.CHINESE;
Boolean boolean0 = Boolean.valueOf(true);
StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
stdDateFormat1.format((Date) mockDate0, stringBuffer0, fieldPosition0);
assertEquals("2014-02-14T20:21:21.320+00:00", stringBuffer0.toString());


* Done!

* Computation finished
