* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: com.fasterxml.jackson.databind.util.StdDateFormat
* Starting Client-0
* Connecting to master process on port 18194
* Analyzing classpath: 
  - subjects/buggy-versions/JacksonDatabind-104/target/classes
  - defects4j/framework/projects/JacksonDatabind/lib/com/fasterxml/jackson/core/jackson-annotations/2.9.0/jackson-annotations-2.9.0.jar
  - defects4j/framework/projects/JacksonDatabind/lib/com/fasterxml/jackson/core/jackson-core/2.9.8/jackson-core-2.9.8.jar
* Finished analyzing classpath
* Generating tests for class com.fasterxml.jackson.databind.util.StdDateFormat
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1396
* Using seed 3782961024
* Starting evolution
* Initial Number of Goals in DynaMOSA = 666 / 1396
[MASTER] 21:29:01.299 [logback-2] ERROR TestCluster - Failed to check cache for java.time.temporal.TemporalQuery<R> : Type points to itself
[MASTER] 21:29:44.657 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 301s and 495 generations, 139470 statements, best individual has fitness: 196.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 84%
* Total number of goals: 234
* Number of covered goals: 196
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 83%
* Total number of goals: 146
* Number of covered goals: 121
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 29
* Number of covered goals: 29
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 94%
* Total number of goals: 714
* Number of covered goals: 673
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 58%
* Total number of goals: 90
* Number of covered goals: 52
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 83%
* Total number of goals: 146
* Number of covered goals: 121
* Generated 90 tests with total length 314
* Resulting test suite's coverage: 81% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 21:33:02.248 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.8734666666666666% of time used, but only 29/90 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 22%
* Compiling and checking tests
[MASTER] 21:33:23.170 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:33:23.172 [logback-1] WARN  JUnitAnalyzer - Failing test:
 SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "?[H^+Jik|c", 0, 21, 0, 0, 21, 0, (-66), 0, 1737);
assertEquals("?[H^+Jik|c", simpleTimeZone0.getID());
assertFalse(simpleTimeZone0.useDaylightTime());
assertEquals("java.util.SimpleTimeZone[id=?[H^+Jik|c,offset=0,dstSavings=1737,useDaylight=false,startYear=0,startMode=1,startMonth=0,startDay=21,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=21,endDay=0,endDayOfWeek=-66,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
assertEquals(0, simpleTimeZone0.getDSTSavings());
assertEquals(0, simpleTimeZone0.getRawOffset());
assertNotNull(simpleTimeZone0);

Locale locale0 = Locale.CANADA_FRENCH;
assertEquals("", locale0.getVariant());
assertEquals("fra", locale0.getISO3Language());
assertEquals("fr_CA", locale0.toString());
assertEquals("fr", locale0.getLanguage());
assertEquals("CA", locale0.getCountry());
assertEquals("CAN", locale0.getISO3Country());
assertNotNull(locale0);

Boolean boolean0 = Boolean.valueOf(false);
assertFalse(boolean0);
assertNotNull(boolean0);

StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, false);
assertEquals("?[H^+Jik|c", simpleTimeZone0.getID());
assertFalse(simpleTimeZone0.useDaylightTime());
assertEquals("java.util.SimpleTimeZone[id=?[H^+Jik|c,offset=0,dstSavings=1737,useDaylight=false,startYear=0,startMode=1,startMonth=0,startDay=21,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=21,endDay=0,endDayOfWeek=-66,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
assertEquals(0, simpleTimeZone0.getDSTSavings());
assertEquals(0, simpleTimeZone0.getRawOffset());
assertEquals("", locale0.getVariant());
assertEquals("fra", locale0.getISO3Language());
assertEquals("fr_CA", locale0.toString());
assertEquals("fr", locale0.getLanguage());
assertEquals("CA", locale0.getCountry());
assertEquals("CAN", locale0.getISO3Country());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertFalse(stdDateFormat0.isLenient());
assertNotNull(stdDateFormat0);

ParsePosition parsePosition0 = new ParsePosition(2);
assertEquals("java.text.ParsePosition[index=2,errorIndex=-1]", parsePosition0.toString());
assertEquals(2, parsePosition0.getIndex());
assertEquals((-1), parsePosition0.getErrorIndex());
assertNotNull(parsePosition0);

stdDateFormat0.parseAsISO8601("0000-00-00T00:00", parsePosition0);

[MASTER] 21:33:24.080 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...gorianCalendar[time=[-12219292800000,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=null,firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1582,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=15,DAY_OF_YEAR=278,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=439,ZONE_OFFSET=439],DST_OFFSET=0]> but was:<...gorianCalendar[time=[1392409281320,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=null,firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0],DST_OFFSET=0]>
[MASTER] 21:33:24.081 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertNotNull(stdDateFormat0);

Calendar calendar0 = stdDateFormat0._getCalendar((TimeZone) null);
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
assertTrue(calendar0.isLenient());
assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=-12219292800000,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=null,firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1582,MONTH=9,WEEK_OF_YEAR=40,WEEK_OF_MONTH=1,DAY_OF_MONTH=15,DAY_OF_YEAR=278,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=439,ZONE_OFFSET=439,DST_OFFSET=0]", calendar0.toString());
assertEquals(1, calendar0.getFirstDayOfWeek());
assertNotNull(calendar0);

stdDateFormat0._getCalendar((TimeZone) null);

[MASTER] 21:33:24.478 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:33:24.479 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());
assertNotNull(stdDateFormat0);

ParsePosition parsePosition0 = new ParsePosition((-1029));
assertEquals("java.text.ParsePosition[index=-1029,errorIndex=-1]", parsePosition0.toString());
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals((-1029), parsePosition0.getIndex());
assertNotNull(parsePosition0);

stdDateFormat0._parseAsISO8601("0000-00-00T00:00", parsePosition0);

[MASTER] 21:33:24.681 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:33:24.681 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = new StdDateFormat();
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());
assertNotNull(stdDateFormat0);

ParsePosition parsePosition0 = new ParsePosition(57);
assertEquals(57, parsePosition0.getIndex());
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals("java.text.ParsePosition[index=57,errorIndex=-1]", parsePosition0.toString());
assertNotNull(parsePosition0);

stdDateFormat0._parseDate("0000-00-00T00:00", parsePosition0);

[MASTER] 21:33:25.769 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:33:25.769 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = new StdDateFormat();
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());
assertNotNull(stdDateFormat0);

stdDateFormat0.parse("0000-00-00T00:00");

[MASTER] 21:33:26.134 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:33:26.134 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = new StdDateFormat();
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertNotNull(stdDateFormat0);

ParsePosition parsePosition0 = new ParsePosition(48);
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals(48, parsePosition0.getIndex());
assertEquals("java.text.ParsePosition[index=48,errorIndex=-1]", parsePosition0.toString());
assertNotNull(parsePosition0);

stdDateFormat0.parse("0000-00-00T00:00", parsePosition0);

* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 5
* Writing tests to file
* Writing JUnit test case 'StdDateFormat_ESTest' to results/JacksonDatabind-104/com.fasterxml.jackson.databind.util.StdDateFormat/BBC-F0/tests/21
* Done!

* Computation finished
