* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: com.fasterxml.jackson.databind.util.StdDateFormat
* Starting Client-0
* Connecting to master process on port 20558
* Analyzing classpath: 
  - subjects/buggy-versions/JacksonDatabind-104/target/classes
  - defects4j/framework/projects/JacksonDatabind/lib/com/fasterxml/jackson/core/jackson-annotations/2.9.0/jackson-annotations-2.9.0.jar
  - defects4j/framework/projects/JacksonDatabind/lib/com/fasterxml/jackson/core/jackson-core/2.9.8/jackson-core-2.9.8.jar
* Finished analyzing classpath
* Generating tests for class com.fasterxml.jackson.databind.util.StdDateFormat
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1396
* Using seed 888056845
* Starting evolution
* Initial Number of Goals in DynaMOSA = 666 / 1396
[MASTER] 21:31:21.169 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 302s and 452 generations, 129387 statements, best individual has fitness: 188.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 84%
* Total number of goals: 234
* Number of covered goals: 196
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 82%
* Total number of goals: 146
* Number of covered goals: 120
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 97%
* Total number of goals: 29
* Number of covered goals: 28
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 95%
* Total number of goals: 714
* Number of covered goals: 679
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 58%
* Total number of goals: 90
* Number of covered goals: 52
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 146
* Number of covered goals: 120
* Generated 85 tests with total length 324
* Resulting test suite's coverage: 82% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 21:34:44.588 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.67075% of time used, but only 40/85 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 22%
* Compiling and checking tests
[MASTER] 21:35:05.910 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<[1582-10-15T00:00:00.00]0+00:00> but was:<[2014-02-14T20:21:21.32]0+00:00>
[MASTER] 21:35:05.911 [logback-1] WARN  JUnitAnalyzer - Failing test:
 ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
Locale locale0 = Locale.GERMAN;
Boolean boolean0 = Boolean.TRUE;
StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, boolean0, true);
ParsePosition parsePosition0 = new ParsePosition((-81));
Date date0 = stdDateFormat0._parseAsISO8601("0000-00-00", parsePosition0);
String string0 = stdDateFormat0.format(date0);
assertEquals("1582-10-15T00:00:00.000+00:00", string0);


[MASTER] 21:35:07.291 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:35:07.291 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = new StdDateFormat();
ParsePosition parsePosition0 = new ParsePosition((-3372));
stdDateFormat0._parseDate("0000-00-00T00:00", parsePosition0);

[MASTER] 21:35:07.729 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class org.junit.ComparisonFailure: expected:<...gorianCalendar[time=[?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id="GMT",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]]> but was:<...gorianCalendar[time=[1392409281320,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id="GMT",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]]>
[MASTER] 21:35:07.729 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = new StdDateFormat();
TimeZone timeZone0 = TimeZone.getTimeZone("TpcU`");
Calendar calendar0 = stdDateFormat0.instance._getCalendar(timeZone0);
boolean boolean0 = StdDateFormat._equals((Object) null, (Object) calendar0);
assertFalse(boolean0);
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=?,MONTH=?,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=?,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=?,HOUR=?,HOUR_OF_DAY=?,MINUTE=?,SECOND=?,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", calendar0.toString());


[MASTER] 21:35:08.707 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:35:08.707 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = new StdDateFormat();
assertNotNull(stdDateFormat0);
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());

ParsePosition parsePosition0 = new ParsePosition(34);
assertNotNull(parsePosition0);
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals(34, parsePosition0.getIndex());
assertEquals("java.text.ParsePosition[index=34,errorIndex=-1]", parsePosition0.toString());

stdDateFormat0._parseAsISO8601("0000-00-00T00:00", parsePosition0);

[MASTER] 21:35:09.179 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: ParseException
[MASTER] 21:35:09.179 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = new StdDateFormat();
assertNotNull(stdDateFormat0);
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());

stdDateFormat0._parseDate("1763-12-01T07:32:00.000+0000", (ParsePosition) null);

[MASTER] 21:35:09.805 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:35:09.805 [logback-1] WARN  JUnitAnalyzer - Failing test:
 TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
assertNotNull(timeZone0);
assertEquals("UTC", timeZone0.getID());

Locale locale0 = new Locale(" GYZfZo2b<u/", "P)qxj!m8G4&");
assertNotNull(locale0);
assertEquals("P)QXJ!M8G4&", locale0.getCountry());
assertEquals(" gyzfzo2b<u/", locale0.getLanguage());
assertEquals("", locale0.getVariant());
assertEquals(" gyzfzo2b<u/_P)QXJ!M8G4&", locale0.toString());

Boolean boolean0 = Boolean.valueOf(false);
assertNotNull(boolean0);
assertFalse(boolean0);

StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, false);
assertNotNull(stdDateFormat0);
assertEquals("UTC", timeZone0.getID());
assertEquals("P)QXJ!M8G4&", locale0.getCountry());
assertEquals(" gyzfzo2b<u/", locale0.getLanguage());
assertEquals("", locale0.getVariant());
assertEquals(" gyzfzo2b<u/_P)QXJ!M8G4&", locale0.toString());
assertFalse(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());

stdDateFormat0.parse("0000-00-00T00:00");

[MASTER] 21:35:10.369 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: NullPointerException
[MASTER] 21:35:10.369 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = new StdDateFormat();
assertNotNull(stdDateFormat0);
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());

ParsePosition parsePosition0 = new ParsePosition((-1739));
assertNotNull(parsePosition0);
assertEquals("java.text.ParsePosition[index=-1739,errorIndex=-1]", parsePosition0.toString());
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals((-1739), parsePosition0.getIndex());

stdDateFormat0.instance.parse("0000-00-00T00:00", parsePosition0);

[MASTER] 21:35:10.674 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:35:10.675 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = new StdDateFormat();
assertNotNull(stdDateFormat0);
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());

ParsePosition parsePosition0 = new ParsePosition(1348);
assertNotNull(parsePosition0);
assertEquals("java.text.ParsePosition[index=1348,errorIndex=-1]", parsePosition0.toString());
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals(1348, parsePosition0.getIndex());

stdDateFormat0.parseAsISO8601("0000-00-00T00:00", parsePosition0);

[MASTER] 21:35:10.875 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.text.ParseException: Cannot parse date "yyyy-MM-dd'T'HH:mm:ss.SSSZ": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null)
[MASTER] 21:35:10.875 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
assertNotNull(stdDateFormat0);
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());

StdDateFormat stdDateFormat1 = stdDateFormat0.clone();
assertNotNull(stdDateFormat1);
assertFalse(stdDateFormat1.equals((Object)stdDateFormat0));
assertNotSame(stdDateFormat0, stdDateFormat1);
assertNotSame(stdDateFormat1, stdDateFormat0);
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
assertTrue(stdDateFormat1.isLenient());

ParsePosition parsePosition0 = new ParsePosition(0);
assertNotNull(parsePosition0);
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals(0, parsePosition0.getIndex());
assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());

parsePosition0.setIndex((-3050));
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals("java.text.ParsePosition[index=-3050,errorIndex=-1]", parsePosition0.toString());
assertEquals((-3050), parsePosition0.getIndex());

stdDateFormat1.instance.parseAsISO8601("yyyy-MM-dd'T'HH:mm:ss.SSSZ", parsePosition0);

[MASTER] 21:35:17.174 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test55 -> class java.text.ParseException: Cannot parse date "yyyy-MM-dd'T'HH:mm:ss.SSSZ": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null)
[MASTER] 21:35:17.175 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
assertNotNull(stdDateFormat0);
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());

ParsePosition parsePosition0 = new ParsePosition(0);
assertNotNull(parsePosition0);
assertEquals("java.text.ParsePosition[index=0,errorIndex=-1]", parsePosition0.toString());
assertEquals(0, parsePosition0.getIndex());
assertEquals((-1), parsePosition0.getErrorIndex());

stdDateFormat0.instance.parseAsISO8601("yyyy-MM-dd'T'HH:mm:ss.SSSZ", parsePosition0);

[MASTER] 21:35:17.175 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test66 -> class java.lang.AssertionError: Expecting exception: NullPointerException
[MASTER] 21:35:17.177 [logback-1] WARN  JUnitAnalyzer - Failing test:
 SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(45, "+00:00");
assertNotNull(simpleTimeZone0);
assertFalse(simpleTimeZone0.useDaylightTime());
assertEquals(0, simpleTimeZone0.getDSTSavings());
assertEquals(45, simpleTimeZone0.getRawOffset());
assertEquals("+00:00", simpleTimeZone0.getID());
assertEquals("java.util.SimpleTimeZone[id=+00:00,offset=45,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());

Locale locale0 = Locale.GERMANY;
assertNotNull(locale0);
assertEquals("deu", locale0.getISO3Language());
assertEquals("de_DE", locale0.toString());
assertEquals("DE", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("de", locale0.getLanguage());
assertEquals("DEU", locale0.getISO3Country());

Boolean boolean0 = new Boolean("+00:00");
assertNotNull(boolean0);
assertFalse(boolean0);

StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
assertNotNull(stdDateFormat0);
assertFalse(simpleTimeZone0.useDaylightTime());
assertEquals(0, simpleTimeZone0.getDSTSavings());
assertEquals(45, simpleTimeZone0.getRawOffset());
assertEquals("+00:00", simpleTimeZone0.getID());
assertEquals("java.util.SimpleTimeZone[id=+00:00,offset=45,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
assertEquals("deu", locale0.getISO3Language());
assertEquals("de_DE", locale0.toString());
assertEquals("DE", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("de", locale0.getLanguage());
assertEquals("DEU", locale0.getISO3Country());
assertFalse(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());

TimeZone timeZone0 = stdDateFormat0.getTimeZone();
assertNotNull(timeZone0);
assertSame(simpleTimeZone0, timeZone0);
assertSame(timeZone0, simpleTimeZone0);
assertFalse(simpleTimeZone0.useDaylightTime());
assertEquals(0, simpleTimeZone0.getDSTSavings());
assertEquals(45, simpleTimeZone0.getRawOffset());
assertEquals("+00:00", simpleTimeZone0.getID());
assertEquals("java.util.SimpleTimeZone[id=+00:00,offset=45,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
assertEquals("deu", locale0.getISO3Language());
assertEquals("de_DE", locale0.toString());
assertEquals("DE", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("de", locale0.getLanguage());
assertEquals("DEU", locale0.getISO3Country());
assertFalse(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertEquals("+00:00", timeZone0.getID());
assertFalse(timeZone0.useDaylightTime());
assertEquals("java.util.SimpleTimeZone[id=+00:00,offset=45,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", timeZone0.toString());
assertEquals(0, timeZone0.getDSTSavings());
assertEquals(45, timeZone0.getRawOffset());


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 4
* Writing tests to file
[MASTER] 21:35:19.554 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test59 -> class java.lang.AssertionError: Expecting exception: NullPointerException
[MASTER] 21:35:19.555 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = new StdDateFormat();
MockDate mockDate0 = new MockDate((-1739), (-1739), 2, (-1739), 0);
stdDateFormat0.instance.format((Date) mockDate0);

[MASTER] 21:35:19.555 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test81 -> class java.lang.AssertionError: Expecting exception: NullPointerException
[MASTER] 21:35:19.555 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
stdDateFormat0.parse("0000-00-~00", (ParsePosition) null);

* Writing JUnit test case 'StdDateFormat_ESTest' to results/JacksonDatabind-104/com.fasterxml.jackson.databind.util.StdDateFormat/BBC-F0/tests/26
* Done!

* Computation finished
