* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0
* Going to generate test cases for class: com.fasterxml.jackson.databind.util.StdDateFormat
* Starting Client-0
* Connecting to master process on port 19096
* Analyzing classpath: 
  - subjects/buggy-versions/JacksonDatabind-104/target/classes
  - defects4j/framework/projects/JacksonDatabind/lib/com/fasterxml/jackson/core/jackson-annotations/2.9.0/jackson-annotations-2.9.0.jar
  - defects4j/framework/projects/JacksonDatabind/lib/com/fasterxml/jackson/core/jackson-core/2.9.8/jackson-core-2.9.8.jar
* Finished analyzing classpath
* Generating tests for class com.fasterxml.jackson.databind.util.StdDateFormat
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 1396
* Using seed 749570753
* Starting evolution
* Initial Number of Goals in DynaMOSA = 666 / 1396
[MASTER] 21:28:59.109 [logback-2] ERROR TestCluster - Failed to check cache for java.time.temporal.TemporalQuery<R> : Type points to itself
[MASTER] 21:32:45.489 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 302s and 549 generations, 160349 statements, best individual has fitness: 188.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 84%
* Total number of goals: 234
* Number of covered goals: 196
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 82%
* Total number of goals: 146
* Number of covered goals: 120
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 97%
* Total number of goals: 29
* Number of covered goals: 28
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 95%
* Total number of goals: 714
* Number of covered goals: 679
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 59%
* Total number of goals: 90
* Number of covered goals: 53
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 100%
* Total number of goals: 33
* Number of covered goals: 33
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 82%
* Total number of goals: 146
* Number of covered goals: 120
* Generated 84 tests with total length 317
* Resulting test suite's coverage: 82% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 21:34:23.560 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6804166666666667% of time used, but only 19/84 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 15%
* Compiling and checking tests
[MASTER] 21:34:50.615 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:34:50.617 [logback-1] WARN  JUnitAnalyzer - Failing test:
 SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-3595), "0000-00-00");
assertNotNull(simpleTimeZone0);
assertEquals("0000-00-00", simpleTimeZone0.getID());
assertEquals(0, simpleTimeZone0.getDSTSavings());
assertFalse(simpleTimeZone0.useDaylightTime());
assertEquals((-3595), simpleTimeZone0.getRawOffset());
assertEquals("java.util.SimpleTimeZone[id=0000-00-00,offset=-3595,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());

Locale locale0 = Locale.SIMPLIFIED_CHINESE;
assertNotNull(locale0);
assertEquals("zho", locale0.getISO3Language());
assertEquals("CHN", locale0.getISO3Country());
assertEquals("CN", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("zh", locale0.getLanguage());
assertEquals("zh_CN", locale0.toString());

Boolean boolean0 = Boolean.valueOf("0000-00-00");
assertFalse(boolean0);
assertNotNull(boolean0);

StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
assertNotNull(stdDateFormat0);
assertEquals("0000-00-00", simpleTimeZone0.getID());
assertEquals(0, simpleTimeZone0.getDSTSavings());
assertFalse(simpleTimeZone0.useDaylightTime());
assertEquals((-3595), simpleTimeZone0.getRawOffset());
assertEquals("java.util.SimpleTimeZone[id=0000-00-00,offset=-3595,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0]", simpleTimeZone0.toString());
assertEquals("zho", locale0.getISO3Language());
assertEquals("CHN", locale0.getISO3Country());
assertEquals("CN", locale0.getCountry());
assertEquals("", locale0.getVariant());
assertEquals("zh", locale0.getLanguage());
assertEquals("zh_CN", locale0.toString());
assertFalse(stdDateFormat0.isLenient());
assertTrue(stdDateFormat0.isColonIncludedInTimeZone());

stdDateFormat0.parse("0000-00-00T00:00");

[MASTER] 21:34:51.221 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: ParseException
[MASTER] 21:34:51.221 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
assertNotNull(stdDateFormat0);
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());

ParsePosition parsePosition0 = new ParsePosition(1);
assertNotNull(parsePosition0);
assertEquals(1, parsePosition0.getIndex());
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());

stdDateFormat0._parseDate("1582-10-15T00:00:00.000+0000", parsePosition0);

[MASTER] 21:34:52.760 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:34:52.760 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = new StdDateFormat();
assertNotNull(stdDateFormat0);
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());

ParsePosition parsePosition0 = new ParsePosition(25);
assertNotNull(parsePosition0);
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals(25, parsePosition0.getIndex());
assertEquals("java.text.ParsePosition[index=25,errorIndex=-1]", parsePosition0.toString());

stdDateFormat0._parseAsISO8601("0000-00-00T00:00", parsePosition0);

[MASTER] 21:34:53.383 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:34:53.384 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = new StdDateFormat();
assertNotNull(stdDateFormat0);
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());

ParsePosition parsePosition0 = new ParsePosition(1);
assertNotNull(parsePosition0);
assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals(1, parsePosition0.getIndex());

stdDateFormat0._parseDate("0000-00-00T00:00", parsePosition0);

[MASTER] 21:34:54.744 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:34:54.744 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = new StdDateFormat();
assertNotNull(stdDateFormat0);
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());

ParsePosition parsePosition0 = new ParsePosition(1);
assertNotNull(parsePosition0);
assertEquals(1, parsePosition0.getIndex());
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());

stdDateFormat0.parse("0000-00-00T00:00", parsePosition0);

[MASTER] 21:34:55.210 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: Expecting exception: IllegalStateException
[MASTER] 21:34:55.211 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = StdDateFormat.instance;
assertNotNull(stdDateFormat0);
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertTrue(stdDateFormat0.isLenient());

ParsePosition parsePosition0 = new ParsePosition(1);
assertNotNull(parsePosition0);
assertEquals(1, parsePosition0.getIndex());
assertEquals("java.text.ParsePosition[index=1,errorIndex=-1]", parsePosition0.toString());
assertEquals((-1), parsePosition0.getErrorIndex());

stdDateFormat0.parseAsISO8601("0000-00-00T00:00", parsePosition0);

[MASTER] 21:34:58.891 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: expected null, but was:<Fri Feb 14 20:21:21 GMT 2014>
[MASTER] 21:34:58.891 [logback-1] WARN  JUnitAnalyzer - Failing test:
 StdDateFormat stdDateFormat0 = new StdDateFormat();
assertNotNull(stdDateFormat0);
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());

ParsePosition parsePosition0 = new ParsePosition(1933);
assertNotNull(parsePosition0);
assertEquals(1933, parsePosition0.getIndex());
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals("java.text.ParsePosition[index=1933,errorIndex=-1]", parsePosition0.toString());

Date date0 = stdDateFormat0.parse("1582-10-15T00:00:00.000+0000", parsePosition0);
assertNull(date0);
assertTrue(stdDateFormat0.isLenient());
assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
assertEquals(1933, parsePosition0.getIndex());
assertEquals((-1), parsePosition0.getErrorIndex());
assertEquals("java.text.ParsePosition[index=1933,errorIndex=-1]", parsePosition0.toString());


* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 6
* Writing tests to file
* Writing JUnit test case 'StdDateFormat_ESTest' to results/JacksonDatabind-104/com.fasterxml.jackson.databind.util.StdDateFormat/BBC-F0/tests/25
* Done!

* Computation finished
