/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 21 17:02:36 GMT 2021
 */

package com.fasterxml.jackson.databind.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.databind.util.StdDateFormat;
import java.text.ChoiceFormat;
import java.text.DecimalFormatSymbols;
import java.text.FieldPosition;
import java.text.Format;
import java.text.ParseException;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;
import sun.util.calendar.ZoneInfo;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class StdDateFormat_ESTest extends StdDateFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      stdDateFormat0.parse("0000-00-03");
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      Date date0 = stdDateFormat0.parse("0000-60-00");
      //  // Unstable assertion: assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      stdDateFormat0.parse("0009-00-00");
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      Date date0 = stdDateFormat0.parse("0400-00-00");
      //  // Unstable assertion: assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      Date date0 = stdDateFormat0.parse("2000-00-00");
      //  // Unstable assertion: assertEquals("Fri Oct 15 00:00:00 GMT 1582", date0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-1), "");
      Locale locale0 = Locale.US;
      Boolean boolean0 = Boolean.valueOf(true);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
      try { 
        stdDateFormat0.parse("H^&j.=bN9");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"H^&j.=bN9\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-804), 58, (-459));
      Date date0 = mockGregorianCalendar0.getGregorianChange();
      Locale locale0 = StdDateFormat.DEFAULT_LOCALE;
      TimeZone timeZone0 = TimeZone.getDefault();
      StringBuffer stringBuffer0 = new StringBuffer();
      stdDateFormat0._format(timeZone0, locale0, date0, stringBuffer0);
      assertEquals("1582-10-15T00:00:00.000+0000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "hDwT ]");
      Locale locale0 = Locale.US;
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0);
      stdDateFormat0._clearFormats();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(122);
      stdDateFormat0.parse("0000-00-0T00:00", parsePosition0);
      assertTrue(stdDateFormat0.isLenient());
      assertEquals("java.text.ParsePosition[index=122,errorIndex=-1]", parsePosition0.toString());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "]");
      Locale locale0 = Locale.GERMAN;
      Boolean boolean0 = new Boolean("]");
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
      assertFalse(stdDateFormat1.isLenient());
      assertSame(stdDateFormat1, stdDateFormat0);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-19), "0000-00-00T00:00");
      Locale locale0 = Locale.ITALY;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, false);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(false);
      assertSame(stdDateFormat1, stdDateFormat0);
      assertFalse(stdDateFormat1.isLenient());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(false);
      assertSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(1);
      stdDateFormat0.parseAsISO8601("0000-00-00", parsePosition0);
      assertTrue(stdDateFormat0.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      boolean boolean0 = stdDateFormat0.looksLikeISO8601("0000-00-00");
      assertTrue(boolean0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.FRENCH;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, (Boolean) null, true);
      stdDateFormat0.looksLikeISO8601("~^EU)Xf");
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.FRENCH;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, (Boolean) null, true);
      boolean boolean0 = stdDateFormat0.isColonIncludedInTimeZone();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertNull(timeZone0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, "]");
      Locale locale0 = Locale.GERMAN;
      Boolean boolean0 = new Boolean("]");
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertFalse(stdDateFormat0.isLenient());
      assertNotNull(timeZone0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-19), "0000-00-00T00:00");
      Locale locale0 = Locale.ITALY;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, false);
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
      assertNotNull(timeZone0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.FRENCH;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, (Boolean) null, true);
      stdDateFormat0.clone();
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition((-1259));
      Date date0 = stdDateFormat0._parseDate("0000-00-00", parsePosition0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", date0.toString());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      stdDateFormat0._parseAsISO8601("0000-00-00", (ParsePosition) null);
      assertTrue(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
      TimeZone timeZone0 = TimeZone.getDefault();
      Calendar calendar0 = stdDateFormat1._getCalendar(timeZone0);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=false,areAllFieldsSet=false,lenient=false,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=0,DST_OFFSET=0]", calendar0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(1960);
      boolean boolean0 = StdDateFormat._equals(integer0, integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = StdDateFormat._equals((String) null, "com.fasterxml.jackson.databind.util.StdDateFormat");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      // Undeclared exception!
      try { 
        stdDateFormat0.withLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      // Undeclared exception!
      try { 
        stdDateFormat0.setTimeZone((TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition((-200));
      // Undeclared exception!
      try { 
        stdDateFormat0.parseAsRFC1123("0000-00-00", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(60000);
      // Undeclared exception!
      try { 
        stdDateFormat0.parseAsRFC1123((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(58);
      // Undeclared exception!
      try { 
        stdDateFormat0.instance.parseAsISO8601((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition((-1330));
      // Undeclared exception!
      try { 
        stdDateFormat0.parseAsISO8601("0000-00-00T00:00", parsePosition0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition((-826));
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("~OvL1*7Pf)xGV", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("yyyy-MM-dd'T'HH:mm:ss.SSSZ", (ParsePosition) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(9);
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("0000-00-00T00:00", parsePosition0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.FRENCH;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, (Boolean) null, true);
      // Undeclared exception!
      try { 
        stdDateFormat0.parse((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      // Undeclared exception!
      try { 
        stdDateFormat0.looksLikeISO8601((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      // Undeclared exception!
      try { 
        StdDateFormat.getRFC1123Format(timeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      StringBuffer stringBuffer0 = new StringBuffer();
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 4273);
      // Undeclared exception!
      try { 
        stdDateFormat0.format((Date) null, stringBuffer0, fieldPosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(26);
      try { 
        stdDateFormat0._parseDate("0000-00-0T00:00", parsePosition0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"0000-00-0T00:00\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("");
      Locale locale0 = Locale.UK;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0);
      ParsePosition parsePosition0 = new ParsePosition((-498));
      // Undeclared exception!
      try { 
        stdDateFormat0._parseDate("", parsePosition0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ParsePosition parsePosition0 = new ParsePosition(3609);
      // Undeclared exception!
      try { 
        stdDateFormat0._parseDate((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(3600);
      // Undeclared exception!
      try { 
        stdDateFormat0._parseDate("0000-00-00T00:00", parsePosition0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(8, "<5");
      Locale locale0 = Locale.TAIWAN;
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, (Boolean) null);
      // Undeclared exception!
      try { 
        stdDateFormat0._parseAsISO8601("", (ParsePosition) null);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(2722);
      // Undeclared exception!
      try { 
        stdDateFormat0._parseAsISO8601((String) null, parsePosition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(56);
      // Undeclared exception!
      try { 
        stdDateFormat0._parseAsISO8601("0000-00-00T00:00", parsePosition0);
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      stdDateFormat0._getCalendar((TimeZone) null);
      // Undeclared exception!
      try { 
        stdDateFormat0._getCalendar((TimeZone) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      Locale locale0 = Locale.CANADA;
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      StringBuffer stringBuffer0 = new StringBuffer();
      // Undeclared exception!
      try { 
        stdDateFormat0._format(timeZone0, locale0, (Date) null, stringBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      StdDateFormat stdDateFormat1 = stdDateFormat0.instance.withTimeZone(timeZone0);
      try { 
        stdDateFormat1.parse("2.2250738585072012e-308");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"2.2250738585072012e-308\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(10, "a");
      Locale locale0 = Locale.TAIWAN;
      Boolean boolean0 = new Boolean(true);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, false);
      ParsePosition parsePosition0 = new ParsePosition(10);
      stdDateFormat0._parseDate("a", parsePosition0);
      stdDateFormat0.parseAsRFC1123("a", parsePosition0);
      assertEquals(10, parsePosition0.getErrorIndex());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      boolean boolean0 = stdDateFormat0.isLenient();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      ChoiceFormat choiceFormat0 = new ChoiceFormat("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      stdDateFormat0.instance.setNumberFormat(choiceFormat0);
      stdDateFormat0.isLenient();
      ParsePosition parsePosition0 = new ParsePosition(9);
      stdDateFormat0.parse("~OvL1*7B|)xGV", parsePosition0);
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(9, "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      StdDateFormat stdDateFormat2 = stdDateFormat1.withTimeZone(simpleTimeZone0);
      ParsePosition parsePosition1 = new ParsePosition(9);
      stdDateFormat1.clone();
      try { 
        stdDateFormat2._parseAsISO8601("*bwt", parsePosition1);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"*bwt\": while it seems to fit format 'yyyy-MM-dd', parsing fails (leniency? false)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = StdDateFormat.DEFAULT_LOCALE;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient((Boolean) null);
      assertTrue(stdDateFormat1.isLenient());
      assertFalse(stdDateFormat0.isLenient());
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, boolean0);
      ParsePosition parsePosition0 = new ParsePosition(1806);
      stdDateFormat0._parseDate("9p/t", parsePosition0);
      assertEquals(1806, parsePosition0.getErrorIndex());
      assertFalse(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(8, "<5");
      Locale locale0 = Locale.UK;
      Boolean boolean0 = Boolean.valueOf(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
      // Undeclared exception!
      try { 
        stdDateFormat0.parse("0000-00-00T00:00");
       //  fail("Expecting exception: IllegalStateException");
       // Unstable assertion
      } catch(IllegalStateException e) {
         //
         // No match available
         //
         verifyException("java.util.regex.Matcher", e);
      }
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(2147483645);
      try { 
        stdDateFormat0.parseAsISO8601("", parsePosition0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"\": while it seems to fit format 'yyyy-MM-dd', parsing fails (leniency? null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, (Locale) null);
      ParsePosition parsePosition0 = new ParsePosition(374);
      try { 
        stdDateFormat0._parseAsISO8601("yyyy-MM-dd'T'HH:mm:ss.SSSZ", parsePosition0);
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"yyyy-MM-dd'T'HH:mm:ss.SSSZ\": while it seems to fit format 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', parsing fails (leniency? null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      try { 
        stdDateFormat0.parse("0000 0.-00");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"0000 0.-00\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      try { 
        stdDateFormat0.parse("4lL=* hd!w ,w5$@2d");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"4lL=* hd!w ,w5$@2d\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ZoneInfo zoneInfo0 = (ZoneInfo)StdDateFormat.DEFAULT_TIMEZONE;
      Locale locale0 = Locale.FRENCH;
      StdDateFormat stdDateFormat0 = new StdDateFormat(zoneInfo0, locale0, (Boolean) null, true);
      boolean boolean0 = stdDateFormat0.equals(stdDateFormat0);
      assertTrue(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      Locale locale0 = StdDateFormat.DEFAULT_LOCALE;
      DecimalFormatSymbols decimalFormatSymbols0 = DecimalFormatSymbols.getInstance(locale0);
      boolean boolean0 = stdDateFormat0.equals(decimalFormatSymbols0);
      assertFalse(boolean0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      Boolean boolean0 = Boolean.valueOf("yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLenient(boolean0);
      String string0 = stdDateFormat1.toPattern();
      assertEquals("[one of: 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', 'EEE, dd MMM yyyy HH:mm:ss zzz' (strict)]", string0);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      String string0 = stdDateFormat0.instance.toPattern();
      assertEquals("[one of: 'yyyy-MM-dd'T'HH:mm:ss.SSSZ', 'EEE, dd MMM yyyy HH:mm:ss zzz' (lenient)]", string0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("lenient");
      Locale locale0 = Locale.ITALIAN;
      Boolean boolean0 = Boolean.valueOf(true);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      MockDate mockDate0 = new MockDate(17, 1336, 17);
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "yyyy-MM-dd'T'HH:mm:ss.SSSZ");
      Format.Field format_Field0 = mock(Format.Field.class, new ViolatedAssumptionAnswer());
      FieldPosition fieldPosition0 = new FieldPosition(format_Field0, 1336);
      stdDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      assertEquals("yyyy-MM-dd'T'HH:mm:ss.SSSZ2028-05-17T00:00:00.000+00:00", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone((-10), "RF%m5?/9=");
      Locale locale0 = Locale.TAIWAN;
      Boolean boolean0 = new Boolean("");
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      FieldPosition fieldPosition0 = new FieldPosition((-10));
      MockDate mockDate0 = new MockDate((-10));
      StringBuffer stringBuffer0 = new StringBuffer();
      stdDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      assertEquals("1969-12-31T23:59:59.980-0000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      MockDate mockDate0 = new MockDate((-1674), (-1674), (-1674));
      StringBuffer stringBuffer0 = new StringBuffer();
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      FieldPosition fieldPosition0 = new FieldPosition((-1674));
      stdDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      assertEquals("0081-11-29T00:00:00.000+0000", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      Date date0 = stdDateFormat0.parse("2");
      assertEquals("Thu Jan 01 00:00:00 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(8, "0000-00-00");
      Locale locale0 = Locale.TAIWAN;
      Boolean boolean0 = new Boolean(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      try { 
        stdDateFormat0.parse("#");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"#\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      try { 
        stdDateFormat0.parse("0000-h0-0T00S00");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Cannot parse date \"0000-h0-0T00S00\": not compatible with any of standard forms (\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\", \"yyyy-MM-dd'T'HH:mm:ss.SSS\", \"EEE, dd MMM yyyy HH:mm:ss zzz\", \"yyyy-MM-dd\")
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(8, "<5");
      StringBuffer stringBuffer0 = new StringBuffer("EEE, dd MMM yyyy HH:mm:ss zzz");
      FieldPosition fieldPosition0 = new FieldPosition(8);
      MockDate mockDate0 = new MockDate();
      Locale locale0 = Locale.UK;
      Boolean boolean0 = Boolean.valueOf(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
      stdDateFormat0.format((Date) mockDate0, stringBuffer0, fieldPosition0);
      assertEquals("EEE, dd MMM yyyy HH:mm:ss zzz2014-02-14T20:21:21.328+00:00", stringBuffer0.toString());
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      stdDateFormat0.parse("0090-00-00");
      ParsePosition parsePosition0 = new ParsePosition((-2345));
      stdDateFormat0.parse("0090-00-00", parsePosition0);
      assertTrue(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      stdDateFormat0.setLenient(true);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertTrue(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, boolean0);
      TimeZone timeZone0 = TimeZone.getDefault();
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone0);
      stdDateFormat1.setTimeZone(timeZone0);
      assertNotSame(stdDateFormat1, stdDateFormat0);
      assertFalse(stdDateFormat1.isLenient());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("lenient");
      Locale locale0 = Locale.ITALIAN;
      Boolean boolean0 = Boolean.valueOf(true);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
      assertSame(stdDateFormat1, stdDateFormat0);
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      StdDateFormat stdDateFormat1 = stdDateFormat0.withColonInTimeZone(true);
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getTimeZone("lenient");
      Locale locale0 = Locale.ITALIAN;
      Boolean boolean0 = Boolean.valueOf(true);
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0, true);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
      assertSame(stdDateFormat1, stdDateFormat0);
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      Locale locale0 = new Locale("0000-00-00");
      StdDateFormat stdDateFormat1 = stdDateFormat0.withLocale(locale0);
      assertNotSame(stdDateFormat1, stdDateFormat0);
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TimeZone timeZone0 = TimeZone.getDefault();
      Locale locale0 = Locale.TAIWAN;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat(timeZone0, locale0, boolean0);
      TimeZone timeZone1 = TimeZone.getTimeZone("com.fasterxml.jackson.core.io.NumberInput");
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(timeZone1);
      assertSame(stdDateFormat1, stdDateFormat0);
      assertFalse(stdDateFormat1.isLenient());
      assertFalse(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      Boolean boolean0 = Boolean.FALSE;
      StdDateFormat stdDateFormat0 = new StdDateFormat((TimeZone) null, locale0, boolean0);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone((TimeZone) null);
      assertFalse(stdDateFormat1.isLenient());
      assertNotSame(stdDateFormat1, stdDateFormat0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(8, "<5");
      Locale locale0 = Locale.UK;
      Boolean boolean0 = Boolean.valueOf(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0, true);
      StdDateFormat stdDateFormat1 = stdDateFormat0.withTimeZone(simpleTimeZone0);
      assertSame(stdDateFormat1, stdDateFormat0);
      assertFalse(stdDateFormat1.isLenient());
      assertTrue(stdDateFormat1.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      stdDateFormat0.hashCode();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      stdDateFormat0.instance.setTimeZone(timeZone0);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      boolean boolean0 = stdDateFormat0.isColonIncludedInTimeZone();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(16, "");
      Locale locale0 = Locale.CHINA;
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)StdDateFormat.getISO8601Format(simpleTimeZone0, locale0);
      assertEquals("aaaa-nn-jj'T'HH:mm:ss.SSSZ", mockSimpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(8, "0000-00-00");
      Locale locale0 = Locale.TAIWAN;
      Boolean boolean0 = new Boolean(false);
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0, boolean0);
      stdDateFormat0.setLenient(false);
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertFalse(stdDateFormat0.isLenient());
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(16, "");
      Locale locale0 = Locale.CHINA;
      MockSimpleDateFormat mockSimpleDateFormat0 = (MockSimpleDateFormat)StdDateFormat.getRFC1123Format(simpleTimeZone0, locale0);
      assertEquals("EEE, jj nnn aaaa HH:mm:ss zzz", mockSimpleDateFormat0.toLocalizedPattern());
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      StdDateFormat stdDateFormat0 = new StdDateFormat();
      try { 
        stdDateFormat0.parse("-");
        fail("Expecting exception: ParseException");
      
      } catch(ParseException e) {
         //
         // Timestamp value - out of 64-bit value range
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      StdDateFormat stdDateFormat0 = StdDateFormat.instance;
      String string0 = stdDateFormat0.toString();
      assertEquals("DateFormat com.fasterxml.jackson.databind.util.StdDateFormat: (timezone: null, locale: en_US, lenient: null)", string0);
  }

  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      TimeZone timeZone0 = StdDateFormat.getDefaultTimeZone();
      // Undeclared exception!
      try { 
        StdDateFormat.getISO8601Format(timeZone0, (Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.databind.util.StdDateFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(3, "", 3, 3, 3, 48, 9, 9, 3, 3, 9, 48, 58);
      Locale locale0 = Locale.ITALY;
      StdDateFormat stdDateFormat0 = new StdDateFormat(simpleTimeZone0, locale0);
      TimeZone timeZone0 = stdDateFormat0.getTimeZone();
      assertFalse(stdDateFormat0.isColonIncludedInTimeZone());
      assertNotNull(timeZone0);
  }
}
