* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: com.fasterxml.jackson.core.json.ReaderBasedJsonParser
* Starting Client-0
* Connecting to master process on port 10247
* Analyzing classpath: 
  - subjects/buggy-versions/JacksonCore-25/target/classes
* Finished analyzing classpath
* Generating tests for class com.fasterxml.jackson.core.json.ReaderBasedJsonParser
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 5457
* Using seed 296090288
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 780 / 5457
[MASTER] 21:56:08.980 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.fasterxml.jackson.core.io.IOContext due to org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.fasterxml.jackson.core.json.ReaderBasedJsonParser due to org.evosuite.ga.ConstructionFailedException: Have no generator for class com.fasterxml.jackson.core.io.IOContext canUseFunctionalMocks=false, canBeMocked: true
[MASTER] 21:57:41.632 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Failed to add constructor for com.fasterxml.jackson.core.json.ReaderBasedJsonParser due to org.evosuite.ga.ConstructionFailedException: Have no generator for class com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer canUseFunctionalMocks=false, canBeMocked: true
[MASTER] 21:57:46.897 [logback-1] WARN  TestChromosome - Functional mock problem: org.evosuite.ga.ConstructionFailedException: Have no generator for class com.fasterxml.jackson.core.json.ReaderBasedJsonParser canUseFunctionalMocks=false, canBeMocked: false
* Search finished after 603s and 1315 generations, 1025759 statements, best individual has fitness: 2164.0
* Minimizing test suite
[MASTER] 22:07:09.331 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 64%
* Total number of goals: 1431
* Number of covered goals: 917
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 64%
* Total number of goals: 1404
* Number of covered goals: 901
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 157
* Number of covered goals: 157
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 57%
* Total number of goals: 924
* Number of covered goals: 531
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 53%
* Total number of goals: 192
* Number of covered goals: 102
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 100%
* Total number of goals: 51
* Number of covered goals: 51
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 84%
* Total number of goals: 51
* Number of covered goals: 43
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 64%
* Total number of goals: 1404
* Number of covered goals: 901
* Generated 741 tests with total length 11430
* Resulting test suite's coverage: 67% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 22:08:15.489 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6716333333333333% of time used, but only 70/741 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 5%
* Compiling and checking tests
[MASTER] 22:09:08.776 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 22:09:25.023 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 22:09:25.028 [logback-1] WARN  JUnitAnalyzer - Failing test:
 BufferRecycler bufferRecycler0 = new BufferRecycler();
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertNotNull(bufferRecycler0);

IOContext iOContext0 = new IOContext(bufferRecycler0, "BI_INTER", true);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertNotNull(iOContext0);

CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
assertEquals(0, charsToNameCanonicalizer0.size());
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertTrue(charsToNameCanonicalizer0.maybeDirty());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
assertNotNull(charsToNameCanonicalizer0);

StringReader stringReader0 = new StringReader("/:2");
assertNotNull(stringReader0);

boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
assertTrue(boolean0);

int int0 = stringReader0.read();
assertEquals(47, int0);

ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 73, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals(0, charsToNameCanonicalizer0.size());
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertTrue(charsToNameCanonicalizer0.maybeDirty());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
assertFalse(readerBasedJsonParser0.isClosed());
assertNull(readerBasedJsonParser0.getCurrentName());
assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
assertFalse(readerBasedJsonParser0.canReadObjectId());
assertFalse(readerBasedJsonParser0.isNaN());
assertEquals(0, readerBasedJsonParser0.currentTokenId());
assertEquals(0L, readerBasedJsonParser0.getTokenCharacterOffset());
assertEquals(1, readerBasedJsonParser0.getTokenColumnNr());
assertEquals(73, readerBasedJsonParser0.getFeatureMask());
assertFalse(readerBasedJsonParser0.hasTextCharacters());
assertFalse(readerBasedJsonParser0.canParseAsync());
assertFalse(readerBasedJsonParser0.hasCurrentToken());
assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
assertFalse(readerBasedJsonParser0.requiresCustomCodec());
assertFalse(readerBasedJsonParser0.canReadTypeId());
assertNull(readerBasedJsonParser0.getLastClearedToken());
assertNull(readerBasedJsonParser0.getCurrentToken());
assertNull(readerBasedJsonParser0.currentToken());
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
assertNotNull(readerBasedJsonParser0);

boolean boolean1 = readerBasedJsonParser0._isNextTokenNameMaybe(281, "BI_INTER");
assertTrue(boolean1 == boolean0);
assertTrue(boolean1);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals(0, charsToNameCanonicalizer0.size());
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertTrue(charsToNameCanonicalizer0.maybeDirty());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
assertFalse(readerBasedJsonParser0.isClosed());
assertEquals("", readerBasedJsonParser0.getCurrentName());
assertEquals(2L, readerBasedJsonParser0.getTokenCharacterOffset());
assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
assertFalse(readerBasedJsonParser0.canReadObjectId());
assertFalse(readerBasedJsonParser0.isNaN());
assertTrue(readerBasedJsonParser0.hasCurrentToken());
assertEquals(JsonToken.FIELD_NAME, readerBasedJsonParser0.getCurrentToken());
assertEquals(JsonToken.FIELD_NAME, readerBasedJsonParser0.currentToken());
assertEquals(5, readerBasedJsonParser0.currentTokenId());
assertEquals(3, readerBasedJsonParser0.getTokenColumnNr());
assertEquals(73, readerBasedJsonParser0.getFeatureMask());
assertFalse(readerBasedJsonParser0.hasTextCharacters());
assertFalse(readerBasedJsonParser0.canParseAsync());
assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
assertFalse(readerBasedJsonParser0.requiresCustomCodec());
assertFalse(readerBasedJsonParser0.canReadTypeId());
assertEquals(5, readerBasedJsonParser0.getCurrentTokenId());
assertNull(readerBasedJsonParser0.getLastClearedToken());
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);

int int1 = readerBasedJsonParser0.getTextOffset();
assertFalse(int1 == int0);
assertEquals(0, int1);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals(0, charsToNameCanonicalizer0.size());
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertTrue(charsToNameCanonicalizer0.maybeDirty());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
assertFalse(readerBasedJsonParser0.isClosed());
assertEquals("", readerBasedJsonParser0.getCurrentName());
assertEquals(2L, readerBasedJsonParser0.getTokenCharacterOffset());
assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
assertFalse(readerBasedJsonParser0.canReadObjectId());
assertFalse(readerBasedJsonParser0.isNaN());
assertTrue(readerBasedJsonParser0.hasCurrentToken());
assertEquals(JsonToken.FIELD_NAME, readerBasedJsonParser0.getCurrentToken());
assertEquals(JsonToken.FIELD_NAME, readerBasedJsonParser0.currentToken());
assertEquals(5, readerBasedJsonParser0.currentTokenId());
assertEquals(3, readerBasedJsonParser0.getTokenColumnNr());
assertEquals(73, readerBasedJsonParser0.getFeatureMask());
assertFalse(readerBasedJsonParser0.hasTextCharacters());
assertFalse(readerBasedJsonParser0.canParseAsync());
assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
assertFalse(readerBasedJsonParser0.requiresCustomCodec());
assertFalse(readerBasedJsonParser0.canReadTypeId());
assertEquals(5, readerBasedJsonParser0.getCurrentTokenId());
assertNull(readerBasedJsonParser0.getLastClearedToken());
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);

long long0 = readerBasedJsonParser0.nextLongValue(3);
assertEquals(2L, long0);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals(0, charsToNameCanonicalizer0.size());
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertTrue(charsToNameCanonicalizer0.maybeDirty());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
assertEquals(7, readerBasedJsonParser0.getCurrentTokenId());
assertFalse(readerBasedJsonParser0.isClosed());
assertEquals("", readerBasedJsonParser0.getCurrentName());
assertEquals(2L, readerBasedJsonParser0.getTokenCharacterOffset());
assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
assertFalse(readerBasedJsonParser0.canReadObjectId());
assertFalse(readerBasedJsonParser0.isNaN());
assertTrue(readerBasedJsonParser0.hasCurrentToken());
assertEquals(JsonToken.VALUE_NUMBER_INT, readerBasedJsonParser0.getCurrentToken());
assertEquals(7, readerBasedJsonParser0.currentTokenId());
assertEquals(JsonToken.VALUE_NUMBER_INT, readerBasedJsonParser0.currentToken());
assertEquals(3, readerBasedJsonParser0.getTokenColumnNr());
assertEquals(73, readerBasedJsonParser0.getFeatureMask());
assertFalse(readerBasedJsonParser0.hasTextCharacters());
assertFalse(readerBasedJsonParser0.canParseAsync());
assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
assertFalse(readerBasedJsonParser0.requiresCustomCodec());
assertFalse(readerBasedJsonParser0.canReadTypeId());
assertNull(readerBasedJsonParser0.getLastClearedToken());
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);

char[] charArray0 = readerBasedJsonParser0.getTextCharacters();
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals(0, charsToNameCanonicalizer0.size());
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertTrue(charsToNameCanonicalizer0.maybeDirty());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
assertEquals(7, readerBasedJsonParser0.getCurrentTokenId());
assertFalse(readerBasedJsonParser0.isClosed());
assertEquals("", readerBasedJsonParser0.getCurrentName());
assertEquals(2L, readerBasedJsonParser0.getTokenCharacterOffset());
assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
assertFalse(readerBasedJsonParser0.canReadObjectId());
assertFalse(readerBasedJsonParser0.isNaN());
assertTrue(readerBasedJsonParser0.hasCurrentToken());
assertEquals(JsonToken.VALUE_NUMBER_INT, readerBasedJsonParser0.getCurrentToken());
assertEquals(7, readerBasedJsonParser0.currentTokenId());
assertEquals(JsonToken.VALUE_NUMBER_INT, readerBasedJsonParser0.currentToken());
assertEquals(3, readerBasedJsonParser0.getTokenColumnNr());
assertEquals(73, readerBasedJsonParser0.getFeatureMask());
assertFalse(readerBasedJsonParser0.hasTextCharacters());
assertFalse(readerBasedJsonParser0.canParseAsync());
assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
assertFalse(readerBasedJsonParser0.requiresCustomCodec());
assertFalse(readerBasedJsonParser0.canReadTypeId());
assertNull(readerBasedJsonParser0.getLastClearedToken());
assertEquals(200, charArray0.length);
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);
assertNotNull(charArray0);

SerializedString serializedString0 = new SerializedString("/:2");
assertEquals("/:2", serializedString0.toString());
assertEquals("/:2", serializedString0.getValue());
assertEquals(3, serializedString0.charLength());
assertNotNull(serializedString0);

boolean boolean2 = readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
assertFalse(boolean2 == boolean1);
assertFalse(boolean2 == boolean0);
assertFalse(boolean2);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals(0, charsToNameCanonicalizer0.size());
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertTrue(charsToNameCanonicalizer0.maybeDirty());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
assertEquals("", readerBasedJsonParser0.getCurrentName());
assertEquals(2L, readerBasedJsonParser0.getTokenCharacterOffset());
assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
assertFalse(readerBasedJsonParser0.canReadObjectId());
assertFalse(readerBasedJsonParser0.isNaN());
assertEquals(0, readerBasedJsonParser0.currentTokenId());
assertTrue(readerBasedJsonParser0.isClosed());
assertEquals(3, readerBasedJsonParser0.getTokenColumnNr());
assertEquals(73, readerBasedJsonParser0.getFeatureMask());
assertFalse(readerBasedJsonParser0.hasTextCharacters());
assertFalse(readerBasedJsonParser0.canParseAsync());
assertFalse(readerBasedJsonParser0.hasCurrentToken());
assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
assertFalse(readerBasedJsonParser0.requiresCustomCodec());
assertFalse(readerBasedJsonParser0.canReadTypeId());
assertNull(readerBasedJsonParser0.getLastClearedToken());
assertNull(readerBasedJsonParser0.getCurrentToken());
assertNull(readerBasedJsonParser0.currentToken());
assertEquals("/:2", serializedString0.toString());
assertEquals("/:2", serializedString0.getValue());
assertEquals(3, serializedString0.charLength());
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);

StringWriter stringWriter0 = new StringWriter(0);
assertEquals("", stringWriter0.toString());
assertNotNull(stringWriter0);

int int2 = readerBasedJsonParser0.getText((Writer) stringWriter0);
assertFalse(int2 == int0);
assertTrue(int2 == int1);
assertEquals(0, int2);
assertTrue(iOContext0.isResourceManaged());
assertNull(iOContext0.getEncoding());
assertEquals(0, charsToNameCanonicalizer0.size());
assertEquals(0, charsToNameCanonicalizer0.maxCollisionLength());
assertTrue(charsToNameCanonicalizer0.maybeDirty());
assertEquals(839877741, charsToNameCanonicalizer0.hashSeed());
assertEquals(1, readerBasedJsonParser0.getTokenLineNr());
assertFalse(readerBasedJsonParser0.isExpectedStartArrayToken());
assertEquals("", readerBasedJsonParser0.getCurrentName());
assertEquals(2L, readerBasedJsonParser0.getTokenCharacterOffset());
assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
assertFalse(readerBasedJsonParser0.canReadObjectId());
assertFalse(readerBasedJsonParser0.isNaN());
assertEquals(0, readerBasedJsonParser0.currentTokenId());
assertTrue(readerBasedJsonParser0.isClosed());
assertEquals(3, readerBasedJsonParser0.getTokenColumnNr());
assertEquals(73, readerBasedJsonParser0.getFeatureMask());
assertFalse(readerBasedJsonParser0.hasTextCharacters());
assertFalse(readerBasedJsonParser0.canParseAsync());
assertFalse(readerBasedJsonParser0.hasCurrentToken());
assertEquals(0, readerBasedJsonParser0.getFormatFeatures());
assertEquals(0, readerBasedJsonParser0.getCurrentTokenId());
assertFalse(readerBasedJsonParser0.requiresCustomCodec());
assertFalse(readerBasedJsonParser0.canReadTypeId());
assertNull(readerBasedJsonParser0.getLastClearedToken());
assertNull(readerBasedJsonParser0.getCurrentToken());
assertNull(readerBasedJsonParser0.currentToken());
assertEquals("", stringWriter0.toString());
assertEquals(0, BufferRecycler.CHAR_TOKEN_BUFFER);
assertEquals(3, BufferRecycler.BYTE_BASE64_CODEC_BUFFER);
assertEquals(2, BufferRecycler.CHAR_TEXT_BUFFER);
assertEquals(1, BufferRecycler.CHAR_CONCAT_BUFFER);
assertEquals(3, BufferRecycler.CHAR_NAME_COPY_BUFFER);
assertEquals(1, BufferRecycler.BYTE_WRITE_ENCODING_BUFFER);
assertEquals(2, BufferRecycler.BYTE_WRITE_CONCAT_BUFFER);
assertEquals(0, BufferRecycler.BYTE_READ_IO_BUFFER);
assertEquals(33, CharsToNameCanonicalizer.HASH_MULT);


* Writing tests to file
* Writing JUnit test case 'ReaderBasedJsonParser_ESTest' to results/JacksonCore-25/com.fasterxml.jackson.core.json.ReaderBasedJsonParser/BBC-F0-50/tests/30
* Done!

* Computation finished
