/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 15:52:23 GMT 2020
 */

package com.fasterxml.jackson.core.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.Base64Variant;
import com.fasterxml.jackson.core.JsonEncoding;
import com.fasterxml.jackson.core.JsonLocation;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonToken;
import com.fasterxml.jackson.core.ObjectCodec;
import com.fasterxml.jackson.core.SerializableString;
import com.fasterxml.jackson.core.TreeNode;
import com.fasterxml.jackson.core.io.IOContext;
import com.fasterxml.jackson.core.io.SerializedString;
import com.fasterxml.jackson.core.json.ReaderBasedJsonParser;
import com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer;
import com.fasterxml.jackson.core.util.BufferRecycler;
import com.fasterxml.jackson.core.util.ByteArrayBuilder;
import com.fasterxml.jackson.core.util.TextBuffer;
import java.io.IOException;
import java.io.OutputStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ReaderBasedJsonParser_ESTest extends ReaderBasedJsonParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("null");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      StringReader stringReader1 = new StringReader("null");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 119, stringReader1, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = null;
      try {
        readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-2800), stringReader0, objectCodec1, charsToNameCanonicalizer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "\\[%oe9<!F1H#k", true);
      StringReader stringReader0 = new StringReader("-9m>Ttp; GvV");
      int int0 = 119;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(753);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 119, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('m' (code 109)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("u/khIzf/)U");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[1];
      stringReader0.read(charArray0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3704, (-128), true);
      System.setCurrentTimeMillis(0);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 3);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._readBinary((Base64Variant) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3042, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1782, 1, true);
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      try { 
        readerBasedJsonParser0.getNextChar("Q8,hF1", jsonToken0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 1
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = 'V';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringReader stringReader0 = new StringReader("");
      stringReader0.read(charBuffer0);
      StringReader stringReader1 = new StringReader("+RH9qn:N&8A}`J");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1), (-238), true);
      charsToNameCanonicalizer0.makeChild((-1));
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 78, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('R' (code 82)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: UNKNOWN; line: 1, column: -235]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "=02", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("n3Z@O:E(-mWE E>Le\"/");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(39);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0._parseName();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      StringReader stringReader0 = new StringReader(") not VALUE_STRING, can not access as binary");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, (-1487), true);
      System.setCurrentTimeMillis((-128));
      BufferRecycler bufferRecycler2 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler2, 1338);
      try { 
        readerBasedJsonParser0._readBinary((Base64Variant) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read -1487
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringReader stringReader0 = new StringReader("1 L(/7r]'mi^Q.%@iE");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-1), stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0._parseNegNumber();
      StringReader stringReader1 = new StringReader("1 L(/7r]'mi^Q.%@iE");
      ObjectCodec objectCodec1 = null;
      ReaderBasedJsonParser readerBasedJsonParser1 = null;
      try {
        readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 93, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("\"");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(114);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 47, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      StringReader stringReader1 = new StringReader("BR7/7-Cl.H}$#d0^>'");
      stringReader1.skip((-806L));
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[1];
      charArray0[0] = ';';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 2073, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, (-640), 1, false);
      readerBasedJsonParser0.nextToken();
      try { 
        readerBasedJsonParser0.getTextCharacters();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(" within/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("1 xsrV^q2=dhuX");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      readerBasedJsonParser0._getText2(jsonToken0);
      readerBasedJsonParser0.nextToken();
      readerBasedJsonParser0.getTextOffset();
      readerBasedJsonParser0.getText();
      readerBasedJsonParser0.getValueAsString();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("NaN");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2609), stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextTextValue();
      charsToNameCanonicalizer0.makeChild(46);
      StringReader stringReader1 = new StringReader("Trying to release buffer smaller than original");
      readerBasedJsonParser0.getTextLength();
      readerBasedJsonParser0.getTextCharacters();
      try { 
        readerBasedJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 10]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Aef1X (B K", false);
      CharsToNameCanonicalizer.createRoot();
      String string0 = "7E\\fU|dv({[H@U";
      StringReader stringReader0 = new StringReader("7E\fU|dv({[H@U");
      StringReader stringReader1 = new StringReader("Aef1X (B K");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0._loadMore();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 12)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("7E\fU|dv({[H@U");
      StringReader stringReader1 = new StringReader("7E\fU|dv({[H@U");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader1, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0._loadMore();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 12)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = iOContext0.allocConcatBuffer();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("(");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-539), stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 3, 2870, true);
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 2873]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler1, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      char[] charArray1 = iOContext0.allocConcatBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("(");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-539), stringReader0, objectCodec2, charsToNameCanonicalizer0, charArray1, 3, 2870, false);
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      readerBasedJsonParser0.getNextChar("R>4WZJu]kYV@tr", jsonToken0);
      try { 
        readerBasedJsonParser0._reportInvalidToken("]d7;L8d1*@", "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token ']d7;L8d1*@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000...': was expecting 
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 251]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Aef\u0001X (B K", false);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("7E\fU|dv({[H@U");
      StringReader stringReader1 = new StringReader("Aef\u0001X (B K");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-972), stringReader1, objectCodec0, charsToNameCanonicalizer0, charArray0, 1229, 3, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(93);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray1 = new char[12];
      charArray1[0] = ':';
      charArray1[1] = '?';
      charArray1[2] = 'e';
      charArray1[3] = 'L';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec1, charsToNameCanonicalizer2, charArray1, 240, 3, false);
      try { 
        readerBasedJsonParser1._parsePosNumber(43);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 12)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: UNKNOWN; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("7E\fU|dv({[H@U");
      StringReader stringReader1 = new StringReader("7E\fU|dv({[H@U");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 12)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("+");
      StringReader stringReader1 = new StringReader("\nRequest payload : ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader1, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Request': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 2, column: 8]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("{() 8");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      charsToNameCanonicalizer1.release();
      char[] charArray0 = new char[2];
      stringReader0.skip(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 2, 2, true);
      readerBasedJsonParser0.nextToken();
      readerBasedJsonParser0.getTextCharacters();
      readerBasedJsonParser0.getTokenLocation();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("{() 8");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("{() 8");
      StringReader stringReader2 = new StringReader("-Infinity");
      StringReader stringReader3 = new StringReader("-Infinity");
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(33);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader3, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Non-standard token '-Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
         //  at [Source: UNKNOWN; line: 1, column: 19]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(",539ga+\"Cmfi");
      char[] charArray0 = new char[10];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      charArray0[0] = 'c';
      stringReader0.read(charArray0);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 78, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2, 33, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parseName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      StringReader stringReader0 = new StringReader("06CI");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = 'W';
      charArray0[1] = 'W';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = '`';
      charArray0[5] = '1';
      charArray0[6] = '1';
      charArray0[7] = '1';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringReader stringReader1 = new StringReader("2ylV>m ' aW");
      stringReader1.read(charBuffer0);
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 44, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Invalid numeric value: Leading zeroes not allowed
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(33);
      StringReader stringReader0 = new StringReader("0r!{h/^");
      StringReader stringReader1 = new StringReader("0r!{h/^");
      char[] charArray0 = new char[0];
      stringReader1.read(charArray0);
      stringReader1.skip((-1181L));
      StringReader stringReader2 = new StringReader("0r!{h/^");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray1 = new char[1];
      charArray1[0] = 'O';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray1, 10, 3, false);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('r' (code 114)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(33);
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("0r!{h/^");
      StringReader stringReader1 = new StringReader("0r!{h/^");
      stringReader1.skip((-1181L));
      StringReader stringReader2 = new StringReader("0r!{h/^");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[1];
      charArray0[0] = 'O';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1713, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 10, 3, false);
      try { 
        readerBasedJsonParser0.nextIntValue(114);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('r' (code 114)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      StringReader stringReader1 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getTypeId();
      readerBasedJsonParser0._handleApos();
      readerBasedJsonParser0.getTextCharacters();
      try { 
        readerBasedJsonParser0.nextLongValue(2147483647L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
         //  at [Source: UNKNOWN; line: 1, column: 29]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(33);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(3);
      char[] charArray0 = new char[13];
      charArray0[1] = 'y';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, objectCodec0, charsToNameCanonicalizer2, charArray0, 33, 2, true);
      readerBasedJsonParser0._parseAposName();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      readerBasedJsonParser0.nextFieldName();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("1 xsrV^q2=dhuX");
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 84, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, (-1245), true);
      readerBasedJsonParser0.getCurrentToken();
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read -1245
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("u/khIzf/)U");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler1, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-1455), (-122), true);
      readerBasedJsonParser0._loadMore();
      StringReader stringReader1 = new StringReader("u/khIzf/)U");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 1, stringReader1, objectCodec1, charsToNameCanonicalizer0, charArray0, 49, 3, true);
      readerBasedJsonParser1._skipCR();
      try { 
        readerBasedJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('/' (code 47)): expected a hex-digit for character escape sequence
         //  at [Source: UNKNOWN; line: 1, column: -119]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("u/khIzf/)U");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler1, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-1455), (-122), true);
      readerBasedJsonParser0._loadMore();
      StringReader stringReader1 = new StringReader("u/khIzf/)U");
      iOContext0.constructTextBuffer();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 1, stringReader1, objectCodec1, charsToNameCanonicalizer0, charArray0, 33, 3, true);
      readerBasedJsonParser1._skipCR();
      try { 
        readerBasedJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('/' (code 47)): expected a hex-digit for character escape sequence
         //  at [Source: UNKNOWN; line: 1, column: -119]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("true");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 45, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextTextValue();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(",539ga+WCmfi");
      char[] charArray0 = new char[4];
      charArray0[0] = 'c';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2471), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3205, 0, false);
      SerializedString serializedString0 = new SerializedString(",539ga+WCmfi");
      StringReader stringReader1 = new StringReader("r$");
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 4, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 49, true);
      try { 
        readerBasedJsonParser1.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 127)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(33);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(3);
      char[] charArray0 = new char[13];
      charArray0[1] = 'y';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, objectCodec0, charsToNameCanonicalizer2, charArray0, 33, 2, true);
      readerBasedJsonParser0._parseAposName();
      readerBasedJsonParser0.nextTextValue();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(33);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(3);
      char[] charArray0 = new char[13];
      charArray0[1] = 'y';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, objectCodec0, charsToNameCanonicalizer2, charArray0, 33, 2, true);
      readerBasedJsonParser0._parseAposName();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextToken();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("ShA!W<>Ai%lR'XPf/");
      CharBuffer charBuffer0 = CharBuffer.allocate(16);
      CharBuffer.allocate(3);
      stringReader0.read(charBuffer0);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextLongValue(3059L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in a comment
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = iOContext0.allocConcatBuffer();
      StringReader stringReader0 = new StringReader("J\"qK~WyWf");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(51);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3514, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, (-3209), false);
      readerBasedJsonParser0.getTypeId();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 57, stringReader0, objectCodec1, charsToNameCanonicalizer1, charArray0, 248, (-137), true);
      int int0 = ReaderBasedJsonParser.FEAT_MASK_TRAILING_COMMA;
      try { 
        readerBasedJsonParser1.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'J': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: -135]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Non-blocking source not (yet?) support for this format (%s)");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = 'r';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      StringReader stringReader1 = new StringReader("fL#aTz7Q&|#]!LG4");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 47, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 8, 3, true);
      SerializedString serializedString0 = new SerializedString("E,I9a-");
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'fL': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("}Y\"_l(OZIg?U?F!");
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "}Y\"_l(OZIg?U?F!", true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("false");
      StringReader stringReader2 = new StringReader("}Y\"_l(OZIg?U?F!");
      StringReader stringReader3 = new StringReader("");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader1, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextBooleanValue();
      readerBasedJsonParser0._loadMore();
      readerBasedJsonParser0.getTokenLocation();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "expected a valid value (number, String, array, object, 'true', 'false' or 'null')", true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 389, (Reader) null, objectCodec0, charsToNameCanonicalizer0);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(32767);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[6];
      charArray0[0] = 'T';
      charArray0[1] = 'P';
      charArray0[2] = '9';
      charArray0[3] = 'p';
      charArray0[4] = 'l';
      charArray0[5] = '3';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 200, (Reader) null, objectCodec1, charsToNameCanonicalizer1, charArray0, 33, 0, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser1.nextLongValue(200);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer smaller than original
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("$~.)^ZWWI{");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 33, 33, true);
      try { 
        readerBasedJsonParser0.nextLongValue(3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 33
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(33);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(3);
      char[] charArray0 = new char[2];
      charArray0[1] = 'y';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, objectCodec0, charsToNameCanonicalizer2, charArray0, 33, 2, true);
      readerBasedJsonParser0._parseAposName();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextToken();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      char[] charArray0 = new char[2];
      charArray0[1] = '\u0006';
      stringReader0.skip(662L);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 57, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 2, 1, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 39, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer smaller than original
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("Shz!W<>Ai%lR'XPf/");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      SerializedString serializedString0 = new SerializedString("Shz!W<>Ai%lR'XPf/");
      SerializedString serializedString1 = new SerializedString("");
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((char[]) null).when(iOContext0).allocTokenBuffer();
      doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getEmbeddedObject();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[5];
      charArray0[0] = ':';
      charArray0[1] = 'F';
      charArray0[2] = '[';
      charArray0[3] = 'P';
      charArray0[4] = 'J';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 33, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 1688, 3, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser1._decodeBase64((Base64Variant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(497);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("7*a^17");
      StringReader stringReader1 = new StringReader("Infinity");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-1717), stringReader1, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getLastClearedToken();
      readerBasedJsonParser0.nextFieldName();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._handleOddName(57);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(" within/between ");
      StringReader stringReader1 = new StringReader("XiW};xA");
      StringReader stringReader2 = new StringReader("Infinity");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1532, stringReader2, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader(" within/between ");
      StringReader stringReader1 = new StringReader("+");
      StringReader stringReader2 = new StringReader("was expecting either '*' or '/' for a comment");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader1, objectCodec0, charsToNameCanonicalizer0);
      stringReader1.close();
      StringWriter stringWriter0 = new StringWriter();
      try { 
        readerBasedJsonParser0._matchToken("g", 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("Unexpected end-of-input within/between ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[12];
      charArray0[0] = '.';
      stringReader0.read(charArray0);
      charArray0[2] = '6';
      charArray0[3] = '.';
      charArray0[4] = '.';
      charArray0[5] = '$';
      charArray0[5] = 'O';
      charArray0[7] = '.';
      charArray0[8] = '.';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2, 4, true);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('n' (code 110)) in numeric value: Decimal point not followed by a digit
         //  at [Source: UNKNOWN; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("1.5");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 500, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getEmbeddedObject();
      iOContext0.withEncoding(jsonEncoding0);
      readerBasedJsonParser0.getTypeId();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      IOContext iOContext3 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader1 = new StringReader("1.5");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-1), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      SerializedString serializedString0 = new SerializedString("]|");
      readerBasedJsonParser1.nextFieldName((SerializableString) serializedString0);
      try { 
        readerBasedJsonParser0.getNextChar("1.5");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader(" within/between ");
      StringReader stringReader1 = new StringReader("+");
      StringReader stringReader2 = new StringReader("was expecting either '*' or '/' for a comment");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader1, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in a Number value
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("{() 8");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1306));
      charsToNameCanonicalizer1.release();
      char[] charArray0 = new char[2];
      charArray0[1] = 'U';
      stringReader0.skip(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 2, 2, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec1, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextToken();
      readerBasedJsonParser0.getTextCharacters();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("]|");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      stringReader0.mark(228);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[6];
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '1';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 44, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "x'AT,>=qk?H", true);
      StringReader stringReader0 = new StringReader("x'AT,>=qk?H");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = '&';
      charArray0[1] = 'r';
      charArray0[2] = ' ';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3541, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 33, 406, true);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('r');
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.releaseBuffered((Writer) stringWriter1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = new char[5];
      StringReader stringReader0 = new StringReader("@]]JYQqcR9+/O@QO");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 2, false);
      readerBasedJsonParser0._loadMore();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      try { 
        readerBasedJsonParser0._parseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: UNKNOWN; line: 1, column: 20]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      char[] charArray0 = new char[8];
      charArray0[1] = '1';
      charsToNameCanonicalizer0.release();
      stringReader0.mark(0);
      charArray0[6] = 'w';
      charArray0[7] = 'w';
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 3, true);
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("]|");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      stringReader0.mark(228);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[6];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = 'w';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = 'w';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 44, true);
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('w' (code 119)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      char[] charArray0 = new char[8];
      charArray0[1] = '1';
      charArray0[4] = '\u0000';
      charsToNameCanonicalizer0.release();
      stringReader0.mark(0);
      charArray0[6] = 'w';
      charArray0[7] = 'v';
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 3, true);
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ":*$w?_{/zy+46bmw9", false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, ":*$w?_{/zy+46bmw9", false);
      StringReader stringReader0 = new StringReader(";O1|^9GK`3Xy.7)DJMC");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      stringReader0.mark(581);
      char[] charArray0 = new char[8];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      charArray0[2] = '$';
      charArray0[3] = '1';
      charArray0[4] = 'w';
      charArray0[5] = '|';
      charArray0[6] = '1';
      charArray0[7] = '1';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 33, false);
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('w' (code 119)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      StringReader stringReader0 = new StringReader("H'Xqj?(U<5ac-UM");
      IOContext iOContext1 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, true);
      StringReader stringReader1 = new StringReader("2Hk461");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 125, stringReader1, objectCodec0, charsToNameCanonicalizer0);
      long long0 = readerBasedJsonParser0._nameStartOffset;
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      SerializedString serializedString0 = new SerializedString("0r!{h/_^");
      readerBasedJsonParser0.getValueAsDouble((double) 1);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('H' (code 72)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("+d/|+'duLk");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-400));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer1, (char[]) null, 0, 2, true);
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.releaseBuffered((Writer) stringWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "x2YSqou7]qfTk-pNrQ", true);
      StringReader stringReader0 = new StringReader(" in a comment");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[8];
      charArray0[0] = '@';
      charArray0[1] = ' ';
      charArray0[2] = ']';
      charArray0[3] = '^';
      charArray0[4] = 'Q';
      charArray0[5] = '#';
      charArray0[6] = 'B';
      charArray0[7] = ',';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1236, 3, false);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'in': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("i^m26;KSY");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'i': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("+Q5iTjC~rN");
      StringReader stringReader1 = new StringReader("{c x5X+y!nPlpO]");
      StringReader stringReader2 = new StringReader("{c x5X+y!nPlpO]");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader1, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextFieldName();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      charArray0[1] = 'f';
      charArray0[2] = 'y';
      charArray0[3] = 'R';
      charArray0[4] = 'f';
      readerBasedJsonParser0._loadMore();
      readerBasedJsonParser0._parsePosNumber(1);
      CharsToNameCanonicalizer.createRoot();
      // Undeclared exception!
      try { 
        charsToNameCanonicalizer1.makeChild(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader0 = new StringReader("{c5zX+y!nPlO]");
      StringReader stringReader1 = new StringReader("&");
      StringReader stringReader2 = new StringReader("{c5zX+y!nPlO]");
      stringReader0.ready();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextBooleanValue();
      StringWriter stringWriter0 = new StringWriter();
      readerBasedJsonParser0.getText((Writer) stringWriter0);
      readerBasedJsonParser0._parsePosNumber(1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("}Y\"_l(OZIg?U?F!");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(500);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader1 = new StringReader("");
      char[] charArray0 = new char[1];
      charArray0[0] = 'f';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2030, (-1716), true);
      StringReader stringReader2 = new StringReader("}Y\"_l(OZIg?U?F!");
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-33), stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser1.getLastClearedToken();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer smaller than original
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader(" within/between ");
      StringReader stringReader1 = new StringReader("\"");
      StringReader stringReader2 = new StringReader("Xjz[");
      StringReader stringReader3 = new StringReader("was expecting either '*' or '/' for a comment");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader1, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextBooleanValue();
      SerializedString serializedString0 = new SerializedString("w~n");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("$~.)^ZWWI{");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 33, 33, false);
      stringReader0.read(charArray0);
      try { 
        readerBasedJsonParser0._reportInvalidToken("$~.)^ZWWI{");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 33
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("+Q5iTjC~rN");
      StringReader stringReader1 = new StringReader("{c x5X+y!nPlpO]");
      StringReader stringReader2 = new StringReader("{c x5X+y!nPlpO]");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = 'W';
      charArray0[1] = ',';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1060), stringReader2, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 49, false);
      readerBasedJsonParser0.getEmbeddedObject();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader3 = new StringReader("$~.)^ZWWI{");
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 52, (Reader) null, objectCodec1, charsToNameCanonicalizer0, charArray0, 3, 1, false);
      readerBasedJsonParser1._inputBuffer = charArray0;
      readerBasedJsonParser1.nextFieldName();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'W': was expecting ('true', 'false' or 'null')
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("W8C}gRm?*");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 116, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'W8C': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("Aef\u0001X (B K");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Aef\u0001X (B K", false);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[5];
      charArray0[0] = 'y';
      charArray0[1] = '1';
      charArray0[0] = '!';
      charArray0[3] = ')';
      charArray0[4] = 'V';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 951, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 404, 33, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      readerBasedJsonParser0._skipCR();
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: UNKNOWN; line: 2, column: 13]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((char[]) null).when(iOContext0).allocTokenBuffer();
      doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getEmbeddedObject();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[9];
      charArray0[0] = '\\';
      charArray0[1] = '5';
      charArray0[2] = '[';
      charArray0[3] = '|';
      charArray0[4] = '!';
      charArray0[5] = '_';
      charArray0[6] = '\\';
      charArray0[7] = '0';
      charArray0[8] = '&';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 2, (Reader) null, objectCodec1, charsToNameCanonicalizer0, charArray0, 1, 2, true);
      readerBasedJsonParser1.getNextChar("b:Io;slYI>g\"");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      iOContext1.allocBase64Buffer();
      StringReader stringReader0 = new StringReader("\"g");
      iOContext1.allocWriteEncodingBuffer(0);
      CharBuffer.allocate(2);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      charsToNameCanonicalizer1.release();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding2);
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextBooleanValue();
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("}Y\"_l(OZIg?U?F!");
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "}Y\"_l(OZIg?U?F!", true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("false");
      StringReader stringReader2 = new StringReader("false");
      StringReader stringReader3 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader1, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0._nameStartRow = 2;
      readerBasedJsonParser0.nextBooleanValue();
      readerBasedJsonParser0._loadMore();
      readerBasedJsonParser0.getTextOffset();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("{() 8");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3138, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("hcj,4vi.;<R");
      readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
      readerBasedJsonParser0.getTextOffset();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('(' (code 40)): was expecting double-quote to start field name
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "XflaX}g\u0004ecmvzS", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("XflaX}g\u0004ecmvzS");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("vUZ> G2[c}6qM&D");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 682, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'vUZ': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("vi%!k)]}*K_9");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("vi%!k)]}*K_9");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("expected padding character '");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'vi': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(".X2_%{),kvqR@PE");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = 'A';
      charArray0[2] = 's';
      charArray0[3] = 's';
      charArray0[4] = 'r';
      charArray0[5] = '4';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 3, false);
      readerBasedJsonParser0.getValueAsString((String) null);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('4');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null);
      readerBasedJsonParser0.releaseBuffered((Writer) stringWriter2);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[25];
      charArray0[13] = 'n';
      charArray0[1] = 'F';
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1529), stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 3, 1, true);
      readerBasedJsonParser0._parseAposName();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec1, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 30]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      char[] charArray0 = new char[2];
      charArray0[0] = '\u0087';
      charArray0[1] = 'y';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, (-296), (-3424), false);
      readerBasedJsonParser0._parseAposName();
      readerBasedJsonParser0.nextFieldName();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(33);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(3);
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = 'y';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, objectCodec0, charsToNameCanonicalizer2, charArray0, 33, 2, true);
      readerBasedJsonParser0._parseAposName();
      readerBasedJsonParser0.nextFieldName();
      try { 
        readerBasedJsonParser0._parsePosNumber((-4711));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (''' (code 39)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 64]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      iOContext0.withEncoding(jsonEncoding0);
      iOContext1.withEncoding(jsonEncoding0);
      iOContext1.allocBase64Buffer();
      StringReader stringReader0 = new StringReader("\"!gR");
      iOContext1.allocWriteEncodingBuffer(0);
      CharBuffer.allocate(2);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding2);
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.currentName();
      readerBasedJsonParser0._decodeEscaped();
      StringWriter stringWriter0 = new StringWriter(1);
      readerBasedJsonParser0.releaseBuffered((Writer) stringWriter0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("\"g");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0._decodeEscaped();
      stringReader0.reset();
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'g': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("b\"K#5=KgRI\"py!S|");
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      stringReader0.read(charArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray1 = new char[7];
      charArray1[0] = 'c';
      charArray1[1] = '\\';
      charArray1[2] = '\\';
      charArray1[3] = '\\';
      charArray1[4] = '\\';
      charArray1[5] = '\\';
      charArray1[6] = 'c';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 35, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray1, 0, 33, true);
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized character escape 'c' (code 99)
         //  at [Source: UNKNOWN; line: 1, column: 8]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Shz!W<>Ai%lR'XPf/");
      CharBuffer charBuffer0 = CharBuffer.allocate(65);
      CharBuffer.allocate(3);
      stringReader0.read(charBuffer0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(45);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[7];
      charArray0[2] = 'f';
      charArray0[3] = 'm';
      charArray0[4] = '\\';
      charArray0[5] = 'm';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 33, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 2, 12, false);
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized character escape 'm' (code 109)
         //  at [Source: UNKNOWN; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader(";-");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = 'L';
      charArray0[2] = 'Q';
      charArray0[3] = 'm';
      charArray0[4] = 'w';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 0, false);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (';' (code 59)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "xpec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')", false);
      StringReader stringReader0 = new StringReader("xpec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')");
      StringReader stringReader1 = new StringReader(";SbVO!}KO\"oletp#Y");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(39);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      SerializedString serializedString0 = new SerializedString("");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (';' (code 59)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "}3umuWt-KD ";
      StringReader stringReader0 = new StringReader("}3umuWt-KD ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      charsToNameCanonicalizer0.release();
      SerializedString serializedString0 = new SerializedString("gv)#JTY");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker '}': expected ']' (for root starting at [Source: UNKNOWN; line: 1, column: 0])
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(",539ga+WCmfi");
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("}y w?S>|Mz*~j#wm");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("}y w?S>|Mz*~j#wm");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker '}': expected ']' (for root starting at [Source: UNKNOWN; line: 1, column: 0])
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext0.withEncoding(jsonEncoding0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("Shz!W<>Ai%lR'XPf/");
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1688, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      readerBasedJsonParser0.getNextChar("cmv&=0/Ksu?$B`E", jsonToken0);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._handleOddName(256);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("*");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-282));
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = 'w';
      stringReader0.read(charArray0);
      charArray0[2] = '6';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '!';
      charArray0[6] = 'O';
      charArray0[7] = '6';
      charArray0[8] = '1';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 2, 4, true);
      readerBasedJsonParser0.nextIntValue(2);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("{() 8");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1306));
      charsToNameCanonicalizer1.release();
      char[] charArray0 = new char[2];
      charArray0[1] = 'U';
      stringReader0.skip(3);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 78, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 93, (-1306), true);
      readerBasedJsonParser0.nextIntValue(33);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("-");
      Reader reader0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = null;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 101, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-inputNo digit following minus sign
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader(" within/between ");
      StringReader stringReader1 = new StringReader("\"");
      StringReader stringReader2 = new StringReader("Xjz[");
      StringReader stringReader3 = new StringReader("was expecting either '*' or '/' for a comment");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader1, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextBooleanValue();
      StringWriter stringWriter0 = new StringWriter();
      try { 
        readerBasedJsonParser0.getText((Writer) stringWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(" wit$hin/between ");
      StringReader stringReader1 = new StringReader("\"");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader1, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextBooleanValue();
      stringReader1.close();
      StringWriter stringWriter0 = new StringWriter(33);
      try { 
        readerBasedJsonParser0.getText((Writer) stringWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("u>.U^[i,CKt");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[19];
      charArray0[0] = '1';
      charArray0[1] = 'S';
      charArray0[2] = 'B';
      charArray0[3] = 't';
      charArray0[6] = '@';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 50, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2, 50, true);
      SerializedString serializedString0 = new SerializedString("^yn?PXy");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Bt\u0000\u0000': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      IOContext iOContext4 = iOContext1.withEncoding(jsonEncoding1);
      iOContext4.withEncoding(jsonEncoding1);
      iOContext1.allocBase64Buffer();
      StringReader stringReader0 = new StringReader("\"!gR");
      iOContext2.allocWriteEncodingBuffer(1684);
      CharBuffer.allocate(4000);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      iOContext3.withEncoding(jsonEncoding1);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF32_BE;
      iOContext2.withEncoding(jsonEncoding2);
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext4, 941, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("\"g");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("u>.U^[i,CKt");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[19];
      charArray0[0] = '1';
      charArray0[1] = 'S';
      charArray0[2] = 'B';
      charArray0[3] = 't';
      charArray0[6] = '@';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, (-554), true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      try { 
        readerBasedJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('>' (code 62)): expected a hex-digit for character escape sequence
         //  at [Source: UNKNOWN; line: 1, column: -551]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("u>.U^[i,CKt");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      IOContext iOContext1 = new IOContext(bufferRecycler0, "u>.U^[i,CKt", true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 40, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      readerBasedJsonParser0._loadMore();
      iOContext1.allocWriteEncodingBuffer();
      try { 
        readerBasedJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('>' (code 62)): expected a hex-digit for character escape sequence
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Shz!W<>Ai%lR'XPf/");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      stringReader0.close();
      try { 
        readerBasedJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("`() 6");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1306));
      charsToNameCanonicalizer1.release();
      char[] charArray0 = new char[2];
      charArray0[1] = 'U';
      stringReader0.skip(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 2, 2, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 58, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      readerBasedJsonParser1.getNextChar("", jsonToken0);
      // Undeclared exception!
      try { 
        readerBasedJsonParser1._handleOddName(111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("`() 6");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1306));
      char[] charArray0 = new char[2];
      charArray0[1] = 'U';
      stringReader0.skip(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 2, 2, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 58, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      JsonToken jsonToken0 = JsonToken.END_ARRAY;
      readerBasedJsonParser1.getNextChar("", jsonToken0);
      // Undeclared exception!
      try { 
        readerBasedJsonParser1._handleOddName(111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.base.ParserMinimalBase");
      char[] charArray0 = new char[5];
      charArray0[3] = 'd';
      StringReader stringReader1 = new StringReader("@]]JYQqcR9+/O@QO");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader2 = new StringReader("\"[6x");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray1 = new char[1];
      charArray1[0] = 'd';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 39, stringReader2, objectCodec0, charsToNameCanonicalizer0, charArray1, 425, 2, true);
      readerBasedJsonParser0._parseName();
      try { 
        readerBasedJsonParser0._handleOddName((-1334));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 3, false);
      try { 
        readerBasedJsonParser0._reportInvalidToken("expected digit (0-9) to follow minus sign, for valid numeric value", "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 3
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("Aef\u0001X (B K");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Aef\u0001X (B K", false);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("7E\fU|dv({[H@U");
      StringReader stringReader2 = new StringReader("false");
      StringReader stringReader3 = new StringReader("com.fasterxml.jackson.core.json.ReaderBasedJsonParser");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1));
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1076, stringReader1, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 12)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "xpec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')";
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "xpec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')", false);
      StringReader stringReader0 = new StringReader("xpec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')");
      ObjectCodec objectCodec0 = null;
      IOContext iOContext1 = new IOContext(bufferRecycler0, "xpec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 120, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0._skipCR();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      iOContext2.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("#'|'zxty[X_");
      CharBuffer.allocate(2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 91, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 0, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      readerBasedJsonParser1._skipCR();
      // Undeclared exception!
      try { 
        readerBasedJsonParser1._parseAposName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("$~.)^ZWWI{");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = '9';
      SerializedString serializedString0 = new SerializedString("PO");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 56, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 2047, 1013, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      int int0 = 2;
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-1647), stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 2, 931, true);
      readerBasedJsonParser1._skipCR();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('$' (code 36)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: UNKNOWN; line: 1, column: 1015]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("x2YSqou7]qfTk-pNrQ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      StringReader stringReader1 = new StringReader("d^");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 116, stringReader1, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'd': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      iOContext0.allocNameCopyBuffer(3);
      CharsToNameCanonicalizer.createRoot();
      String string0 = "d+A";
      StringReader stringReader0 = new StringReader("d+A");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'd': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(" within/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(47);
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = 'P';
      charArray0[4] = '6';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 47, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 86, (-274), true);
      StringReader stringReader1 = new StringReader("1 xsrV^q2=dhuX");
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 3768, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser1.nextToken();
      readerBasedJsonParser1.getText();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("5a");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      char[] charArray0 = new char[1];
      charArray0[0] = '?';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 58, 13, false);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('a' (code 97)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 16]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.type.TypeReference");
      CharsToNameCanonicalizer.createRoot();
      stringReader0.ready();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getTextOffset();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-758), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, (-3173), false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser1._isNextTokenNameMaybe(55, "com.fasterxml.jackson.core.type.TypeReference");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("]|");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      stringReader0.mark(228);
      char[] charArray0 = new char[9];
      charArray0[1] = '1';
      charArray0[2] = '1';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '1';
      charArray0[6] = '1';
      charArray0[7] = 'u';
      charArray0[8] = '1';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-713));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 559, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 116, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, true);
      readerBasedJsonParser1.nextBooleanValue();
      // Undeclared exception!
      try { 
        readerBasedJsonParser1.nextTextValue();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer smaller than original
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.type.TypeReference");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      iOContext0.constructTextBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.setEncoding(jsonEncoding0);
      charArray0[2] = '\r';
      charArray0[4] = '\u0000';
      charArray0[5] = 'X';
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonToken jsonToken0 = JsonToken.START_OBJECT;
      readerBasedJsonParser0.getNextChar("com.fasterxml.jackson.core.type.TypeReference", jsonToken0);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 90, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
      readerBasedJsonParser1.nextToken();
      try { 
        readerBasedJsonParser1._parseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: UNKNOWN; line: 2, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("+Q5iTjC~rN");
      StringReader stringReader1 = new StringReader("{c x5X+y!nPlpO]");
      StringReader stringReader2 = new StringReader("{c x5X+y!nPlpO]");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 47, stringReader1, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextFieldName();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      charArray0[1] = 'f';
      charArray0[2] = 'y';
      charArray0[3] = 'R';
      charArray0[4] = 'f';
      charArray0[5] = '7';
      charArray0[6] = 'E';
      charArray0[7] = 's';
      charArray0[8] = ']';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 2, stringReader2, objectCodec1, charsToNameCanonicalizer1, charArray0, 47, 1, false);
      int int0 = ReaderBasedJsonParser.FEAT_MASK_TRAILING_COMMA;
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('x' (code 120)): was expecting a colon to separate field name and value
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'null', 'true', 'false' or NaN");
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 1, (Reader) null, objectCodec0, charsToNameCanonicalizer0);
      char[] charArray0 = new char[7];
      charArray0[0] = '%';
      charArray0[1] = '\\';
      charArray0[2] = '\"';
      charArray0[3] = 'V';
      charArray0[4] = 'q';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 33, true);
      readerBasedJsonParser1.nextLongValue(33);
      readerBasedJsonParser1._closeInput();
      try { 
        readerBasedJsonParser1.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: UNKNOWN; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader(" within/between ");
      StringReader stringReader1 = new StringReader("\"");
      StringReader stringReader2 = new StringReader("Xjz[");
      StringReader stringReader3 = new StringReader("was expecting either '*' or '/' for a comment");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'u';
      charArray0[1] = 'd';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2710), stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 0, false);
      SerializedString serializedString0 = new SerializedString("expected digit (0-9) to follow minus sign, for valid numeric value");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "was expecting either '*' or '/' for a comment");
      readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler1, false);
      StringReader stringReader0 = new StringReader("GmEny#");
      CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      StringReader stringReader1 = new StringReader("Current token (");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Current': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 8]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler1, true);
      StringReader stringReader0 = new StringReader("GmEny#");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      StringReader stringReader1 = new StringReader("Current token (");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Current': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 8]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.type.TypeReference");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[2] = '\r';
      charArray0[4] = '\u0000';
      charArray0[5] = 'X';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 90, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'com': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 2, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader(":xZ. ");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getCurrentLocation();
      readerBasedJsonParser0._loadMore();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = '?';
      charArray0[1] = 'E';
      charArray0[2] = 'c';
      charArray0[3] = 'c';
      charArray0[4] = 'c';
      charArray0[5] = 'c';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 28, 3, false);
      try { 
        readerBasedJsonParser1._parsePosNumber(9);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-inputNo digit following minus sign
         //  at [Source: UNKNOWN; line: 1, column: 31]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(" within/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("b_SV<9xlzoMvwSNH7");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SerializedString serializedString0 = new SerializedString(":~.'@iyG&p[Vd5");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[7];
      charArray0[0] = '+';
      charArray0[1] = '9';
      charArray0[2] = '9';
      charArray0[3] = '9';
      charArray0[4] = '9';
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[5] = '9';
      charArray0[6] = '+';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader1, objectCodec0, charsToNameCanonicalizer1, charArray0, 76, 2, true);
      readerBasedJsonParser0._skipCR();
      StringReader stringReader2 = new StringReader("PeItg&~np");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 2, stringReader2, objectCodec1, charsToNameCanonicalizer0, charArray0, 109, 2541, true);
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'b_SV': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 2, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(" bytes");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString(">T73RN:ZC!TN[wL~");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'bytes': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 13]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("-");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(33);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-inputNo digit following minus sign
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("8`SRT(3(k\":");
      CharBuffer.allocate(1);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 39, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('`' (code 96)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("8`SRT(3(k\":");
      CharBuffer.allocate(1);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 39, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('`' (code 96)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader(" withinwbexwenE");
      char[] charArray0 = iOContext0.allocTokenBuffer(1);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray1 = new char[10];
      charArray1[1] = 'U';
      stringReader0.skip(3);
      SerializedString serializedString0 = new SerializedString("FIELD_NAME");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      charsToNameCanonicalizer0.release();
      charsToNameCanonicalizer0.makeChild(898);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 763, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 1, (-17), true);
      readerBasedJsonParser0._decodeEscaped();
      readerBasedJsonParser0._loadMore();
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'hinwbexwenE': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 20]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[1] = 't';
      charArray0[2] = 't';
      charArray0[3] = 't';
      charArray0[4] = 't';
      charArray0[5] = 't';
      charArray0[6] = 's';
      charArray0[7] = 't';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, (-133), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, (-281), 2, true);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 33, false);
      readerBasedJsonParser1._decodeEscaped();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextIntValue(33);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -281
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      StringReader stringReader0 = new StringReader("0r!{h/_^");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      charsToNameCanonicalizer1.release();
      stringReader0.skip(0L);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer0.makeChild(1);
      char[] charArray0 = new char[4];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      charArray0[3] = '[';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, (-161), stringReader0, objectCodec1, charsToNameCanonicalizer2, charArray0, 1783, (-1), false);
      StringReader stringReader1 = new StringReader("y|#z`PX");
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser2 = new ReaderBasedJsonParser(iOContext0, (-1), stringReader1, objectCodec2, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('r' (code 114)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("otJq!%^`X/.iXz");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding1);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 29]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("+Q5iTjC~rN");
      StringReader stringReader1 = new StringReader("{c x5X+y!nPlpO]");
      StringReader stringReader2 = new StringReader("{c x5X+y!nPlpO]");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 47, stringReader1, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextFieldName();
      SerializedString serializedString0 = new SerializedString(": ");
      SerializedString serializedString1 = new SerializedString("('true', 'false' or 'null')");
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(33);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      readerBasedJsonParser0.getNextChar("{c x5X+y!nPlpO]", jsonToken0);
      serializedString1.putQuotedUTF8(byteBuffer0);
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('!' (code 33)): was expecting a colon to separate field name and value
         //  at [Source: UNKNOWN; line: 1, column: 10]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = new char[4];
      StringReader stringReader0 = new StringReader("c$");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 2, true);
      charsToNameCanonicalizer0.makeChild(1);
      readerBasedJsonParser0._skipCR();
      try { 
        readerBasedJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: UNKNOWN; line: 2, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader(" within/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      charsToNameCanonicalizer0.release();
      stringReader0.mark(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, (char[]) null, 1727, 61, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      iOContext2.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("#'|'zxty[X_");
      CharBuffer.allocate(2);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-373));
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF8;
      IOContext iOContext3 = iOContext1.withEncoding(jsonEncoding2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext3, 415, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextFieldName();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "~Uw:x`:;=+F5O3$", true);
      StringReader stringReader0 = new StringReader(" within/between ");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext2 = new IOContext(bufferRecycler0, "A/KJ6]o<hN", false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3125);
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 3125, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 256, 3, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 32, stringReader0, objectCodec1, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'within': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 11]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      charsToNameCanonicalizer1.release();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0._tokenIncomplete = true;
      readerBasedJsonParser0.setCodec((ObjectCodec) null);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("-");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[1] = 'U';
      charArray0[2] = 'U';
      iOContext1.setEncoding(jsonEncoding0);
      charArray0[3] = 'U';
      charArray0[4] = 'U';
      charArray0[5] = 'U';
      charArray0[6] = 'U';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 115, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 55, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 1403, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser1.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-inputNo digit following minus sign
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ALLOW_TRAILING_COMMA");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "'null', 'true', 'false' or NaN", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 47, (Reader) null, objectCodec0, charsToNameCanonicalizer1);
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      charArray0[1] = 'q';
      charArray0[2] = ':';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-2626), (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 47, false);
      readerBasedJsonParser0.nextLongValue(33);
      readerBasedJsonParser1._closeInput();
      try { 
        readerBasedJsonParser1.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (':' (code 58)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (String)\"'null', 'true', 'false' or NaN\"; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(",539ga+WCmfi");
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      charArray0[0] = 'c';
      stringReader0.read(charArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringWriter stringWriter0 = new StringWriter();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getText((Writer) stringWriter0);
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('g' (code 103)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      SerializedString serializedString0 = new SerializedString("");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 92, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(1604, "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('n' (code 110)): was expecting a colon to separate field name and value
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("+Q5iTjC~rN");
      StringReader stringReader1 = new StringReader("{c 5X+y!nPlpO]");
      StringReader stringReader2 = new StringReader("{c 5X+y!nPlpO]");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 47, stringReader1, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextFieldName();
      SerializedString serializedString0 = new SerializedString(": ");
      SerializedString serializedString1 = new SerializedString("('true', 'false' or 'null')");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('5' (code 53)): was expecting a colon to separate field name and value
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("-");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = new char[0];
      charsToNameCanonicalizer0.makeChild((-479));
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 103, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 55, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 2, (-383), false);
      try { 
        readerBasedJsonParser1._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read -383
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Shz!W<>Ai%lR'XPf/");
      CharBuffer charBuffer0 = CharBuffer.allocate(16);
      CharBuffer.allocate(3);
      stringReader0.read(charBuffer0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(45);
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("was expecting comma to separate ");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(56319);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, (-3362), stringReader0, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in a comment
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(",539ga+WCmfi");
      char[] charArray0 = new char[1];
      charArray0[0] = '\\';
      stringReader0.read(charArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 425, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 127)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader0 = new StringReader("{c5zX+y!nPlO]");
      StringReader stringReader1 = new StringReader("&");
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      stringReader0.read(charBuffer0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('z' (code 122)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(" within/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(47);
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 535, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getObjectId();
      IOContext iOContext1 = new IOContext(bufferRecycler0, " within/between ", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[7];
      charArray0[0] = 'U';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      charArray0[3] = '\\';
      charArray0[4] = '7';
      charArray0[5] = 'N';
      charArray0[6] = 'G';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 32, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 1, 2, true);
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser2 = new ReaderBasedJsonParser(iOContext1, 56319, stringReader0, objectCodec2, charsToNameCanonicalizer1, charArray0, 2, 1551, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser2._skipString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      StringReader stringReader0 = new StringReader("0r!{h/_^");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      stringReader0.skip(2);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 255;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 33, stringReader0, objectCodec1, charsToNameCanonicalizer1, charArray0, 0, 255, false);
      charsToNameCanonicalizer0.release();
      SerializedString serializedString0 = new SerializedString("");
      readerBasedJsonParser0.getValueAsString();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("-");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = new char[3];
      charArray0[2] = '(';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0._loadMore();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('-' (code 45)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("Internal error on SymbolTable.rehash(): had %d entries; now have %d");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Internal error on SymbolTable.rehash(): had %d entries; now have %d");
      CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "-");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(152);
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringReader0, true);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      int int0 = (-351);
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '-Internal': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("{() 8");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3138, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("hcj,4vi.;<R");
      readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('(' (code 40)): was expecting double-quote to start field name
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader0 = new StringReader("{c 5X+y!nPlpO]");
      StringReader stringReader1 = new StringReader("~&");
      StringReader stringReader2 = new StringReader("{c 5X+y!nPlpO]");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextFieldName();
      SerializedString serializedString0 = new SerializedString("|,W)j");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('c' (code 99)): was expecting double-quote to start field name
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("-");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 27, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 200, 200, false);
      try { 
        readerBasedJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 200
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("}Y\"_l(OZIg?U?F!");
      CharsToNameCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader1 = new StringReader("}Y\"_l(OZIg?U?F!");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = 'K';
      charArray0[1] = '|';
      charArray0[2] = 'K';
      charArray0[3] = 'K';
      charArray0[4] = 'K';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringReader stringReader2 = new StringReader("}Y\"_l(OZIg?U?F!");
      stringReader2.read(charBuffer0);
      StringReader stringReader3 = new StringReader("}Y\"_l(OZIg?U?F!");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-499), stringReader3, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 48, true);
      SerializedString serializedString0 = new SerializedString("");
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker '}': expected ']' (for root starting at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 0])
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("wFFq");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0._matchToken("wFFq", 0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader(" within/between ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1306));
      char[] charArray0 = new char[2];
      charArray0[1] = 'U';
      stringReader0.skip(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 2, 2, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec1, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'thin': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'B';
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader(" of 4-char base64 unit: can only used between units");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getCurrentLocation();
      readerBasedJsonParser0._loadMore();
      readerBasedJsonParser0._parsePosNumber(2);
      readerBasedJsonParser0.getText();
      readerBasedJsonParser0._skipCR();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'of': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 2, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("}Y\"_l(OZIj?AJH!");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "}Y\"_l(OZIj?AJH!", true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[3];
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 115, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 1, 0, false);
      readerBasedJsonParser1._skipString();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("}Y\"_l(OZIg?U?F!");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "}Y\"_l(OZIg?U?F!", true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 896, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getObjectId();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[3];
      charArray0[0] = '\\';
      charArray0[1] = 'N';
      charArray0[2] = 'N';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 115, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 650, 15, false);
      readerBasedJsonParser1._skipString();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Uznz7");
      StringReader stringReader1 = new StringReader("@]]JYQqcR9+/O@QO");
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader2 = new StringReader("false");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[9];
      charArray0[0] = 'X';
      charArray0[1] = 't';
      charArray0[2] = 'X';
      charArray0[3] = 'X';
      charArray0[4] = 'X';
      charArray0[5] = 'X';
      charArray0[6] = 'G';
      charArray0[7] = 'X';
      charArray0[8] = 'G';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 117, stringReader2, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, (-436), false);
      readerBasedJsonParser0._loadMore();
      readerBasedJsonParser0._decodeEscaped();
      try { 
        readerBasedJsonParser0.nextIntValue(120);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'alse': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: -425]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("u/khIzf/)U");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler1, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[1];
      stringReader0.read(charArray0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3704, (-128), true);
      System.setCurrentTimeMillis(0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('k' (code 107)): was expecting either '*' or '/' for a comment
         //  at [Source: UNKNOWN; line: 1, column: -125]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding1);
      StringReader stringReader0 = new StringReader("-");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding2 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding2);
      StringReader stringReader1 = new StringReader("-");
      char[] charArray0 = new char[8];
      charArray0[0] = '6';
      charArray0[1] = '/';
      charArray0[2] = '!';
      charArray0[3] = 'v';
      charArray0[4] = 'v';
      charArray0[5] = 'v';
      charArray0[6] = '6';
      charArray0[7] = '6';
      stringReader1.close();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 63, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 2040, false);
      try { 
        readerBasedJsonParser0.nextIntValue(3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('!' (code 33)): was expecting either '*' or '/' for a comment
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext0.allocConcatBuffer();
      StringReader stringReader0 = new StringReader("Unexpected end-of-input within/between ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1450);
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = 'w';
      charArray0[2] = '/';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '!';
      charArray0[6] = '(';
      charArray0[7] = '/';
      charArray0[8] = '1';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 2, 4, true);
      try { 
        readerBasedJsonParser0.nextIntValue(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('1' (code 49)): was expecting either '*' or '/' for a comment
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = new char[8];
      charArray0[0] = 'T';
      charArray0[1] = '`';
      charArray0[2] = 'f';
      charArray0[3] = 'f';
      charArray0[4] = 'T';
      charArray0[5] = 'T';
      charArray0[6] = 'f';
      charArray0[7] = '`';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringReader stringReader0 = new StringReader("");
      stringReader0.read(charBuffer0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 94, (Reader) null, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 100, true);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'fTTf': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 8]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("n^@)7DiY3GaHaU1^#");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      char[] charArray0 = new char[2];
      charArray0[0] = 'k';
      charArray0[1] = '9';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 1236, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 500, 206, true);
      readerBasedJsonParser1._decodeEscaped();
      try { 
        readerBasedJsonParser1.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('^' (code 94)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 209]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader0 = new StringReader("Malformed numeric value (");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = ')';
      charArray0[1] = '~';
      charArray0[2] = 'd';
      charArray0[3] = '~';
      charArray0[4] = 'L';
      charArray0[5] = '%';
      charArray0[6] = '\u0006';
      charArray0[7] = ')';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 698, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 128, 33, true);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Malformed': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 43]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.JsonLocation", false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = null;
      charsToNameCanonicalizer1.makeChild(0);
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 2, false);
      readerBasedJsonParser0.setRequestPayloadOnError("");
      try { 
        readerBasedJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 2
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("-");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = new char[3];
      StringReader stringReader1 = new StringReader("-");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 923, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 74, 1, false);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-inputNo digit following minus sign
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("-");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2250), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getLastClearedToken();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-inputNo digit following minus sign
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[2];
      charArray0[0] = 'I';
      charArray0[1] = 'w';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn(charArray0).when(iOContext0).allocTokenBuffer();
      doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 61, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getObjectId();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray1 = new char[2];
      charArray1[0] = 'N';
      charArray1[1] = '\\';
      stringReader0.close();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 61, stringReader0, objectCodec1, charsToNameCanonicalizer1, charArray1, 1, (-1074), false);
      try { 
        readerBasedJsonParser1._loadMoreGuaranteed();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("\"g");
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      charArray0[1] = '';
      charArray0[2] = '.';
      charArray0[3] = 'x';
      stringReader0.read(charArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1626), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 102, 0, true);
      System.setCurrentTimeMillis(1L);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 33);
      byte[] byteArray0 = new byte[0];
      try { 
        readerBasedJsonParser0._readBinary((Base64Variant) null, byteArrayBuilder0, byteArray0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 103]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.type.TypeReference");
      char[] charArray0 = new char[7];
      charArray0[1] = '%';
      charArray0[2] = '\r';
      charArray0[4] = ')';
      charArray0[5] = 'd';
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(113);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 120, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 43, 43, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(48, "Unrecognized token '%s': was expecting %s");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = "-";
      StringReader stringReader0 = new StringReader("-");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = new char[0];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 44, false);
      readerBasedJsonParser0.setRequestPayloadOnError("-%B32~-i`\"mw1r(");
      Base64Variant base64Variant0 = null;
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1766);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("n^@)7DieY3GaHaU1^#");
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = '0';
      charArray0[2] = 'o';
      System.setCurrentTimeMillis(1L);
      IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer1, true);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 33, 1557, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 2);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._readBinary((Base64Variant) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      char[] charArray0 = new char[2];
      charArray0[0] = '\u0011';
      charArray0[1] = '\u0011';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 2, false);
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler0, 0);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._readBinary((Base64Variant) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1766);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("n^@)7DieY3GaHaU1^#");
      char[] charArray0 = new char[3];
      charArray0[0] = '0';
      charArray0[1] = 'a';
      charArray0[2] = 'o';
      System.setCurrentTimeMillis(1L);
      IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer1, true);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 33, 1557, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      ByteArrayBuilder byteArrayBuilder0 = new ByteArrayBuilder(bufferRecycler1, 2);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._readBinary((Base64Variant) null, byteArrayBuilder0, byteArrayBuilder0.NO_BYTES);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charsToNameCanonicalizer0.makeChild(96);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("@/GM");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('@' (code 64)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("2\"aZSpsj@;j0mB");
      CharBuffer.allocate(2);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1025);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 116, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      readerBasedJsonParser0.getNextChar("START_OBJECT", jsonToken0);
      readerBasedJsonParser0.nextFieldName();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1035);
      StringReader stringReader0 = new StringReader("[");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextTextValue();
      readerBasedJsonParser0.getTextLength();
      readerBasedJsonParser0.getTextCharacters();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "\"", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("\"");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2669, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0._finishString2();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[9];
      charArray0[0] = 'f';
      charArray0[1] = '4';
      charArray0[2] = 'o';
      charArray0[3] = '%';
      charArray0[4] = 'V';
      charArray0[5] = '*';
      charArray0[6] = 'p';
      charArray0[7] = 'o';
      charArray0[8] = 'z';
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((char[]) null).when(iOContext0).allocTokenBuffer();
      doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
      StringReader stringReader0 = new StringReader("Aef\u0001X (B K");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((TreeNode) null).when(objectCodec0).readTree(any(com.fasterxml.jackson.core.JsonParser.class));
      doReturn((String) null).when(objectCodec0).toString();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 357, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.readValueAsTree();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      iOContext2.constructTextBuffer();
      IOContext iOContext3 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      IOContext iOContext4 = new IOContext(bufferRecycler0, iOContext3, false);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("false");
      StringReader stringReader2 = new StringReader("false");
      StringReader stringReader3 = new StringReader("~&");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(0);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext4, (-1615), stringReader2, objectCodec1, charsToNameCanonicalizer2);
      readerBasedJsonParser1.nextBooleanValue();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[9];
      charArray0[0] = ' ';
      charArray0[2] = 'w';
      charArray0[5] = '6';
      charArray0[4] = ' ';
      charArray0[5] = '/';
      charArray0[6] = 'w';
      charArray0[7] = 'v';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 497, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 4, 33, false);
      try { 
        readerBasedJsonParser0.nextIntValue(33);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('/' (code 47)): maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)
         //  at [Source: UNKNOWN; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, true);
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      iOContext2.allocBase64Buffer();
      StringReader stringReader0 = new StringReader(" / 0x");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("5[Xui1DB+RHzx");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('/' (code 47)): maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("{c 5X+y!nPlpO]");
      StringReader stringReader1 = new StringReader("~&");
      StringReader stringReader2 = new StringReader("~&");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextBooleanValue();
      StringWriter stringWriter0 = new StringWriter();
      readerBasedJsonParser0.getText((Writer) stringWriter0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("{c5zX+y!nPlO]");
      StringReader stringReader1 = new StringReader("2");
      StringReader stringReader2 = new StringReader("{c5zX+y!nPlO]");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextBooleanValue();
      StringWriter stringWriter0 = new StringWriter(33);
      readerBasedJsonParser0.getText((Writer) stringWriter0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("]|");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader1 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = 'b';
      charArray0[1] = 'b';
      charArray0[2] = 'b';
      charArray0[3] = 'b';
      charArray0[4] = 'n';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 108, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, (-1161), false);
      readerBasedJsonParser0._handleOddName(53);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "&cJSvD?;G_0", true);
      char[] charArray0 = iOContext0.allocTokenBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("`hCB1n");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "`hCB1n", false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-76), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2, 3173, true);
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: (String)\"`hCB1n\"; line: 1, column: 3186]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = iOContext0.allocConcatBuffer();
      StringReader stringReader0 = new StringReader(")|#Xi+eiapogBsaR");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-791), stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getTypeId();
      StringReader stringReader1 = new StringReader("jryIzI4&");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-2), stringReader1, objectCodec1, charsToNameCanonicalizer0, charArray0, 0, 839, true);
      try { 
        readerBasedJsonParser1._parseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 856]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("Unexpected end-of-input within/between ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1450);
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = 'w';
      charArray0[2] = '6';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '!';
      charArray0[6] = '(';
      charArray0[7] = '6';
      charArray0[8] = '1';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 2, 4, true);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('U' (code 85)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "expec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')", false);
      StringReader stringReader0 = new StringReader("expec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "expec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext1.withEncoding(jsonEncoding0);
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF16_BE;
      IOContext iOContext4 = iOContext3.withEncoding(jsonEncoding1);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = '%';
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = '%';
      charArray0[6] = '\\';
      charArray0[7] = 'N';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext4, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 1, true);
      try { 
        readerBasedJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 84]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("-");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 59, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1306), 55, true);
      CharsToNameCanonicalizer.createRoot();
      int int0 = (-1);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-1), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser1.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-inputNo digit following minus sign
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("-");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = new char[3];
      charArray0[2] = '(';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, '(', 2, false);
      try { 
        readerBasedJsonParser0.nextIntValue('(');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-inputNo digit following minus sign
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'B';
      charArray0[4] = '`';
      charArray0[3] = 'T';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringReader stringReader0 = new StringReader("No digit following minus sign");
      stringReader0.read(charBuffer0);
      CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 389, (-4651), true);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'following': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: -4640]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("{c 5X+y!nPlpO]");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[4];
      charArray0[0] = '\'';
      charArray0[1] = '/';
      charArray0[2] = '|';
      charArray0[3] = 'U';
      charsToNameCanonicalizer0.findSymbol(charArray0, (-677), (-3157), 0);
      charsToNameCanonicalizer0.release();
      charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader0 = new StringReader("{c5zX+y!nPlO]");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(49);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 58, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextFieldName();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("Unexpected end-of-input within/between ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1450);
      char[] charArray0 = new char[9];
      charArray0[0] = '1';
      charArray0[1] = 'w';
      charArray0[2] = '6';
      charArray0[3] = '1';
      charArray0[4] = '1';
      charArray0[5] = '!';
      charArray0[7] = '6';
      charArray0[8] = '1';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 2, 4, true);
      try { 
        readerBasedJsonParser0.nextIntValue(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('U' (code 85)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(" within/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.setRequestPayloadOnError(" within/between ");
      Base64Variant base64Variant0 = null;
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.base.ParserMinimalBase");
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      StringReader stringReader1 = new StringReader("@]]JYQqcR9+/O@QO");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 98, stringReader1, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, (-3460), true);
      readerBasedJsonParser0._loadMore();
      readerBasedJsonParser0._decodeEscaped();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.base.ParserMinimalBase", false);
      readerBasedJsonParser0.getTextLength();
      SerializedString serializedString0 = new SerializedString("qZ$|A|>r\n");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker ']': expected '}' (for root starting at [Source: UNKNOWN; line: 1, column: 0])
         //  at [Source: UNKNOWN; line: 1, column: -3457]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader(",539ga+WCmfi");
      char[] charArray0 = new char[4];
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-61), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getEmbeddedObject();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, (-1), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 1, false);
      readerBasedJsonParser1.getTextLength();
      SerializedString serializedString0 = new SerializedString(",539ga+WCmfi");
      readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("Illegal character (");
      StringReader stringReader1 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 116, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      String string0 = "): ";
      SerializedString serializedString0 = new SerializedString("): ");
      readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
      try { 
        readerBasedJsonParser0._handleOddValue((-2255));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("{c 5X+y!nPlpO]");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-4999), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 33, (-4999), true);
      StringWriter stringWriter0 = new StringWriter(1914);
      readerBasedJsonParser0.getText((Writer) stringWriter0);
      try { 
        readerBasedJsonParser0._parsePosNumber(5666);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read -4999
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = 'p';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringReader stringReader0 = new StringReader("8{8Ah;qVzoC9Z!FO'");
      stringReader0.read(charBuffer0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2636), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextBooleanValue();
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('8' (code 56)): was expecting double-quote to start field name
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      StringReader stringReader0 = new StringReader("c]|");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString("c]|");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = new char[7];
      charArray0[0] = '.';
      charArray0[1] = 'k';
      charArray0[2] = '-';
      charArray0[3] = '.';
      charArray0[4] = ' ';
      charArray0[5] = '>';
      charArray0[6] = 'R';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 256, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 83, 946, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.getNextChar("c]|");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 83
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("%`B+hI6f.TI");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString("");
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringReader0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '+';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 35, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 97, 97, true);
      readerBasedJsonParser0._skipCR();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 116, (-5495), true);
      try { 
        readerBasedJsonParser1.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('`' (code 96)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: -5493]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("`");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("o}';bCK%0+HDgk");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, charsToNameCanonicalizer0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('`' (code 96)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((char[]) null).when(iOContext0).allocTokenBuffer();
      doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 61, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getObjectId();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[2];
      charArray0[0] = 'N';
      charArray0[1] = '\\';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 3, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 0, 3, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser1._skipString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("4On");
      StringReader stringReader1 = new StringReader("4On");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(73);
      StringReader stringReader2 = new StringReader("4On");
      StringReader stringReader3 = new StringReader("4On");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader3, objectCodec0, charsToNameCanonicalizer1);
      SerializedString serializedString0 = new SerializedString("ARRAY");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('O' (code 79)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1035);
      StringReader stringReader0 = new StringReader("[");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      char[] charArray0 = new char[6];
      charArray0[0] = 's';
      charArray0[1] = 'I';
      charArray0[2] = '5';
      charArray0[3] = 'T';
      charArray0[4] = ';';
      charArray0[5] = 'F';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextToken();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: expected close marker for Array (start marker at [Source: UNKNOWN; line: 1, column: 1])
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("aT\"");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      int int0 = 2207;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2615), (Reader) null, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 2207, 1777, true);
      String string0 = "-";
      StringReader stringReader1 = new StringReader("-");
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextToken();
      try { 
        readerBasedJsonParser1.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'aT': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(" within/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader1, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 3, 114, true);
      readerBasedJsonParser0.close();
      try { 
        readerBasedJsonParser0.getNextChar("&<EU#");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input&<EU#
         //  at [Source: UNKNOWN; line: 1, column: 229]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(", copied ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      char[] charArray0 = new char[5];
      charArray0[0] = 'p';
      charArray0[1] = '%';
      charArray0[2] = '%';
      charArray0[3] = '%';
      charArray0[4] = 'p';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2, 1, true);
      readerBasedJsonParser0._skipCR();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 81, (Reader) null, objectCodec1, charsToNameCanonicalizer0, charArray0, 95, 256, true);
      SerializableString serializableString0 = null;
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (',' (code 44)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 2, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(",539ga+WCmfi");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString(",539ga+WCmfi");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (',' (code 44)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1035);
      StringReader stringReader0 = new StringReader("[");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextTextValue();
      readerBasedJsonParser0.getTextLength();
      // Undeclared exception!
      try { 
        bufferRecycler0.allocCharBuffer(33, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 33
         //
         verifyException("com.fasterxml.jackson.core.util.BufferRecycler", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, false);
      StringReader stringReader0 = new StringReader("6+QnG~/m+m2");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 62, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('+' (code 43)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("99AL~zF9<");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getCurrentValue();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF8;
      IOContext iOContext3 = iOContext2.withEncoding(jsonEncoding1);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(0);
      StringReader stringReader1 = new StringReader("99AL~zF9<");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext3, 0, stringReader0, objectCodec1, charsToNameCanonicalizer1);
      readerBasedJsonParser1.getTokenLocation();
      try { 
        readerBasedJsonParser1.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('A' (code 65)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, objectCodec0, false);
      StringReader stringReader0 = new StringReader("#[ZVoJD5*0.:A1eq-Oa");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = '7';
      charArray0[2] = 'g';
      charArray0[3] = 'l';
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 89, stringReader0, objectCodec1, charsToNameCanonicalizer1);
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, (-1484), stringReader0, objectCodec2, charsToNameCanonicalizer0, charArray0, 0, 116, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser1._handleApos();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "XflaX}g\u0004ecmvzS", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("XflaX}g\u0004ecmvzS");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      StringReader stringReader1 = new StringReader("XflaX}g\u0004ecmvzS");
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(2);
      CharBuffer charBuffer0 = byteBuffer0.asCharBuffer();
      stringReader1.read(charBuffer0);
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 2710, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'flaX': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("K-h&w+");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getObjectId();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("K-h&w+");
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      stringReader1.read(charBuffer0);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(907);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 119, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser1.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'K': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader1 = new StringReader("K~@lr&ya|mu8<tb[Gp");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'K': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("t2JO+T`ZjOSD");
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString("t2JO+T`ZjOSD");
      System.setCurrentTimeMillis((-942L));
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      char[] charArray0 = new char[2];
      charArray0[0] = '>';
      charArray0[1] = 'k';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-3408), 2, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._matchToken("t2JO+T`ZjOSD", 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3408
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, objectCodec0, false);
      StringReader stringReader0 = new StringReader("Unexpected end-of-input within/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[8];
      charArray0[0] = 'k';
      charArray0[1] = '7';
      charArray0[2] = 'g';
      charArray0[3] = 'l';
      charArray0[4] = 'k';
      charArray0[5] = '7';
      charArray0[7] = 'v';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 192, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 2, 58, false);
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: UNKNOWN; line: 1, column: 8]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("\"%oHDxdu.*vvkm");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1322, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getTypeId();
      readerBasedJsonParser0._finishString2();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("@]]JYQqcR9+/O@QO");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("jqk]-9*+");
      char[] charArray0 = new char[9];
      charArray0[0] = 't';
      charArray0[1] = '&';
      charArray0[2] = '\"';
      charArray0[3] = 'K';
      charArray0[4] = '5';
      charArray0[5] = 'E';
      charArray0[6] = 'E';
      charArray0[7] = 'd';
      charArray0[8] = 'm';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader1, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 2870, false);
      readerBasedJsonParser0._finishString();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((char[]) null).when(iOContext0).allocTokenBuffer();
      doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
      StringReader stringReader0 = new StringReader("@Sl;9DS/v \"9.r7");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 5084, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[5];
      charArray0[0] = 'G';
      charArray0[1] = 'Z';
      charArray0[2] = '>';
      charArray0[3] = '^';
      charArray0[4] = '';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 3, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 2, 2, true);
      readerBasedJsonParser1._finishString();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Shz!W<>Ai%lR'XPf/");
      CharBuffer charBuffer0 = CharBuffer.allocate(16);
      CharBuffer.allocate(3);
      stringReader0.read(charBuffer0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(34);
      char[] charArray0 = new char[1];
      charArray0[0] = '\"';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 16, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 80, 3, false);
      int int0 = ReaderBasedJsonParser.FEAT_MASK_TRAILING_COMMA;
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('/' (code 47)): maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[9];
      charArray0[0] = 'N';
      charArray0[1] = '1';
      charArray0[2] = 'w';
      charArray0[5] = '6';
      charArray0[4] = '/';
      charArray0[5] = '/';
      charArray0[6] = 'w';
      charArray0[7] = 'v';
      charArray0[8] = '1';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 497, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 4, 33, false);
      try { 
        readerBasedJsonParser0.nextIntValue(33);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('/' (code 47)): maybe a (non-standard) comment? (not recognized as one since Feature 'ALLOW_COMMENTS' not enabled for parser)
         //  at [Source: UNKNOWN; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, jsonEncoding0, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("bq5LZ+gusBH");
      StringReader stringReader1 = new StringReader("bq5LZ+gusBH");
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = '';
      charArray0[2] = 'p';
      charArray0[3] = '';
      charArray0[4] = 'O';
      charArray0[5] = ',';
      stringReader1.read(charArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 2, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'gusBH': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 11]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.type.TypeReference");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      StringReader stringReader1 = new StringReader("gIP@zP5[Z&O*Y?=/");
      CharBuffer.allocate(107);
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(50);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 121, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'gIP': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(",539ga+WCmfi");
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = 'D';
      charArray0[2] = 'c';
      charArray0[3] = 'D';
      stringReader0.read(charArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('g' (code 103)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(",539ga+WCmfi");
      char[] charArray0 = new char[4];
      charArray0[0] = '\\';
      charArray0[1] = 'c';
      charArray0[2] = 'c';
      charArray0[3] = 'c';
      stringReader0.read(charArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('g' (code 103)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("gf5&:%Dr");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 1, (-1), true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "xpec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')";
      IOContext iOContext0 = new IOContext(bufferRecycler0, "xpec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')", true);
      StringReader stringReader0 = new StringReader("xpec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')");
      ObjectCodec objectCodec0 = null;
      StringReader stringReader1 = new StringReader("xpec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 49, 0, true);
      try { 
        readerBasedJsonParser0._parseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 0
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.type.TypeReference");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(55);
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = '%';
      charArray0[2] = '\u0010';
      charArray0[3] = '~';
      charArray0[4] = ')';
      charArray0[5] = 'd';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      readerBasedJsonParser0.getNextChar("com.fasterxml.jackson.core.type.TypeReference", jsonToken0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'om': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      stringReader0.read();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("q=qWBO_{W!B+oi");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'on': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(")eX5nRe+~O");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = null;
      Object object0 = new Object();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, true);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 33, 51, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parseName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("): has to be escaped using backslash to be included in ");
      char[] charArray0 = new char[2];
      charArray0[0] = '|';
      charArray0[1] = '%';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 1, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser1.nextToken();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer smaller than original
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("#wqHtWmOWI6");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '-';
      CharBuffer.wrap(charArray0);
      int int0 = ReaderBasedJsonParser.FEAT_MASK_TRAILING_COMMA;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 2, false);
      SerializedString serializedString0 = new SerializedString("");
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('#' (code 35)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("ShA!W<>Ai%lR'XPf/");
      CharBuffer charBuffer0 = CharBuffer.allocate(16);
      CharBuffer.allocate(3);
      stringReader0.read(charBuffer0);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in a comment
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding1);
      StringReader stringReader0 = new StringReader("#6:HB-WUGDXb/");
      stringReader0.skip(0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(2);
      IOContext iOContext2 = new IOContext(bufferRecycler0, "", true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, (-1869), stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('#' (code 35)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (String)\"\"; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      Base64Variant base64Variant0 = null;
      try { 
        readerBasedJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      StringReader stringReader0 = new StringReader("n^@)7DieY3GaHaU1^#");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(252);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild((-2259));
      char[] charArray0 = new char[1];
      charArray0[0] = 'M';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2, charArray0, 1, (-893), true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      StringReader stringReader0 = new StringReader("Unexpected end-of-input within/between ");
      stringReader0.read(charBuffer0);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader1 = new StringReader("Unexpected end-of-input within/between ");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 224, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Unexpected': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 11]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "Unexpected end-of-input within/between ";
      iOContext0.allocConcatBuffer();
      StringReader stringReader0 = new StringReader("Unexpected end-of-input within/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("Unexpected end-of-input within/between ");
      SerializedString serializedString1 = new SerializedString("Unexpected end-of-input within/between ");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Unexpected': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 11]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("jWiYX6Az]vFz{OB)");
      CharBuffer.allocate(255);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-2945));
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      readerBasedJsonParser0.getNextChar((String) null, jsonToken0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "jWiYX6Az]vFz{OB)");
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'jWiYX6Az': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 10]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("jV{VZm|K+ b{(");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding1);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 806, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'jV': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringReader stringReader0 = new StringReader("No digit following minus sign");
      stringReader0.read(charBuffer0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 0, true);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 0
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(" within/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((TreeNode) null).when(objectCodec0).readTree(any(com.fasterxml.jackson.core.JsonParser.class));
      doReturn((String) null).when(objectCodec0).toString();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3944, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.readValueAsTree();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[2];
      charArray0[1] = 'p';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 81, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 69, 0, true);
      readerBasedJsonParser1._skipCR();
      try { 
        readerBasedJsonParser1._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: UNKNOWN; line: 2, column: 19]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("'\"QO:]0BCo");
      stringReader0.skip(3);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-2164));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-1316), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'O': was expecting ('true', 'false' or 'null')
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("n^@)7DieY3GaHaU1^#");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-1157));
      char[] charArray0 = new char[4];
      charArray0[0] = '3';
      charArray0[1] = 'f';
      charArray0[2] = '3';
      charArray0[3] = '3';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 9, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 2, false);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'n': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("*Ys$)=");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.release();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 102, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 33, 57, true);
      readerBasedJsonParser0._loadMore();
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0._decodeEscaped();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "*Ys$)=", true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      IOContext iOContext2 = new IOContext(bufferRecycler0, objectCodec1, true);
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 105, stringReader0, objectCodec2, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser1.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('=' (code 61)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("=");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, true);
      String string0 = "Exponent indicator not followed by a digit";
      StringReader stringReader1 = new StringReader("Exponent indicator not followed by a digit");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1741), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('=' (code 61)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer); line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      String string0 = "VN)z\\a!\"`(\\7w";
      StringReader stringReader0 = new StringReader("VN)za!\"`(\u0007w");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(objectCodec0).readValue(any(com.fasterxml.jackson.core.JsonParser.class) , any(java.lang.Class.class));
      doReturn((String) null).when(objectCodec0).toString();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = '3';
      charArray0[2] = '^';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1454, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 51, 1, true);
      Class<Object> class0 = Object.class;
      readerBasedJsonParser0.readValueAs(class0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader1 = new StringReader("TD]!Nl`C2ZbLrL");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec1, charsToNameCanonicalizer1);
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser2 = new ReaderBasedJsonParser(iOContext1, 52, stringReader1, objectCodec2, charsToNameCanonicalizer2);
      try { 
        readerBasedJsonParser2.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'TD': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("T74 VpzyZfwa!ZB>y");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3788, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'T74': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("('true', 'false' or 'null')");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 128, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getObjectId();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(102);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader1 = new StringReader("HVG");
      stringReader0.skip((-3398L));
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 92, stringReader1, objectCodec1, charsToNameCanonicalizer2);
      try { 
        readerBasedJsonParser1.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'HVG': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("H%=fQ>y+sX;!");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("H%=fQ>y+sX;!");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'H': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader(" within/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(47);
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = 'P';
      charArray0[4] = '6';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 86, (-274), true);
      StringReader stringReader1 = new StringReader("1 xsrV^q2=dhuX");
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 3768, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser1.nextToken();
      try { 
        readerBasedJsonParser1.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'xsrV': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(" within/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("1 xsrV^q2=dhuX");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      readerBasedJsonParser0._getText2(jsonToken0);
      readerBasedJsonParser0.nextToken();
      readerBasedJsonParser0.getTextOffset();
      readerBasedJsonParser0.getText();
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'xsrV': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("n^@)7DieY3GaHaU1^#");
      char[] charArray0 = new char[9];
      charArray0[0] = ',';
      charArray0[1] = '';
      charArray0[2] = 'c';
      charArray0[3] = 'D';
      charArray0[4] = 'Z';
      charArray0[5] = 's';
      charArray0[6] = 'O';
      charArray0[7] = 'U';
      charArray0[8] = 'p';
      stringReader0.read(charArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 56, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('G' (code 71)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = null;
      StringReader stringReader0 = new StringReader(",539ga+WCmfi");
      char[] charArray0 = new char[2];
      charArray0[0] = 'D';
      charArray0[1] = '\\';
      stringReader0.read(charArray0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      int int0 = 1465;
      charsToNameCanonicalizer0.makeChild(1465);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 127)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "com.fasterxml.jackson.core.util.BufferRecyclers.trackReusableBuffers", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext1.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("'");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 0, (-1204), true);
      readerBasedJsonParser0.getCurrentLocation();
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.getNextChar("kq2]m+Hii8i7H3mOO", jsonToken0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      IOContext iOContext1 = new IOContext(bufferRecycler0, "QzcUP]T[Cer;3VKI/xp", true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext2 = new IOContext(bufferRecycler0, "`7KEMv&pH,1Vod;ChPd", false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader1 = new StringReader("...");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(2);
      char[] charArray0 = new char[3];
      char char0 = 'c';
      charArray0[0] = 'c';
      charArray0[1] = '`';
      charArray0[2] = '_';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader1, objectCodec0, charsToNameCanonicalizer2, charArray0, 2, 45, true);
      readerBasedJsonParser0.getObjectId();
      IOContext iOContext3 = new IOContext(bufferRecycler1, (Object) null, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext3, 3, stringReader0, objectCodec1, charsToNameCanonicalizer2);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("C_^E@+?iL$-9JSA");
      CharBuffer.allocate(39);
      CharBuffer charBuffer0 = CharBuffer.allocate(1);
      stringReader0.read(charBuffer0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      ObjectCodec objectCodec0 = null;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-734), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '_': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "expected a valid value (number, String, array, object, 'true', 'false' or 'null')", false);
      StringReader stringReader0 = new StringReader("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      SerializedString serializedString0 = new SerializedString("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(78);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 47, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, (char[]) null, 33, 78, true);
      char[] charArray0 = new char[4];
      charsToNameCanonicalizer1.release();
      charArray0[0] = '9';
      charArray0[1] = '9';
      charArray0[2] = '`';
      charArray0[3] = '9';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 0, 3, false);
      readerBasedJsonParser1._skipCR();
      ReaderBasedJsonParser readerBasedJsonParser2 = new ReaderBasedJsonParser(iOContext0, 122, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 2, 1, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.getNextChar("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("aT\"");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 108, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'aT': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("aT\"");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 55296, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'aT': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("n^@)7DieY3GaHaU1^#");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1114111, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'n': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("\"#X");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 108, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(" within/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = 'P';
      charArray0[4] = '6';
      StringReader stringReader1 = new StringReader("\"");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 6, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("\"");
      readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
      try { 
        readerBasedJsonParser0.getNextChar("\"");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input\"
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(4);
      StringReader stringReader0 = new StringReader("0r!{h/_^");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-170), stringReader0, objectCodec0, charsToNameCanonicalizer0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 115, stringReader0, objectCodec1, charsToNameCanonicalizer1, charArray0, 33, 3, false);
      readerBasedJsonParser0._decodeEscaped();
      SerializedString serializedString0 = null;
      try {
        serializedString0 = new SerializedString((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Null String illegal for SerializedString
         //
         verifyException("com.fasterxml.jackson.core.io.SerializedString", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.type.TypeReference");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = '%';
      charArray0[0] = 'L';
      charArray0[3] = '~';
      StringReader stringReader1 = new StringReader("t2JO+T`ZjOSD");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 117, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0._releaseBuffers();
      readerBasedJsonParser0.getCodec();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 123, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 127]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'B';
      charArray0[4] = '`';
      charArray0[6] = 'f';
      charArray0[3] = 'T';
      CharBuffer.wrap(charArray0);
      StringReader stringReader0 = new StringReader("'null', 'true', 'false' or NaN");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 92, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1813, 1, true);
      readerBasedJsonParser0.nextToken();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("JoqJG08szIqCx'");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[9];
      charsToNameCanonicalizer0.makeChild(34);
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[0] = '{';
      charArray0[1] = 'b';
      charArray0[2] = 'q';
      charArray0[3] = 'C';
      charArray0[4] = '|';
      CharsToNameCanonicalizer.createRoot();
      charArray0[5] = 'O';
      charArray0[6] = 'P';
      charArray0[7] = 'J';
      charArray0[8] = '%';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 93, true);
      readerBasedJsonParser0._decodeEscaped();
      try { 
        readerBasedJsonParser0._reportInvalidToken("JoqJG08szIqCx'");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'JoqJG08szIqCx'qC': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      int int0 = 116;
      String string0 = "b \\x.yT)~L<%>]#h";
      StringReader stringReader0 = new StringReader("b x.yT)~L<%>]#h");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 116, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0._decodeEscaped();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'x': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("VALUE_EMBEDDED_OBJECT");
      CharBuffer.allocate(0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(85);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-3398), stringReader0, objectCodec0, charsToNameCanonicalizer0);
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      readerBasedJsonParser0.getNextChar("VALUE_EMBEDDED_OBJECT", jsonToken0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'ALUE_EMBEDDED_OBJECT': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 43]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "qTJ\"", false);
      StringReader stringReader0 = new StringReader("qTJ\"");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      StringReader stringReader1 = new StringReader("AIq/Y!o");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 74, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'AIq': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, (Object) null, true);
      char[] charArray0 = new char[8];
      charArray0[0] = 'f';
      charArray0[1] = 'f';
      charArray0[2] = 'R';
      charArray0[3] = 'f';
      charArray0[4] = 'f';
      charArray0[5] = 'f';
      charArray0[6] = 'f';
      charArray0[7] = 'f';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringReader stringReader0 = new StringReader("}H9Zj9!LDP6Z2");
      stringReader0.read(charBuffer0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 45, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 49, 1, false);
      StringReader stringReader1 = new StringReader("}H9Zj9!LDP6Z2");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 3, stringReader1, objectCodec1, charsToNameCanonicalizer0, charArray0, 32768, 0, false);
      try { 
        readerBasedJsonParser1.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker '}': expected ']' (for root starting at [Source: UNKNOWN; line: 1, column: 0])
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)72;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)59;
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)66;
      byteArray0[6] = (byte)121;
      byteArray0[7] = (byte) (-112);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 102, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 33, 57, true);
      readerBasedJsonParser0._loadMore();
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0._decodeEscaped();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 102, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser1.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker ']': expected '}' (for root starting at [Source: UNKNOWN; line: 1, column: 0])
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "UNKNOWN", true);
      StringReader stringReader0 = new StringReader("]|");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("");
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker ']': expected '}' (for root starting at [Source: UNKNOWN; line: 1, column: 0])
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("\nRequest payload : ");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockFile mockFile0 = new MockFile("\nRequest payload : ");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      try { 
        readerBasedJsonParser0.readBinaryValue((Base64Variant) null, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(33);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, objectCodec0, charsToNameCanonicalizer0);
      MockFile mockFile0 = new MockFile("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, false);
      try { 
        readerBasedJsonParser0.readBinaryValue((Base64Variant) null, (OutputStream) mockFileOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(497);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("7*a^17");
      stringReader0.skip((-149L));
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(497);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2), stringReader0, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('*' (code 42)): Expected space separating root-level values
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ",mg", false);
      StringReader stringReader0 = new StringReader("rZE|ze%)K|");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("7MC9<mqoB0g");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 78, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("[~YLEKt]sOb$0`=r");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('M' (code 77)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Aef\u0001X (B K", false);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("7E\fU|dv({[H@U");
      StringReader stringReader1 = new StringReader("Aef\u0001X (B K");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getTypeId();
      try { 
        readerBasedJsonParser0._parseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: UNKNOWN; line: 1, column: 27]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("~Uw:x`:;=+F5O3$");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = '*';
      charArray0[2] = '0';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 1, 108, true);
      readerBasedJsonParser0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 186, stringReader0, objectCodec1, charsToNameCanonicalizer1, charArray0, 1067, 0, true);
      try { 
        readerBasedJsonParser1._parseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: UNKNOWN; line: 1, column: 19]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(240);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      readerBasedJsonParser0._getText2(jsonToken0);
      readerBasedJsonParser0.nextToken();
      readerBasedJsonParser0.getTextOffset();
      readerBasedJsonParser0._loadMore();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = iOContext0.allocConcatBuffer();
      ObjectCodec objectCodec0 = null;
      StringReader stringReader0 = new StringReader(") does not override copy(); it has to");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      int int0 = 67;
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(67);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 11, 33, false);
      try { 
        readerBasedJsonParser0._parseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: UNKNOWN; line: 1, column: 13]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("Invalid numeric value: ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[1];
      charArray0[0] = '8';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-4150), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 0, true);
      readerBasedJsonParser0.getObjectId();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader1 = new StringReader("u%{5[`pa}eqrf{0)z");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(114);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 33, stringReader1, objectCodec1, charsToNameCanonicalizer1, charArray0, 114, 4, true);
      try { 
        readerBasedJsonParser1.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'u': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("u/khIzf/)U");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "u/khIzf/)U", true);
      StringReader stringReader1 = new StringReader("u/khIzf/)U");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 35, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'u': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      StringReader stringReader0 = new StringReader("Unexpected padding character ('");
      stringReader0.skip(3);
      char[] charArray0 = new char[2];
      charArray0[0] = '$';
      charArray0[1] = '1';
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 111, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 111, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._handleOddValue(682);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "ZL8.j_V{6?<l5O^", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("ZL8.j_V{6?<l5O^");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'ZL8': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.type.TypeReference");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = '%';
      charArray0[2] = 'L';
      charArray0[3] = '~';
      StringReader stringReader1 = new StringReader("ZrKBzHrM^f2(");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 46, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 255, 33, true);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'ZrKBzHrM': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 42]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.base.ParserMinimalBase");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'Y';
      charArray0[3] = 'M';
      StringReader stringReader1 = new StringReader("USE_THREAD_LOCAL_FOR_BUFFER_RECYCLING");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-744), stringReader1, objectCodec0, charsToNameCanonicalizer0, charArray0, 110, 33, false);
      stringReader1.markSupported();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 0, stringReader1, objectCodec1, charsToNameCanonicalizer0, charArray0, 2, 58, true);
      readerBasedJsonParser0.getNextChar("com.fasterxml.jackson.core.base.ParserMinimalBase");
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.base.ParserMinimalBase");
      // Undeclared exception!
      try { 
        readerBasedJsonParser1.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Aef1X (B K", false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("7E\fU|dv({[H@U");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = 'w';
      charArray0[1] = 'V';
      charArray0[2] = 'w';
      stringReader0.read(charArray0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 33, 3139, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 1, 33, false);
      try { 
        readerBasedJsonParser1.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'E': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("~Uw:x`:;=+F5O3$");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = '*';
      charArray0[2] = '0';
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(49);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3756, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('~' (code 126)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "\\[%oe9<!F1H#k", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("\\[%oe9<!F1H#k");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\\' (code 92)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      IOContext iOContext1 = new IOContext(bufferRecycler0, "QzcUP]T[Cer;3VKI/xp", true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1317);
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      StringReader stringReader1 = new StringReader("4p");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(33);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 95, 8000, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      readerBasedJsonParser0.configure(jsonParser_Feature0, true);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 2, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer2);
      try { 
        readerBasedJsonParser1.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('p' (code 112)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(" within/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(47);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1637));
      StringReader stringReader1 = new StringReader("");
      StringReader stringReader2 = new StringReader("4%tQ");
      stringReader2.ready();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader2, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getTokenLocation();
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('%' (code 37)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Longest collision chain in symbol table (of size ");
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.type.TypeReference");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = new char[7];
      int int0 = 69;
      boolean boolean0 = false;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 69, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._matchToken((String) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(33);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("1#Thfeb%{FAt'");
      stringReader0.skip(3);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(33);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'hfeb': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Object object0 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, fileSystemHandling0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      char[] charArray0 = new char[7];
      charArray0[0] = '=';
      charArray0[1] = '(';
      charArray0[2] = 'F';
      charArray0[3] = 'M';
      charArray0[4] = '@';
      charArray0[5] = 'p';
      charArray0[6] = ')';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 105, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 3, 3, false);
      readerBasedJsonParser0.getValueAsString("");
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      StringReader stringReader0 = new StringReader("Shz!W<>Ai%lR'XPf/");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2064), stringReader0, objectCodec0, charsToNameCanonicalizer0);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._handleOddName(39);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("Shz!W<>Ai%lR'XPf/");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2064), stringReader0, objectCodec0, charsToNameCanonicalizer0);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._handleOddName(39);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString("PO");
      StringReader stringReader0 = new StringReader("PO");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = '9';
      charArray0[1] = 'N';
      charArray0[2] = '9';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 73, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2, 73, true);
      readerBasedJsonParser0._skipCR();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 116, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 120, 73, true);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding1);
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser2 = new ReaderBasedJsonParser(iOContext2, (-2246), stringReader0, objectCodec2, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser2.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'PO': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("P)%f!_^h@h.8");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'P': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[8];
      charArray0[0] = '1';
      charArray0[1] = '7';
      charArray0[2] = '/';
      charArray0[3] = '6';
      charArray0[4] = 'r';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 122, 118, false);
      readerBasedJsonParser0._closeInput();
      readerBasedJsonParser0.getTextCharacters();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-inputNo digit following minus sign
         //  at [Source: UNKNOWN; line: 1, column: 241]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(33);
      StringReader stringReader0 = new StringReader("4On");
      StringReader stringReader1 = new StringReader("g=<#BTm[r");
      ObjectCodec objectCodec0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "4On");
      char[] charArray0 = new char[0];
      boolean boolean0 = true;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 715, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 0, 0, true);
      try { 
        readerBasedJsonParser0._skipCR();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 0
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      IOContext iOContext1 = new IOContext(bufferRecycler0, "QzcUP]T[Cer;3VKI/xp", true);
      ObjectCodec objectCodec1 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1317);
      char[] charArray0 = new char[5];
      charArray0[0] = '!';
      charArray0[1] = '!';
      charArray0[2] = ')';
      charArray0[4] = ')';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3435, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 487, (-279), true);
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: UNKNOWN; line: 1, column: -255]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 33, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = '\u0018';
      CharsToNameCanonicalizer.createRoot();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 9, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.getBinaryValue((Base64Variant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "('true', 'false' or 'null')");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.io.JsonStringEncoder");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      char[] charArray0 = new char[4];
      charArray0[0] = '\"';
      charArray0[1] = 'w';
      charArray0[2] = 'D';
      charArray0[3] = 'k';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 1320, 117, false);
      try { 
        readerBasedJsonParser0.getBinaryValue((Base64Variant) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: UNKNOWN; line: 1, column: 1321]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = '\u0018';
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 13, 1736, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parseName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 13
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(33);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("1#Thfeb%{FAt'");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(33);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('#' (code 35)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 192, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 2, 2, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._finishString2();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("-");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = new char[3];
      charArray0[2] = '(';
      StringReader stringReader1 = new StringReader("-INF");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2146, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Non-standard token '-INF': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
         //  at [Source: UNKNOWN; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("+ P5");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(33);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 39, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (' ' (code 32)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("+INF");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(objectCodec0).toString();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 39, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getCodec();
      try { 
        readerBasedJsonParser0.nextIntValue(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Non-standard token '+INF': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
         //  at [Source: UNKNOWN; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.type.TypeReference");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[1] = '%';
      charArray0[2] = '\r';
      charArray0[4] = ')';
      charArray0[5] = 'd';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 55, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, false);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'com': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 2, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = 'b';
      charArray0[2] = 'B';
      charArray0[3] = 'g';
      charArray0[4] = '`';
      charArray0[5] = 'f';
      StringReader stringReader0 = new StringReader(" in field name");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 4825, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 877, 33, false);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.ALLOW_YAML_COMMENTS;
      readerBasedJsonParser0.configure(jsonParser_Feature0, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 877, stringReader0, objectCodec1, charsToNameCanonicalizer2);
      try { 
        readerBasedJsonParser1.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'in': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader(" within/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = 'X';
      charArray0[1] = '\r';
      charArray0[2] = 'X';
      charArray0[3] = '\r';
      charArray0[4] = '\r';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 117, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "expec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')", false);
      StringReader stringReader0 = new StringReader("expec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "expec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 58, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 104, (-104), true);
      try { 
        readerBasedJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read -104
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("0tyn~IU%z2");
      ObjectCodec objectCodec0 = null;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextLongValue(2147483647L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('t' (code 116)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("0tyn~IU%z2");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 98, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 1762, 1762, true);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('t' (code 116)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, charsToNameCanonicalizer0, true);
      charsToNameCanonicalizer0.makeChild(1);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("GmEny#");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler1, "B#tGKtdLVHA", true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'GmEny': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("GmEny#");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'GmEny': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[8];
      charArray0[0] = '1';
      charArray0[1] = '7';
      charArray0[2] = '/';
      charArray0[3] = '6';
      charArray0[4] = '/';
      charArray0[5] = '!';
      charArray0[6] = 'w';
      charArray0[7] = 'v';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2116, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 715, true);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('/' (code 47)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Aef1X (B K", false);
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("7E\fU|dv({[H@U");
      StringReader stringReader1 = new StringReader("Aef1X (B K");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader2 = new StringReader("7E\fU|dv({[H@U");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 91, stringReader2, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 12)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "expec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')", false);
      StringReader stringReader0 = new StringReader("expec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "expec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')");
      CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}%;l=h1.#.HXH[");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}%;l=h1.#.HXH[");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._parseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: UNKNOWN; line: 1, column: 163]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "?");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      StringReader stringReader0 = new StringReader("'");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2734), stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, (-2322), (-205), false);
      readerBasedJsonParser0.getCurrentLocation();
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("n^@)7DieY3GaHaU1^#");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 9, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 55, 1, false);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'n': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 59, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, (-1306), 55, false);
      StringReader stringReader1 = new StringReader("false");
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-1898), stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      readerBasedJsonParser1.nextFieldName();
      try { 
        readerBasedJsonParser1._handleOddName(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): was expecting double-quote to start field name
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 11]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.base.ParserMinimalBase");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, stringReader0, true);
      StringReader stringReader1 = new StringReader("sSA");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(515);
      IOContext iOContext2 = new IOContext(bufferRecycler1, iOContext1, false);
      StringReader stringReader2 = new StringReader("sSA");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 907, stringReader2, objectCodec0, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.base.ParserMinimalBase");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'sSA': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.base.ParserMinimalBase");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, stringReader0, true);
      StringReader stringReader1 = new StringReader("sSA");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext2 = new IOContext(bufferRecycler1, iOContext1, false);
      StringReader stringReader2 = new StringReader("sSA");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 907, stringReader2, objectCodec0, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("com.fasterxml.jackson.core.base.ParserMinimalBase");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'sSA': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("-");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext2 = new IOContext(bufferRecycler0, stringReader0, true);
      char[] charArray0 = new char[5];
      charArray0[0] = 't';
      charArray0[1] = '(';
      charArray0[2] = '(';
      charArray0[3] = '(';
      charArray0[4] = '(';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1736, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 2, true);
      try { 
        readerBasedJsonParser0.nextIntValue(1248);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 't': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'l';
      charArray0[1] = 'b';
      charArray0[2] = 'B';
      charArray0[3] = 'g';
      charArray0[4] = '`';
      charArray0[5] = 'f';
      charArray0[3] = 'T';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringReader stringReader0 = new StringReader("No digit following minus sign");
      stringReader0.read(charBuffer0);
      CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 3, false);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 't': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("t2JO+T`ZjOSD");
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 't2JO': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("~Uw:x`:;=+F5O3$");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      char[] charArray0 = new char[3];
      charArray0[0] = '>';
      charArray0[1] = '*';
      charArray0[2] = '0';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 1, 108, true);
      readerBasedJsonParser0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader1 = new StringReader("tg^my");
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-874), stringReader1, objectCodec1, charsToNameCanonicalizer2);
      try { 
        readerBasedJsonParser1.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'tg': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("t2JO+T`ZjOSD");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("t2JO+T`ZjOSD");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 't2JO': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 102, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 33, 57, true);
      readerBasedJsonParser0._loadMore();
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0._decodeEscaped();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "QzcUP]T[Cer;3VKI/xp", false);
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, objectCodec1, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser1.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker ']': expected '}' (for root starting at [Source: UNKNOWN; line: 1, column: 0])
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("]|");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("]|");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker ']': expected '}' (for root starting at [Source: UNKNOWN; line: 1, column: 0])
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharBuffer.allocate(19);
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      StringReader stringReader0 = new StringReader("]|");
      stringReader0.read(charBuffer0);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker ']': expected '}' (for root starting at [Source: UNKNOWN; line: 1, column: 0])
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.type.TypeReference");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(55);
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = '%';
      charArray0[2] = '\u0010';
      charArray0[3] = '~';
      charArray0[4] = ')';
      charArray0[5] = 'd';
      charArray0[6] = '3';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-553), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 59, false);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      readerBasedJsonParser0.getNextChar("com.fasterxml.jackson.core.type.TypeReference", jsonToken0);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('~' (code 126)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(110);
      CharsToNameCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3731, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, (-1771), 3731, false);
      JsonToken jsonToken0 = JsonToken.START_ARRAY;
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.getNextChar("InputData source not (yet?) support for this format (%s)", jsonToken0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1771
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      charArray0[2] = 'B';
      charArray0[4] = '`';
      charArray0[3] = 'T';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      StringReader stringReader0 = new StringReader("No digit following minus sign");
      stringReader0.read(charBuffer0);
      CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 3, false);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'following': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 14]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("false");
      StringReader stringReader1 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-1), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextBooleanValue();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-inputNo digit following minus sign
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 16]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "VkrD=&`]vyA[:w");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "false";
      StringReader stringReader0 = new StringReader("false");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      stringReader0.skip(0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextIntValue((-113));
      readerBasedJsonParser0.getBooleanValue();
      try { 
        readerBasedJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in character escape sequence
         //  at [Source: UNKNOWN; line: 1, column: 16]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("0UJB{xEVL8");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 102, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getCurrentLocation();
      readerBasedJsonParser0._loadMore();
      try { 
        readerBasedJsonParser0._parsePosNumber(51);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 127)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      StringReader stringReader1 = new StringReader("true");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1352, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      JsonToken jsonToken0 = JsonToken.VALUE_NULL;
      readerBasedJsonParser0.getNextChar("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow", jsonToken0);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._handleOddName(1688);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.base.ParserMinimalBase");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("0r!{h/_^");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      StringReader stringReader2 = new StringReader("0r!{h/_^");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader2, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('r' (code 114)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("rZE|ze%)K|");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      SerializedString serializedString0 = new SerializedString("Illegal white space character (code 0x%s) as character #%d of 4-char base64 unit: can only used between units");
      charsToNameCanonicalizer0.makeChild((-2034));
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString1 = new SerializedString("Non-standard token '");
      char[] charArray0 = new char[1];
      charArray0[0] = '*';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 4, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2, charArray0, 123, 1, true);
      readerBasedJsonParser0._skipCR();
      ReaderBasedJsonParser readerBasedJsonParser2 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 110, (-1080), true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser2.nextFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer smaller than original
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Decimal point not followed by a digit");
      StringReader stringReader1 = new StringReader("pw(");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      int int0 = 59;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[5];
      charArray0[0] = '';
      charArray0[1] = 'i';
      charArray0[2] = 'D';
      charArray0[3] = 'Y';
      charArray0[4] = ';';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader1, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 59, false);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 127)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.JsonFactory$Feature");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[5];
      charArray0[0] = 'N';
      CharBuffer.allocate(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1160), stringReader0, objectCodec0, charsToNameCanonicalizer0);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._handleOddName(56);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("{() 8");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1306));
      charsToNameCanonicalizer1.release();
      char[] charArray0 = new char[2];
      charArray0[1] = 'U';
      stringReader0.skip(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 2, 2, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec1, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextToken();
      try { 
        readerBasedJsonParser1.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      char[] charArray0 = new char[3];
      charsToNameCanonicalizer0.release();
      charArray0[0] = 'Y';
      CharsToNameCanonicalizer.createRoot();
      charArray0[1] = 'o';
      charArray0[2] = '6';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 3, 3, true);
      readerBasedJsonParser0.getValueAsString("");
      try { 
        readerBasedJsonParser0._parsePosNumber(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('N' (code 78)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 45, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 0, true);
      try { 
        readerBasedJsonParser0._finishString2();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 0
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Decimal point not followed by a digit");
      StringReader stringReader1 = new StringReader("pw(");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1710);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1710, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Decimal': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 8]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Decimal point not followed by a digit");
      StringReader stringReader1 = new StringReader("Decimal point not followed by a digit");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(685);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-2568), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Decimal': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 8]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.base.ParserMinimalBase");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = 'M';
      charArray0[2] = 'Y';
      charArray0[4] = 'l';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-744), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 110, 33, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._handleOddName(204);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 102, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 33, 57, true);
      readerBasedJsonParser0._loadMore();
      readerBasedJsonParser0._decodeEscaped();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "QzcUP]T[Cer;3VKI/xp", false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      readerBasedJsonParser0.getTextLength();
      SerializedString serializedString0 = new SerializedString("QzcUP]T[Cer;3VKI/xp");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'zcUP': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 63]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("**^y\u0003c]P");
      char[] charArray0 = new char[2];
      charArray0[0] = 'r';
      CharBuffer.wrap(charArray0);
      StringReader stringReader1 = new StringReader("z2@Br#JdI");
      StringReader stringReader2 = new StringReader("z2@Br#JdI");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-948), stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'z2': was expecting ('true', 'false' or 'null')
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("-");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 59, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, (-1306), 55, true);
      StringReader stringReader1 = new StringReader("Infinity");
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 33, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getLastClearedToken();
      try { 
        readerBasedJsonParser1.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
         //  at [Source: UNKNOWN; line: 1, column: 17]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 59, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, (-1306), 55, false);
      StringReader stringReader1 = new StringReader("Infinity");
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-1898), stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser1.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 17]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.type.TypeReference");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 2, 69, false);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser1._skipCR();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser2 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2, charArray0, 1, 33, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser2._parseName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("{() 8");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3138, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("hcj,4vi.;<R");
      readerBasedJsonParser0.nextFieldName();
      try { 
        readerBasedJsonParser0._parseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: UNKNOWN; line: 1, column: 11]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.type.TypeReference");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = new char[7];
      charArray0[1] = '%';
      charArray0[3] = '~';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 6, true);
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in name
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.base.ParserMinimalBase");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = '*';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getEmbeddedObject();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 1725, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 2, 3, false);
      try { 
        readerBasedJsonParser1._parseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: UNKNOWN; line: 1, column: 60]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.type.TypeReference");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
      doReturn((Object) null).when(iOContext0).getSourceReference();
      StringReader stringReader1 = new StringReader("com.fasterxml.jackson.core.type.TypeReference");
      char[] charArray0 = new char[6];
      charArray0[0] = 'd';
      charArray0[1] = 'd';
      charArray0[2] = ')';
      charArray0[3] = '\\';
      charArray0[4] = '~';
      charArray0[5] = 'd';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1966), stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 2823, 1, false);
      readerBasedJsonParser0.getTypeId();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      readerBasedJsonParser0.getCurrentLocation();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 93, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, (-1966), (-1966), true);
      try { 
        readerBasedJsonParser1.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'com': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: -1962]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      ObjectCodec objectCodec0 = null;
      StringReader stringReader0 = new StringReader("n^@)7DieY3GaHaU1^#");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.skip(1);
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 113, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 287, 3, false);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser1._skipCR();
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 3
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.type.TypeReference");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(55);
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = '%';
      charArray0[2] = '\u0010';
      charArray0[3] = '~';
      charArray0[4] = ')';
      charArray0[5] = 'd';
      charArray0[6] = '3';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-553), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 59, false);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 16)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1044);
      StringReader stringReader0 = new StringReader("[");
      CharsToNameCanonicalizer.createRoot();
      stringReader0.ready();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(10);
      StringReader stringReader1 = new StringReader("[");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 703, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getTextLength();
      SerializedString serializedString0 = new SerializedString("[");
      readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("lw'.fsU)JV`U Z");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(33);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0._parseAposName();
      readerBasedJsonParser0.getTextCharacters();
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('.' (code 46)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("-");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 59, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, (-1306), 55, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._handleApos();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1306
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectCodec objectCodec0 = null;
      StringReader stringReader0 = new StringReader("'");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("<");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (''' (code 39)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "lw'.fsU)JV`U Z";
      StringReader stringReader0 = new StringReader("lw'.fsU)JV`U Z");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("ShA!W<>Ai%lR'XPf/");
      CharBuffer.allocate(3);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("kq2]m+Hii8i7H3mOO");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 56, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'kq2': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "GmEnyqQ#";
      StringReader stringReader0 = new StringReader("k`/0HZ9odf7e}x&9");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'k': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(33);
      StringReader stringReader0 = new StringReader("4On");
      StringReader stringReader1 = new StringReader("VALUE_EMBEDDED_OBJECT");
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(33);
      StringReader stringReader2 = new StringReader("^<");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 105, stringReader2, objectCodec0, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("ARRAY");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('^' (code 94)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("n^@)7DieY3GaHaU1^#");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.skip(1);
      charsToNameCanonicalizer0.makeChild(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('^' (code 94)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("$~.)^ZWWI{");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = '9';
      charArray0[2] = '`';
      SerializedString serializedString0 = new SerializedString("PO");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 3, true);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('`' (code 96)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(47);
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("9:|jo)Bp-%4gIs:-");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 3650, 13, true);
      try { 
        readerBasedJsonParser0.nextLongValue(1659L);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (':' (code 58)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 16]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.release();
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(33);
      CharBuffer charBuffer0 = byteBuffer0.asCharBuffer();
      stringReader0.read(charBuffer0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = new char[4];
      charArray0[0] = '!';
      charArray0[1] = '&';
      charArray0[2] = ')';
      charArray0[3] = '+';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 48, 110, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.JsonFactory$Feature");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[5];
      charArray0[0] = 'N';
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      stringReader0.read(charBuffer0);
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(Integer.MAX_VALUE);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 33, stringReader0, objectCodec0, charsToNameCanonicalizer2);
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: UNKNOWN; line: 1, column: 89]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test381()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((TreeNode) null).when(objectCodec0).readTree(any(com.fasterxml.jackson.core.JsonParser.class));
      doReturn((String) null).when(objectCodec0).toString();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((char[]) null).when(iOContext0).allocTokenBuffer();
      doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3321), stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.readValueAsTree();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = 'v';
      charArray0[1] = 'h';
      charArray0[2] = ',';
      charArray0[3] = '\\';
      charArray0[4] = 'l';
      charArray0[5] = 'U';
      charArray0[6] = '/';
      charArray0[7] = 'f';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, (-492), stringReader0, objectCodec1, charsToNameCanonicalizer1, charArray0, 33, 33, false);
      readerBasedJsonParser1.clearCurrentToken();
      // Undeclared exception!
      try { 
        readerBasedJsonParser1._parsePosNumber(615);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 32
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test382()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.base.ParserMinimalBase");
      stringReader0.markSupported();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      int int0 = 2;
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._matchToken("com.fasterxml.jackson.core.base.ParserMinimalBase", 45);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'com.fasterxml.jackson.core.base.ParserMinimalcom': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test383()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(33);
      StringReader stringReader0 = new StringReader("~&");
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 102, 104, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 102
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test384()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      String string0 = "";
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = null;
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 15, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 2, true);
      SerializedString serializedString0 = new SerializedString("");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 2
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test385()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("Internal error on SymbolTable.rehash(): had %d entries; now have %d");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Internal error on SymbolTable.rehash(): had %d entries; now have %d");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, false);
      stringReader0.close();
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 467, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test386()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(",539ga+WCmfi");
      char[] charArray0 = new char[4];
      charArray0[1] = '\u0000';
      charArray0[2] = '\u0000';
      charArray0[0] = 'P';
      stringReader0.skip(1);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray1 = new char[3];
      charArray1[0] = 'P';
      charArray1[1] = 'P';
      charArray1[2] = 'P';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray1, 101, 69, true);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 127)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 73]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test387()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("+");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 69, true);
      try { 
        readerBasedJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test388()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("VALUE_EMBEDDED_OBJECT");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      charArray0[1] = '$';
      charArray0[2] = '.';
      charArray0[3] = '~';
      charArray0[4] = '~';
      charArray0[5] = '[';
      charArray0[6] = 'T';
      charsToNameCanonicalizer0.makeChild(110);
      StringReader stringReader1 = new StringReader("RIv^Og#QPgg\"wI");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader1, objectCodec0, charsToNameCanonicalizer0);
      CharsToNameCanonicalizer.createRoot();
      try { 
        readerBasedJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 29]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test389()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "\\[%oe9<!F1H#k", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("\\[%oe9<!F1H#k");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized character escape '[' (code 91)
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test390()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("t2JO+T`ZjOSD");
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[9];
      charArray0[0] = 'h';
      charArray0[1] = '!';
      charArray0[2] = '!';
      charArray0[3] = '1';
      charArray0[4] = '!';
      charArray0[5] = '.';
      charArray0[6] = '8';
      iOContext0.allocWriteEncodingBuffer((-274));
      charArray0[7] = 's';
      charArray0[8] = 'a';
      int int0 = (-1418);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-274), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, (-1418), false);
      readerBasedJsonParser0._loadMore();
      readerBasedJsonParser0._decodeEscaped();
      try { 
        readerBasedJsonParser0.nextIntValue(3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('J' (code 74)): Expected space separating root-level values
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: -1414]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test391()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("YmQ%zT+[v+GHa'x1Bf");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-1125));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'YmQ': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test392()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(" within/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("1 xsrV^q2=dhuX");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      readerBasedJsonParser0._getText2(jsonToken0);
      readerBasedJsonParser0.nextToken();
      readerBasedJsonParser0.getTextOffset();
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 29]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test393()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "expected a valid value (number, String, array, object, 'true', 'false' or 'null')", true);
      StringReader stringReader0 = new StringReader("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-2331));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getCurrentLocation();
      readerBasedJsonParser0._loadMore();
      try { 
        readerBasedJsonParser0._parsePosNumber(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('x' (code 120)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test394()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1035);
      StringReader stringReader0 = new StringReader("[");
      charsToNameCanonicalizer0.makeChild(2038);
      iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextFieldName();
  }

  @Test(timeout = 4000)
  public void test395()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, iOContext0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("[q7yK0RF=>,Fiw");
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
      SerializedString serializedString0 = new SerializedString(":.m3");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'q7yK0RF': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test396()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader(":o");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 47, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 93, 11, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser1._skipString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test397()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding0);
      String string0 = "Shz!W<>Ai%lR'XPf/";
      StringReader stringReader0 = new StringReader("Shz!W<>Ai%lR'XPf/");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 49, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0._handleApos();
      SerializedString serializedString0 = new SerializedString("Shz!W<>Ai%lR'XPf/");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'XPf': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 17]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test398()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "XflaX}g\u0004ecmvzS", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("XflaX}g\u0004ecmvzS");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 118, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'XflaX': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test399()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("ShA!W<>Ai%lR'XPf/");
      CharBuffer charBuffer0 = CharBuffer.allocate(16);
      stringReader0.read(charBuffer0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-5826), 33, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._skipString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -5826
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test400()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.JsonFactory$Feature");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[5];
      charArray0[0] = 'N';
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      stringReader0.read(charBuffer0);
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(Integer.MAX_VALUE);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 33, stringReader0, objectCodec0, charsToNameCanonicalizer2);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'm': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test401()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("GmEnyqQ#");
      stringReader0.read();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'mEnyqQ': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test402()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((char[]) null).when(iOContext0).allocTokenBuffer();
      doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getObjectId();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[5];
      charArray0[0] = '/';
      charArray0[1] = 'Z';
      charArray0[2] = '}';
      charArray0[3] = '4';
      charArray0[4] = 'd';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 2, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 33, 2320, false);
      try { 
        readerBasedJsonParser1._handleOddValue(44);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (',' (code 44)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 34]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test403()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(1);
      StringReader stringReader0 = new StringReader(",");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (',' (code 44)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test404()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[0] = 'E';
      charArray0[1] = ':';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 261, true);
      try { 
        readerBasedJsonParser0.getBinaryValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test405()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.base.ParserMinimalBase");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = '*';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getEmbeddedObject();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 1725, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 2, 3, false);
      try { 
        readerBasedJsonParser1.getBinaryValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Current token (null) not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test406()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.base.ParserMinimalBase");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("0r!{h/_^");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      StringReader stringReader2 = new StringReader("0r!{h/_^");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader2, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0._parseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: UNKNOWN; line: 1, column: 17]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test407()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 8, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, (-3017), 0, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test408()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("uab.cS&[V9SNc br");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("uab.cS&[V9SNc br");
      SerializedString serializedString0 = new SerializedString("Leading zeroes not allowed");
      SerializedString serializedString1 = new SerializedString("uab.cS&[V9SNc br");
      charsToNameCanonicalizer0.makeChild(1);
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      char[] charArray0 = new char[7];
      charArray0[0] = '0';
      charArray0[1] = '*';
      charArray0[2] = '4';
      charArray0[3] = '?';
      charArray0[4] = '8';
      charArray0[5] = '\"';
      charArray0[6] = '\'';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 2, false);
      try { 
        readerBasedJsonParser0._parseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: UNKNOWN; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test409()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("VALUE_EMBEDDED_OBJECT");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 255, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      readerBasedJsonParser0.getValueAsString("VALUE_EMBEDDED_OBJECT");
      readerBasedJsonParser0._decodeEscaped();
      JsonToken jsonToken1 = JsonToken.FIELD_NAME;
      readerBasedJsonParser0._getText2(jsonToken1);
  }

  @Test(timeout = 4000)
  public void test410()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(" within/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = null;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3617), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 114, (-3617), true);
      readerBasedJsonParser0.finishToken();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test411()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "expected a valid value (number, String, array, object, 'true', 'false' or 'null')", true);
      StringReader stringReader0 = new StringReader("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, 2, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._decodeEscaped();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test412()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("): has to be escaped using backslash to be included in ");
      readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser1.getText();
      readerBasedJsonParser1.nextToken();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parsePosNumber(3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test413()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.type.TypeReference");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = new char[7];
      int int0 = 69;
      StringReader stringReader1 = new StringReader("0r!{h/_^");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 9, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('r' (code 114)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test414()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.base.ParserMinimalBase");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("0r!{h/_^");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      StringReader stringReader2 = new StringReader("0r!{h/_^");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader2, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('r' (code 114)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test415()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("Aef\u0001X (B K");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "Aef\u0001X (B K", false);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(663);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getTypeId();
      try { 
        readerBasedJsonParser0._finishString2();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 23]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test416()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.base.ParserMinimalBase");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      StringReader stringReader1 = new StringReader("0r!{h/_^");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "", false);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader1, objectCodec0, charsToNameCanonicalizer0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      stringReader1.skip(1L);
      IOContext iOContext2 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      charArray0[0] = 'w';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 33, stringReader1, objectCodec1, charsToNameCanonicalizer1, charArray0, 0, 256, false);
      readerBasedJsonParser0._decodeEscaped();
      SerializedString serializedString0 = new SerializedString("");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('!' (code 33)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test417()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("0r!{h/_^");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      stringReader0.skip(1L);
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      readerBasedJsonParser0._decodeEscaped();
      ReaderBasedJsonParser readerBasedJsonParser1 = null;
      try {
        readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec1, charsToNameCanonicalizer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test418()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "\\[%oe9<!F1H#k", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("\\[%oe9<!F1H#k");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized character escape '[' (code 91)
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test419()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 59, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1306), 55, true);
      StringReader stringReader1 = new StringReader("Infinity");
      readerBasedJsonParser0.getTokenLocation();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1306
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test420()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = false;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      StringReader stringReader0 = new StringReader("DrMEfR");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = null;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1369), stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 2, 3, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._skipCR();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test421()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("+");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charsToNameCanonicalizer0.release();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 69, true);
      readerBasedJsonParser0.getNextChar("aN?,HVh-ap[nW%");
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test422()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "0GK-Hw$0p^rn", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("Cv4");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 61, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._handleOddName(1940);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test423()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "xpec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')", false);
      StringReader stringReader0 = new StringReader("xpec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "xpec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext1.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = '3';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3139), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._handleOddName(88);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.sym.CharsToNameCanonicalizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test424()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("");
      stringReader0.read();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1));
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-774), stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextBooleanValue();
      readerBasedJsonParser0._handleOddName(100);
      readerBasedJsonParser0.getText();
  }

  @Test(timeout = 4000)
  public void test425()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      StringReader stringReader0 = new StringReader("RS0Y;@");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "$~.)^ZWWI{", true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = 'Q';
      charArray0[1] = 'k';
      charArray0[2] = 'k';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 33, 3, true);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'RS0Y': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test426()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("n^@)7DieY3GaHaU1^#");
      StringReader stringReader1 = new StringReader("R&8I");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(101);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 106, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'R': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test427()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader(",n");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 50, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe((-3367), "QzcUP]T[Cer;3VKI/xp");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test428()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("VALUE_EMBEDDED_OBJECT");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      charArray0[1] = '$';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 33, 3, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 33, stringReader0, objectCodec1, charsToNameCanonicalizer1, charArray0, 3, 33, true);
      try { 
        readerBasedJsonParser1.nextIntValue(33);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test429()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(" wit$hin/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      StringReader stringReader1 = new StringReader(" wit$hin/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'wit$hin': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test430()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("-");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = new char[3];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 59, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1306), 55, true);
      SerializedString serializedString0 = new SerializedString("expeced a dgit for number exponent");
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1306
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test431()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("&4gRGI{");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringReader0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getEmbeddedObject();
      IOContext iOContext2 = new IOContext(bufferRecycler0, jsonEncoding0, true);
      StringReader stringReader1 = new StringReader("{m*|[wu,=R");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[1];
      charArray0[0] = 'w';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, (-2307), stringReader1, objectCodec1, charsToNameCanonicalizer0, charArray0, 0, 3119, false);
      readerBasedJsonParser0.finishToken();
      SerializedString serializedString0 = new SerializedString("");
      // Undeclared exception!
      try { 
        readerBasedJsonParser1.nextFieldName((SerializableString) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test432()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "expec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')", false);
      StringReader stringReader0 = new StringReader("expec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')");
      IOContext iOContext1 = new IOContext(bufferRecycler0, "expec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader1 = new StringReader(" within/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 33, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'within': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 8]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test433()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, "com.fasterxml.jackson.core.base.ParserMinimalBase", false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2859);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1409, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.overrideCurrentName("com.fasterxml.jackson.core.base.ParserMinimalBase");
      readerBasedJsonParser0.nextLongValue(0L);
      StringReader stringReader0 = new StringReader("string value");
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 35, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser1._closeInput();
  }

  @Test(timeout = 4000)
  public void test434()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("t2JO+T`ZjOSD");
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext2, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 33, false);
      StringWriter stringWriter0 = new StringWriter(2);
      readerBasedJsonParser0.getText((Writer) stringWriter0);
      try { 
        readerBasedJsonParser0.getNextChar("t2JO+T`ZjOSD");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 33
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test435()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.type.TypeReference");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 69, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._reportInvalidToken("com.fasterxml.jackson.core.type.TypeReference");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test436()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.base.ParserMinimalBase");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = '*';
      charArray0[2] = 'Y';
      charArray0[3] = 'l';
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(0);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 84, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1027), 118, false);
      readerBasedJsonParser0._releaseBuffers();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._reportInvalidToken("slTm|'J");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1027
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test437()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("VALUE_EMBEDDED_OBJECT");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      charArray0[1] = '$';
      charArray0[2] = '.';
      charsToNameCanonicalizer0.makeChild(1);
      JsonEncoding jsonEncoding1 = JsonEncoding.UTF32_LE;
      iOContext1.withEncoding(jsonEncoding1);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'VALUE_EMBEDDED_OBJECT': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 43]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test438()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-1883));
      StringReader stringReader0 = new StringReader("VALUE_EMBEDDED_OBJECT");
      StringReader stringReader1 = new StringReader("4On");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(117);
      StringReader stringReader2 = new StringReader("^<");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-701), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("ARRAY");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'VALUE_EMBEDDED_OBJECT': was expecting ('true', 'false' or 'null')
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 43]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test439()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("Internal error on SymbolTable.rehash(): had %d entries; now have %d");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Internal error on SymbolTable.rehash(): had %d entries; now have %d");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.skip(1481L);
      IOContext iOContext0 = new IOContext(bufferRecycler0, stringReader0, true);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 857, 0, true);
      readerBasedJsonParser0.getTokenLocation();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test440()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      StringReader stringReader1 = new StringReader("was expecting double-quote to start field name");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      IOContext iOContext2 = new IOContext(bufferRecycler0, stringReader0, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-2678), stringReader0, objectCodec2, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextIntValue(0);
  }

  @Test(timeout = 4000)
  public void test441()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 107, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 69, 39, true);
      JsonParser.Feature jsonParser_Feature0 = JsonParser.Feature.INCLUDE_SOURCE_IN_LOCATION;
      readerBasedJsonParser0.enable(jsonParser_Feature0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._reportInvalidToken(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary", ") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test442()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("VALUE_EMBEDDED_OBJECT");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader1 = new StringReader("VALUE_EMBEDDED_OBJECT");
      CharBuffer charBuffer0 = CharBuffer.allocate(2);
      stringReader0.read(charBuffer0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-32768), stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'LUE_EMBEDDED_OBJECT': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 39]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test443()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      char[] charArray0 = new char[8];
      stringReader0.read(charArray0);
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild((-1308));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'LUE_STRING': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 11]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test444()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocConcatBuffer();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("Unexpected end-of-input within/between ");
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 97, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonToken jsonToken0 = JsonToken.VALUE_TRUE;
      readerBasedJsonParser0.getNextChar("cmv&=0/Ksu?$B`E", jsonToken0);
      stringReader0.close();
      try { 
        readerBasedJsonParser0._handleOddName(39);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (''' (code 39)): was expecting double-quote to start field name
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test445()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "QzcUP]T[Cer;3VKI/xp", false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 64, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._handleOddName(39);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (''' (code 39)): was expecting double-quote to start field name
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test446()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("&\"I>AtI| ");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.read();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(1);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-2224), stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextBooleanValue();
      try { 
        readerBasedJsonParser0._handleOddName((-2224));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in VALUE_STRING
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test447()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(47);
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = 'C';
      charArray0[2] = '6';
      charArray0[3] = 'C';
      StringReader stringReader0 = new StringReader("\"%1xsrV^q=huX");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3768, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextToken();
      try { 
        readerBasedJsonParser0.getTextOffset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 27]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test448()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonLocation jsonLocation0 = readerBasedJsonParser0.getTokenLocation();
      assertEquals(1, jsonLocation0.getLineNr());
      assertEquals(0, jsonLocation0.getColumnNr());
      assertEquals((-1L), jsonLocation0.getByteOffset());
      assertEquals((-1L), jsonLocation0.getCharOffset());
      
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      try { 
        readerBasedJsonParser0.getNextChar("U9IbL]0S)mF/dIf", jsonToken0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-inputU9IbL]0S)mF/dIf
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test449()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
      StringReader stringReader0 = new StringReader("s{n2=VZ]5PsN ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = 'P';
      charArray0[1] = 'i';
      charArray0[2] = 'K';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1851), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 33, 2, false);
      Object object0 = readerBasedJsonParser0.getInputSource();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 0, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      readerBasedJsonParser1.getNextChar("s{n2=VZ]5PsN ", jsonToken0);
  }

  @Test(timeout = 4000)
  public void test450()  throws Throwable  {
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringWriter stringWriter0 = new StringWriter(2367);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, objectCodec0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("[Integer with %d digits]");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(9);
      char[] charArray0 = new char[1];
      charArray0[0] = 'U';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectCodec1, charsToNameCanonicalizer1, charArray0, 2751, 89, true);
      readerBasedJsonParser0.nextTextValue();
      readerBasedJsonParser0._loadMore();
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      readerBasedJsonParser0.getNextChar((String) null, jsonToken0);
  }

  @Test(timeout = 4000)
  public void test451()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "m)ZS!^10uHMF", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("#r~");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectCodec0, charsToNameCanonicalizer1, (char[]) null, 2, 2604, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._reportInvalidToken("#r~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test452()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader1 = new StringReader("pw(");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "QzcUP]T[Cer;3VKI/xp");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "QzcUP]T[Cer;3VKI/xp");
      charsToNameCanonicalizer0.makeChild(33);
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer2.makeChild(33);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader1, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'pw': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test453()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader1 = new StringReader("pw(");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader1, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'pw': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test454()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext1 = new IOContext(bufferRecycler1, charsToNameCanonicalizer0, true);
      StringReader stringReader0 = new StringReader("&kj|*/Fc%_GUd:");
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 108, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 108, 2, true);
      try { 
        readerBasedJsonParser0.nextIntValue(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 2
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test455()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 119, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[9];
      charArray0[0] = 'l';
      charArray0[1] = 'Y';
      charArray0[2] = '?';
      charArray0[3] = '~';
      charArray0[4] = 'L';
      charArray0[5] = 'Q';
      charArray0[6] = 'T';
      charArray0[7] = 'k';
      charArray0[8] = 'g';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 2, 256, true);
      try { 
        readerBasedJsonParser1.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('?' (code 63)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test456()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("?]zKiOL8XWXdJ$");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      char[] charArray0 = new char[1];
      StringReader stringReader1 = new StringReader("?]zKiOL8XWXdJ$");
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('?' (code 63)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test457()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("$~.)^ZWWI{");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = '9';
      charArray0[2] = '`';
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "u~r\"u|9{:xyE<");
      StringReader stringReader1 = new StringReader("$~.)^ZWWI{");
      SerializedString serializedString0 = new SerializedString("0");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getNextChar("0");
  }

  @Test(timeout = 4000)
  public void test458()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, (-128), false);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      readerBasedJsonParser0._getText2(jsonToken0);
      StringReader stringReader1 = new StringReader("e:GpJ=4I");
      StringReader stringReader2 = new StringReader("Illegal character (code 0x");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 3, stringReader2, objectCodec1, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("[~YLEKt]sOb$0`=r");
      try { 
        readerBasedJsonParser1.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Illegal': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 8]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test459()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("-");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = new char[1];
      charArray0[0] = '(';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-2), 1, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextLongValue(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test460()  throws Throwable  {
      System.setCurrentTimeMillis(3005L);
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((char[]) null).when(iOContext0).allocTokenBuffer();
      doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, (Reader) null, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getEmbeddedObject();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[8];
      charArray0[0] = '^';
      charArray0[1] = '\"';
      charArray0[2] = 'X';
      charArray0[3] = 'J';
      charArray0[4] = ',';
      charArray0[5] = ';';
      charArray0[6] = 'p';
      charArray0[7] = '\'';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 3187, (Reader) null, objectCodec1, charsToNameCanonicalizer0, charArray0, 586, 0, false);
      readerBasedJsonParser1.nextToken();
  }

  @Test(timeout = 4000)
  public void test461()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      charArray0[1] = 'v';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 1, false);
      readerBasedJsonParser1.nextBooleanValue();
  }

  @Test(timeout = 4000)
  public void test462()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "p{S");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "S 2M5Rg2A3pc)-", false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("p{S");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(objectCodec0).toString();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1593));
      char[] charArray0 = new char[6];
      charArray0[0] = '#';
      charArray0[1] = '/';
      charArray0[2] = 'm';
      charArray0[3] = 'j';
      charArray0[4] = 'L';
      charArray0[5] = 'g';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, (-551), 0, true);
      readerBasedJsonParser0.getCodec();
  }

  @Test(timeout = 4000)
  public void test463()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("n^@)7DieY3GaHaU1^#");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.skip(1);
      charsToNameCanonicalizer0.makeChild(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: UNKNOWN; line: 1, column: 35]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test464()  throws Throwable  {
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 292, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._handleInvalidNumberStart(1, false);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 1)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test465()  throws Throwable  {
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[2];
      charArray0[0] = 'w';
      charArray0[1] = 'w';
      SerializedString serializedString0 = new SerializedString("{");
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, serializedString0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, (Reader) null, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0._reader = null;
      try { 
        readerBasedJsonParser0._handleInvalidNumberStart(704, true);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u02C0' (code 704 / 0x2c0)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test466()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      charArray0[1] = '0';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 2, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-3768), (-3768), true);
      readerBasedJsonParser1.getValueAsInt();
      // Undeclared exception!
      try { 
        readerBasedJsonParser1.nextIntValue(500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Trying to release buffer smaller than original
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test467()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("-");
      char[] charArray0 = new char[2];
      charArray0[0] = 'Y';
      charArray0[1] = 'M';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-7106), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 0, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._handleOddName(302);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test468()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      stringReader0.mark(38);
      char[] charArray0 = new char[1];
      charArray0[0] = 'w';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 3, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test469()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.JsonFactory$Feature");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[5];
      charArray0[0] = 'N';
      CharBuffer charBuffer0 = CharBuffer.allocate(3);
      stringReader0.read(charBuffer0);
      charArray0[1] = 'r';
      charArray0[2] = 't';
      charArray0[3] = '^';
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 100, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('.' (code 46)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test470()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      char[] charArray0 = new char[9];
      charArray0[1] = '4';
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectCodec objectCodec0 = null;
      StringReader stringReader0 = new StringReader(".)l+");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("zfZ{4ulqljb%K");
      SerializedString serializedString1 = new SerializedString("zfZ{4ulqljb%K");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('.' (code 46)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test471()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("): has to be escaped using backslash to be included in ");
      readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
      readerBasedJsonParser0.nextFieldName();
      readerBasedJsonParser0.nextFieldName();
  }

  @Test(timeout = 4000)
  public void test472()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("lw'.fsU)JV`U Z");
      ObjectCodec objectCodec0 = null;
      int int0 = 78;
      StringReader stringReader1 = new StringReader("<");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 116, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      SerializedString serializedString0 = new SerializedString("lw'.fsU)JV`U Z");
      SerializedString serializedString1 = new SerializedString("): ");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('<' (code 60)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test473()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ObjectCodec objectCodec0 = null;
      StringReader stringReader0 = new StringReader("<");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 116, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("): ");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('<' (code 60)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test474()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 33, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-1451), 49, true);
      readerBasedJsonParser0.nextToken();
      // Undeclared exception!
      try { 
        readerBasedJsonParser1._reportInvalidToken(")twA<N]K0E<", "");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1451
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test475()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("NaN");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 11, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 2, true);
      try { 
        readerBasedJsonParser0._loadMore();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 2
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test476()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      StringReader stringReader0 = new StringReader("go@_7rL3Ak[_4rJ%_");
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, (-386), true);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read -386
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test477()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("$~.)^ZWWI{");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = '9';
      charArray0[2] = '`';
      String string0 = "";
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2956, (-514), true);
      try { 
        readerBasedJsonParser0._matchToken("yDHuK{}kh", 2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'yD$': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: -512]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test478()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[2];
      charArray0[1] = '\u0006';
      int int0 = ReaderBasedJsonParser.FEAT_MASK_TRAILING_COMMA;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 0, (-457), true);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Non': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: -453]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test479()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("$~.)^ZWWI{");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = '9';
      charArray0[2] = '`';
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2801);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 99, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getValueAsString("$~.)^ZWWI{");
      readerBasedJsonParser0._decodeEscaped();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('~' (code 126)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test480()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("Internal error on SymbolTable.rehash(): had %d entries; now have %d");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Internal error on SymbolTable.rehash(): had %d entries; now have %d");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, false);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 467, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Internal': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test481()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader0 = new StringReader("&");
      CharBuffer.allocate(2);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 55, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._skipCR();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test482()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      Reader reader0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = null;
      char[] charArray0 = new char[5];
      charArray0[0] = '`';
      charArray0[2] = '`';
      charArray0[4] = '`';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 109, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 52, (-2355), true);
      readerBasedJsonParser0._loadMore();
      readerBasedJsonParser0._skipCR();
      try { 
        readerBasedJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in character escape sequence
         //  at [Source: UNKNOWN; line: 2, column: -2354]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test483()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      String string0 = "$~.)^ZWWI{";
      StringReader stringReader0 = new StringReader("$~.)^ZWWI{");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      String string1 = "|lFi_V&bzT|FXbnV";
      readerBasedJsonParser0.getInputSource();
      String string2 = "";
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._matchToken("", 33);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test484()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 2, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'not': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test485()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(" within/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("1 xsrV^q2=dhuX");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3768, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextToken();
      readerBasedJsonParser0.getTextOffset();
      iOContext0.constructTextBuffer();
      StringWriter stringWriter0 = new StringWriter(155);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      readerBasedJsonParser0.getText((Writer) stringWriter0);
      int int0 = ReaderBasedJsonParser.FEAT_MASK_TRAILING_COMMA;
  }

  @Test(timeout = 4000)
  public void test486()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      StringReader stringReader0 = new StringReader("n^@)7DieY3GaHaU1^#");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      StringWriter stringWriter0 = new StringWriter(2509);
      readerBasedJsonParser0.getText((Writer) stringWriter0);
  }

  @Test(timeout = 4000)
  public void test487()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = ") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary";
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary", true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "un{bf6");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, (Reader) null, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getTokenLocation();
      StringWriter stringWriter0 = new StringWriter(500);
      readerBasedJsonParser0.nextTextValue();
      readerBasedJsonParser0.getText((Writer) stringWriter0);
      try { 
        readerBasedJsonParser0._reportInvalidToken(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token ') not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test488()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader1 = new StringReader("pw(");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(33);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 33, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'QzcUP': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test489()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("$~.)^ZWWI{");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = '9';
      charArray0[2] = '`';
      SerializedString serializedString0 = new SerializedString("PO");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 116, 78, true);
      readerBasedJsonParser0._skipCR();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 1, 1465, true);
      try { 
        readerBasedJsonParser1.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('~' (code 126)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test490()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.base.ParserMinimalBase");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = '*';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getEmbeddedObject();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 1725, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 2, 3, false);
      readerBasedJsonParser0.finishToken();
      SerializedString serializedString0 = new SerializedString("");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'com': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test491()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.base.ParserMinimalBase");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'com': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test492()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("lw'.fsU)JV`U Z");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(119);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[7];
      charArray0[0] = 'B';
      charArray0[1] = '7';
      charArray0[2] = 'k';
      charArray0[3] = 'E';
      charArray0[4] = 'k';
      charArray0[5] = 'A';
      charArray0[6] = '}';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 33, 33, false);
      readerBasedJsonParser0._loadMoreGuaranteed();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray1 = new char[3];
      charArray1[0] = 'y';
      charArray1[1] = 'f';
      charArray1[2] = 'p';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 88, stringReader0, objectCodec1, charsToNameCanonicalizer1, charArray1, 2, (-1667), false);
      readerBasedJsonParser1.getValueAsString();
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser2 = null;
      try {
        readerBasedJsonParser2 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec2, charsToNameCanonicalizer1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test493()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("): has to be escaped using backslash to be included in ");
      readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser1.nextToken();
      readerBasedJsonParser0.getValueAsString();
  }

  @Test(timeout = 4000)
  public void test494()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("expected a hex-digit for character escape sequence");
      CharsToNameCanonicalizer.createRoot();
      stringReader0.ready();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(52);
      StringReader stringReader1 = new StringReader("expected a hex-digit for character escape sequence");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader1, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getTextLength();
      SerializedString serializedString0 = new SerializedString("expected a hex-digit for character escape sequence");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'expected': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test495()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(55);
      StringReader stringReader0 = new StringReader("expected digit (0-9) to follow minus sign, for valid numeric value");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-245), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'expected': was expecting ('true', 'false' or 'null')
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test496()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("): ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 39, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getValueAsString("): ");
      try { 
        readerBasedJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized character escape ')' (code 41)
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test497()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getValueAsString("UTF-8");
  }

  @Test(timeout = 4000)
  public void test498()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(" within/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(47);
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = 'P';
      charArray0[4] = '6';
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 47, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 86, (-274), true);
      StringReader stringReader1 = new StringReader("1 xsrV^q2=dhuX");
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 3768, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser1.nextToken();
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser1.getTextOffset();
      StringWriter stringWriter0 = new StringWriter(5);
      readerBasedJsonParser1.releaseBuffered((Writer) stringWriter0);
      try { 
        readerBasedJsonParser1.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'xsrV': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test499()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Sz!W<>A%lR'XPf/");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0._handleApos();
      StringWriter stringWriter0 = new StringWriter();
      readerBasedJsonParser0.releaseBuffered((Writer) stringWriter0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("Sz!W<>A%lR'XPf/", "?:.,|sAGM{HF@", true, 'j', 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 14)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test500()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1512, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getCurrentLocation();
      readerBasedJsonParser0._loadMore();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parsePosNumber(102);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test501()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      charsToNameCanonicalizer0.makeChild(3);
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = 'R';
      charArray0[2] = 'o';
      charArray0[3] = 'D';
      charArray0[4] = '*';
      charArray0[5] = 'e';
      charArray0[6] = '';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 86, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 15, 89, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._parsePosNumber(652);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 15
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test502()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.type.TypeReference");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 3, true);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser1._skipCR();
      try { 
        readerBasedJsonParser1._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: UNKNOWN; line: 2, column: 91]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test503()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("6+QnG~/m+m2");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
      readerBasedJsonParser0.getText();
      readerBasedJsonParser0._skipCR();
  }

  @Test(timeout = 4000)
  public void test504()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("-");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-4036), 33, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -4036
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test505()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.base.ParserMinimalBase");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      StringReader stringReader1 = new StringReader("0r!{h/_^");
      CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "+<d$ti(P27)`|zF-");
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer2.makeChild(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3250), stringReader1, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getCurrentLocation();
      readerBasedJsonParser0._loadMore();
      try { 
        readerBasedJsonParser0._parsePosNumber(213);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('r' (code 114)): Expected space separating root-level values
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test506()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "QzcUP]T[Cer;3VKI/xp";
      StringReader stringReader0 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "QzcUP]T[Cer;3VKI/xp");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(49);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 49, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getCurrentLocation();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) null);
      readerBasedJsonParser0.releaseBuffered((Writer) stringWriter1);
      readerBasedJsonParser0._loadMore();
      try { 
        readerBasedJsonParser0._parsePosNumber(16);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('Q' (code 81)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test507()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "\\[%oe9<!F1H#k", true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("1j4B!`86S");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("\\[%oe9<!F1H#k");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('j' (code 106)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test508()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary", true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, true);
      StringReader stringReader0 = new StringReader(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      charsToNameCanonicalizer0.makeChild(44);
      ObjectCodec objectCodec0 = null;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 13, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getCurrentLocation();
      StringWriter stringWriter0 = new StringWriter();
      readerBasedJsonParser0.releaseBuffered((Writer) stringWriter0);
      readerBasedJsonParser0._loadMore();
      try { 
        readerBasedJsonParser0._parsePosNumber(663);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (')' (code 41)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test509()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader(":o");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getText();
      try { 
        readerBasedJsonParser0._handleOddValue(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test510()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1035);
      StringReader stringReader0 = new StringReader("n");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2038);
      iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2038, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, (-315), 33, false);
      readerBasedJsonParser0._handleOddValue(44);
  }

  @Test(timeout = 4000)
  public void test511()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getTokenLocation();
      readerBasedJsonParser0.nextIntValue(500);
  }

  @Test(timeout = 4000)
  public void test512()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("r$");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2716, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("r$");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'r$': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test513()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("rZE|ze%)K|");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader(",mg");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString(",mg");
      SerializedString serializedString1 = new SerializedString("[~YLEKt]sOb$0`=r");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'rZE': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test514()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("Hs:x");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(32768);
      char[] charArray0 = new char[6];
      charArray0[0] = 'B';
      charArray0[1] = ',';
      charArray0[2] = '9';
      charArray0[3] = '[';
      charArray0[4] = '\"';
      charArray0[5] = 'J';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 97, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 33, (-3348), true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._releaseBuffers();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test515()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Shz!W<>Ai%lR'XPf/");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = '&';
      charArray0[1] = 'e';
      charArray0[2] = 'Y';
      charArray0[3] = '>';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 3, 2125, true);
      readerBasedJsonParser0.finishToken();
      SerializedString serializedString0 = new SerializedString("Shz!W<>Ai%lR'XPf/");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('>' (code 62)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test516()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(">RRDZ4O9VFy<j");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getValueAsLong();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('>' (code 62)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test517()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("lw'.fsU)JV`U Z");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(119);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'lw': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test518()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer1.makeChild(123);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("l%hB';ndm%z,pk%f");
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      iOContext0.allocWriteEncodingBuffer();
      charsToNameCanonicalizer0.makeChild(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer2);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'l': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test519()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("{() 8");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 1, 0, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test520()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("Decimal point not followed by a digit");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[4];
      charArray0[0] = '|';
      charArray0[1] = '5';
      charArray0[2] = 'S';
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec1, charsToNameCanonicalizer0, charArray0, 3, (-285), true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test521()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[6];
      charArray0[0] = '|';
      charArray0[1] = 'V';
      charArray0[2] = 'V';
      charArray0[3] = '|';
      charArray0[4] = 'V';
      charArray0[5] = 'V';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader1, objectCodec0, charsToNameCanonicalizer0, charArray0, 4, 1, true);
      readerBasedJsonParser0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "QzcUP]T[Cer;3VKI/xp", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, "QzcUP]T[Cer;3VKI/xp", false);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(39);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 39, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 22]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test522()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("]|");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = null;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0._loadMore();
      try { 
        readerBasedJsonParser0._parsePosNumber(3);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (']' (code 93)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test523()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "expected a valid value (number, String, array, object, 'true', 'false' or 'null')", true);
      StringReader stringReader0 = new StringReader("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-2331));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getCurrentLocation();
      readerBasedJsonParser0._loadMore();
      try { 
        readerBasedJsonParser0._parsePosNumber(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('x' (code 120)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test524()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("n^@)7DiY3GaHaU1^#");
      StringReader stringReader1 = new StringReader("6EZXgw:db8^z)!<C");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-353), stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('Z' (code 90)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test525()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("GmEnyqQ#");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getValueAsString();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append('1');
      readerBasedJsonParser0.releaseBuffered((Writer) stringWriter1);
      try { 
        readerBasedJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized character escape 'G' (code 71)
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test526()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "expected a valid value (number, String, array, object, 'true', 'false' or 'null')", false);
      StringReader stringReader0 = new StringReader("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      String string0 = "}%;l=h1.#.HXH[";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}%;l=h1.#.HXH[");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}%;l=h1.#.HXH[");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-2331));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getCurrentLocation();
      StringWriter stringWriter0 = new StringWriter();
      readerBasedJsonParser0.releaseBuffered((Writer) stringWriter0);
      readerBasedJsonParser0._loadMore();
      try { 
        readerBasedJsonParser0._parsePosNumber(1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('x' (code 120)) in numeric value: Exponent indicator not followed by a digit
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test527()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "expected a valid value (number, String, array, object, 'true', 'false' or 'null')", false);
      StringReader stringReader0 = new StringReader("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      String string0 = "";
      SerializedString serializedString0 = new SerializedString("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(78);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 47, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, (char[]) null, 33, 78, true);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 122, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 2, 1, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test528()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(" within/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.setRequestPayloadOnError("|,o)J0IW_ZytVx,");
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._decodeBase64((Base64Variant) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test529()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("): ");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 53, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._matchToken("): ", 3);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test530()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "|lFi_V&bzT|FXbnV");
      String string0 = "): has to be escaped using backslash to be included in ";
      readerBasedJsonParser0.getInputSource();
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._matchToken("", (-1261));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test531()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("): has to be escaped using backslash to be included in ");
      serializedString0.asQuotedChars();
      readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser1.nextToken();
      try { 
        readerBasedJsonParser0._matchToken("): has to be escaped using backslash to be included in ", 33);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '): has to be escaped using backsl': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test532()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, ",mg", true);
      StringReader stringReader0 = new StringReader("rZE|ze%)K|");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("%MC9<mqoB0g");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 78, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString(",mg");
      SerializedString serializedString1 = new SerializedString("[~YLEKt]sOb$0`=r");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('%' (code 37)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test533()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, objectCodec0, charsToNameCanonicalizer0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      readerBasedJsonParser0.nextLongValue((-1618L));
      CharsToNameCanonicalizer.createRoot();
      boolean boolean0 = true;
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "com.fasterxml.jackson.core.io.JsonEOFException", true, 'd', (-594));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 46)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test534()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader(":o");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      readerBasedJsonParser0._loadMore();
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (':' (code 58)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test535()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 102, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 33, 57, true);
      readerBasedJsonParser0._loadMore();
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0._decodeEscaped();
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer1.makeChild(1668);
      IOContext iOContext1 = new IOContext(bufferRecycler0, "QzcUP]T[Cer;3VKI/xp", false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 64, stringReader0, objectCodec1, charsToNameCanonicalizer2);
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('z' (code 122)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: UNKNOWN; line: 2, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test536()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("-");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "-", false);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 64, 3, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextIntValue((-32768));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test537()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      stringReader0.ready();
      charArray0[1] = 'V';
      charArray0[2] = 'S';
      charArray0[3] = 'V';
      charArray0[4] = '5';
      StringReader stringReader1 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader1, objectCodec1, charsToNameCanonicalizer0, charArray0, 684, 101, false);
      readerBasedJsonParser0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      readerBasedJsonParser0.getNextChar("HnAryJKm'FuE_HY;]");
  }

  @Test(timeout = 4000)
  public void test538()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, (-128), false);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_INT;
      readerBasedJsonParser0._getText2(jsonToken0);
      String string0 = null;
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("viMU/FM", "viMU/FM", false, 'E', 3425);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 7)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test539()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = iOContext0.allocConcatBuffer();
      StringReader stringReader0 = new StringReader("^z~?x|fP@)");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, Integer.MIN_VALUE, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-855), (-1102), true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test540()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      iOContext0.allocWriteEncodingBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("VALUE_EMBEDDED_OBJECT");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 255, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      JsonToken jsonToken0 = JsonToken.NOT_AVAILABLE;
      readerBasedJsonParser0.getValueAsString("VALUE_EMBEDDED_OBJECT");
      readerBasedJsonParser0._decodeEscaped();
      JsonToken jsonToken1 = JsonToken.FIELD_NAME;
      readerBasedJsonParser0._getText2(jsonToken1);
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 43]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test541()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("+");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 69, true);
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal unquoted character ((CTRL-CHAR, code 0)): has to be escaped using backslash to be included in string value
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test542()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.ready();
      StringReader stringReader1 = new StringReader("Maximum Java array size (2GB) exceeded by `ByteArrayBuilder`");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[4];
      charArray0[0] = 'V';
      charArray0[1] = 'V';
      charArray0[2] = '|';
      charArray0[3] = 'V';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 736, (Reader) null, objectCodec0, charsToNameCanonicalizer0, charArray0, (-2166), 117, true);
      readerBasedJsonParser0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "QzcUP]T[Cer;3VKI/xp", false);
      IOContext iOContext2 = new IOContext(bufferRecycler0, "Maximum Java array size (2GB) exceeded by `ByteArrayBuilder`", true);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, (-2166), stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2166
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test543()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      char[] charArray0 = new char[8];
      charArray0[0] = 'B';
      charArray0[1] = 'B';
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getTokenLocation();
      readerBasedJsonParser0.getTextCharacters();
      StringReader stringReader1 = new StringReader("=&U7! v<LlS_,ht@q-");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 500, stringReader1, objectCodec1, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser1._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 37]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test544()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.base.ParserMinimalBase");
      char[] charArray0 = new char[5];
      charArray0[0] = 'd';
      StringReader stringReader1 = new StringReader("@]]JYQqcR9+/O@QO");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader1, objectCodec0, charsToNameCanonicalizer0, charArray0, 2, 517, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._skipString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test545()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("+");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test546()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("n3@)7DieY3GHaU1^");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 33]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test547()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.base.ParserMinimalBase");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = '*';
      charArray0[2] = 'Y';
      charArray0[3] = 'l';
      charArray0[4] = '&';
      charArray0[5] = 'Y';
      charArray0[6] = 'J';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-706), 0, false);
      readerBasedJsonParser0.finishToken();
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      readerBasedJsonParser0.setCodec(objectCodec1);
  }

  @Test(timeout = 4000)
  public void test548()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.setCodec((ObjectCodec) null);
      SerializedString serializedString0 = new SerializedString("): has to be escaped using backslash to be included in ");
      readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser1.nextToken();
  }

  @Test(timeout = 4000)
  public void test549()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 2, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 32768, true);
      try { 
        readerBasedJsonParser0._reportInvalidToken("", "dvK8g");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '': was expecting dvK8g
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test550()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("n?YU.D");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[8];
      charArray0[0] = '<';
      charArray0[1] = '%';
      charArray0[2] = '0';
      charArray0[3] = 'J';
      charArray0[4] = 'V';
      charArray0[5] = ']';
      charArray0[6] = ',';
      charArray0[7] = '!';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, (-6040), false);
      try { 
        readerBasedJsonParser0._reportInvalidToken("", "n?YU.D");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'n': was expecting n?YU.D
         //  at [Source: UNKNOWN; line: 1, column: -6038]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test551()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getTokenLocation();
      readerBasedJsonParser0.getTextCharacters();
      try { 
        readerBasedJsonParser0._skipString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test552()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = iOContext0.allocConcatBuffer();
      StringReader stringReader0 = new StringReader("Unexpected end-of-input within/between ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1450);
      char[] charArray1 = new char[9];
      stringReader0.read(charArray1);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild((-1958));
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 76, 84, true);
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 145]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test553()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("Internal error on SymbolTable.rehash(): had %d entries; now have %d");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Internal error on SymbolTable.rehash(): had %d entries; now have %d");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, false);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 467, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 135]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test554()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      stringReader0.ready();
      charArray0[1] = 'V';
      charArray0[2] = 'S';
      charArray0[3] = 'V';
      charArray0[4] = '5';
      StringReader stringReader1 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader1, objectCodec1, charsToNameCanonicalizer0, charArray0, 684, 101, false);
      readerBasedJsonParser0.getCurrentValue();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser1._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 39]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test555()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.type.TypeReference");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'L';
      charArray0[1] = '%';
      charArray0[2] = 'L';
      charArray0[3] = '~';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, (-2386), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 6, true);
      try { 
        readerBasedJsonParser0._parseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 55]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test556()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "expected a valid value (number, String, array, object, 'true', 'false' or 'null')", false);
      StringReader stringReader0 = new StringReader("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}%;l=h1.#.HXH[");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "}%;l=h1.#.HXH[");
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0._parseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: UNKNOWN; line: 1, column: 163]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test557()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("NaN");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(5467);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec1, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0._parseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: UNKNOWN; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test558()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("n^@)7DieY3GaHaU1^#");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._parseName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: UNKNOWN; line: 1, column: 37]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test559()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, iOContext0, false);
      StringReader stringReader0 = new StringReader("Internal error on SymbolTable.rehash(): had %d entries; now have %d");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Internal error on SymbolTable.rehash(): had %d entries; now have %d");
      CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(152);
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Internal': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test560()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1570, stringReader0, objectCodec0, charsToNameCanonicalizer0, (char[]) null, 1570, 0, false);
      readerBasedJsonParser0.getTypeId();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, (-3037), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getTokenLocation();
      try { 
        readerBasedJsonParser1.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Non': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test561()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getTokenLocation();
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test562()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "\\[%oe9<!F1H#k", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("\\[%oe9<!F1H#k");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      char[] charArray0 = new char[1];
      charArray0[0] = '=';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1021, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 3, 43, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test563()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader(":o");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getText();
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (':' (code 58)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test564()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3083);
      char[] charArray0 = new char[7];
      charArray0[0] = 'w';
      charArray0[1] = '!';
      charArray0[2] = '!';
      charArray0[3] = 'w';
      charArray0[4] = '!';
      charArray0[5] = ':';
      charArray0[6] = ':';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 83, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 2, 83, true);
      try { 
        readerBasedJsonParser0.nextIntValue(33);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('!' (code 33)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test565()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("]|");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, (-2219), 10, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextIntValue(93);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2219
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test566()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1035);
      StringReader stringReader0 = new StringReader("[");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 120, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextBooleanValue();
      try { 
        readerBasedJsonParser0._parseAposName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in field name
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test567()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(" within/between ");
      IOContext iOContext1 = new IOContext(bufferRecycler0, " within/between ", false);
      StringReader stringReader1 = new StringReader("NaN");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 852, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextTextValue();
  }

  @Test(timeout = 4000)
  public void test568()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.base.ParserMinimalBase");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = '*';
      charArray0[2] = 'Y';
      charArray0[3] = 'l';
      charArray0[4] = '&';
      charArray0[5] = 'Y';
      charArray0[6] = 'J';
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(33, "expected a hex-digit for character escape sequence");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('!' (code 33)): was expecting double-quote to start field name
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test569()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "expected a valid value (number, String, array, object, 'true', 'false' or 'null')", false);
      StringReader stringReader0 = new StringReader("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(3, "expected a hex-digit for character escape sequence");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 3)): was expecting double-quote to start field name
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test570()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-27));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = iOContext1.allocTokenBuffer();
      StringReader stringReader0 = new StringReader("");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 33, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 13, 2, true);
      readerBasedJsonParser0.getTypeId();
      IOContext iOContext2 = new IOContext(bufferRecycler0, (Object) null, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 63, stringReader0, objectCodec1, charsToNameCanonicalizer1);
      JsonToken jsonToken0 = JsonToken.VALUE_FALSE;
      readerBasedJsonParser1._getText2(jsonToken0);
      CharsToNameCanonicalizer.createRoot();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("w@X.", "", true, 'x', 500);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test571()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[8];
      charArray0[0] = 'w';
      charArray0[1] = '*';
      charArray0[2] = 'w';
      charArray0[3] = 'w';
      charArray0[4] = 'J';
      charArray0[5] = 'v';
      charArray0[6] = '/';
      charArray0[7] = 'v';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1147), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3, 3, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.nextLongValue(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test572()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      String string0 = "No current event to copy";
      StringReader stringReader0 = new StringReader("No current event to copy");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'No': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test573()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("NaN");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer.createRoot();
      int int0 = 45;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(5467);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec1, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
         //  at [Source: UNKNOWN; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test574()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, "7^", true);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, (-355), 4664, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._loadMore();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test575()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("Internal error on SymbolTable.rehash(): had %d entries; now have %d");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Internal error on SymbolTable.rehash(): had %d entries; now have %d");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, false);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 467, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '-Internal': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test576()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      ReaderBasedJsonParser readerBasedJsonParser1 = null;
      try {
        readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Trying to call same allocXxx() method second time
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test577()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("): ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test578()  throws Throwable  {
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, true);
      String string0 = "GmEny#";
      StringReader stringReader0 = new StringReader("GmEny#");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-2));
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      charArray0[0] = 's';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 1, 33, true);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._finishString2();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test579()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = ") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary";
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (')' (code 41)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test580()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("ShA!W<>Ai%lR'XPf/");
      CharBuffer.allocate(16);
      int int0 = ReaderBasedJsonParser.FEAT_MASK_TRAILING_COMMA;
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'ShA': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test581()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Shz!W<>Ai%lR'XPf/");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      SerializedString serializedString0 = new SerializedString("Shz!W<>Ai%lR'XPf/");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Shz': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test582()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext1.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader(") not VALUE_STRING or VALUE_EMBEDDED_OBJECT, can not access as binary");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[8];
      charArray0[0] = '1';
      charArray0[1] = '7';
      charArray0[2] = '/';
      charArray0[3] = '6';
      charArray0[4] = 'r';
      charArray0[5] = '!';
      charArray0[6] = 'w';
      charArray0[7] = 'v';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 1, false);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (')' (code 41)): Expected space separating root-level values
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test583()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("expected padding character '");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 37, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('e' (code 101)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test584()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("$~.)^ZWWI{");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = '9';
      charArray0[2] = '`';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 4850, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 713, (-2846), false);
      readerBasedJsonParser0._loadMore();
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0._decodeEscaped();
      charsToNameCanonicalizer0.makeChild(0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 1893, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser1._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (')' (code 41)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test585()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "n\"";
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "n\"", true);
      StringReader stringReader0 = new StringReader("rZE|ze%)K|");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(105);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getCurrentLocation();
      try { 
        readerBasedJsonParser0.nextLongValue(2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'rZE': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test586()  throws Throwable  {
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      StringReader stringReader0 = new StringReader("Decimal point not followed by a digit");
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      CharsToNameCanonicalizer.createRoot();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/juX)My(A)%dL");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", false);
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextFieldName();
  }

  @Test(timeout = 4000)
  public void test587()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "}3umuWt-KD ";
      StringReader stringReader0 = new StringReader("}3umuWt-KD ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker '}': expected ']' (for root starting at [Source: UNKNOWN; line: 1, column: 0])
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test588()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("}Y\"_l(OZIg?U?F!");
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "}Y\"_l(OZIg?U?F!", true);
      StringReader stringReader1 = new StringReader("}Y\"_l(OZIg?U?F!");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 122, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected close marker '}': expected ']' (for root starting at [Source: UNKNOWN; line: 1, column: 0])
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test589()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Shz!W<>Ai%lR'XPf/");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      char[] charArray0 = new char[2];
      charArray0[0] = '6';
      charArray0[1] = 'k';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec1, charsToNameCanonicalizer1, charArray0, 53, 53, true);
      try { 
        readerBasedJsonParser1._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized character escape 'S' (code 83)
         //  at [Source: UNKNOWN; line: 1, column: 55]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test590()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("rZE|ze%)K|");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.release();
      StringReader stringReader1 = new StringReader(",mg");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString(",mg");
      SerializedString serializedString1 = new SerializedString("[~YLEKt]sOb$0`=r");
      readerBasedJsonParser0._skipCR();
      try { 
        readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'rZE': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 2, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test591()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("n^@)7DieY3GaHaU1^#");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[6];
      charArray0[0] = ',';
      charArray0[1] = 'c';
      charArray0[2] = ']';
      charArray0[3] = 'u';
      charArray0[4] = 'y';
      charArray0[5] = 'c';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 42, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 33, 33, false);
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0._decodeEscaped();
      IOContext iOContext2 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, false);
      IOContext iOContext3 = new IOContext(bufferRecycler0, iOContext1, true);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext3, (-2836), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('^' (code 94)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: UNKNOWN; line: 2, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test592()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("expected padding character '");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 33, 166, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._decodeEscaped();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test593()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      String string0 = "comfasterxml.jackson.core.base.ParserMinimalBase";
      StringReader stringReader0 = new StringReader("comfasterxml.jackson.core.base.ParserMinimalBase");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      char[] charArray0 = new char[0];
      int int0 = 127;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 127, 87, true);
      try { 
        readerBasedJsonParser0._loadMore();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Reader returned 0 characters when trying to read 87
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test594()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      Object object0 = new Object();
      IOContext iOContext0 = new IOContext(bufferRecycler0, object0, true);
      StringReader stringReader0 = new StringReader("$~.)^ZWWI{");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[3];
      charArray0[0] = '+';
      charArray0[1] = '9';
      charArray0[2] = '`';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 4850, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 713, (-2846), false);
      readerBasedJsonParser0._loadMore();
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0._decodeEscaped();
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("$~.)^ZWWI{", "$~.)^ZWWI{", true, '2', 0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 10)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test595()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      iOContext0.allocBase64Buffer();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      char[] charArray0 = new char[4];
      StringReader stringReader0 = new StringReader("c$");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 1, 2, true);
      readerBasedJsonParser0._skipCR();
      try { 
        readerBasedJsonParser0._handleOddName(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): was expecting double-quote to start field name
         //  at [Source: UNKNOWN; line: 2, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test596()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getTokenLocation();
  }

  @Test(timeout = 4000)
  public void test597()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1874));
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = '0';
      charArray0[2] = 'l';
      charArray0[3] = '9';
      charArray0[4] = ' ';
      charArray0[5] = '&';
      charArray0[6] = '8';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1896, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 0, 33, true);
      readerBasedJsonParser0._closeInput();
  }

  @Test(timeout = 4000)
  public void test598()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("lw'.fsU)JV`U Z");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 57, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._isNextTokenNameMaybe(2160, "expected a hex-digit for character escape sequence");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('\u0870' (code 2160 / 0x870)): was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test599()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      IOContext iOContext1 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("]h7!)&=SV.<w/@Cw");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-4086), stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0._handleOddName(37);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('%' (code 37)): was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test600()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      readerBasedJsonParser0.nextBooleanValue();
      readerBasedJsonParser0._loadMore();
  }

  @Test(timeout = 4000)
  public void test601()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      String string0 = "eU~\\j+&\\p";
      StringReader stringReader0 = new StringReader("eU~j+&p");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 42, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getText();
      char[] charArray0 = new char[9];
      charArray0[0] = 'x';
      charArray0[1] = 'W';
      charArray0[2] = '3';
      charArray0[3] = '!';
      charArray0[4] = '5';
      charArray0[5] = 'N';
      charArray0[6] = '+';
      charArray0[7] = '-';
      charArray0[8] = 'k';
      stringReader0.read(charArray0);
      readerBasedJsonParser0.nextBooleanValue();
      try { 
        readerBasedJsonParser0._handleOddName(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ((CTRL-CHAR, code 0)): was expecting either valid name character (for unquoted name) or double-quote (for quoted) to start field name
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test602()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("o};");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      charArray0[1] = 'E';
      charArray0[2] = 'Z';
      charArray0[3] = '5';
      charArray0[4] = '.';
      charArray0[5] = 'e';
      charArray0[6] = '1';
      charArray0[7] = '.';
      charArray0[8] = '*';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, (-2154), (-32768), true);
      readerBasedJsonParser0.getText();
  }

  @Test(timeout = 4000)
  public void test603()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(" within/bLetween ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(47);
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = 'C';
      charArray0[2] = '6';
      charArray0[3] = 'C';
      charArray0[4] = '6';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 47, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 86, (-274), true);
      StringReader stringReader1 = new StringReader("\"%1xsrV^q=huX");
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 3768, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser1.nextToken();
      try { 
        readerBasedJsonParser1.getTextOffset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 27]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test604()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(" within/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(47);
      char[] charArray0 = new char[5];
      charArray0[0] = '6';
      charArray0[1] = '6';
      charArray0[2] = '6';
      charArray0[3] = 'P';
      charArray0[4] = '6';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 86, (-274), true);
      StringReader stringReader1 = new StringReader("1 xsrV^q2=dhuX");
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 3768, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser1.nextToken();
      readerBasedJsonParser1.getTextOffset();
      try { 
        readerBasedJsonParser1.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'xsrV': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test605()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "expected a valid value (number, String, array, object, 'true', 'false' or 'null')", true);
      StringReader stringReader0 = new StringReader("expected a valid value (number, String, array, object, 'true', 'false' or 'null')");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getTextOffset();
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 163]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test606()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getTextOffset();
  }

  @Test(timeout = 4000)
  public void test607()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("Internal error on SymbolTable.rehash(): had %d entries; now have %d");
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler1, bufferRecycler1, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      try { 
        readerBasedJsonParser0._handleOddName((-1591));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test608()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      StringReader stringReader0 = new StringReader("Unexpected end-of-input within/between ");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[0];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-327), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, (-720), 3, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._handleOddName(430);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -720
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test609()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("): has to be escaped using backslash to be included in ");
      readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser1.nextToken();
      try { 
        readerBasedJsonParser1._handleOddName(100);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('d' (code 100)): was expecting double-quote to start field name
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test610()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("n^@#7DieY3aHaU@^#");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 56, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._handleOddName((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test611()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      char[] charArray0 = new char[1];
      charArray0[0] = 'E';
      iOContext1.allocConcatBuffer();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 256, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 3, 2, true);
      try { 
        readerBasedJsonParser0._handleOddName((-3285));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test612()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1035);
      StringReader stringReader0 = new StringReader("[");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0.getTokenLocation();
      readerBasedJsonParser0.nextTextValue();
      readerBasedJsonParser0.getTextLength();
  }

  @Test(timeout = 4000)
  public void test613()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      charArray0[1] = 'V';
      charArray0[2] = 'S';
      charArray0[3] = 'V';
      charArray0[4] = '5';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 33, 3, false);
      readerBasedJsonParser0.getTextLength();
  }

  @Test(timeout = 4000)
  public void test614()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.JsonEncoding");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getTextLength();
  }

  @Test(timeout = 4000)
  public void test615()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader(" within/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("1 xsrV^q2=dhuX");
      stringReader1.mark(91);
      IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, false);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 615, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextLongValue(33);
  }

  @Test(timeout = 4000)
  public void test616()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("Internal error on SymbolTable.rehash(): had %d entries; now have %d");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Internal error on SymbolTable.rehash(): had %d entries; now have %d");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, charsToNameCanonicalizer0, false);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 467, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextLongValue(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Internal': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 9]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test617()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      String string0 = "n\"";
      boolean boolean0 = true;
      IOContext iOContext0 = new IOContext(bufferRecycler0, "n\"", true);
      StringReader stringReader0 = new StringReader("rZE|ze%)K|");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(105);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-340), stringReader0, objectCodec0, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextLongValue(0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'rZE': was expecting ('true', 'false' or 'null')
         //  at [Source: (String)\"n\"\"; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test618()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("ShA!W<>Ai%lR'XPf/");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(126);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 400, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      StringReader stringReader1 = new StringReader("Shz!W<>Ai%lR'XPf/");
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 108, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1, (char[]) null, 28, 1651, false);
      // Undeclared exception!
      try { 
        readerBasedJsonParser1._handleApos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test619()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("-INF");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      stringReader0.reset();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(44);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, objectCodec0, charsToNameCanonicalizer1, (char[]) null, 6094, 550, false);
      iOContext0.allocReadIOBuffer(3);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0._handleApos();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test620()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader(":o");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getText();
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (':' (code 58)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test621()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "name", false);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      StringReader stringReader0 = new StringReader("r");
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'r': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test622()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("n^@)7DieY3GaHaU1^#");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(2);
      char[] charArray0 = new char[1];
      charArray0[0] = '3';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 9, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1, charArray0, 55, 1, false);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'n': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test623()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("]|");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString("]|");
      IOContext iOContext0 = new IOContext(bufferRecycler0, "]|", true);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._reportInvalidToken("): has to be escaped using backslash to be included in ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '): has to be escaped using backslash to be included in ': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test624()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("VALUE_EMBEDDED_OBJECT");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(1);
      char[] charArray0 = new char[9];
      charArray0[0] = 'V';
      charArray0[1] = '$';
      charArray0[2] = '.';
      charArray0[3] = '~';
      charArray0[4] = 'y';
      charArray0[5] = '[';
      charArray0[6] = 'T';
      charArray0[7] = '\\';
      charArray0[8] = 'j';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 2, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 1, 2, false);
      try { 
        readerBasedJsonParser0.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token '$VALUE_EMBEDDED_OBJECT': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 27]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test625()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, (Object) null, false);
      StringReader stringReader0 = new StringReader("{() 8");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-1306));
      charsToNameCanonicalizer1.release();
      char[] charArray0 = new char[2];
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = charsToNameCanonicalizer0.makeChild(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, objectCodec0, charsToNameCanonicalizer2, charArray0, 1, 889, false);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-1577), stringReader0, objectCodec1, charsToNameCanonicalizer1);
      readerBasedJsonParser1.nextToken();
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser2 = new ReaderBasedJsonParser(iOContext0, (-1333), stringReader0, objectCodec2, charsToNameCanonicalizer0, charArray0, 2, 1756, false);
      try { 
        readerBasedJsonParser1.nextToken();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('(' (code 40)): was expecting double-quote to start field name
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test626()  throws Throwable  {
      IOContext iOContext0 = new IOContext((BufferRecycler) null, (Object) null, true);
      StringReader stringReader0 = new StringReader("Illegal character (");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = null;
      try {
        readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1432, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.io.IOContext", e);
      }
  }

  @Test(timeout = 4000)
  public void test627()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader(":o");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (':' (code 58)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test628()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringReader stringReader0 = new StringReader("NaN");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-3724), stringReader0, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getText();
      readerBasedJsonParser0.nextBooleanValue();
      try { 
        readerBasedJsonParser0._handleOddName((-1240));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in VALUE_NUMBER_FLOAT
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test629()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler1, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      char[] charArray1 = iOContext0.allocConcatBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("(");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-539), stringReader0, objectCodec2, charsToNameCanonicalizer0, charArray1, 3, 2870, false);
      try { 
        readerBasedJsonParser0._reportInvalidToken("]d7;L8d1*@", "");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token ']d7;L8d1*@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000...': was expecting 
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 250]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test630()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("c_}Ak#3\"P^");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[9];
      charArray0[0] = '@';
      charArray0[1] = 'N';
      charArray0[2] = '(';
      charArray0[3] = '+';
      charArray0[4] = 't';
      charArray0[5] = 'X';
      charArray0[6] = '6';
      charArray0[7] = 'X';
      charArray0[8] = 'T';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1769, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 2323, (-2129), true);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'c_': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: -2126]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test631()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'QzcUP': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 6]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test632()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Non-standard token 'Infinity': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(0);
      char[] charArray0 = new char[2];
      charArray0[0] = '%';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1704, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0._handleApos();
      readerBasedJsonParser0.getTextCharacters();
  }

  @Test(timeout = 4000)
  public void test633()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("n^@)7DieY3GaHaU1^#");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getTypeId();
      try { 
        readerBasedJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 37]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test634()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.type.TypeReference");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0._loadMore();
      try { 
        readerBasedJsonParser0._handleApos();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 91]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test635()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Shz!W<>Ai%lR'XPf/");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      readerBasedJsonParser0._handleApos();
  }

  @Test(timeout = 4000)
  public void test636()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = '|';
      stringReader0.ready();
      charArray0[1] = 'V';
      charArray0[2] = 'S';
      charArray0[3] = 'V';
      charArray0[4] = '5';
      StringReader stringReader1 = new StringReader("QzcUP]T[Cer;3VKI/xp");
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader1, objectCodec1, charsToNameCanonicalizer0, charArray0, '|', 101, false);
      readerBasedJsonParser0.getCurrentValue();
      JsonToken jsonToken0 = JsonToken.END_OBJECT;
      readerBasedJsonParser0._loadMoreGuaranteed();
  }

  @Test(timeout = 4000)
  public void test637()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("Unexpected end-of-input within/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getNextChar("b}=`HK/\"x6 2d%;;N");
      try { 
        readerBasedJsonParser0._loadMoreGuaranteed();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: UNKNOWN; line: 1, column: 41]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test638()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild((-519));
      StringReader stringReader0 = new StringReader("");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextBooleanValue();
  }

  @Test(timeout = 4000)
  public void test639()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'K';
      charArray0[1] = ':';
      charArray0[2] = 'I';
      charArray0[3] = 'L';
      charArray0[4] = '9';
      charArray0[5] = '+';
      charArray0[6] = 'V';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 0, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 1733, 101, false);
      try { 
        readerBasedJsonParser0._loadMoreGuaranteed();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in null
         //  at [Source: UNKNOWN; line: 1, column: 1835]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test640()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("): has to be escaped using backslash to be included in ");
      readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-inputNo digit following minus sign
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test641()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.getNextChar("): has to be escaped using backslash to be included in ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input): has to be escaped using backslash to be included in 
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test642()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("+");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 44, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 0, true);
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('+' (code 43)) in numeric value: expected digit (0-9) to follow minus sign, for valid numeric value
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test643()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "", true);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(3);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader0, objectCodec0, charsToNameCanonicalizer1);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      readerBasedJsonParser0._objectCodec = objectCodec1;
      try { 
        readerBasedJsonParser0._parseNegNumber();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-inputNo digit following minus sign
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test644()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 875, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      charsToNameCanonicalizer0.makeChild((-913));
      readerBasedJsonParser0.nextLongValue(1);
      readerBasedJsonParser0.finishToken();
  }

  @Test(timeout = 4000)
  public void test645()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = new char[5];
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("D");
      ReaderBasedJsonParser readerBasedJsonParser0 = null;
      try {
        readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-2219), stringReader0, (ObjectCodec) null, (CharsToNameCanonicalizer) null, charArray0, 46, 2, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test646()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("ShA!W<>Ai%lR'XPf/");
      CharBuffer charBuffer0 = CharBuffer.allocate(16);
      CharBuffer.allocate(3);
      stringReader0.read(charBuffer0);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = 'i';
      charArray0[1] = '>';
      charArray0[2] = '{';
      charArray0[3] = '3';
      charArray0[4] = '&';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 0, false);
      readerBasedJsonParser0._skipCR();
      readerBasedJsonParser0._decodeEscaped();
      try { 
        readerBasedJsonParser0._finishString2();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 2, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test647()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("): has to be escaped using backslash to be included in ");
      readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextBooleanValue();
      try { 
        readerBasedJsonParser1._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in character escape sequence
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test648()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[4];
      charArray0[0] = 'a';
      charArray0[1] = '}';
      charArray0[2] = '/';
      charArray0[3] = 'E';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 245, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 0, true);
      try { 
        readerBasedJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in character escape sequence
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test649()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.JsonFactory$Feature");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("com.fasterxml.jackson.core.JsonFactory$Feature");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 1, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._decodeEscaped();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized character escape 'c' (code 99)
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test650()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("): has to be escaped using backslash to be included in ");
      readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.readValueAsTree();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ObjectCodec defined for parser, needed for deserialization
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test651()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
      StringReader stringReader0 = new StringReader("+VPY+SrSYAn");
      ObjectCodec objectCodec0 = null;
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      boolean boolean0 = true;
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, (char[]) null, 0, 0, true);
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        readerBasedJsonParser0.readValueAs(class0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ObjectCodec defined for parser, needed for deserialization
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test652()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      char[] charArray0 = new char[2];
      charArray0[0] = ' ';
      charArray0[1] = 'v';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 1, false);
      readerBasedJsonParser0.nextIntValue(2);
  }

  @Test(timeout = 4000)
  public void test653()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("n^@)7DieY3GaHaU1^#");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      stringReader0.skip(1);
      charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 56, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextIntValue(33);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character ('^' (code 94)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test654()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, "expec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')", false);
      StringReader stringReader0 = new StringReader("expec)ed a valid value (number, String, array, object, 'true'~ 'false' or 'null')");
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF16_LE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader1 = new StringReader("NaN");
      stringReader0.skip(3191L);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(1);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 1, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
         //  at [Source: UNKNOWN; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test655()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      StringReader stringReader0 = new StringReader("Non-standard token '");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 93, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer1);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'Non': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 4]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test656()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("NaN");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = charsToNameCanonicalizer0.makeChild(45);
      char[] charArray0 = new char[6];
      charArray0[0] = 'M';
      charArray0[1] = 'h';
      charArray0[2] = '!';
      charArray0[3] = ':';
      charArray0[4] = '!';
      charArray0[5] = 'w';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer1, charArray0, 0, (-956), true);
      try { 
        readerBasedJsonParser0.nextIntValue((-1872));
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Non-standard token 'NaN': enable JsonParser.Feature.ALLOW_NON_NUMERIC_NUMBERS to allow
         //  at [Source: UNKNOWN; line: 1, column: -949]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test657()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("false");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("+");
      readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
      readerBasedJsonParser0.nextBooleanValue();
      readerBasedJsonParser0.nextTextValue();
  }

  @Test(timeout = 4000)
  public void test658()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("): has to be escaped using backslash to be included in ");
      readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
      try { 
        readerBasedJsonParser0.getNextChar("): has to be escaped using backslash to be included in ");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input): has to be escaped using backslash to be included in 
         //  at [Source: UNKNOWN; line: 1, column: 1]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test659()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.base.ParserMinimalBase");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'M';
      charArray0[1] = '*';
      charArray0[2] = 'Y';
      charArray0[3] = 'l';
      charArray0[4] = '&';
      charArray0[5] = 'Y';
      charArray0[6] = 'J';
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0._finishString2();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 99]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test660()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      BufferRecycler bufferRecycler1 = new BufferRecycler();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler1, true);
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      char[] charArray0 = new char[1];
      charArray0[0] = '2';
      char[] charArray1 = iOContext0.allocConcatBuffer();
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF8;
      iOContext0.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ObjectCodec objectCodec2 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("(");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-539), stringReader0, objectCodec2, charsToNameCanonicalizer0, charArray1, 3, 2870, false);
      try { 
        readerBasedJsonParser0._finishString();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 2873]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test661()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("rZE|ze%)K|");
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      SerializedString serializedString0 = new SerializedString("Illegal white space character (code 0x%s) as character #%d of 4-char base64 unit: can only used between units");
      charsToNameCanonicalizer0.makeChild((-2034));
      CharsToNameCanonicalizer charsToNameCanonicalizer2 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[5];
      charArray0[0] = 'o';
      charArray0[1] = ' ';
      charArray0[2] = 'Y';
      charArray0[3] = '1';
      charArray0[4] = '!';
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, 56, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer2, charArray0, 512, (-1701), true);
      try { 
        readerBasedJsonParser1._finishString2();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: -1688]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test662()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader(":o");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getText();
      try { 
        readerBasedJsonParser0._finishString2();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 5]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test663()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
      StringReader stringReader0 = new StringReader("Zlx");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = 'G';
      charArray0[1] = 'l';
      charArray0[2] = 'z';
      charArray0[3] = 'g';
      charArray0[4] = 'n';
      charArray0[5] = 'T';
      charArray0[6] = '-';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 517, stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 0, 1, true);
      readerBasedJsonParser0.getTypeId();
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 0, stringReader0, objectCodec1, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser1._finishString2();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input: was expecting closing quote for a string value
         //  at [Source: UNKNOWN; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test664()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader(" within/between ");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader1 = new StringReader("1 xsrV^q2=dhuX");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      readerBasedJsonParser0._getText2(jsonToken0);
      readerBasedJsonParser0.nextToken();
      readerBasedJsonParser0.getTextOffset();
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'xsrV': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 7]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test665()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("1 xsrV^q2=dhuX");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      readerBasedJsonParser0._getText2(jsonToken0);
      readerBasedJsonParser0.nextToken();
      readerBasedJsonParser0.getTextOffset();
      readerBasedJsonParser0.getText();
      assertEquals(1L, readerBasedJsonParser0.getTokenCharacterOffset());
  }

  @Test(timeout = 4000)
  public void test666()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      IOContext iOContext1 = iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("n^@)7DieY3GaHaU1^#");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer1 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[1];
      StringReader stringReader1 = new StringReader("");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext1, 503, stringReader1, (ObjectCodec) null, charsToNameCanonicalizer1);
      readerBasedJsonParser0.nextFieldName();
      JsonToken jsonToken0 = JsonToken.VALUE_STRING;
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext0, (-175), stringReader1, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 3965, 4001, false);
      readerBasedJsonParser1._getText2(jsonToken0);
      // Undeclared exception!
      try { 
        readerBasedJsonParser1._handleApos();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3965
         //
         verifyException("com.fasterxml.jackson.core.json.ReaderBasedJsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test667()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      StringReader stringReader0 = new StringReader("1 xsrV^q2=dhuX");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      JsonToken jsonToken0 = JsonToken.VALUE_EMBEDDED_OBJECT;
      readerBasedJsonParser0._getText2(jsonToken0);
      readerBasedJsonParser0.nextToken();
      readerBasedJsonParser0.getTextOffset();
      readerBasedJsonParser0._loadMore();
      assertTrue(readerBasedJsonParser0.hasCurrentToken());
  }

  @Test(timeout = 4000)
  public void test668()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = mock(IOContext.class, new ViolatedAssumptionAnswer());
      doReturn((char[]) null).when(iOContext0).allocTokenBuffer();
      doReturn((TextBuffer) null).when(iOContext0).constructTextBuffer();
      StringReader stringReader0 = new StringReader("}*=+z:~J&v4AKicf^oa");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader0, objectCodec0, charsToNameCanonicalizer0);
      Object object0 = readerBasedJsonParser0.getInputSource();
      IOContext iOContext1 = new IOContext(bufferRecycler0, object0, false);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_LE;
      IOContext iOContext2 = iOContext1.withEncoding(jsonEncoding0);
      ObjectCodec objectCodec1 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext2, 0, stringReader0, objectCodec1, charsToNameCanonicalizer0, (char[]) null, 3, 3, false);
      JsonToken jsonToken0 = JsonToken.VALUE_NUMBER_FLOAT;
      readerBasedJsonParser1._getText2(jsonToken0);
      Base64Variant base64Variant0 = null;
      try {
        base64Variant0 = new Base64Variant("", "", false, 'p', 3425);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Base64Alphabet length must be exactly 64 (was 0)
         //
         verifyException("com.fasterxml.jackson.core.Base64Variant", e);
      }
  }

  @Test(timeout = 4000)
  public void test669()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 0, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      SerializedString serializedString0 = new SerializedString("): has to be escaped using backslash to be included in ");
      readerBasedJsonParser0.nextFieldName((SerializableString) serializedString0);
      readerBasedJsonParser0.getInputSource();
      assertTrue(readerBasedJsonParser0.isClosed());
      
      IOContext iOContext1 = new IOContext(bufferRecycler0, (Object) null, false);
      ReaderBasedJsonParser readerBasedJsonParser1 = new ReaderBasedJsonParser(iOContext1, 61, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser1.nextFieldName();
      assertTrue(readerBasedJsonParser1.isClosed());
  }

  @Test(timeout = 4000)
  public void test670()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("n^@)7DieY3GaHaU1^#");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      charsToNameCanonicalizer0.makeChild(2);
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 56, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'n': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test671()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("+");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in a Number value
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }

  @Test(timeout = 4000)
  public void test672()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      JsonEncoding jsonEncoding0 = JsonEncoding.UTF32_BE;
      iOContext0.withEncoding(jsonEncoding0);
      StringReader stringReader0 = new StringReader("Shz!W<>Ai%lR'XPf/");
      StringReader stringReader1 = new StringReader("') as character #");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 3, stringReader1, objectCodec0, charsToNameCanonicalizer0);
      readerBasedJsonParser0.getText();
      try { 
        readerBasedJsonParser0.nextBooleanValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected character (''' (code 39)): expected a valid value (number, String, array, object, 'true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test673()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      StringReader stringReader0 = new StringReader("-");
      CharsToNameCanonicalizer.createRoot();
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      char[] charArray0 = new char[3];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 33, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, '\u0000', 2, false);
      try { 
        readerBasedJsonParser0.nextIntValue('\u0000');
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Illegal character ((CTRL-CHAR, code 0)): only regular white space (\\r, \\n, \\t) is allowed between tokens
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test674()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      SerializedString serializedString0 = new SerializedString("): has to be escaped using backslash to be included in ");
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, (Reader) null, (ObjectCodec) null, charsToNameCanonicalizer0);
      readerBasedJsonParser0.nextTextValue();
      assertTrue(readerBasedJsonParser0.isClosed());
  }

  @Test(timeout = 4000)
  public void test675()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("n^@)7DieY3GaHaU1^#");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'n': was expecting 'null', 'true', 'false' or NaN
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test676()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("com.fasterxml.jackson.core.type.TypeReference");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0, charArray0, 2, 69, false);
      assertFalse(readerBasedJsonParser0.isExpectedStartObjectToken());
  }

  @Test(timeout = 4000)
  public void test677()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("h[)G!8u4");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'h': was expecting ('true', 'false' or 'null')
         //  at [Source: UNKNOWN; line: 1, column: 2]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test678()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, false);
      StringReader stringReader0 = new StringReader("kmio1R$Vs>_-gs");
      ObjectCodec objectCodec0 = mock(ObjectCodec.class, new ViolatedAssumptionAnswer());
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      char[] charArray0 = new char[7];
      charArray0[0] = '7';
      charArray0[1] = 'U';
      charArray0[2] = ',';
      charArray0[3] = '&';
      charArray0[4] = '/';
      charArray0[5] = 'J';
      charArray0[6] = 'i';
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, (-1179), stringReader0, objectCodec0, charsToNameCanonicalizer0, charArray0, 1, 3, false);
      try { 
        readerBasedJsonParser0.nextTextValue();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unrecognized token 'U': was expecting ('true', 'false' or 'null')
         //  at [Source: (com.fasterxml.jackson.core.util.BufferRecycler); line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.JsonParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test679()  throws Throwable  {
      BufferRecycler bufferRecycler0 = new BufferRecycler();
      IOContext iOContext0 = new IOContext(bufferRecycler0, bufferRecycler0, true);
      StringReader stringReader0 = new StringReader("+");
      CharsToNameCanonicalizer charsToNameCanonicalizer0 = CharsToNameCanonicalizer.createRoot();
      ReaderBasedJsonParser readerBasedJsonParser0 = new ReaderBasedJsonParser(iOContext0, 2, stringReader0, (ObjectCodec) null, charsToNameCanonicalizer0);
      try { 
        readerBasedJsonParser0.nextFieldName();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Unexpected end-of-input in a Number value
         //  at [Source: UNKNOWN; line: 1, column: 3]
         //
         verifyException("com.fasterxml.jackson.core.base.ParserMinimalBase", e);
      }
  }
}
