/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 09:14:47 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = Complex.valueOf((-9.457084582570225E263));
      Complex complex3 = complex1.sinh();
      complex0.toString();
      Complex complex4 = complex0.divide(complex2);
      Complex complex5 = complex0.multiply(complex1);
      complex5.conjugate();
      complex1.abs();
      complex2.sqrt1z();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex0.add(complex6);
      Complex complex8 = complex6.ONE.tanh();
      complex8.NaN.log();
      complex3.abs();
      complex3.NaN.acos();
      Complex complex9 = complex3.divide(complex7);
      Complex complex10 = complex9.ZERO.exp();
      Complex complex11 = complex10.ZERO.sinh();
      complex11.ZERO.abs();
      complex9.INF.conjugate();
      complex9.multiply((-9.457084582570225E263));
      complex4.readResolve();
      complex4.log();
      int int0 = (-2147481021);
      try { 
        complex0.nthRoot((-2147481021));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,147,481,021
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 3996);
      Complex complex1 = complex0.multiply(17);
      Complex complex2 = complex0.log();
      complex2.ZERO.nthRoot(3996);
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, (-66.813290390717));
      Complex complex4 = Complex.I;
      Complex complex5 = complex4.acos();
      Complex complex6 = Complex.valueOf(2.0);
      Complex complex7 = complex6.multiply(721.0);
      complex0.subtract(complex1);
      complex2.exp();
      Complex complex8 = complex2.cosh();
      Complex complex9 = Complex.INF;
      complex3.divide(complex5);
      complex3.sin();
      Complex complex10 = Complex.valueOf(1.0070909418550386E152, (-178.5));
      complex8.reciprocal();
      complex4.tanh();
      complex6.subtract(complex7);
      complex10.NaN.acos();
      complex8.multiply(complex9);
      complex6.subtract(complex1);
      complex8.asin();
      complex10.acos();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-1879.8986), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
      complex0.subtract((-2860.2895707));
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), 1806501.202862949);
      complex0.acos();
      complex0.tanh();
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply((-1.8124135273572568E-8));
      complex0.nthRoot(852);
      Object object0 = new Object();
      Complex complex1 = Complex.valueOf(2.0003490682463053E196, 3.572270133517001E-67);
      complex1.INF.sqrt1z();
      Complex complex2 = complex1.asin();
      complex2.getField();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      complex0.tanh();
      complex0.multiply(1518500250);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.valueOf(3322.77989091);
      complex1.I.pow(complex2);
      Complex complex3 = complex0.divide(complex1);
      Complex complex4 = complex1.divide(complex3);
      complex1.createComplex(618.62607, 618.62607);
      Complex complex5 = complex4.divide(complex2);
      Complex complex6 = Complex.valueOf((-2592.093135598));
      complex6.ONE.getField();
      complex6.ZERO.hashCode();
      complex5.ONE.tan();
      double double0 = Double.POSITIVE_INFINITY;
      Complex complex7 = Complex.valueOf(3322.77989091, Double.POSITIVE_INFINITY);
      complex2.toString();
      complex7.multiply(complex0);
      try { 
        complex4.nthRoot((-498));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -498
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(20.0, 26.892342313453156);
      complex0.exp();
      Complex complex1 = Complex.valueOf(1.2408792972564697);
      Complex complex2 = complex1.acos();
      Complex complex3 = Complex.INF;
      complex1.subtract(complex2);
      Complex complex4 = new Complex(26.892342313453156, 20.0);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(Double.NaN);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2153.26856141);
      complex0.asin();
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.valueOf(2153.26856141, 1102.0);
      complex0.sin();
      complex3.cosh();
      complex2.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.INF.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.10906457901000977, 7.772668425499348E-8);
      Complex complex1 = Complex.valueOf((-20.0), (-20.0));
      complex0.multiply((-693.928534494794));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2153.26856141);
      complex0.createComplex(Double.POSITIVE_INFINITY, 9.28820140843436E-4);
      Complex complex1 = Complex.ZERO;
      complex0.getReal();
      complex1.asin();
      Complex complex2 = new Complex(2.0);
      complex2.add(2.0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-7.488504089096336), (double) (-204));
      Complex complex1 = complex0.multiply((-204));
      complex1.ONE.add(complex0);
      complex0.nthRoot(4374);
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.acos();
      Complex complex3 = Complex.ONE;
      complex3.getField();
      complex0.asin();
      complex2.exp();
      Object object0 = new Object();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tan();
      complex0.ONE.createComplex(Double.NaN, 1971.2161);
      complex1.divide(204.0);
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.abs();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ZERO.asin();
      complex1.subtract(0.0);
      Complex complex4 = complex2.log();
      complex3.subtract(complex4);
      Complex complex5 = Complex.valueOf(0.0);
      complex2.sinh();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-2385.58));
      complex0.ZERO.toString();
      Complex complex2 = complex0.INF.divide(complex1);
      complex1.NaN.multiply(complex0);
      Complex complex3 = complex2.NaN.add((-2.9535446262017846E-9));
      Complex complex4 = complex1.conjugate();
      Complex.valueOf(0.0, (-2.9535446262017846E-9));
      complex0.getArgument();
      Complex complex5 = complex0.multiply((-2385.58));
      complex3.ONE.readResolve();
      complex5.I.tan();
      complex5.cos();
      complex3.nthRoot(852);
      Object object0 = new Object();
      complex4.asin();
      complex1.getField();
      complex5.divide(Double.POSITIVE_INFINITY);
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(complex0);
      complex1.ONE.divide(Double.POSITIVE_INFINITY);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.ONE.exp();
      complex0.tanh();
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4764.764, 4764.764);
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.sqrt();
      Complex complex3 = complex0.tan();
      complex3.multiply(complex1);
      complex3.tan();
      complex0.log();
      Complex complex4 = Complex.valueOf(1627.4183616, (-1081.9));
      complex3.asin();
      complex0.exp();
      complex1.exp();
      Object object0 = new Object();
      Object object1 = new Object();
      Complex complex5 = Complex.I;
      Object object2 = complex5.readResolve();
      complex2.equals(object2);
      Complex.valueOf(1627.4183616);
      complex4.asin();
      complex3.getField();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.575620466387945E-150, 2.575620466387945E-150);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.exp();
      complex0.reciprocal();
      Complex complex3 = complex0.atan();
      complex2.multiply((-3110.196));
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.exp();
      Complex complex3 = Complex.valueOf((-2745.257791517));
      complex3.reciprocal();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex3.sqrt1z();
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY);
      complex6.sqrt1z();
      complex0.getField();
      Object object0 = new Object();
      complex3.equals(object0);
      complex5.sqrt();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.575620466387945E-150, 2.575620466387945E-150);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.exp();
      Complex complex4 = Complex.valueOf(2.575620466387945E-150);
      Complex complex5 = complex3.acos();
      complex5.getField();
      complex3.asin();
      complex1.exp();
      Object object0 = new Object();
      complex0.tan();
      complex4.multiply(complex5);
      Complex complex6 = Complex.INF;
      complex6.tanh();
      Complex.valueOf(2.575620466387945E-150, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(1360);
      Object object0 = new Object();
      Complex complex1 = complex0.asin();
      complex0.getField();
      Complex complex2 = complex0.subtract(Double.NaN);
      complex2.INF.subtract((-1936.08142463));
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = 2146065955;
      // Undeclared exception!
      complex0.nthRoot(int0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-1.1238163299724444));
      Complex complex1 = complex0.ONE.acos();
      complex0.getReal();
      Complex complex2 = complex0.asin();
      complex2.getArgument();
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex3.NaN.sqrt1z();
      Complex complex6 = complex5.INF.pow(0.0);
      Complex complex7 = complex0.cos();
      complex7.acos();
      complex0.equals(complex1);
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex8.tan();
      Complex complex10 = complex9.multiply(complex7);
      complex2.ONE.tan();
      Complex complex11 = complex5.log();
      complex10.getImaginary();
      Complex complex12 = complex7.negate();
      Complex complex13 = complex9.pow(complex11);
      Complex complex14 = complex2.log();
      complex11.subtract(630.756966);
      Complex complex15 = complex2.add(complex14);
      complex8.divide(complex13);
      complex7.divide(complex12);
      complex15.add(complex8);
      complex6.cosh();
      complex9.multiply((-2425));
      complex4.isNaN();
      complex15.sqrt();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.575620466387945E-150, 2.575620466387945E-150);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.exp();
      Complex complex4 = Complex.valueOf(2.575620466387945E-150);
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex5.acos();
      complex6.equals(complex3);
      Complex complex7 = new Complex((-342.2293578));
      complex7.getArgument();
      Complex complex8 = new Complex(2.575620466387945E-150, 332.419);
      complex2.acos();
      Complex complex9 = Complex.valueOf((-2059.68703288), 2.575620466387945E-150);
      complex9.toString();
      complex2.add((-6.883499809714189E297));
      complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.acos();
      complex0.getReal();
      Complex complex2 = complex0.asin();
      complex2.getArgument();
      complex0.add(0.0);
      Complex complex3 = complex1.conjugate();
      Complex.valueOf(0.0, 1316.4043569139);
      complex3.getArgument();
      complex1.multiply(1.1666784848785028E-4);
      complex2.readResolve();
      Complex complex4 = Complex.INF;
      complex4.tan();
      complex4.cos();
      Complex complex5 = new Complex(852);
      int int0 = (-162);
      try { 
        complex5.nthRoot((-162));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -162
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-2969.97), Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY, 759.16914);
      complex2.exp();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.acos();
      complex0.getReal();
      Complex complex2 = Complex.valueOf((-3937.3240732995387), (-1171.1338));
      Complex complex3 = complex2.asin();
      complex0.getArgument();
      Complex complex4 = complex3.tanh();
      complex3.cos();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex3.pow(1841.7996);
      complex5.cos();
      Complex complex7 = complex2.acos();
      complex4.equals(complex6);
      complex5.sqrt();
      Complex complex8 = complex2.tan();
      Complex complex9 = complex7.multiply(complex3);
      complex9.tan();
      Complex complex10 = complex9.log();
      complex1.getImaginary();
      complex5.negate();
      complex7.pow(complex8);
      Complex complex11 = complex3.log();
      complex6.subtract((-1171.1338));
      Complex complex12 = complex8.add(complex0);
      complex3.divide(complex12);
      complex11.divide(complex7);
      complex1.add(complex4);
      complex9.cosh();
      complex1.hashCode();
      complex2.multiply(4961);
      complex12.sqrt();
      complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.ONE.sin();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex2.multiply(complex3);
      complex4.tan();
      Complex complex6 = complex5.log();
      complex0.getImaginary();
      Complex complex7 = complex5.negate();
      complex1.pow(complex6);
      Complex complex8 = complex4.log();
      Complex complex9 = complex3.subtract((-1123.19317));
      Complex complex10 = complex8.add(complex6);
      Complex complex11 = complex10.divide(complex5);
      complex11.divide(complex10);
      Complex complex12 = Complex.ZERO;
      complex12.add(complex5);
      complex7.cosh();
      Complex complex13 = new Complex(Double.NaN, (-1123.19317));
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.acos();
      complex0.getReal();
      Complex complex2 = complex0.asin();
      complex2.getArgument();
      Complex complex3 = complex2.ONE.tanh();
      complex3.ONE.cos();
      Complex complex4 = complex3.NaN.sqrt1z();
      Complex complex5 = complex4.INF.pow(0.0);
      Complex complex6 = complex0.cos();
      Complex complex7 = complex6.acos();
      complex0.equals(complex1);
      complex4.getArgument();
      Complex complex8 = new Complex(0.0, Double.NaN);
      complex8.acos();
      complex7.toString();
      complex0.add(0.4444103240966797);
      complex5.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-2385.58));
      complex0.ZERO.toString();
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex1.NaN.multiply(complex0);
      complex2.NaN.add((-2.9535446262017846E-9));
      Complex complex4 = complex1.conjugate();
      Complex.valueOf(0.0, (-2.9535446262017846E-9));
      complex0.getArgument();
      Complex complex5 = complex0.multiply((-2385.58));
      Complex complex6 = complex5.I.tan();
      Complex complex7 = complex5.INF.log();
      Complex complex8 = complex2.tan();
      complex4.log();
      Complex complex9 = Complex.I;
      complex9.getImaginary();
      Complex complex10 = complex6.negate();
      complex4.pow(complex5);
      complex8.log();
      complex3.readResolve();
      complex10.multiply(complex7);
      complex6.abs();
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2561.069219552), (-2561.069219552));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.acos();
      complex0.getReal();
      Complex complex2 = Complex.valueOf((-3937.3240732995387), (-1171.1338));
      Complex complex3 = complex2.asin();
      complex0.getArgument();
      Complex complex4 = complex3.tanh();
      complex3.cos();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex3.pow(1841.7996);
      complex5.cos();
      Complex complex7 = complex2.acos();
      complex4.equals(complex6);
      Complex complex8 = complex5.sqrt();
      Complex complex9 = complex2.tan();
      Complex complex10 = complex7.multiply(complex3);
      complex10.tan();
      complex10.log();
      complex1.getImaginary();
      complex5.negate();
      Complex complex11 = complex7.pow(complex9);
      Complex complex12 = complex3.log();
      complex6.subtract((-1171.1338));
      Complex complex13 = complex0.add(complex2);
      complex10.divide(complex13);
      Complex complex14 = complex0.divide(complex12);
      complex11.add(complex7);
      Complex complex15 = complex14.cosh();
      complex15.I.hashCode();
      Complex complex16 = complex8.multiply(4961);
      complex16.I.sqrt();
      complex13.isNaN();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = new Complex(745, Double.POSITIVE_INFINITY);
      complex0.nthRoot(745);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.acos();
      complex0.getReal();
      Complex complex2 = complex0.asin();
      complex2.getArgument();
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = complex3.ONE.cos();
      Complex complex5 = complex3.NaN.sqrt1z();
      Complex complex6 = complex5.INF.pow(0.0);
      Complex complex7 = complex0.cos();
      complex7.acos();
      complex0.equals(complex1);
      Complex complex8 = complex1.sqrt();
      Complex complex9 = complex8.tan();
      Complex complex10 = complex9.multiply(complex7);
      complex2.ONE.tan();
      Complex complex11 = complex5.log();
      complex10.getImaginary();
      Complex complex12 = complex7.negate();
      Complex complex13 = complex9.pow(complex11);
      Complex complex14 = complex2.log();
      complex11.subtract(630.756966);
      Complex complex15 = complex2.add(complex14);
      complex8.divide(complex13);
      complex7.divide(complex12);
      complex15.add(complex8);
      complex6.cosh();
      complex9.multiply((-2425));
      complex4.isNaN();
      complex15.sqrt();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.575620466387945E-150, 2.575620466387945E-150);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.multiply(complex1);
      Complex complex4 = complex2.add((-7.944341754299148E24));
      complex1.conjugate();
      Complex complex5 = Complex.valueOf((-1375.446554290984), 1557.209);
      complex4.getArgument();
      Complex complex6 = complex3.multiply((-1.0));
      complex0.readResolve();
      Complex complex7 = Complex.valueOf((-20.0));
      complex7.tan();
      Complex complex8 = complex6.log();
      complex5.getImaginary();
      Complex complex9 = complex1.negate();
      Complex complex10 = complex9.pow(complex7);
      Complex complex11 = complex5.log();
      complex1.subtract((-90.0));
      complex4.add(complex5);
      complex11.divide(complex9);
      complex3.divide(complex10);
      complex8.add(complex6);
      Complex complex12 = complex3.cosh();
      Complex complex13 = Complex.valueOf(3.141592653589793, 3389.602902700243);
      complex13.multiply(2343);
      complex12.isNaN();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      complex1.getImaginary();
      complex0.negate();
      Complex complex2 = complex1.pow(complex1);
      Complex complex3 = complex1.log();
      Complex complex4 = complex3.subtract((-2248.646259742758));
      complex1.add(complex2);
      complex3.divide(complex4);
      Complex complex5 = Complex.valueOf((-873.0));
      Complex complex6 = complex4.divide(complex5);
      complex1.add(complex3);
      complex1.cosh();
      complex6.multiply(2343);
      Complex complex7 = Complex.I;
      complex7.isNaN();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-2753.3477), 3.037379372330454E-4);
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.I.multiply(complex2);
      complex3.ONE.multiply((-162));
      Complex complex4 = complex0.log();
      complex4.subtract((-2753.3477));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.575620466387945E-150, 2.575620466387945E-150);
      Complex complex1 = Complex.valueOf(Double.NaN, 311.25814777753);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.subtract(20.0);
      Complex complex4 = Complex.INF;
      complex4.readResolve();
      Complex complex5 = complex1.tanh();
      Complex complex6 = Complex.valueOf(311.25814777753);
      Complex complex7 = complex5.add(complex6);
      complex3.subtract(complex0);
      Complex complex8 = complex4.divide((-2772.7520102053777));
      Complex complex9 = Complex.valueOf(2840.5126149, 1909.3655397528373);
      Complex complex10 = complex9.add(2.575620466387945E-150);
      complex1.getImaginary();
      complex9.isNaN();
      Complex complex11 = new Complex(2840.5126149);
      complex8.INF.cosh();
      complex11.getArgument();
      complex9.hashCode();
      complex9.pow((-2772.7520102053777));
      complex10.pow(complex8);
      complex9.add((-1207.9126906));
      complex1.cos();
      complex7.sin();
      complex0.atan();
      complex4.negate();
      try { 
        complex9.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tanh();
      complex1.ONE.sin();
      complex1.ONE.getArgument();
      Complex complex2 = complex1.I.acos();
      complex0.sinh();
      complex2.cos();
      Complex complex3 = complex2.add(2877.572678626995);
      Complex complex4 = new Complex(2877.572678626995);
      complex4.conjugate();
      Complex.valueOf(2877.572678626995, 419.6);
      Complex complex5 = Complex.ZERO;
      complex5.log();
      complex3.subtract(777.477952067);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex((-1438.78638398), (-2445.9827748739));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.asin();
      complex2.getArgument();
      Complex complex3 = complex1.sin();
      Complex complex4 = complex1.log();
      Complex complex5 = complex3.pow((-1.6322321850725723));
      complex4.divide(complex5);
      complex3.atan();
      complex3.sqrt1z();
      Complex complex6 = complex4.sin();
      Complex complex7 = complex4.sqrt();
      Complex complex8 = complex3.negate();
      Complex complex9 = complex7.tanh();
      complex0.add(complex9);
      Complex complex10 = complex7.cos();
      Complex.valueOf(Double.NaN, Double.NaN);
      complex1.nthRoot(2544);
      Object object0 = new Object();
      complex8.equals(object0);
      Complex complex11 = complex7.add((-2043.7961430941));
      complex8.negate();
      Complex complex12 = complex8.negate();
      complex10.readResolve();
      complex6.reciprocal();
      complex12.divide(complex6);
      Complex complex13 = complex7.pow(0.1139194490244215);
      complex13.ZERO.divide(3.137236597012816E-4);
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.ONE.pow(0.0);
      Complex complex3 = (Complex)complex1.I.readResolve();
      Complex complex4 = complex3.add(complex0);
      Complex complex5 = new Complex((-445.47285874));
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = complex3.pow(complex2);
      complex6.I.divide(277.92850747);
      complex4.subtract(1133.2125);
      complex6.readResolve();
      Complex complex8 = complex0.tanh();
      Complex complex9 = Complex.valueOf((-2398.1801962533045));
      Complex complex10 = complex4.add(complex9);
      Complex complex11 = complex8.subtract(complex7);
      Complex complex12 = complex4.divide(217.0);
      Complex complex13 = complex10.add((-1587.6937689138));
      complex13.I.negate();
      complex11.getImaginary();
      complex4.isNaN();
      complex7.getArgument();
      complex12.hashCode();
      Complex complex14 = Complex.ZERO;
      complex14.pow((-1.0));
      Complex complex15 = complex5.pow(complex4);
      complex15.abs();
      complex3.add((-2227.204599));
      complex10.cos();
      complex8.sin();
      complex4.atan();
      complex14.negate();
      try { 
        complex14.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-2385.58));
      complex0.ZERO.toString();
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex1.NaN.multiply(complex0);
      Complex complex4 = complex2.NaN.add((-40.62849071487488));
      complex1.conjugate();
      Complex.valueOf(0.0, (-40.62849071487488));
      complex0.getArgument();
      Complex complex5 = complex0.multiply((-2385.58));
      complex4.ONE.readResolve();
      complex5.I.tan();
      Complex complex6 = complex5.INF.log();
      complex0.getImaginary();
      Complex complex7 = complex5.negate();
      complex4.pow(complex3);
      complex5.ZERO.log();
      complex6.readResolve();
      Complex complex8 = complex0.multiply(222.42244488);
      Complex complex9 = complex7.multiply(complex5);
      complex9.abs();
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1841.7996));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.cos();
      complex2.sqrt1z();
      Complex complex3 = complex1.NaN.createComplex((-1841.7996), 0.0);
      Complex complex4 = complex3.pow(complex2);
      complex4.INF.pow(complex1);
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex5.INF.sinh();
      complex6.cosh();
      complex3.subtract((-778.36));
      Complex complex7 = complex4.add(complex5);
      Complex complex8 = complex4.divide(complex7);
      Complex complex9 = Complex.valueOf((-71.955));
      complex2.divide(complex9);
      complex0.add(complex9);
      complex7.cosh();
      complex8.multiply(600);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.575620466387945E-150, 2.575620466387945E-150);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.negate();
      complex2.exp();
      Complex complex3 = Complex.valueOf(2.575620466387945E-150);
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex0.divide(1.786660204144763E-4);
      Complex complex6 = complex4.acos();
      complex6.getField();
      complex5.asin();
      complex1.exp();
      Complex complex7 = complex0.exp();
      Object object0 = new Object();
      complex7.equals(complex2);
      complex5.asin();
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-4.989318918773146E108));
      Complex complex1 = complex0.NaN.reciprocal();
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.I.divide((-2043.7961430941));
      Complex complex4 = complex0.conjugate();
      complex4.NaN.cosh();
      complex4.abs();
      complex0.multiply((-2043.7961430941));
      complex3.tanh();
      Complex.valueOf((-2043.7961430941), 0.040352813161224015);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1133.2125), (-451.0891183039389));
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.pow((-451.0891183039389));
      complex3.readResolve();
      Complex complex4 = complex1.asin();
      complex2.getArgument();
      Complex complex5 = complex4.sin();
      Complex complex6 = complex0.log();
      complex4.pow((-1.2906712010774655E-8));
      Complex complex7 = Complex.INF;
      Complex complex8 = complex1.divide(complex7);
      complex6.atan();
      Complex complex9 = complex8.sqrt1z();
      complex2.sin();
      complex3.sqrt();
      complex7.negate();
      complex5.tanh();
      Complex complex10 = complex5.add(complex7);
      Complex complex11 = complex7.cos();
      Complex complex12 = Complex.valueOf((-1133.2125), 0.7615941559557649);
      complex11.nthRoot(2544);
      complex7.equals(complex3);
      complex0.add((-1.2906712010774655E-8));
      Complex complex13 = new Complex(36.00291, 2544);
      complex13.negate();
      complex10.negate();
      complex9.readResolve();
      Complex complex14 = complex2.reciprocal();
      complex1.divide(complex14);
      complex12.pow(0.7615941559557649);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      double double0 = (-1438.78638398);
      double double1 = (-2445.9827748739);
      Complex complex0 = new Complex((-1438.78638398), (-2445.9827748739));
      Complex complex1 = Complex.valueOf((-2445.9827748739));
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.pow(complex2);
      complex4.INF.subtract((-2445.9827748739));
      complex4.INF.readResolve();
      complex0.tanh();
      Complex.valueOf((-1587.6937689138));
      try { 
        complex0.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4764.764, 4764.764);
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex0.acos();
      Complex complex3 = Complex.NaN;
      complex2.equals(complex3);
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex3.multiply(complex4);
      Complex complex7 = complex5.tan();
      Complex complex8 = Complex.ONE;
      complex8.reciprocal();
      Complex complex9 = complex4.sqrt1z();
      complex9.multiply(1255);
      complex5.add(complex6);
      Complex.valueOf((-3589.3));
      complex2.cosh();
      Complex complex10 = Complex.INF;
      complex10.getReal();
      Complex complex11 = complex1.sqrt();
      complex11.sin();
      Complex complex12 = complex10.createComplex((-5.678896695157704E-23), (-5.678896695157704E-23));
      complex2.getReal();
      Complex complex13 = Complex.valueOf((-2106.908));
      complex13.exp();
      complex7.asin();
      complex12.sin();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.575620466387945E-150, 2.575620466387945E-150);
      Complex complex1 = Complex.valueOf(2.575620466387945E-150);
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex5 = complex1.acos();
      complex1.getField();
      complex4.asin();
      complex0.exp();
      complex2.exp();
      Object object0 = new Object();
      complex5.equals(complex4);
      complex1.asin();
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.multiply(complex2);
      Complex complex4 = complex3.tan();
      complex2.INF.getField();
      Complex complex5 = complex4.divide(0.0);
      Complex complex6 = complex5.ZERO.log();
      complex6.ONE.exp();
      Complex complex7 = Complex.valueOf(0.0, 0.0);
      complex5.INF.pow(complex7);
      Complex complex8 = complex3.createComplex(0.0, 1436.8);
      complex8.INF.nthRoot(1);
      Complex complex9 = complex8.sinh();
      Complex complex10 = complex9.INF.cos();
      complex5.getReal();
      complex3.divide(complex4);
      Complex.valueOf(0.0);
      complex3.negate();
      Complex complex11 = complex1.conjugate();
      complex11.INF.sqrt1z();
      complex3.reciprocal();
      complex6.isNaN();
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(1326);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply(0.0);
      complex0.getField();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.INF.sqrt();
      Complex complex4 = complex2.divide(4619.375411621617);
      complex1.getImaginary();
      Complex complex5 = complex2.asin();
      Complex complex6 = complex5.INF.sqrt1z();
      complex6.NaN.add(complex1);
      complex0.ZERO.hashCode();
      complex6.NaN.getArgument();
      Complex complex7 = complex5.NaN.cos();
      Complex complex8 = complex0.sin();
      Complex complex9 = complex3.tan();
      Complex complex10 = complex9.INF.add(complex0);
      complex10.NaN.sqrt1z();
      complex8.toString();
      Complex complex11 = complex1.sqrt();
      complex7.NaN.add(complex10);
      Complex complex12 = complex4.createComplex(0.0, 1914.51);
      complex0.multiply(1018.7653);
      Complex complex13 = complex11.subtract((-1557.0));
      Complex complex14 = complex13.INF.cosh();
      complex7.nthRoot(615);
      complex12.sqrt();
      complex1.negate();
      complex14.atan();
      complex11.pow(303.97194142);
      complex5.divide(1018.7653);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = new Complex(1326);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1841.7996));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.cos();
      complex2.sqrt1z();
      Complex complex3 = complex1.NaN.createComplex((-1841.7996), 0.0);
      Complex complex4 = complex3.pow(complex2);
      complex4.INF.pow(complex1);
      Complex complex5 = complex0.pow(complex1);
      Complex complex6 = complex5.INF.sinh();
      complex6.cosh();
      complex6.ONE.readResolve();
      Complex complex7 = complex6.ONE.multiply(0.0);
      complex7.I.multiply(complex1);
      complex0.abs();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-2385.58));
      complex0.ZERO.toString();
      Complex complex2 = complex0.INF.divide(complex1);
      Complex complex3 = complex1.NaN.multiply(complex0);
      Complex complex4 = complex2.NaN.add((-2.9535446262017846E-9));
      complex1.conjugate();
      Complex.valueOf(0.0, (-2.9535446262017846E-9));
      complex0.getArgument();
      Complex complex5 = complex0.multiply((-2385.58));
      complex4.ONE.readResolve();
      Complex complex6 = complex5.I.tan();
      Complex complex7 = complex5.INF.log();
      complex0.getImaginary();
      Complex complex8 = complex5.negate();
      complex4.pow(complex3);
      complex5.ZERO.log();
      complex7.subtract(1.0);
      Complex complex9 = complex8.add(complex7);
      complex9.ONE.divide(complex6);
      complex9.ONE.divide(complex7);
      complex0.add(complex8);
      complex3.cosh();
      complex3.multiply(2343);
      complex6.isNaN();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(986);
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.INF.atan();
      Complex complex2 = complex1.INF.acos();
      Complex complex3 = complex1.asin();
      Complex complex4 = complex3.ONE.log();
      Complex complex5 = complex0.log();
      complex4.ONE.toString();
      Complex complex6 = complex0.pow(complex5);
      complex6.ONE.exp();
      Complex complex7 = complex6.ZERO.divide(20.0);
      complex7.INF.pow(complex6);
      complex5.negate();
      complex3.I.readResolve();
      complex4.multiply(1923.35535);
      complex3.subtract(0.0);
      complex4.asin();
      Complex complex8 = complex1.ZERO.cos();
      complex8.I.hashCode();
      complex4.createComplex(79.168, 1923.35535);
      complex8.getReal();
      Complex complex9 = Complex.I;
      complex5.add(complex9);
      complex2.cos();
      Complex.valueOf(1243.506753);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.NaN.cos();
      complex1.ONE.cos();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.pow(complex0);
      Complex complex4 = complex3.conjugate();
      complex2.getArgument();
      try { 
        complex4.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex(98.3116101916288);
      Complex complex1 = complex0.divide((-1.0));
      Complex complex2 = complex1.NaN.asin();
      complex0.sin();
      complex1.cos();
      Complex complex3 = Complex.valueOf((-1.0));
      complex0.asin();
      complex1.pow(complex2);
      complex0.log();
      Complex complex4 = Complex.valueOf(0.15359249711036682);
      complex4.INF.getArgument();
      complex4.sqrt1z();
      Complex complex5 = complex3.sinh();
      complex5.NaN.cosh();
      complex5.negate();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.multiply(Double.NaN);
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = Complex.valueOf(0.0, 2038.4525132203);
      Complex complex3 = complex0.add(complex2);
      complex1.INF.add(6.283185307179586);
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = complex4.log();
      complex0.isNaN();
      Complex complex6 = complex3.atan();
      complex6.NaN.pow(complex5);
      Complex complex7 = complex3.conjugate();
      Complex complex8 = complex5.divide(177.3);
      Complex complex9 = complex8.I.atan();
      complex9.multiply(0.0);
      complex7.cosh();
      complex5.acos();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.multiply((-653.792));
      Complex complex2 = complex1.ZERO.sin();
      complex2.nthRoot(37);
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex3.I.multiply((-265.7478483196358));
      complex0.getArgument();
      Complex complex5 = complex0.sin();
      complex1.NaN.divide(0.0);
      Complex complex6 = complex5.subtract((-1.0));
      Complex complex7 = complex0.log();
      complex7.NaN.getField();
      Complex complex8 = complex7.ONE.negate();
      complex8.ZERO.sqrt();
      Complex complex9 = Complex.valueOf((-1.0), (-1.0));
      Complex complex10 = complex6.cosh();
      Complex complex11 = complex5.subtract(complex10);
      complex11.INF.atan();
      complex11.NaN.acos();
      complex4.ONE.readResolve();
      Complex complex12 = Complex.valueOf(0.0, 20.0);
      complex3.sinh();
      complex12.toString();
      complex4.nthRoot(37);
      complex9.asin();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.INF.negate();
      Complex complex1 = Complex.valueOf(0.0);
      complex0.getImaginary();
      Complex complex2 = complex1.sqrt1z();
      complex2.NaN.getArgument();
      complex2.toString();
      Complex complex3 = complex1.divide(complex0);
      complex3.ZERO.toString();
      complex0.NaN.toString();
      complex1.conjugate();
      complex0.sin();
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(865.21, 865.21);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex2.INF.negate();
      Complex complex4 = complex0.cos();
      complex4.ONE.hashCode();
      Complex complex5 = complex0.divide(4181.5918173);
      Complex complex6 = complex0.ZERO.add(complex5);
      complex6.I.subtract(complex0);
      complex5.INF.hashCode();
      Complex complex7 = complex6.I.subtract(4181.5918173);
      complex7.ZERO.asin();
      Complex complex8 = complex1.asin();
      Complex.valueOf(922.806024476606);
      Complex complex9 = complex5.subtract(922.806024476606);
      complex8.NaN.nthRoot(1);
      Complex complex10 = complex2.subtract(865.21);
      complex10.NaN.readResolve();
      complex0.getField();
      complex5.cosh();
      Complex complex11 = complex5.multiply((double) 1);
      Complex complex12 = complex2.divide(complex3);
      complex11.add(complex12);
      Complex complex13 = complex11.multiply(complex1);
      complex1.INF.add(complex13);
      Complex complex14 = complex3.exp();
      Complex complex15 = complex14.add(865.21);
      complex15.NaN.tanh();
      complex3.sqrt();
      complex11.pow(1.5176268538776042E-84);
      Complex complex16 = complex13.sinh();
      complex9.tanh();
      complex16.hashCode();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.reciprocal();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2977.714), Double.NaN);
      complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.reciprocal();
      complex1.NaN.divide(complex0);
      complex0.getArgument();
      Complex complex2 = complex0.pow((-2034.712996));
      Complex complex3 = complex2.cos();
      complex2.ZERO.multiply(0.0);
      Complex complex4 = complex3.I.log();
      Complex complex5 = complex3.INF.log();
      complex5.ONE.sqrt1z();
      complex0.divide(1628.4530041804);
      complex3.NaN.exp();
      Complex.valueOf((-2034.712996));
      Complex complex6 = complex2.atan();
      complex1.nthRoot(37);
      complex2.hashCode();
      complex3.sinh();
      complex0.tanh();
      complex6.cosh();
      complex6.getImaginary();
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.575620466387945E-150, 2.575620466387945E-150);
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.exp();
      Complex.valueOf(2.575620466387945E-150);
      complex2.acos();
      complex1.readResolve();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.cos();
      complex1.nthRoot(852);
      Object object0 = new Object();
      Complex complex5 = complex4.asin();
      complex3.getField();
      complex0.divide(Double.POSITIVE_INFINITY);
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.acos();
      Complex.valueOf(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2248.646259742758));
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-158.3));
      Complex complex1 = new Complex((-99.1207), (-99.1207));
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.hashCode();
      Complex complex1 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply(129);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.hashCode();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply((-1312145731));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2.4751837654582522E-8);
      Complex complex1 = complex0.INF.tanh();
      complex0.getImaginary();
      Complex complex2 = complex1.add(complex0);
      complex2.I.pow(complex1);
      Complex complex3 = complex1.cos();
      complex3.I.multiply(2.4751837654582522E-8);
      Complex complex4 = complex1.sinh();
      complex4.ZERO.negate();
      Complex complex5 = complex4.I.negate();
      Complex complex6 = Complex.valueOf(2.4751837654582522E-8);
      Complex complex7 = complex6.acos();
      complex7.ONE.pow(2.4751837654582522E-8);
      Complex complex8 = complex7.I.negate();
      complex8.ZERO.createComplex(175.4109869140472, 0.0);
      Complex complex9 = complex7.INF.multiply((-876));
      complex9.hashCode();
      complex9.atan();
      complex7.ONE.pow(0.0);
      complex0.ZERO.createComplex((-876), (-876));
      Complex complex10 = Complex.valueOf(0.0);
      Complex.valueOf(2.4751837654582522E-8);
      complex1.readResolve();
      complex0.isInfinite();
      complex8.atan();
      complex5.sinh();
      complex7.reciprocal();
      complex8.add(complex4);
      complex10.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(1.0060535376055353, 1.0060535376055353);
      Complex complex1 = Complex.valueOf(1.0060535376055353);
      complex0.multiply((-966));
      complex1.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex((-7.488504089096336), (-7.488504089096336));
      complex0.divide((-7.488504089096336));
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sqrt1z();
      complex0.nthRoot(2407);
      Complex complex1 = new Complex(2407, Double.POSITIVE_INFINITY);
      complex1.nthRoot(2407);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex.valueOf(3.4908336317264146, 3.4908336317264146);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.ZERO.divide(0.5);
      Complex complex3 = Complex.ONE;
      complex0.I.subtract(complex3);
      complex2.ONE.divide(0.5);
      Complex complex4 = complex0.add(1214.84531441938);
      Complex.valueOf(1214.84531441938, (-1171.1338));
      Complex complex5 = complex1.acos();
      complex5.I.add(0.5);
      complex5.getArgument();
      Complex complex6 = complex5.log();
      Complex complex7 = complex1.subtract(complex2);
      complex7.INF.pow(complex6);
      Complex.valueOf(Double.NaN);
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf(Double.NaN, (-362.69));
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(5226);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex3.acos();
      complex2.getField();
      Complex complex5 = complex4.asin();
      Complex complex6 = complex2.exp();
      Complex complex7 = complex5.exp();
      Object object0 = new Object();
      Complex complex8 = Complex.NaN;
      complex7.equals(complex8);
      complex1.asin();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.abs();
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.ZERO.asin();
      complex1.subtract(0.0);
      Complex complex4 = complex2.log();
      complex3.subtract(complex4);
      Complex complex5 = complex1.cos();
      complex2.sinh();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.add(0.8364288087425561);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.divide(1.1168024085164686E112);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = new Complex((-2753.3477), 3.037379372330454E-4);
      Complex complex1 = complex0.NaN.atan();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.I.multiply(complex2);
      complex3.sqrt1z();
      complex2.getField();
      Complex complex4 = complex3.ZERO.multiply(464);
      complex4.I.add(1379.417548279);
      Object object0 = complex3.readResolve();
      complex3.equals(object0);
      complex2.sqrt();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.575620466387945E-150, 2.575620466387945E-150);
      Complex complex1 = complex0.tan();
      complex1.exp();
      Complex complex2 = Complex.valueOf(2.575620466387945E-150);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex0.atan();
      complex3.add(2.575620466387945E-150);
      complex2.readResolve();
      Complex complex5 = Complex.valueOf(2.575620466387945E-150);
      complex0.equals(complex5);
      complex5.sqrt();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.pow((-1.0571674860370546E-9));
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.multiply(812);
      Complex complex3 = complex2.add(1.0);
      complex1.readResolve();
      Object object0 = new Object();
      complex3.equals(object0);
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.tanh();
      complex0.I.multiply((-606.46159));
      Complex complex2 = complex0.createComplex(0.0, 2680.142382);
      complex2.NaN.acos();
      complex1.multiply(2680.142382);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tanh();
      Complex complex2 = complex1.ONE.sin();
      complex1.ONE.getArgument();
      complex1.I.acos();
      complex0.NaN.toString();
      Complex complex3 = complex2.exp();
      Object object0 = new Object();
      complex3.equals(complex2);
      complex1.asin();
      Complex complex4 = Complex.valueOf(0.0);
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = new Complex(1.0905890688083124E-180);
      complex0.multiply(1.0905890688083124E-180);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.sinh();
      Complex complex2 = complex0.NaN.acos();
      Complex complex3 = complex2.INF.exp();
      complex3.negate();
      complex3.toString();
      Complex complex4 = complex2.ZERO.cosh();
      complex0.NaN.hashCode();
      complex0.readResolve();
      complex0.cos();
      complex2.isNaN();
      complex3.abs();
      complex1.multiply(1211);
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(402);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.valueOf(4.8459153070935316E-77);
      Complex complex3 = Complex.NaN;
      complex3.subtract(complex1);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex4.multiply((-15.6776));
      complex5.multiply(complex2);
      complex3.nthRoot(1);
      Object object0 = new Object();
      Complex complex6 = complex3.asin();
      complex4.getField();
      Complex complex7 = new Complex((-1810), Double.POSITIVE_INFINITY);
      complex7.multiply(1);
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(1326);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.4399053480535401E7));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.subtract(1376.675751551168);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = new Complex(78.21854, 78.21854);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ONE.subtract(1511.493001698508);
      Complex complex3 = Complex.valueOf(1511.493001698508, 2.0);
      complex2.ZERO.sin();
      complex1.sqrt1z();
      complex0.sqrt1z();
      ComplexField complexField0 = complex1.getField();
      complex0.equals(complexField0);
      complex0.sqrt();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex.valueOf((-2999.916));
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.log();
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = new Complex((-4.989318918773146E108));
      Complex complex1 = complex0.NaN.reciprocal();
      complex1.ZERO.add(complex0);
      Complex complex2 = complex1.I.divide((-2043.7961430941));
      Complex complex3 = complex0.conjugate();
      Complex complex4 = complex3.NaN.cosh();
      complex3.abs();
      Complex complex5 = complex3.negate();
      Complex complex6 = complex5.I.exp();
      complex2.reciprocal();
      complex4.divide((-1892.20119926));
      Complex complex7 = complex1.acos();
      complex7.ONE.getField();
      complex2.exp();
      complex0.exp();
      Object object0 = new Object();
      complex7.equals(object0);
      complex1.asin();
      complex6.getField();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4130965480681632E7);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0));
      complex0.ONE.toString();
      Complex complex1 = Complex.valueOf(0.7853981689033344, (-2003.4429));
      Complex complex2 = complex1.I.negate();
      Complex complex3 = complex0.INF.subtract(complex1);
      Complex complex4 = Complex.valueOf((-3581.628265));
      Complex complex5 = complex0.multiply(625);
      Complex complex6 = Complex.valueOf((double) 625, (-1.0));
      complex6.ONE.add(complex4);
      complex5.NaN.nthRoot(625);
      Complex.valueOf(0.7853981689033344, (-1.0));
      Complex complex7 = complex6.I.negate();
      complex7.divide(complex5);
      Complex complex8 = complex7.ZERO.sinh();
      Complex complex9 = complex3.multiply((-1358));
      complex9.ZERO.getField();
      Complex.valueOf((-2003.4429));
      Complex complex10 = complex1.createComplex((-2003.4429), (-3581.628265));
      complex10.sinh();
      complex9.abs();
      complex4.getField();
      Complex complex11 = complex4.tan();
      Complex complex12 = complex2.log();
      complex10.asin();
      complex12.divide((double) (-1358));
      complex11.exp();
      complex12.NaN.subtract(complex9);
      Complex complex13 = complex6.divide(complex12);
      complex13.multiply(Double.POSITIVE_INFINITY);
      complex8.tanh();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(1.1817638600528107E-136);
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = complex2.ZERO.tanh();
      complex3.ZERO.multiply(complex2);
      complex0.INF.tan();
      Complex complex4 = complex3.INF.divide(complex0);
      complex4.NaN.divide(0.0);
      complex1.I.abs();
      Complex complex5 = complex0.I.add(1.0);
      complex5.log();
      complex0.isNaN();
      Complex complex6 = complex0.NaN.sinh();
      complex6.ZERO.getArgument();
      complex6.I.cos();
      try { 
        complex0.nthRoot((-2219));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,219
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = new Complex((-1054.1368363075), (-1054.1368363075));
      Complex complex1 = Complex.valueOf((-37.79), 274.9935438871065);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex0.atan();
      Complex complex5 = complex1.I.negate();
      complex5.ONE.atan();
      complex1.getImaginary();
      complex1.getReal();
      complex0.ONE.asin();
      Complex complex6 = complex2.log();
      Complex complex7 = complex6.INF.log();
      complex6.NaN.abs();
      complex4.ONE.multiply(0.0);
      Complex complex8 = complex3.createComplex(0.0, 274.9935438871065);
      complex2.multiply(complex4);
      complex1.tan();
      complex4.readResolve();
      complex8.readResolve();
      Complex complex9 = complex3.createComplex(1.31961989402771, 4.0191927599879235E-8);
      complex9.ONE.divide(0.0);
      complex2.getImaginary();
      complex7.reciprocal();
      Complex complex10 = Complex.I;
      complex2.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.atan();
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      complex1.getImaginary();
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex1.add(complex0);
      Complex complex4 = complex3.ONE.pow(551.7189601427184);
      Complex complex5 = complex0.ONE.log();
      complex5.INF.exp();
      complex1.toString();
      Complex.valueOf(0.0);
      Complex complex6 = complex2.ZERO.tanh();
      complex2.getField();
      complex2.readResolve();
      Complex.valueOf(6.653447793);
      complex2.isNaN();
      complex1.cos();
      Complex complex7 = complex2.log();
      complex2.negate();
      Complex.valueOf(0.0, 0.0);
      complex4.multiply(complex1);
      Complex complex8 = complex1.sqrt1z();
      complex7.exp();
      complex1.getField();
      complex1.divide(complex6);
      complex8.sinh();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 2206.8537597);
      complex0.INF.log();
      complex0.ZERO.nthRoot(3999);
      complex0.abs();
      Complex complex1 = complex0.sqrt();
      complex1.hashCode();
      Complex complex2 = complex1.negate();
      complex1.INF.acos();
      Complex complex3 = complex1.exp();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex3.ZERO.log();
      complex5.I.negate();
      complex3.ZERO.getField();
      complex4.getArgument();
      Complex complex6 = complex3.atan();
      Complex complex7 = complex6.I.tan();
      Complex complex8 = complex0.tanh();
      Complex complex9 = complex8.INF.reciprocal();
      complex8.ZERO.abs();
      Complex.valueOf((-1058.778945269));
      Complex complex10 = complex4.INF.reciprocal();
      complex9.ZERO.acos();
      Complex.valueOf((-3504.916));
      complex8.INF.getField();
      Complex complex11 = complex7.INF.tan();
      Complex complex12 = Complex.ONE;
      complex11.NaN.divide(complex12);
      complex0.nthRoot(1);
      complex2.pow(2.9104456289764857);
      complex7.isInfinite();
      complex7.multiply(1);
      complex10.readResolve();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.exp();
      complex1.I.getArgument();
      Complex complex2 = complex0.sqrt1z();
      complex2.I.getArgument();
      complex2.I.getArgument();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.createComplex((-4056.04401403), 1.5707963267948966);
      Complex complex5 = complex4.add((-4056.04401403));
      complex3.readResolve();
      Complex complex6 = complex0.divide(0.0);
      complex6.NaN.createComplex(4188.19002494, 1.5707963267948966);
      Complex complex7 = complex1.pow(0.0);
      complex5.ONE.cos();
      complex7.cos();
      complex5.tanh();
      complex7.pow(0.0);
      complex2.add(complex0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.sqrt();
      complex0.NaN.conjugate();
      complex3.INF.sqrt();
      complex3.getReal();
      complex0.getReal();
      complex2.cos();
      try { 
        complex1.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.ONE.acos();
      complex0.getReal();
      Complex complex2 = complex0.asin();
      complex2.getArgument();
      Complex complex3 = complex2.ONE.tanh();
      complex3.ONE.cos();
      Complex complex4 = complex3.NaN.sqrt1z();
      complex4.INF.pow(0.0);
      Complex complex5 = complex0.cos();
      complex5.acos();
      complex0.equals(complex1);
      Complex complex6 = complex1.sqrt();
      Complex complex7 = complex6.tan();
      complex7.multiply(complex5);
      complex2.ONE.tan();
      Complex complex8 = complex6.reciprocal();
      complex8.NaN.sqrt1z();
      Complex complex9 = complex5.multiply(1);
      try { 
        complex9.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.ONE.pow(0.0);
      complex1.I.readResolve();
      Complex complex3 = complex0.NaN.asin();
      complex2.ZERO.getArgument();
      Complex complex4 = complex0.sin();
      complex4.NaN.log();
      complex4.I.pow(0.0);
      complex4.ZERO.divide(complex2);
      Complex complex5 = complex1.atan();
      complex5.NaN.sqrt1z();
      Complex complex6 = complex5.NaN.sin();
      Complex complex7 = complex5.sqrt();
      Complex complex8 = complex1.negate();
      complex6.tanh();
      Complex complex9 = complex1.ONE.add(complex7);
      complex9.ONE.cos();
      Complex complex10 = Complex.valueOf(36.00291, 36.00291);
      complex6.nthRoot(2544);
      complex1.equals(complex10);
      complex2.add(0.0);
      Complex complex11 = complex2.negate();
      complex1.negate();
      complex8.readResolve();
      complex3.reciprocal();
      complex9.divide(complex4);
      complex11.pow((-780.32375202));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getReal();
      Complex complex1 = complex0.add(Double.NaN);
      Complex complex2 = complex1.sin();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex2.sqrt1z();
      complex1.hashCode();
      complex2.NaN.subtract(Double.NaN);
      complex3.isInfinite();
      complex5.INF.conjugate();
      complex5.hashCode();
      Complex complex6 = complex0.subtract(complex2);
      complex6.createComplex((-470.1876718408), (-470.1876718408));
      complex4.getReal();
      try { 
        complex2.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = new Complex(3041.0);
      Complex complex1 = complex0.cosh();
      complex0.NaN.toString();
      Complex complex2 = complex1.NaN.sqrt1z();
      complex1.add((-4511.787053924383));
      Complex complex3 = complex1.add(complex2);
      complex3.ONE.readResolve();
      Complex complex4 = complex1.sqrt1z();
      complex0.abs();
      complex0.toString();
      complex1.isNaN();
      Complex complex5 = complex1.reciprocal();
      Complex complex6 = complex5.I.reciprocal();
      complex4.equals(complex5);
      Complex complex7 = complex3.negate();
      complex1.isNaN();
      Complex complex8 = complex0.subtract(complex4);
      complex8.I.toString();
      complex0.exp();
      Complex complex9 = complex5.multiply(2828.2526347450425);
      Complex complex10 = complex9.ZERO.tan();
      complex7.atan();
      complex5.readResolve();
      Complex complex11 = complex5.subtract(2828.2526347450425);
      complex0.pow(complex3);
      complex11.ZERO.abs();
      Complex complex12 = complex11.pow(0.0);
      Complex complex13 = complex6.divide(complex11);
      complex13.NaN.pow(complex4);
      complex13.I.atan();
      Complex complex14 = complex11.add(complex13);
      complex14.NaN.tanh();
      complex5.toString();
      complex10.conjugate();
      complex12.multiply((-1012.29722));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4764.764, 4764.764);
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.ONE.divide(2.0466404088178596E-161);
      complex1.INF.subtract((-20.0));
      Complex complex3 = complex0.sqrt();
      complex3.ZERO.atan();
      Complex complex4 = complex2.acos();
      complex0.toString();
      complex1.add((-1.0));
      complex3.multiply(4764.764);
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      assertSame(complex1, complex0);
      
      Complex complex2 = complex1.I.pow(Double.NaN);
      complex2.ONE.pow(Double.NaN);
      Complex complex3 = Complex.valueOf(128.508346957, 128.508346957);
      Complex complex4 = complex3.ZERO.divide(128.508346957);
      complex4.NaN.getArgument();
      Complex complex5 = complex1.ZERO.cosh();
      complex4.ZERO.nthRoot(37);
      Complex complex6 = complex3.ONE.acos();
      Complex complex7 = complex0.sin();
      Complex complex8 = complex3.sin();
      complex7.ZERO.tan();
      Complex complex9 = complex8.NaN.subtract(complex1);
      complex8.divide(complex7);
      complex9.getArgument();
      complex3.toString();
      Complex complex10 = complex6.tan();
      Complex complex11 = complex5.sinh();
      complex11.subtract(complex10);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.tanh();
      complex1.ONE.sin();
      complex1.ONE.getArgument();
      Complex complex2 = complex1.I.acos();
      complex0.NaN.toString();
      complex0.abs();
      complex2.add(0.0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.add(2.0466404088178596E-161);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.pow((-5770.1115281260645));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2977.714), Double.NaN);
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.sin();
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      double double0 = (-1438.78638398);
      double double1 = (-2445.9827748739);
      Complex complex0 = new Complex((-1438.78638398), (-2445.9827748739));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.pow(complex2);
      complex4.INF.subtract((-2445.9827748739));
      complex4.INF.readResolve();
      complex0.tanh();
      Complex.valueOf((-1587.6937689138));
      try { 
        complex0.ONE.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ONE.sqrt1z();
      complex0.INF.cosh();
      Complex complex2 = complex1.ZERO.cos();
      complex2.INF.getField();
      complex0.abs();
      complex2.ZERO.subtract(1017.0);
      Complex complex3 = complex0.atan();
      complex2.INF.exp();
      complex3.getReal();
      complex3.getField();
      complex2.toString();
      complex1.ONE.log();
      complex3.toString();
      Complex complex4 = complex2.exp();
      complex4.NaN.sin();
      complex4.I.readResolve();
      Complex complex5 = complex3.exp();
      complex3.ONE.nthRoot(177);
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.nthRoot((-1285));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,285
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Complex complex0 = new Complex(1.0905890688083124E-180);
      complex0.pow(1.0905890688083124E-180);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4764.764, 4764.764);
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.ONE.divide(2.0466404088178596E-161);
      Complex complex3 = Complex.INF;
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = complex1.tan();
      Complex complex6 = complex1.log();
      complex5.getImaginary();
      Complex complex7 = complex6.negate();
      Complex complex8 = complex4.pow(complex3);
      Complex complex9 = complex3.log();
      assertEquals(Double.POSITIVE_INFINITY, complex9.getReal(), 0.01);
      assertEquals(0.7853981633974483, complex9.getImaginary(), 0.01);
      
      Complex complex10 = complex3.subtract(Double.NaN);
      Complex complex11 = complex5.add(complex0);
      assertSame(complex5, complex10);
      
      Complex complex12 = complex0.divide(complex3);
      assertEquals(0.0, complex12.getReal(), 0.01);
      
      Complex complex13 = Complex.I;
      complex6.add(complex4);
      Complex complex14 = complex2.cosh();
      assertEquals(4.8860561713310474E160, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertTrue(complex14.equals((Object)complex7));
      
      Complex complex15 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.NaN);
      complex15.hashCode();
      Complex complex16 = complex1.multiply((-250514));
      Complex complex17 = complex16.sqrt();
      complex16.isNaN();
      Complex complex18 = complex8.tanh();
      double double0 = complex18.abs();
      assertEquals(Double.NaN, double0, 0.01);
      assertSame(complex18, complex7);
      assertSame(complex1, complex15);
      assertSame(complex8, complex16);
      assertSame(complex18, complex11);
      assertEquals(4764.764, complex0.getReal(), 0.01);
      assertSame(complex4, complex17);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Complex complex0 = new Complex((-1.5707963267948966));
      Complex complex1 = new Complex((-1.5707963267948966), (-1902.3603830744805));
      Complex complex2 = complex0.add(Double.NaN);
      assertFalse(complex0.isInfinite());
      assertEquals((-1.5707963267948966), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(Double.NaN, complex2.getImaginary(), 0.01);
      assertFalse(complex0.equals((Object)complex1));
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Complex complex0 = Complex.INF;
      double double0 = 0.0;
      Complex complex1 = complex0.NaN.pow(0.0);
      complex1.ONE.sqrt();
      Complex complex2 = complex0.ZERO.log();
      complex1.cos();
      Complex complex3 = complex1.NaN.sin();
      complex3.I.readResolve();
      Complex complex4 = complex0.log();
      complex4.ZERO.pow(complex3);
      Complex complex5 = complex2.createComplex(1.0, 1.0);
      complex5.ZERO.abs();
      Complex complex6 = complex1.add(0.0);
      Complex complex7 = complex3.add(complex1);
      Complex complex8 = complex7.INF.exp();
      complex8.ZERO.sqrt1z();
      complex7.ONE.log();
      complex1.subtract(1.0);
      int int0 = (-3809);
      try { 
        complex6.nthRoot((-3809));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -3,809
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }
}
