/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 09:15:14 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2827720642089844, 20.0);
      complex0.tanh();
      complex0.tan();
      try { 
        complex0.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-266.9842), (-2991.21258847159));
      complex0.multiply((-2991.21258847159));
      complex0.ONE.getArgument();
      Complex complex1 = complex0.createComplex((-266.9842), (-2991.21258847159));
      Complex complex2 = complex0.conjugate();
      complex2.I.cosh();
      complex1.ZERO.sqrt1z();
      complex2.getArgument();
      Complex complex3 = complex2.ONE.multiply((-266.9842));
      complex1.NaN.createComplex((-2991.21258847159), 3986.390793369);
      Complex complex4 = Complex.valueOf(0.0, (-1355.375));
      Complex complex5 = complex4.NaN.multiply((-1355.375));
      complex5.ZERO.readResolve();
      complex2.NaN.cosh();
      complex4.multiply(1862);
      Complex complex6 = complex2.multiply(complex1);
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = complex2.cos();
      complex8.multiply(complex7);
      Complex complex9 = complex1.multiply((-1.5541483835379305E9));
      Complex complex10 = complex6.multiply((-1316.341220890213));
      complex10.asin();
      complex10.INF.getField();
      complex9.readResolve();
      try { 
        complex3.nthRoot((-1166));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,166
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0), (-20.0));
      complex1.log();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.log();
      Complex complex1 = new Complex(20.0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = new Complex((-3964.331791733297), (-3964.331791733297));
      Complex complex1 = complex0.acos();
      complex1.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex((-43.9421475355777), 1.282772064209);
      Complex complex1 = Complex.valueOf((-43.9421475355777));
      Complex complex2 = complex0.pow(complex1);
      complex2.ONE.divide(Double.NaN);
      Complex.valueOf((-43.9421475355777), 1.282772064209);
      complex1.pow((-1698.14476));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex.valueOf(2457.8524, 2457.8524);
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(1280.76736, (-3172.9));
      Complex complex2 = new Complex(Double.POSITIVE_INFINITY, 1280.76736);
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2457.8524, (-2175.78));
      complex0.readResolve();
      Complex complex1 = new Complex(2457.8524);
      complex1.equals(complex0);
      complex0.conjugate();
      Complex complex2 = Complex.INF;
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide(complex0);
      complex1.multiply(30);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-489.0), (-489.0));
      complex0.acos();
      Complex complex1 = complex0.tan();
      Object object0 = new Object();
      Complex complex2 = Complex.valueOf(978.0005112477111);
      complex1.sqrt();
      Complex complex3 = complex2.tanh();
      complex3.equals(complex2);
      complex1.multiply(52.68617883019345);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-489.0), (-489.0));
      Complex complex1 = complex0.ONE.acos();
      complex1.sqrt();
      complex1.equals(complex1);
      Complex complex2 = new Complex((-683.101048869509));
      complex2.ZERO.reciprocal();
      complex0.readResolve();
      Complex complex3 = new Complex((-1.0), Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.conjugate();
      complex4.NaN.tan();
      complex0.pow((-683.101048869509));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(784.6843822, 784.6843822);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex0.ZERO.exp();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.createComplex(784.6843822, 784.6843822);
      Complex complex6 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex7 = complex2.divide(complex6);
      complex7.NaN.cos();
      Complex complex8 = complex2.reciprocal();
      Complex complex9 = complex8.add(complex3);
      complex6.add(Double.POSITIVE_INFINITY);
      Object object0 = new Object();
      Complex complex10 = Complex.valueOf(784.6843822);
      complex9.add((-921.81));
      Object object1 = new Object();
      complex10.equals(object1);
      complex5.readResolve();
      Complex complex11 = Complex.valueOf(784.6843822);
      complex10.equals(complex11);
      complex0.multiply(2415);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      Complex complex1 = complex0.acos();
      complex0.tan();
      complex0.tan();
      try { 
        complex1.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2457.8524, 2457.8524);
      complex0.divide(1241.8493896222706);
      Complex complex1 = Complex.valueOf(1112.674872153829, 1241.8493896222706);
      complex1.conjugate();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex((-489.0), (-489.0));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.createComplex((-489.0), (-489.0));
      Complex complex3 = new Complex((-2219.87059467522));
      Complex complex4 = complex0.add(complex3);
      complex4.INF.divide(complex3);
      complex4.equals(complex1);
      Complex complex5 = Complex.valueOf((-7.2320832603152), (-7.2320832603152));
      complex2.sqrt();
      complex5.getImaginary();
      complex2.tan();
      Complex complex6 = new Complex((-7.2320832603152));
      Complex complex7 = Complex.I;
      Complex complex8 = Complex.ZERO;
      Complex complex9 = new Complex(6753.0, (-489.0));
      complex4.reciprocal();
      Complex complex10 = complex9.tan();
      complex1.cosh();
      complex6.divide(complex7);
      complex9.reciprocal();
      Complex complex11 = Complex.INF;
      Complex complex12 = complex10.add(complex11);
      Complex complex13 = Complex.ONE;
      complex5.getReal();
      Complex complex14 = Complex.NaN;
      complex14.multiply(complex6);
      Complex complex15 = complex8.subtract((-7.2320832603152));
      complex12.cos();
      complex15.sqrt();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.INF.subtract(5223.159063829237);
      complex1.ONE.cos();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex3.NaN.sqrt();
      complex0.getImaginary();
      complex3.tan();
      Complex complex4 = complex3.multiply(6753.0);
      Complex complex5 = Complex.ZERO;
      complex5.NaN.acos();
      Complex complex6 = complex5.reciprocal();
      complex1.isNaN();
      Complex complex7 = Complex.ONE;
      Complex complex8 = Complex.INF;
      Complex complex9 = complex2.pow(complex8);
      Complex complex10 = Complex.ONE;
      Complex complex11 = Complex.ZERO;
      complex11.multiply(0.0);
      complex8.getReal();
      Complex complex12 = complex0.reciprocal();
      Complex complex13 = complex6.tanh();
      complex13.ONE.add(2153.49);
      complex4.divide(complex13);
      Complex complex14 = new Complex(6753.0, (-1869.7486478293717));
      complex14.pow(complex2);
      complex12.add(complex10);
      complex9.sinh();
      Complex.valueOf(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3963.766594993977));
      Complex complex1 = complex0.acos();
      complex0.reciprocal();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex2.log();
      Complex complex5 = complex3.cos();
      complex4.createComplex(20.0, (-4454.4037323400125));
      complex1.multiply(complex0);
      complex5.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tan();
      Complex.valueOf((-524.12421326), (-15.696090608171861));
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex0.INF.add((-425.52177));
      complex3.NaN.nthRoot(2765);
      Complex complex4 = complex2.ONE.pow(complex3);
      complex0.abs();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex5.ONE.tan();
      complex1.getReal();
      Complex complex7 = complex6.acos();
      complex2.reciprocal();
      Complex complex8 = complex0.tan();
      complex4.cosh();
      complex8.divide(complex7);
      complex6.reciprocal();
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex8.add(complex9);
      Complex complex11 = Complex.ONE;
      complex10.getReal();
      complex5.multiply(complex3);
      complex0.subtract((-425.52177));
      complex1.cos();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(784.6843822);
      assertEquals(784.6843822, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      
      Complex complex1 = Complex.valueOf(784.6843822);
      Complex complex2 = complex0.ZERO.subtract(complex1);
      Complex complex3 = complex0.ZERO.exp();
      complex3.getArgument();
      Complex complex4 = Complex.valueOf(784.6843822);
      complex4.negate();
      complex1.toString();
      Complex complex5 = complex4.log();
      Complex complex6 = new Complex(0.0);
      complex6.divide(489.0);
      complex5.acos();
      Complex.valueOf((-623.541736992517));
      Complex complex7 = complex6.asin();
      Complex complex8 = Complex.I;
      Complex complex9 = complex5.divide((-623.541736992517));
      complex5.log();
      complex2.readResolve();
      complex2.multiply(complex4);
      complex0.acos();
      complex7.abs();
      Complex complex10 = Complex.ZERO;
      Complex complex11 = Complex.valueOf((-3398.383137513), 0.0);
      complex11.negate();
      Complex complex12 = complex9.conjugate();
      Complex complex13 = Complex.valueOf((-736.6), (-615728.5796685956));
      complex13.cosh();
      complex12.log();
      complex5.sinh();
      complex9.negate();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.tanh();
      complex0.INF.subtract(5223.159063829237);
      complex1.ONE.cos();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      Complex complex3 = complex2.NaN.sqrt();
      complex0.getImaginary();
      Complex complex4 = complex2.tan();
      complex3.divide(complex0);
      complex1.negate();
      Complex.valueOf(6.751460509863465E-258, 5223.159063829237);
      Complex complex5 = Complex.valueOf((-3120.3744297));
      complex5.NaN.acos();
      complex4.isNaN();
      Complex complex6 = complex0.pow(complex5);
      Complex complex7 = new Complex(6.751460509863465E-258);
      complex4.sinh();
      complex6.multiply(6.751460509863465E-258);
      Complex.valueOf((-3120.3744297));
      complex7.getReal();
      complex1.reciprocal();
      Complex complex8 = complex6.tanh();
      Complex complex9 = Complex.NaN;
      complex8.divide(complex7);
      complex0.pow(complex8);
      Complex complex10 = complex2.add(complex3);
      complex1.sinh();
      complex10.createComplex((-3120.3744297), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = Complex.valueOf((-524.12421326), 0.0);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex1.add(1776.0);
      complex3.nthRoot(2765);
      Complex complex5 = complex4.pow(complex0);
      complex3.abs();
      complex1.reciprocal();
      complex4.tan();
      complex2.getReal();
      Complex complex6 = complex1.atan();
      Complex.valueOf(1776.0, 1.8905103E7);
      Complex complex7 = complex5.multiply(1497);
      complex2.getReal();
      complex6.subtract(complex4);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex3.sin();
      Complex.valueOf(1498.0, (-2268.739));
      Complex complex10 = complex7.add(6178.7568);
      complex9.equals(complex10);
      complex6.sqrt();
      complex3.ONE.sqrt();
      Complex complex11 = Complex.NaN;
      complex11.tanh();
      Object object0 = new Object();
      complex10.equals(object0);
      complex6.acos();
      complex9.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.abs();
      Complex complex1 = complex0.log();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.tanh();
      complex0.INF.subtract(5223.159063829237);
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex3.cos();
      complex2.getImaginary();
      complex1.sin();
      Complex complex5 = complex3.acos();
      complex4.getArgument();
      Complex complex6 = complex0.negate();
      complex6.toString();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex0.tan();
      complex3.getReal();
      Complex complex9 = complex8.atan();
      Complex.valueOf(-0.0, (-4004.700205));
      Complex complex10 = complex4.multiply(1171);
      complex6.getReal();
      Complex complex11 = complex6.subtract(complex4);
      Complex complex12 = Complex.ZERO;
      complex9.sin();
      Complex complex13 = Complex.valueOf(3366.37541, Double.POSITIVE_INFINITY);
      Complex complex14 = complex1.add(3828.8107861652);
      Complex complex15 = Complex.INF;
      complex13.equals(complex15);
      complex7.sqrt();
      complex14.tanh();
      complex5.equals((Object) null);
      complex11.acos();
      complex10.sqrt1z();
      complex3.createComplex(976.0, 3375.45582634);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tan();
      Complex.valueOf((-524.12421326), 0.0);
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex0.INF.add((-425.52177));
      complex3.NaN.nthRoot(2765);
      complex2.ONE.pow(complex3);
      complex0.abs();
      complex2.reciprocal();
      complex2.getReal();
      complex0.atan();
      Complex complex4 = Complex.valueOf(0.0, 20.0);
      complex1.multiply(2765);
      complex3.getReal();
      complex3.subtract(complex0);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.sin();
      complex4.add((-524.12421326));
      Complex.valueOf(7629.8066675);
      complex0.sqrt();
      Complex complex7 = Complex.I;
      complex6.equals(complex7);
      complex7.readResolve();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = Complex.valueOf((-524.12421326), 0.0);
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = complex0.INF.add((-425.52177));
      complex4.NaN.nthRoot(2765);
      complex3.ONE.pow(complex4);
      complex0.abs();
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex5.ONE.tan();
      Complex complex7 = complex2.tan();
      complex6.getReal();
      complex2.atan();
      Complex complex8 = Complex.valueOf(20.0, 0.0);
      Complex complex9 = complex5.multiply(2765);
      Complex complex10 = Complex.NaN;
      complex10.getReal();
      Complex complex11 = Complex.valueOf(Double.NaN);
      complex11.subtract(complex1);
      Complex complex12 = Complex.ZERO;
      complex10.sin();
      complex11.add(3196.45);
      complex8.equals(complex9);
      complex10.sqrt();
      complex4.tanh();
      Object object0 = new Object();
      complex7.equals(object0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = Complex.valueOf((-524.12421326), 0.0);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex3.add(1274.471736387615);
      complex1.nthRoot(2765);
      Complex complex5 = complex2.pow(complex3);
      complex4.abs();
      complex4.reciprocal();
      complex4.tan();
      complex3.getReal();
      complex3.atan();
      Complex complex6 = Complex.valueOf(1378.0360654845997, (-524.12421326));
      Complex complex7 = complex0.multiply(2765);
      complex6.getReal();
      complex5.subtract(complex7);
      Complex complex8 = Complex.ZERO;
      Complex complex9 = Complex.ONE;
      Complex complex10 = complex9.sin();
      Complex complex11 = complex10.add(522.357178564886);
      complex0.equals(complex11);
      Complex.valueOf(1274.471736387615);
      complex9.sqrt();
      complex3.tanh();
      complex10.equals((Object) null);
      complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-489.0), (-489.0));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(84.9193, 84.9193);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.I.subtract(206.472);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.INF.asin();
      Complex complex6 = complex1.ONE.multiply(complex5);
      Complex complex7 = complex6.ZERO.sqrt1z();
      Complex complex8 = complex7.ONE.acos();
      Complex complex9 = complex8.ONE.pow(206.472);
      Complex complex10 = complex4.tan();
      Complex complex11 = complex1.cos();
      Complex complex12 = complex11.ONE.multiply(complex6);
      complex12.INF.getArgument();
      complex7.INF.sinh();
      complex1.ONE.pow(complex0);
      Complex.valueOf(84.9193);
      Complex complex13 = complex0.ZERO.sinh();
      complex11.equals("NOT_POWER_OF_TWO_CONSIDER_PADDING");
      complex10.acos();
      complex13.createComplex(Double.NaN, 84.9193);
      Complex complex14 = complex13.conjugate();
      Complex complex15 = complex9.sin();
      complex15.ZERO.sinh();
      Complex.valueOf(84.9193, 2.5450911557068313E-284);
      complex0.abs();
      complex2.NaN.tan();
      complex14.divide(1.3937096689052236E65);
      complex3.pow(complex11);
      complex12.equals("");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-5.678896695157704E-23), (-5.678896695157704E-23));
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex1.subtract(145.0);
      complex3.ONE.conjugate();
      Complex complex4 = complex2.acos();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex5.ZERO.atan();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex7 = complex5.asin();
      complex5.ZERO.tan();
      complex7.I.acos();
      Complex complex8 = complex4.createComplex(4115.02780828, 4115.02780828);
      complex6.INF.abs();
      complex2.cosh();
      Complex complex9 = complex4.exp();
      complex9.I.conjugate();
      Complex complex10 = complex6.sqrt();
      complex10.INF.pow(complex2);
      Complex.valueOf((-1827.34368181), (-1156.7964));
      complex8.cos();
      complex8.cos();
      complex8.asin();
      complex8.getImaginary();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex(84.9193, 84.9193);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.pow(0.0);
      Complex complex3 = Complex.valueOf(1575.2080302691866, 1575.2080302691866);
      complex0.equals(complex1);
      complex0.abs();
      complex0.getReal();
      Complex complex4 = complex1.sin();
      complex2.readResolve();
      complex4.ZERO.getArgument();
      Complex complex5 = complex0.ZERO.sinh();
      Complex complex6 = complex2.tan();
      Complex complex7 = complex6.I.exp();
      Complex complex8 = complex7.ZERO.reciprocal();
      Complex complex9 = complex1.I.divide(complex8);
      complex3.getReal();
      complex9.atan();
      Complex.valueOf((-666.77), (-3.0));
      Complex complex10 = complex5.multiply((-279));
      complex0.getReal();
      Complex complex11 = new Complex(1575.2080302691866);
      complex11.subtract(complex6);
      Complex complex12 = Complex.ZERO;
      complex6.sin();
      complex10.add(1575.2080302691866);
      Object object0 = complex4.readResolve();
      complex3.equals(object0);
      complex3.sqrt();
      complex0.tanh();
      complex2.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.multiply(1.5503435134887695);
      Complex complex2 = complex1.I.add(complex0);
      complex0.getImaginary();
      Complex complex3 = complex0.I.reciprocal();
      complex1.INF.divide(complex0);
      Complex complex4 = complex3.cos();
      complex0.getImaginary();
      Complex complex5 = complex2.I.sin();
      complex4.ONE.acos();
      complex5.NaN.getArgument();
      Complex complex6 = complex0.negate();
      complex2.toString();
      complex2.log();
      complex6.I.subtract(Double.NaN);
      Complex complex7 = complex0.divide((-1085.0739));
      complex7.acos();
      complex5.ZERO.asin();
      Complex complex8 = complex4.divide(669.0170479);
      Complex complex9 = complex8.log();
      complex7.readResolve();
      complex5.multiply(complex9);
      complex2.acos();
      complex5.abs();
      complex7.negate();
      Complex complex10 = complex9.cosh();
      complex1.asin();
      complex9.log();
      Complex complex11 = complex2.sinh();
      complex6.getField();
      complex0.sqrt1z();
      complex10.negate();
      complex11.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex((-43.9421475355777), 1.2827720642089844);
      complex0.toString();
      Complex complex1 = Complex.valueOf((-43.9421475355777));
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.atan();
      complex3.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.tanh();
      Complex complex2 = complex0.INF.subtract(5223.159063829237);
      Complex complex3 = complex1.ONE.cos();
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex4.cos();
      complex3.getImaginary();
      Complex complex6 = complex1.sin();
      Complex complex7 = complex4.acos();
      complex5.getArgument();
      Complex complex8 = complex0.negate();
      complex8.toString();
      Complex complex9 = complex5.log();
      complex9.divide(5223.159063829237);
      complex0.acos();
      Complex complex10 = Complex.valueOf((-623.541736992517));
      complex10.asin();
      Complex complex11 = Complex.I;
      Complex complex12 = complex11.divide(669.0170479);
      complex11.log();
      complex6.readResolve();
      Complex complex13 = complex10.multiply(complex2);
      complex12.acos();
      complex12.abs();
      Complex complex14 = Complex.ZERO;
      Complex complex15 = complex14.negate();
      complex15.I.conjugate();
      complex9.cosh();
      complex0.log();
      complex7.sinh();
      complex13.sqrt1z();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.multiply(1.5503435134887695);
      Complex complex2 = complex0.add(complex0);
      complex0.getImaginary();
      Complex complex3 = complex0.I.reciprocal();
      complex1.INF.divide(complex0);
      Complex complex4 = complex3.cos();
      complex0.getImaginary();
      Complex complex5 = complex2.I.sin();
      complex4.ONE.acos();
      complex5.NaN.getArgument();
      Complex complex6 = complex0.negate();
      complex2.toString();
      complex2.log();
      Complex complex7 = complex0.divide((-1085.0739));
      complex7.acos();
      complex5.ZERO.asin();
      Complex complex8 = new Complex((-1085.0739), Double.NaN);
      Complex complex9 = complex8.log();
      complex7.readResolve();
      complex5.multiply(complex9);
      complex2.acos();
      complex5.abs();
      complex7.negate();
      Complex complex10 = complex9.cosh();
      complex9.log();
      complex2.sinh();
      complex6.getField();
      complex0.sqrt1z();
      complex10.negate();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tan();
      Complex.valueOf((-524.12421326), 0.0);
      Complex complex2 = complex0.I.sqrt1z();
      Complex complex3 = complex0.INF.add((-425.52177));
      complex3.NaN.nthRoot(2765);
      Complex complex4 = complex2.ONE.pow(complex3);
      complex0.abs();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = complex5.ONE.tan();
      complex1.getReal();
      complex0.atan();
      Complex.valueOf(0.0);
      Complex complex7 = Complex.INF;
      complex3.isInfinite();
      Complex complex8 = new Complex((-425.52177), 0.0);
      Complex complex9 = complex2.pow(complex8);
      Complex complex10 = complex1.sinh();
      Complex complex11 = Complex.NaN;
      complex11.multiply((-425.52177));
      complex6.getReal();
      complex9.reciprocal();
      complex10.tanh();
      Complex complex12 = complex9.divide(complex4);
      complex12.pow(complex7);
      complex1.add(complex0);
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex((-489.0), (-489.0));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.createComplex((-489.0), (-489.0));
      Complex complex3 = new Complex((-2219.87059467522));
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.INF.divide(complex3);
      complex4.equals(complex1);
      Complex complex6 = complex1.acos();
      complex5.getArgument();
      Complex complex7 = complex5.sinh();
      Complex complex8 = complex6.tan();
      Complex complex9 = complex8.exp();
      Complex complex10 = complex8.reciprocal();
      complex4.divide(complex7);
      complex8.negate();
      Complex.valueOf(Double.NaN, (-2219.87059467522));
      Complex complex11 = Complex.valueOf((-3120.3744297));
      complex11.isNaN();
      complex6.pow(complex10);
      Complex complex12 = new Complex((-2219.87059467522));
      complex12.sinh();
      complex2.multiply(2131.133653028);
      Complex complex13 = Complex.valueOf(20.0);
      complex13.getReal();
      complex9.reciprocal();
      Complex complex14 = complex11.tanh();
      Complex complex15 = Complex.NaN;
      complex15.divide(complex14);
      complex7.pow(complex10);
      complex0.add(complex9);
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.689237594604492, 2.689237594604492);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.pow(0.0);
      Complex complex3 = complex1.ONE.multiply(complex0);
      Complex complex4 = complex0.NaN.pow(complex1);
      Complex complex5 = Complex.ONE;
      complex5.sqrt1z();
      Complex complex6 = complex3.multiply(complex5);
      complex6.divide(2597.0);
      complex1.getArgument();
      Complex complex7 = complex6.createComplex(1636.66, 6.44741641521183E-102);
      Complex complex8 = complex0.cos();
      complex1.atan();
      Complex complex9 = complex1.add(complex2);
      Complex.valueOf(2.689237594604492);
      complex9.pow(0.0);
      complex7.acos();
      complex7.negate();
      Complex complex10 = complex9.sqrt();
      complex9.pow(complex2);
      Complex complex11 = complex4.acos();
      complex10.isNaN();
      complex5.subtract(587.4);
      complex3.getReal();
      complex4.tan();
      Complex complex12 = complex8.negate();
      complex12.conjugate();
      Complex complex13 = Complex.valueOf(20.0, 2.689237594604492);
      complex11.add(complex13);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      int int0 = Integer.MAX_VALUE;
      // Undeclared exception!
      complex0.nthRoot(int0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = new Complex((-489.0), (-489.0));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.createComplex((-489.0), (-489.0));
      Complex complex3 = new Complex((-2219.87059467522));
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.INF.divide(complex3);
      complex4.equals(complex1);
      Complex complex6 = complex1.acos();
      complex3.INF.toString();
      complex2.INF.subtract(complex6);
      Complex complex7 = complex3.reciprocal();
      Complex complex8 = complex1.tan();
      Complex complex9 = Complex.valueOf((-2219.87059467522), (-489.0));
      Complex complex10 = complex8.divide(complex2);
      complex5.reciprocal();
      complex6.add(complex4);
      complex9.sinh();
      Complex complex11 = Complex.ZERO;
      complex11.exp();
      complex6.sinh();
      Complex complex12 = Complex.valueOf(2.1855982620791914, (-4559.845801));
      complex12.sin();
      complex4.createComplex(2.1855982620791914, (-4559.845801));
      Complex complex13 = Complex.valueOf((-3301.0));
      complex10.pow(complex13);
      try { 
        complex7.nthRoot((-2006));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,006
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2457.8524, 2457.8524);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.689237594604492, 2.689237594604492);
      Complex complex1 = Complex.ONE;
      complex1.pow(0.0);
      Complex complex2 = complex1.ONE.multiply(complex0);
      Complex complex3 = complex0.NaN.pow(complex1);
      Complex complex4 = complex1.sin();
      Complex complex5 = complex4.pow(0.0);
      Complex complex6 = complex0.cosh();
      complex6.ONE.divide((-1.3940903373095247E-8));
      complex2.sin();
      Complex complex7 = complex3.sinh();
      complex4.sqrt();
      Complex complex8 = complex0.add(0.0);
      Complex complex9 = complex2.multiply(complex7);
      complex9.I.divide(2754.253471552);
      complex9.nthRoot(37);
      complex1.toString();
      complex8.divide(2.689237594604492);
      complex5.subtract(complex2);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2600.612173927268);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(84.9193, 84.9193);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.pow(0.0);
      Complex complex3 = Complex.valueOf(1575.2080302691866, 1575.2080302691866);
      complex0.equals(complex1);
      complex0.abs();
      complex0.getReal();
      Complex complex4 = complex1.sin();
      Complex complex5 = (Complex)complex2.readResolve();
      Complex complex6 = complex3.add(complex1);
      complex1.pow(1575.2080302691866);
      Complex complex7 = complex2.log();
      Complex complex8 = complex0.sinh();
      Complex complex9 = Complex.valueOf(0.0);
      complex7.subtract(complex9);
      complex8.divide(complex4);
      complex3.readResolve();
      complex7.isInfinite();
      complex9.multiply(1148);
      complex6.divide(complex8);
      complex0.divide(complex5);
      complex8.hashCode();
      complex5.nthRoot(1197);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex1 = Complex.valueOf(6.283185307179586);
      complex1.equals(complex0);
      Complex complex2 = complex1.conjugate();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2446.40282356876, 2446.40282356876);
      Object object0 = complex0.readResolve();
      ((Complex) object0).INF.sin();
      complex0.equals(object0);
      complex0.multiply(1798.0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-489.87742708917784), (-489.87742708917784));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = Complex.valueOf((-524.12421326), 0.0);
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = complex0.INF.add((-425.52177));
      complex4.NaN.nthRoot(2765);
      complex3.ONE.pow(complex4);
      complex0.abs();
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = complex5.ONE.tan();
      complex1.getReal();
      Complex complex7 = complex0.atan();
      Complex complex8 = Complex.valueOf((-425.52177), (-425.52177));
      Complex complex9 = complex7.INF.multiply(2765);
      complex8.getReal();
      Complex complex10 = complex0.subtract(complex2);
      Complex complex11 = Complex.ZERO;
      complex11.NaN.sin();
      Complex complex12 = Complex.valueOf((-425.52177), (-425.52177));
      complex12.add((double) 2765);
      complex4.equals("");
      complex9.sqrt();
      complex2.tanh();
      complex6.equals("");
      complex8.acos();
      complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(473.8974180387, (-1075.0));
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.cos();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-489.0), (-489.0));
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = new Complex(1.0, 2777.47998);
      Complex complex1 = complex0.atan();
      complex1.ONE.abs();
      complex1.divide(complex0);
      Complex complex2 = complex1.I.asin();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex1.NaN.pow(complex3);
      complex3.sinh();
      Complex complex5 = complex4.ONE.multiply(0);
      Complex complex6 = complex0.pow(complex1);
      complex6.add(complex4);
      Complex complex7 = complex4.sin();
      Complex complex8 = complex0.negate();
      complex7.ONE.divide(complex1);
      Complex complex9 = complex4.negate();
      complex1.exp();
      complex9.ZERO.subtract(complex8);
      complex9.I.multiply(0);
      Complex complex10 = complex2.multiply(2777.47998);
      complex1.ONE.sqrt();
      complex10.ZERO.sin();
      complex7.abs();
      complex4.equals(complex9);
      complex8.conjugate();
      complex4.ZERO.multiply(379);
      complex5.tan();
      try { 
        complex8.nthRoot((-669));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -669
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(536.4435861, 536.4435861);
      complex0.hashCode();
      complex0.NaN.sin();
      complex0.isNaN();
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.INF;
      complex1.ZERO.subtract(complex2);
      complex1.getArgument();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.divide(0.0);
      Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.valueOf(0.0, 20.0);
      Complex complex2 = complex0.I.pow(complex1);
      Complex complex3 = complex2.I.divide((-1.0));
      Complex complex4 = complex2.INF.acos();
      complex4.exp();
      complex4.I.getArgument();
      Complex.valueOf(20.0, (-1692.7772548));
      complex2.INF.multiply(0.0);
      Complex complex5 = complex0.createComplex((-1918.381511045688), (-1918.381511045688));
      Complex complex6 = complex5.exp();
      Complex.valueOf((-4815.4021), (-1.0));
      complex6.I.sin();
      Complex complex7 = complex4.sqrt1z();
      Complex complex8 = complex1.negate();
      Complex complex9 = complex8.I.multiply(Double.POSITIVE_INFINITY);
      Complex complex10 = complex3.atan();
      complex4.createComplex((-1918.381511045688), 0.0);
      complex10.cosh();
      complex5.negate();
      complex5.subtract((-1719.683826686));
      complex10.cosh();
      complex10.log();
      complex0.isNaN();
      complex9.getReal();
      complex7.getArgument();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.NaN.pow(0.0);
      Complex complex2 = complex0.log();
      Complex complex3 = complex0.ONE.multiply(0.0);
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = complex4.ONE.multiply(0.0);
      complex5.hashCode();
      List<Complex> list0 = complex3.nthRoot(737);
      complex1.equals(list0);
      Complex complex6 = complex4.sinh();
      complex1.ZERO.asin();
      Complex complex7 = complex6.ZERO.log();
      complex7.I.add(0.0);
      Complex.valueOf(5.6208949382936426E-8);
      complex6.readResolve();
      Complex complex8 = Complex.NaN;
      complex2.equals(complex8);
      Complex.valueOf((-1485.353));
      complex2.add(complex8);
      complex1.pow(20.0);
      complex8.multiply(737);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(1.6600303649902344, 1.6600303649902344);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex0.INF.conjugate();
      complex1.ONE.subtract((-1736.511491));
      Complex complex4 = complex2.ONE.cos();
      Complex complex5 = Complex.INF;
      complex0.multiply(complex5);
      Complex complex6 = complex4.divide(1.6600303649902344);
      complex4.I.getArgument();
      Complex complex7 = complex1.createComplex(1.6600303649902344, 1.6600303649902344);
      complex6.INF.cos();
      complex7.ONE.atan();
      Complex complex8 = complex1.ZERO.add(complex6);
      Complex.valueOf(2541.0);
      Complex complex9 = complex1.pow(2233.09701581713);
      Complex complex10 = complex6.I.acos();
      complex9.NaN.negate();
      complex7.sqrt();
      Complex complex11 = complex8.pow(complex4);
      Complex complex12 = complex11.acos();
      complex4.isNaN();
      complex3.subtract(0.6734226942062378);
      complex10.getReal();
      complex7.tan();
      complex2.negate();
      complex12.conjugate();
      complex2.add(complex8);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.ONE.add(complex2);
      complex2.INF.cos();
      complex3.NaN.cos();
      complex3.NaN.toString();
      complex1.I.negate();
      Complex complex5 = complex0.log();
      complex5.NaN.reciprocal();
      double double0 = (-732.91756809569);
      complex4.ONE.multiply((-732.91756809569));
      complex5.NaN.tan();
      Complex complex6 = complex5.atan();
      Complex complex7 = complex6.ONE.sqrt1z();
      complex7.NaN.subtract(1297.7037762);
      complex7.NaN.conjugate();
      complex7.ONE.getField();
      int int0 = (-1225);
      try { 
        complex1.nthRoot((-1225));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,225
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex((-489.0), (-489.0));
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.createComplex((-489.0), (-489.0));
      Complex complex3 = new Complex((-2219.87059467522));
      Complex complex4 = complex0.add(complex3);
      complex4.INF.divide(complex3);
      complex4.equals(complex1);
      Complex complex5 = complex1.acos();
      complex3.INF.toString();
      complex2.INF.subtract(complex5);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex2.multiply(complex6);
      Complex complex8 = Complex.valueOf((-2219.87059467522));
      complex8.ONE.multiply(1719.20757214554);
      Complex complex9 = complex2.createComplex(1719.20757214554, 1719.20757214554);
      complex1.pow((-489.0));
      Complex complex10 = complex9.multiply(complex4);
      Complex complex11 = complex8.reciprocal();
      complex6.exp();
      complex2.INF.negate();
      complex7.getField();
      Complex complex12 = complex11.multiply((-485));
      complex12.ZERO.reciprocal();
      complex10.multiply((-485));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.multiply(1.5503435134887695);
      Complex complex2 = complex1.I.add(complex0);
      complex0.getImaginary();
      Complex complex3 = complex0.I.reciprocal();
      complex1.INF.divide(complex0);
      Complex complex4 = complex3.cos();
      complex0.getImaginary();
      Complex complex5 = complex2.I.sin();
      complex4.ONE.acos();
      complex5.NaN.getArgument();
      Complex complex6 = complex0.negate();
      complex2.toString();
      complex2.log();
      Complex complex7 = complex0.divide((-1085.0739));
      complex7.acos();
      complex5.ZERO.asin();
      Complex complex8 = complex4.divide(669.0170479);
      Complex complex9 = complex8.log();
      complex7.readResolve();
      complex5.multiply(complex9);
      complex2.acos();
      complex5.abs();
      complex7.negate();
      Complex complex10 = complex9.cosh();
      complex9.log();
      complex2.sinh();
      complex6.getField();
      complex0.sqrt1z();
      complex10.negate();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = new Complex(3371.78850360688);
      complex0.I.readResolve();
      Complex complex1 = complex0.multiply(1);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex2.ZERO.exp();
      complex4.cos();
      Complex complex5 = complex0.pow(3371.78850360688);
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex2.multiply(0.0);
      Complex complex8 = complex1.conjugate();
      complex8.INF.pow(complex6);
      Complex complex9 = complex3.NaN.pow((-20.0));
      Complex complex10 = complex3.multiply(1);
      complex8.sin();
      Complex complex11 = complex9.NaN.tanh();
      complex3.INF.conjugate();
      complex10.toString();
      Complex complex12 = complex10.createComplex(3371.78850360688, 244.270489374);
      complex12.I.nthRoot(1);
      Complex complex13 = complex7.sin();
      complex13.ZERO.exp();
      complex9.isNaN();
      complex2.nthRoot(1);
      Complex complex14 = complex1.multiply((double) 1);
      complex14.ZERO.getField();
      complex2.ZERO.exp();
      complex11.getArgument();
      complex0.log();
      complex2.sqrt1z();
      Complex.valueOf(0.0, 3371.78850360688);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4733029698334834E-8);
      complex0.abs();
      Complex complex1 = complex0.INF.subtract(1.4733029698334834E-8);
      Complex complex2 = complex1.conjugate();
      complex0.getImaginary();
      complex0.isInfinite();
      complex2.add(complex0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(602);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.conjugate();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = new Complex(7.343125023595576E-7, 5.112471765187365E-4);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.acos();
      complex2.tan();
      Object object0 = new Object();
      Complex complex3 = Complex.valueOf(7.343125023595576E-7);
      complex0.sqrt();
      complex1.tanh();
      Complex complex4 = Complex.valueOf(7.753690709912764E-96, 5.112471765187365E-4);
      complex4.equals(complex2);
      complex3.multiply(0.835458955812271);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.sin();
      Object object0 = new Object();
      complex1.equals(object0);
      complex0.multiply(473.8974180387);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(7.753690709912764E-96, 488.9631374693826);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.tan();
      complex0.equals(complex2);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.multiply(complex0);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.exp();
      Complex complex2 = complex1.ZERO.conjugate();
      Complex complex3 = complex0.ONE.createComplex(3835.298645985774, 3835.298645985774);
      complex3.INF.toString();
      complex2.NaN.readResolve();
      Complex complex4 = complex0.sqrt();
      Complex.valueOf(792.8988);
      complex4.ONE.log();
      complex3.ZERO.createComplex(0.0, (-1685.13738425109));
      Complex.valueOf(0.0, 1.088674545288086);
      complex1.readResolve();
      complex0.toString();
      Complex complex5 = complex2.cosh();
      complex2.NaN.exp();
      Complex complex6 = complex5.sqrt();
      Complex complex7 = complex6.I.atan();
      complex7.NaN.getArgument();
      Complex complex8 = complex4.sinh();
      complex4.ONE.sin();
      complex0.divide(complex3);
      complex8.toString();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.multiply(0.0);
      complex0.abs();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.I.subtract(complex0);
      complex2.I.multiply(complex0);
      complex1.log();
      Complex complex4 = complex2.cos();
      complex4.ONE.createComplex(0.0, 0.0);
      complex4.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.689237594604492, 2.689237594604492);
      Complex complex1 = Complex.ONE;
      complex1.pow(0.0);
      complex1.ONE.multiply(complex0);
      complex0.NaN.pow(complex1);
      complex0.ONE.sqrt();
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.ONE.tanh();
      complex4.getField();
      Complex complex6 = complex3.sqrt1z();
      complex6.nthRoot(1154);
      complex4.getImaginary();
      Complex complex7 = complex2.tanh();
      complex7.INF.subtract(2.689237594604492);
      complex3.readResolve();
      Complex complex8 = complex7.sqrt1z();
      complex7.getField();
      complex8.exp();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.add((double) 412);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.pow(1562.53831504);
      Complex complex1 = complex0.divide(1.0);
      complex0.abs();
      Complex complex2 = Complex.valueOf(1.0, 1.0);
      Complex complex3 = complex1.INF.atan();
      complex3.INF.acos();
      Complex complex4 = complex0.add(0.0);
      complex2.cos();
      Complex complex5 = complex4.I.sqrt();
      Complex complex6 = complex5.ZERO.multiply(complex0);
      complex6.ZERO.negate();
      complex1.sin();
      complex2.ONE.conjugate();
      Complex complex7 = complex1.add(complex4);
      Complex complex8 = complex2.divide(0.0);
      Complex complex9 = complex8.tanh();
      complex9.INF.tanh();
      complex7.I.multiply(complex0);
      complex2.ZERO.getArgument();
      Complex complex10 = complex8.createComplex(6.283185307179586, 836.0);
      complex2.multiply(0);
      complex7.getField();
      complex1.nthRoot(1086);
      Complex complex11 = complex5.reciprocal();
      complex11.tanh();
      complex2.acos();
      complex7.exp();
      complex10.getImaginary();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1303.884502549453), (-783.8106));
      complex0.multiply((-2726));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.ZERO.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(8.074507236705857E-73);
      Complex complex1 = complex0.INF.exp();
      complex0.ONE.divide(complex1);
      complex1.readResolve();
      Complex complex2 = complex0.asin();
      complex0.ZERO.sqrt1z();
      complex2.ZERO.readResolve();
      complex2.getReal();
      Complex complex3 = complex1.multiply(complex2);
      Complex complex4 = complex2.sin();
      complex4.exp();
      complex3.createComplex((-1009.4694200499), 2049.0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(1714.83801771, Double.NaN);
      Complex.valueOf((-874.8677));
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = new Complex(2447.4563416574915);
      Complex complex1 = complex0.INF.sin();
      complex1.isNaN();
      Complex complex2 = Complex.I;
      Complex complex3 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = new Complex(571.389, 571.389);
      Complex complex1 = complex0.exp();
      complex1.ONE.tanh();
      complex1.I.negate();
      complex1.isNaN();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.atan();
      complex1.subtract((-8.305334708631055E-8));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = Complex.valueOf((-524.12421326), 0.0);
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = complex0.INF.add((-425.52177));
      complex4.NaN.nthRoot(2765);
      Complex complex5 = complex3.ONE.pow(complex4);
      complex0.abs();
      Complex complex6 = complex3.reciprocal();
      complex6.ONE.tan();
      complex1.getReal();
      Complex complex7 = complex0.atan();
      Complex complex8 = Complex.valueOf((-425.52177), (-425.52177));
      complex7.INF.multiply(2765);
      complex8.getReal();
      complex0.subtract(complex2);
      Complex complex9 = Complex.ZERO;
      complex9.NaN.sin();
      complex7.NaN.add(0.0);
      complex8.equals(complex9);
      Complex complex10 = complex7.sqrt();
      complex10.tanh();
      complex6.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.add(2198.3695193915337);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply((-3963.766594993977));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex.valueOf(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.hashCode();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2446.40282356876, 2446.40282356876);
      complex0.INF.sin();
      complex0.equals(complex0);
      complex0.multiply(2446.40282356876);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      complex0.I.multiply(complex1);
      Complex complex2 = complex0.INF.cosh();
      Complex complex3 = complex0.ONE.createComplex(555.9229, 2103.0);
      Complex complex4 = complex2.INF.pow(2103.0);
      Complex complex5 = complex0.ZERO.multiply(374.562);
      Complex complex6 = complex5.ONE.cosh();
      Complex complex7 = complex0.subtract((-1324.538882769));
      complex7.I.divide(complex6);
      complex7.add(complex6);
      complex5.ZERO.asin();
      Complex complex8 = complex6.INF.cosh();
      complex8.NaN.conjugate();
      Complex complex9 = complex0.I.log();
      Complex complex10 = complex6.multiply(2668.3679965692672);
      Complex complex11 = complex10.negate();
      Complex complex12 = complex9.createComplex((-3275.0), (-3275.0));
      complex12.cos();
      complex3.abs();
      complex4.exp();
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.tan();
      Complex complex2 = Complex.valueOf((-524.12421326), 0.0);
      Complex complex3 = complex0.I.sqrt1z();
      Complex complex4 = complex0.INF.add((-425.52177));
      complex4.NaN.nthRoot(2765);
      complex3.ONE.pow(complex4);
      complex0.abs();
      Complex complex5 = complex3.reciprocal();
      complex5.ONE.tan();
      complex1.getReal();
      Complex complex6 = complex0.atan();
      Complex complex7 = Complex.valueOf((-425.52177), (-425.52177));
      Complex complex8 = complex6.INF.multiply(2765);
      complex7.getReal();
      complex0.subtract(complex2);
      Complex complex9 = Complex.ZERO;
      complex9.NaN.sin();
      complex8.add(3670.2580073);
      complex9.equals(complex6);
      Complex.valueOf((-425.52177));
      complex3.sqrt();
      complex5.tanh();
      complex3.equals(complex7);
      complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.reciprocal();
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cos();
      complex1.NaN.atan();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.INF.multiply(complex2);
      complex0.NaN.getField();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex4.atan();
      Complex.valueOf(2924.8284821293);
      complex0.sinh();
      Complex complex6 = complex5.tanh();
      complex1.getField();
      Complex complex7 = new Complex(20.0, (-958.59483344));
      complex7.sqrt1z();
      complex0.nthRoot(1154);
      complex0.getImaginary();
      complex6.tanh();
      complex7.subtract(1.0);
      Complex complex8 = Complex.ZERO;
      complex8.readResolve();
      complex5.sqrt1z();
      complex3.getField();
      complex0.exp();
      Complex complex9 = Complex.valueOf(2924.8284821293, (-1.0));
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = new Complex((-489.0), (-794.4036443));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.divide(complex1);
      complex1.equals(complex2);
      complex1.acos();
      complex1.toString();
      Complex complex3 = complex2.subtract(complex0);
      Complex complex4 = complex0.reciprocal();
      complex0.tan();
      Complex complex5 = complex4.acos();
      Complex complex6 = complex0.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex7 = new Complex((-428.0));
      Complex complex8 = complex2.divide(complex3);
      Complex complex9 = complex1.reciprocal();
      complex3.add(complex4);
      complex5.add((-428.0));
      Object object0 = new Object();
      Complex.valueOf(20.0);
      complex7.sqrt();
      complex3.tanh();
      complex9.add(Double.NaN);
      complex6.equals("(1.0, 0.0)");
      complex8.readResolve();
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = new Complex(1.142007304008196E26);
      Complex complex1 = complex0.NaN.asin();
      Complex complex2 = complex0.INF.sqrt();
      complex0.ONE.log();
      Complex complex3 = complex2.I.sqrt1z();
      complex3.sin();
      Complex complex4 = complex2.NaN.add(complex0);
      complex0.log();
      complex4.ONE.sinh();
      complex0.subtract(complex2);
      Complex complex5 = complex0.divide(complex3);
      complex5.NaN.readResolve();
      complex2.isInfinite();
      Complex complex6 = complex3.multiply((-563));
      complex6.NaN.divide(complex2);
      Complex complex7 = complex2.divide(complex4);
      complex1.hashCode();
      try { 
        complex7.nthRoot((-563));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -563
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.hashCode();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.reciprocal();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(13);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.sqrt();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(617.62024545, 617.62024545);
      Complex complex2 = Complex.valueOf((-20.0));
      Complex complex3 = complex2.NaN.cosh();
      complex3.I.acos();
      Complex complex4 = complex3.multiply(complex1);
      complex4.I.tan();
      complex0.INF.getArgument();
      Complex complex5 = Complex.valueOf(617.62024545);
      Complex complex6 = Complex.valueOf(2.7211316452521414E287);
      complex0.ZERO.getField();
      Complex complex7 = complex0.pow((-2558.460828012733));
      Complex complex8 = complex7.NaN.sinh();
      complex8.ZERO.multiply(complex7);
      complex8.NaN.sqrt();
      complex7.I.nthRoot(37);
      complex6.cosh();
      complex0.abs();
      Complex complex9 = complex5.subtract((-2558.460828012733));
      Complex complex10 = complex0.exp();
      complex9.hashCode();
      complex7.readResolve();
      complex10.hashCode();
      Complex complex11 = complex1.createComplex(37, 2.7211316452521414E287);
      complex1.multiply((-1));
      Complex.valueOf(2.1211390495300293, 0.0);
      complex11.divide((double) 37);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = new Complex((-1.1660424775832058E-7), (-135.71267004735594));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.subtract(1332.9929);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.abs();
      Complex complex1 = complex0.ZERO.sin();
      Complex complex2 = complex1.I.multiply(complex0);
      complex2.cosh();
      complex0.divide(1909.0);
      complex0.getArgument();
      complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = new Complex(1.28277206, Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(21.0);
      complex1.pow(complex0);
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply(1233);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1.2844402232816276E290, (-3147.76643));
      Complex complex2 = complex1.acos();
      complex2.tan();
      complex1.multiply((-3147.76643));
      Complex complex3 = Complex.ZERO;
      complex3.tanh();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.I.log();
      complex2.abs();
      complex2.hashCode();
      complex0.toString();
      Complex complex3 = complex1.conjugate();
      complex0.isNaN();
      complex0.getImaginary();
      complex3.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.819272221032373E34);
      complex0.I.sqrt();
      Complex complex1 = Complex.I;
      complex0.NaN.cos();
      Complex complex2 = complex0.ZERO.pow(complex1);
      Complex.valueOf(2.819272221032373E34);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.sin();
      Complex complex5 = complex4.ONE.pow(0.0);
      complex1.ONE.subtract(complex5);
      complex3.subtract(2.819272221032373E34);
      complex2.multiply(complex3);
      complex0.asin();
      complex5.divide(2.819272221032373E34);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = new Complex(84.9193, 84.9193);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.pow(0.0);
      Complex complex3 = Complex.valueOf(1575.2080302691866, 1575.2080302691866);
      complex0.equals(complex1);
      complex0.abs();
      complex0.getReal();
      Complex complex4 = complex1.sin();
      complex2.readResolve();
      complex4.ZERO.getArgument();
      complex0.ZERO.sinh();
      Complex complex5 = complex2.tan();
      Complex complex6 = complex5.I.exp();
      Complex complex7 = complex6.ZERO.reciprocal();
      Complex complex8 = complex1.I.divide(complex7);
      complex8.NaN.negate();
      Complex.valueOf(84.9193, 84.9193);
      Complex.valueOf((-1498.78871));
      complex2.isNaN();
      Complex complex9 = complex5.pow(complex1);
      Complex complex10 = complex5.sinh();
      Complex complex11 = complex2.multiply(Double.POSITIVE_INFINITY);
      complex0.getReal();
      complex3.reciprocal();
      complex2.tanh();
      complex2.divide(complex0);
      complex11.pow(complex9);
      complex7.add(complex5);
      complex10.sinh();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply(140);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.atan();
      complex1.NaN.abs();
      complex0.subtract(570.561027);
      complex1.readResolve();
      Complex complex2 = complex1.cos();
      complex2.hashCode();
      Complex complex3 = complex1.I.asin();
      Complex complex4 = new Complex(6.306233080977108E-5);
      complex4.ZERO.negate();
      complex1.add(complex4);
      Complex complex5 = complex0.divide(Double.NaN);
      complex5.ZERO.conjugate();
      Complex complex6 = complex1.pow(Double.NaN);
      complex6.NaN.conjugate();
      complex1.INF.sqrt1z();
      complex0.createComplex(570.561027, 570.561027);
      Complex complex7 = Complex.valueOf((-1.2319346292749103E98), (-1.2319346292749103E98));
      complex1.I.conjugate();
      complex7.ZERO.subtract(2.0);
      complex7.createComplex((-1.2319346292749103E98), Double.NaN);
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = Complex.valueOf(784.6843822, 304.4);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.I;
      complex2.getImaginary();
      complex0.tan();
      Complex complex3 = complex0.multiply((-1191.5459217));
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex0.acos();
      Complex complex6 = Complex.NaN;
      complex6.reciprocal();
      Complex complex7 = complex4.tan();
      complex5.cosh();
      Complex complex8 = complex2.divide(complex3);
      complex4.reciprocal();
      Complex complex9 = complex1.add(complex8);
      complex3.sinh();
      complex3.exp();
      complex5.sinh();
      complex4.sin();
      complex3.createComplex(1.0, 32.885408);
      complex9.pow(complex5);
      try { 
        complex7.nthRoot((-737));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -737
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = Complex.valueOf(6.283185307179586, 6.283185307179586);
      complex0.multiply(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(307);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex.valueOf((-1.0), (-1.0));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cos();
      complex1.NaN.atan();
      Complex complex2 = Complex.I;
      Complex complex3 = complex0.INF.multiply(complex2);
      complex0.NaN.getField();
      Complex complex4 = complex0.sin();
      Complex complex5 = complex0.pow(0.0);
      complex3.cosh();
      Complex complex6 = complex5.I.sin();
      complex6.NaN.sinh();
      complex5.INF.sqrt();
      Complex complex7 = complex0.add(0.0);
      Complex complex8 = complex7.INF.multiply(complex0);
      complex3.nthRoot(1422);
      complex5.getField();
      complex0.toString();
      complex2.divide(581.4493996876668);
      complex4.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.reciprocal();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = Complex.valueOf(784.6843822);
      Complex complex1 = Complex.valueOf(784.6843822);
      complex0.ZERO.subtract(complex1);
      complex0.ZERO.exp();
      Complex complex2 = complex0.tan();
      complex2.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = new Complex((-489.0), (-489.0));
      Complex complex1 = Complex.ONE;
      complex1.toString();
      Complex complex2 = Complex.I;
      complex1.subtract(complex2);
      complex1.hashCode();
      complex0.tan();
      complex1.multiply(316);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = new Complex((-1883.351546034411));
      Complex complex1 = complex0.multiply((-1883.351546034411));
      complex1.ZERO.getArgument();
      Complex complex2 = complex0.INF.acos();
      complex1.I.atan();
      complex0.ZERO.readResolve();
      complex0.NaN.pow(0.0);
      Complex complex3 = complex0.cosh();
      Complex complex4 = complex3.INF.sqrt();
      Complex complex5 = complex3.sin();
      complex5.INF.pow((-1883.351546034411));
      Complex complex6 = complex4.log();
      complex4.sin();
      complex3.isInfinite();
      complex2.NaN.reciprocal();
      complex0.negate();
      Complex complex7 = complex2.tanh();
      Complex complex8 = complex6.multiply(333.2174218146747);
      complex8.INF.subtract((-1883.351546034411));
      complex2.subtract(Double.POSITIVE_INFINITY);
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2141.9911839, 2141.9911839);
      complex0.I.hashCode();
      Complex complex1 = new Complex((-20.0));
      Complex complex2 = complex0.I.pow(complex1);
      complex0.readResolve();
      complex2.getReal();
      Complex complex3 = complex2.NaN.subtract(complex0);
      complex3.I.tan();
      Complex complex4 = complex0.NaN.pow(complex2);
      complex4.ONE.sinh();
      Complex complex5 = complex2.createComplex((-255.611651361232), (-3419.36));
      Complex complex6 = complex5.INF.subtract(2141.9911839);
      complex6.NaN.divide(complex5);
      Complex complex7 = Complex.valueOf(2141.9911839, Double.NaN);
      complex3.pow(complex7);
      complex0.abs();
      complex3.reciprocal();
      complex7.abs();
      complex6.pow((-1533.27108434875));
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.tanh();
      complex0.INF.subtract(5223.159063829237);
      complex1.ONE.cos();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex2.NaN.sqrt();
      complex0.getImaginary();
      complex2.tan();
      double double0 = 6753.0;
      Complex complex3 = complex2.multiply(6753.0);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.NaN.acos();
      complex4.reciprocal();
      complex5.INF.tan();
      Complex complex6 = complex5.ONE.cosh();
      Complex complex7 = complex2.divide(complex4);
      complex7.NaN.reciprocal();
      Complex complex8 = complex4.add(complex3);
      Complex complex9 = complex8.INF.sinh();
      Complex complex10 = complex9.NaN.exp();
      complex2.sinh();
      complex6.NaN.sin();
      Complex complex11 = complex0.createComplex((-3301.0), 6753.0);
      complex11.I.pow(complex10);
      try { 
        complex6.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = new Complex(1842.129747);
      complex0.ONE.sqrt();
      Complex complex1 = complex0.I.atan();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex1.ONE.divide(complex0);
      Complex complex4 = complex3.multiply(complex2);
      complex2.I.createComplex(1842.129747, 1842.129747);
      Complex complex5 = complex4.I.divide(complex1);
      Complex complex6 = complex0.ONE.cosh();
      Complex complex7 = complex6.NaN.multiply(complex5);
      Complex complex8 = complex0.divide(1842.129747);
      complex8.getReal();
      Complex complex9 = complex3.multiply(4792.53400403);
      complex5.acos();
      complex9.log();
      Complex complex10 = complex1.add(complex8);
      complex10.NaN.readResolve();
      Complex complex11 = complex0.sin();
      complex7.isNaN();
      complex0.asin();
      complex11.subtract(complex2);
      complex11.tanh();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      complex0.NaN.multiply(0);
      complex0.I.cos();
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply((-2133));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(Double.NaN);
      Complex complex2 = complex0.divide(0.0);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex2.INF.pow(Double.NaN);
      complex4.I.toString();
      Complex complex5 = complex3.log();
      Complex complex6 = complex0.I.tanh();
      Complex complex7 = complex1.log();
      complex7.sin();
      Complex complex8 = complex0.ZERO.cosh();
      complex1.ONE.conjugate();
      Complex complex9 = Complex.valueOf(Double.NaN, 332.81322354);
      complex9.INF.getField();
      Complex complex10 = complex9.I.reciprocal();
      Complex complex11 = complex3.multiply(0.0);
      complex2.NaN.tan();
      complex5.divide(complex7);
      complex3.toString();
      complex6.getReal();
      Complex complex12 = complex9.INF.log();
      Complex complex13 = complex12.ONE.reciprocal();
      complex13.asin();
      complex2.hashCode();
      complex10.isInfinite();
      complex11.getReal();
      complex9.equals(complex7);
      complex9.getField();
      complex4.sqrt1z();
      complex8.readResolve();
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.multiply(3968);
      Complex complex2 = complex1.createComplex(3968, 3968);
      complex0.readResolve();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex3.INF.multiply((-1387));
      complex3.INF.sin();
      complex4.INF.asin();
      complex3.I.log();
      complex3.multiply(37);
      complex1.tanh();
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.pow(705.235997275615);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2457.8524, 2457.8524);
      complex0.divide(2457.8524);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex1.divide(11.808533289489965);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.9868161777724352E-8);
      Complex complex1 = complex0.NaN.cos();
      Complex complex2 = complex1.divide(complex0);
      complex1.NaN.toString();
      Complex complex3 = complex1.INF.divide(1.9868161777724352E-8);
      Complex complex4 = complex3.INF.reciprocal();
      Complex complex5 = complex4.INF.subtract(complex0);
      Complex complex6 = complex5.multiply(400);
      complex0.getArgument();
      Complex complex7 = complex4.asin();
      Complex complex8 = complex0.sinh();
      Complex.valueOf((-2032.0), 1.9868161777724352E-8);
      Complex complex9 = complex8.I.acos();
      complex9.INF.negate();
      Complex complex10 = complex9.I.pow(complex4);
      assertEquals(1.0, complex10.getReal(), 0.01);
      assertEquals((-0.8813735870195429), complex9.getImaginary(), 0.01);
      
      Complex complex11 = Complex.valueOf(1.9868161777724352E-8, 0.0);
      complex8.I.getField();
      String string0 = complex8.toString();
      assertEquals("(1.9868161777724352E-8, 0.0)", string0);
      
      complex1.asin();
      Complex complex12 = complex3.divide(complex1);
      Complex complex13 = complex3.sin();
      Complex complex14 = complex13.divide((-1003.95562174));
      Complex complex15 = complex3.atan();
      Complex complex16 = complex15.ONE.cos();
      assertSame(complex15, complex14);
      assertEquals(0.5403023058681398, complex16.getReal(), 0.01);
      assertEquals(-0.0, complex16.getImaginary(), 0.01);
      
      Complex complex17 = complex2.tan();
      complex2.readResolve();
      Complex.valueOf(0.0, 0.0);
      Complex complex18 = complex7.pow(0.2837681770324707);
      assertTrue(complex3.equals((Object)complex6));
      assertSame(complex1, complex12);
      assertTrue(complex18.equals((Object)complex17));
      assertTrue(complex0.equals((Object)complex11));
      assertEquals(-0.0, complex7.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.cos();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cos();
      assertSame(complex1, complex0);
  }
}
