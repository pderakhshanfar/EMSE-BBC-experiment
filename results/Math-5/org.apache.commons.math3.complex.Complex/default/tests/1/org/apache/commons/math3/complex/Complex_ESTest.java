/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:39:35 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf(16.226038121497);
      complex0.divide(complex0);
      Complex complex1 = Complex.I;
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.pow((-18.570359466078305));
      complex3.ONE.reciprocal();
      Complex complex4 = Complex.ZERO;
      complex1.add(complex4);
      Complex complex5 = complex2.multiply((-1));
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.subtract((-20.0));
      complex0.multiply(Double.POSITIVE_INFINITY);
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.valueOf(14.447902247496229);
      complex0.divide(complex0);
      complex0.divide(1.0);
      Complex complex1 = Complex.valueOf((-3.193297932837415E-8));
      complex1.abs();
      Complex complex2 = Complex.I;
      complex2.pow((-20.0));
      Complex complex3 = new Complex((-20.0));
      complex1.add(complex3);
      complex3.getField();
      Complex complex4 = new Complex((-3.193297932837415E-8), (-3.193297932837415E-8));
      Complex complex5 = Complex.ONE;
      complex5.conjugate();
      Complex.valueOf(3.193297932837415E-8, 1.0);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.sinh();
      Complex complex4 = Complex.I;
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.ZERO;
      Complex complex7 = new Complex(20.0, 20.0);
      Complex complex8 = complex2.subtract(complex7);
      complex4.multiply(complex8);
      complex6.createComplex(0.10993985831737518, 4119.8217911);
      Complex complex9 = new Complex(3.91527572177694E207);
      complex2.divide(complex3);
      complex8.pow(complex5);
      complex5.sinh();
      complex4.tanh();
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(1367.5181894925233, (-20.0));
      complex0.subtract((-1427.7));
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.sin();
      Complex.valueOf((-1427.7), (-1340.086384393));
      Complex complex3 = Complex.valueOf((-2.2555535676499395E-7));
      Complex complex4 = Complex.I;
      complex2.add(2.449293598294706E-15);
      complex0.tan();
      complex3.sqrt();
      Object object0 = new Object();
      complex1.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(14.447902247496229);
      complex0.INF.negate();
      Complex complex1 = complex0.subtract(14.447902247496229);
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex2.sin();
      complex1.toString();
      Complex complex4 = Complex.ONE;
      Complex.valueOf(Double.POSITIVE_INFINITY, 14.447902247496229);
      Complex.valueOf((-1.0));
      complex3.add((-1.0));
      complex2.tan();
      Complex complex5 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      // Undeclared exception!
      complex0.nthRoot(2147481524);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf(14.447902247496229);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex1.ONE.subtract((-1.0));
      Complex complex3 = complex0.sin();
      complex3.NaN.toString();
      Complex complex4 = Complex.ONE;
      Complex.valueOf(0.1970241367816925, 14.447902247496229);
      complex2.sinh();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex5.cos();
      complex0.tan();
      complex1.getImaginary();
      Complex complex7 = new Complex((-2725.7021693), Double.NEGATIVE_INFINITY);
      complex6.pow(complex1);
      complex0.asin();
      complex5.toString();
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.INF;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.multiply(1498.424);
      Complex complex3 = Complex.valueOf(1.530436781375042E19);
      complex3.acos();
      complex0.divide(complex3);
      complex2.nthRoot(37);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(937.6381, 937.6381);
      Complex complex1 = complex0.multiply(15);
      complex0.sqrt();
      complex0.sin();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-393.82155640727), (-393.82155640727));
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.ONE.cos();
      complex2.NaN.getArgument();
      Complex complex3 = complex0.ONE.divide(complex1);
      Complex complex4 = complex3.I.divide(Double.NaN);
      complex4.ZERO.multiply(complex2);
      Complex complex5 = complex4.ZERO.sqrt1z();
      complex0.abs();
      Complex complex6 = complex0.sqrt1z();
      complex0.ZERO.sinh();
      Complex complex7 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex7.pow(Double.NaN);
      complex6.NaN.add(complex1);
      complex7.INF.getField();
      complex6.ZERO.sqrt();
      complex0.hashCode();
      Complex complex8 = complex7.sqrt();
      complex8.ZERO.conjugate();
      complex2.sinh();
      Complex complex9 = Complex.I;
      complex9.equals((Object) null);
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex(339.0, 339.0);
      Complex complex1 = complex0.multiply(Double.NaN);
      complex0.exp();
      Complex.valueOf(Double.NaN);
      Complex complex2 = complex1.add(339.0);
      complex2.tan();
      complex1.getImaginary();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2676.0), (-2676.0));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.pow(complex1);
      complex1.subtract((-2676.0));
      Complex complex3 = complex0.acos();
      Complex complex4 = Complex.valueOf((-2676.0), 2111.4643);
      Complex complex5 = complex3.ONE.exp();
      complex0.negate();
      Complex complex6 = complex2.ZERO.acos();
      Complex complex7 = Complex.valueOf(2161.9070509773);
      complex0.INF.multiply((-2676.0));
      complex6.ZERO.cos();
      complex2.readResolve();
      complex6.cosh();
      Complex complex8 = complex4.cosh();
      Complex complex9 = complex8.ZERO.multiply((-366));
      Complex complex10 = Complex.valueOf(322.6448795);
      complex8.INF.tan();
      complex3.pow(complex10);
      complex9.readResolve();
      complex7.add(322.6448795);
      complex1.getField();
      complex5.toString();
      Complex.valueOf((-1064.93));
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex0.tanh();
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = Complex.ONE;
      complex0.multiply(complex2);
      Complex complex4 = new Complex(0.017266980697607126, (-1893.3199067783));
      Complex complex5 = complex4.createComplex((-1893.3199067783), Double.NaN);
      Complex complex6 = Complex.valueOf((-1721.47719), (-1721.47719));
      Complex complex7 = complex6.pow(complex2);
      complex7.sinh();
      complex0.hashCode();
      complex2.pow((-1893.3199067783));
      complex5.tanh();
      Complex complex8 = new Complex((-1893.3199067783), Double.NaN);
      Complex complex9 = complex8.multiply(complex4);
      Complex complex10 = complex9.add(complex0);
      complex10.conjugate();
      complex7.isInfinite();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3270.0, 3270.0);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(Double.NaN, 0.2720196495140691);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.cos();
      complex1.getArgument();
      Complex complex3 = new Complex((-2.356194490192345), (-2.356194490192345));
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex0.divide((-2.356194490192345));
      complex1.multiply(complex4);
      Complex complex6 = complex3.sqrt1z();
      complex5.abs();
      Complex complex7 = Complex.ONE;
      complex0.sinh();
      complex4.add(Double.POSITIVE_INFINITY);
      complex7.pow((-2.356194490192345));
      Complex complex8 = Complex.ZERO;
      complex8.getField();
      complex3.ONE.asin();
      Complex complex9 = complex6.sqrt();
      Complex complex10 = new Complex(Double.POSITIVE_INFINITY);
      complex10.hashCode();
      complex2.sqrt();
      Complex complex11 = Complex.valueOf(0.3540347218513489, Double.NaN);
      complex11.conjugate();
      complex11.sinh();
      complex9.cos();
      Complex complex12 = Complex.I;
      Complex complex13 = new Complex((-1452.4179464954866), 0.3540347218513489);
      complex13.conjugate();
      complex10.equals(complex13);
      complex3.createComplex(3.442100456607687E-215, (-1103.0));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-667.0));
      Complex complex1 = complex0.cosh();
      complex0.I.getArgument();
      complex1.toString();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.add(2213.632597226);
      Complex complex4 = complex0.multiply((-516.67796268275));
      Complex complex5 = new Complex((-516.67796268275), 6.283185307179586);
      Complex complex6 = complex5.sqrt1z();
      complex3.multiply(4345.0);
      Complex complex7 = Complex.valueOf(453.74492);
      Complex complex8 = complex7.cos();
      complex7.getField();
      complex0.readResolve();
      complex1.sqrt1z();
      complex6.hashCode();
      Object object0 = complex2.readResolve();
      complex5.equals(object0);
      complex0.readResolve();
      complex3.cosh();
      complex1.toString();
      complex6.reciprocal();
      complex8.createComplex(6.283185307179586, (-1.0));
      complex6.negate();
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.getArgument();
      Complex complex1 = complex0.INF.add(0.0);
      complex0.I.toString();
      Complex complex2 = (Complex)complex0.readResolve();
      complex0.sinh();
      Complex complex3 = complex1.negate();
      Complex complex4 = complex1.createComplex(0.0, 0.0);
      complex4.ZERO.subtract(0.7853981633974483);
      Complex complex5 = new Complex(0.7853981633974483, 0.7853981633974483);
      Complex complex6 = complex4.subtract(complex5);
      complex3.multiply(complex6);
      Complex complex7 = complex2.add(0.017266980697607126);
      complex2.abs();
      complex7.add((-312.75557));
      complex5.reciprocal();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.ONE.cos();
      complex2.NaN.getArgument();
      Complex complex3 = new Complex(339.0, 339.0);
      Complex complex4 = complex0.ONE.divide(complex3);
      Complex complex5 = complex4.I.divide(Double.NaN);
      complex5.ZERO.multiply(complex3);
      complex5.ZERO.sqrt1z();
      complex0.abs();
      Complex complex6 = complex0.sqrt1z();
      Complex complex7 = complex0.ZERO.sinh();
      Complex complex8 = complex6.add(0.0);
      complex8.pow(Double.NaN);
      Complex complex9 = complex6.NaN.add(complex3);
      Complex complex10 = Complex.valueOf((-2564.2702), 0.0);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex10.add((-1527.3178));
      complex5.abs();
      complex7.add(322.92714485465);
      complex9.reciprocal();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-441.333), 2864.63962467);
      complex1.cosh();
      complex1.sin();
      complex0.add((-441.333));
      complex1.exp();
      Complex.valueOf(7310.6497215);
      Complex complex2 = Complex.I;
      complex2.add(415.7);
      Complex complex3 = new Complex(2864.63962467, (-441.333));
      Complex complex4 = Complex.I;
      complex4.getImaginary();
      complex2.atan();
      Complex complex5 = Complex.valueOf(7310.6497215, 1.0);
      complex5.multiply(292);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.valueOf(14.447902247496229);
      Complex complex1 = complex0.INF.negate();
      complex1.ONE.subtract((-1.0));
      Complex complex2 = complex0.sin();
      complex2.NaN.toString();
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex2.add(0.1970241367816925);
      Complex complex5 = complex3.multiply((-2725.7021693));
      Complex complex6 = complex5.ZERO.divide(14.447902247496229);
      Complex complex7 = complex6.I.sqrt1z();
      Complex complex8 = complex2.multiply(0.1970241367816925);
      Complex complex9 = complex2.cos();
      complex9.NaN.getField();
      Object object0 = complex8.readResolve();
      Complex complex10 = complex7.sqrt1z();
      complex10.INF.hashCode();
      complex8.equals(object0);
      complex1.readResolve();
      complex0.cosh();
      complex7.toString();
      complex4.reciprocal();
      complex10.createComplex(419.0, (-842.38));
      complex10.negate();
      complex8.exp();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(2.133604049682617, 2.133604049682617);
      Complex complex2 = complex0.pow(complex1);
      complex2.ZERO.toString();
      Complex complex3 = complex0.divide(2.133604049682617);
      Complex complex4 = complex1.cosh();
      Complex complex5 = complex4.NaN.asin();
      Complex complex6 = complex5.add(complex4);
      Complex complex7 = Complex.INF;
      Complex complex8 = complex3.pow(complex7);
      complex7.INF.readResolve();
      complex8.ZERO.sqrt();
      complex8.NaN.negate();
      complex7.ZERO.add(complex0);
      complex6.ZERO.pow(2855.899);
      complex6.INF.sqrt();
      complex8.tan();
      complex6.getField();
      complex1.nthRoot(1400);
      complex5.nthRoot(Integer.MAX_VALUE);
      complex7.pow(0.602831074857013);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Complex complex2 = Complex.valueOf((-2.2667083759873216E16));
      Complex complex3 = complex2.createComplex((-2.2667083759873216E16), 1564.26946);
      Complex complex4 = complex1.subtract(1183.26);
      Complex complex5 = new Complex(1564.26946, (-1235.1374762084));
      Complex complex6 = complex1.subtract(complex5);
      Complex complex7 = complex6.multiply(complex0);
      Complex complex8 = complex0.createComplex(1564.26946, 0.0);
      complex0.pow(complex8);
      Complex complex9 = complex5.sinh();
      complex8.hashCode();
      complex4.pow(3429.028050200953);
      Complex complex10 = complex5.tanh();
      complex10.I.reciprocal();
      Complex complex11 = complex6.multiply(complex2);
      complex7.abs();
      Complex complex12 = complex9.sin();
      Complex complex13 = Complex.ZERO;
      Complex complex14 = complex13.sinh();
      complex4.getField();
      complex11.pow(complex3);
      complex12.asin();
      complex1.sqrt();
      Complex.valueOf(0.0);
      complex14.getImaginary();
      try { 
        complex6.nthRoot((-804));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -804
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      complex0.ZERO.asin();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex0.exp();
      complex3.NaN.sinh();
      complex3.isNaN();
      Complex complex4 = complex1.ZERO.asin();
      Complex complex5 = complex4.add((-2564.2702));
      complex2.abs();
      Complex complex6 = complex5.cos();
      Complex complex7 = complex1.divide((-48.897582323155));
      complex3.tan();
      complex1.getImaginary();
      Complex complex8 = Complex.NaN;
      complex8.atan();
      Complex complex9 = Complex.ONE;
      complex9.divide(complex0);
      complex7.pow(complex6);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.cos();
      complex0.isInfinite();
      Complex complex2 = complex1.ONE.reciprocal();
      complex0.ONE.acos();
      Complex complex3 = complex2.sqrt();
      complex1.hashCode();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex3.conjugate();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex6.cos();
      complex7.divide((-1573.0));
      complex2.createComplex(3871.34601509494, 8.69177352065934E-9);
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.sqrt();
      complex5.hashCode();
      Complex complex10 = Complex.I;
      complex10.pow(3871.34601509494);
      complex6.conjugate();
      complex4.reciprocal();
      Complex complex11 = complex9.multiply(complex1);
      complex11.I.nthRoot(991);
      complex8.hashCode();
      Complex complex12 = Complex.valueOf(8.69177352065934E-9);
      complex12.tanh();
      complex10.multiply((-936.4769884824));
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(339.0, 339.0);
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-2005.2508652));
      complex0.equals(complex1);
      Complex complex2 = complex0.cos();
      complex2.add((-2153.1620407997));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.reciprocal();
      complex0.ZERO.asin();
      Complex complex2 = complex1.ZERO.multiply(complex0);
      Complex complex3 = complex0.exp();
      complex3.NaN.sinh();
      complex3.isNaN();
      Complex complex4 = complex1.ZERO.asin();
      complex4.add((-2564.2702));
      complex2.abs();
      complex1.add(0.0);
      complex3.reciprocal();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.ONE.cos();
      complex2.NaN.getArgument();
      Complex complex3 = new Complex(339.0, 339.0);
      Complex complex4 = complex0.ONE.divide(complex3);
      Complex complex5 = complex4.I.divide(Double.NaN);
      complex5.ZERO.multiply(complex3);
      complex5.ZERO.sqrt1z();
      complex0.abs();
      Complex complex6 = complex0.sqrt1z();
      complex0.ZERO.sinh();
      Complex complex7 = complex6.add(0.0);
      Complex complex8 = Complex.NaN;
      complex6.NaN.add(complex3);
      complex7.INF.getField();
      Complex complex9 = complex6.ZERO.sqrt();
      complex0.hashCode();
      Complex complex10 = complex7.sqrt();
      complex10.ZERO.conjugate();
      Complex complex11 = complex3.sinh();
      Complex complex12 = complex11.I.cos();
      complex3.divide(1.0);
      complex0.tan();
      complex9.getImaginary();
      complex1.atan();
      complex12.divide(complex0);
      Complex complex13 = Complex.valueOf(0.3063063621520996, 1891.771363);
      complex13.pow(complex3);
      complex3.conjugate();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.acos();
      Complex complex2 = complex0.INF.pow(complex1);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.conjugate();
      Complex complex6 = Complex.valueOf((-1.3584500601329896E-8), (-2514.0));
      complex1.ONE.readResolve();
      Complex complex7 = complex3.multiply(complex5);
      Complex complex8 = complex7.INF.log();
      Complex complex9 = complex7.subtract(3.3075532478807267E-308);
      Complex complex10 = complex9.INF.log();
      complex10.abs();
      complex0.nthRoot(899);
      Complex complex11 = complex6.atan();
      complex2.asin();
      complex5.multiply(1437);
      complex1.negate();
      Complex complex12 = complex9.subtract((double) 1437);
      complex12.ONE.asin();
      complex11.I.pow((-2007.9689));
      complex6.negate();
      complex11.sinh();
      Complex.valueOf((double) 1437, (-2514.0));
      complex8.divide((double) 1437);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-52.924725870788635));
      Complex complex1 = complex0.add((-52.924725870788635));
      Complex complex2 = complex0.tan();
      Complex complex3 = complex2.NaN.tanh();
      complex3.I.cos();
      complex0.NaN.multiply((-601));
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex4.INF.add(complex0);
      Complex complex6 = complex0.acos();
      Complex complex7 = complex6.ONE.add(complex4);
      Complex complex8 = Complex.NaN;
      Complex complex9 = complex8.ZERO.divide((-52.924725870788635));
      Complex complex10 = complex9.INF.log();
      complex10.ZERO.abs();
      complex1.add(complex8);
      Complex complex11 = complex5.divide(complex4);
      complex5.ZERO.hashCode();
      Complex complex12 = complex5.atan();
      complex12.INF.sin();
      Complex complex13 = complex12.createComplex((-601), (-52.924725870788635));
      complex13.sinh();
      complex6.I.multiply(complex0);
      complex0.I.tan();
      complex2.toString();
      complex1.multiply(complex2);
      complex8.asin();
      complex7.subtract(0.0);
      complex9.getField();
      complex11.add((-52.924725870788635));
      complex0.readResolve();
      complex5.subtract((-52.924725870788635));
      complex1.add(complex10);
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.pow(Double.POSITIVE_INFINITY);
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(339.0);
      Complex complex2 = complex1.ONE.cos();
      complex2.NaN.getArgument();
      Complex complex3 = new Complex(339.0, 339.0);
      Complex complex4 = complex0.ONE.divide(complex3);
      Complex complex5 = complex4.I.divide(Double.NaN);
      complex5.ZERO.multiply(complex3);
      complex5.ZERO.sqrt1z();
      complex0.abs();
      Complex complex6 = complex0.sqrt1z();
      complex0.ZERO.sinh();
      Complex complex7 = complex6.add(0.0);
      complex7.pow(Double.NaN);
      Complex complex8 = complex6.NaN.add(complex3);
      complex7.INF.getField();
      complex6.ZERO.sqrt();
      complex0.hashCode();
      Complex complex9 = complex7.sqrt();
      Complex complex10 = complex9.ZERO.conjugate();
      Complex complex11 = complex3.sinh();
      complex11.I.cos();
      Complex complex12 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex13 = complex9.createComplex(339.0, 20.0);
      complex9.sqrt();
      complex12.I.hashCode();
      complex8.pow((-5.202224743061444));
      complex10.conjugate();
      complex12.reciprocal();
      Complex complex14 = complex3.multiply(complex13);
      complex14.hashCode();
      Complex complex15 = new Complex(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-58.5363934));
      complex0.ONE.add(415.16717);
      Complex complex1 = complex0.I.tanh();
      Complex complex2 = Complex.ZERO;
      complex2.INF.toString();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex0.INF.subtract(complex2);
      complex4.NaN.toString();
      complex4.ZERO.atan();
      complex3.getImaginary();
      complex1.atan();
      complex0.divide(complex2);
      Complex complex5 = Complex.valueOf(1842.19148088105);
      complex2.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex(339.0, 339.0);
      complex0.equals(complex0);
      complex0.sqrt();
      Complex complex1 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.add((-53.39126321282934));
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.createComplex((-53.39126321282934), (-53.39126321282934));
      Complex complex4 = complex2.NaN.atan();
      Complex complex5 = complex4.NaN.pow(0.4531385898590088);
      complex5.ONE.hashCode();
      Complex complex6 = Complex.NaN;
      complex4.add(complex0);
      complex0.hashCode();
      Complex complex7 = complex4.exp();
      Complex complex8 = complex5.sqrt();
      complex8.acos();
      Complex.valueOf((-53.39126321282934));
      complex3.exp();
      Complex complex9 = Complex.valueOf((-53.39126321282934));
      complex9.createComplex((-53.39126321282934), 0.0);
      complex8.equals(complex7);
      complex2.sqrt();
      Complex complex10 = complex7.subtract(2.0);
      complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.ONE.cos();
      complex2.NaN.getArgument();
      Complex complex3 = new Complex(339.0, 339.0);
      Complex complex4 = complex0.ONE.divide(complex3);
      Complex complex5 = complex4.I.divide(Double.NaN);
      complex5.ZERO.multiply(complex3);
      Complex complex6 = complex5.ZERO.sqrt1z();
      complex0.abs();
      Complex complex7 = complex0.sqrt1z();
      complex0.ZERO.sinh();
      Complex complex8 = Complex.valueOf(339.0);
      complex8.pow(Double.NaN);
      Complex complex9 = complex7.NaN.add(complex3);
      complex8.INF.getField();
      complex7.ZERO.sqrt();
      complex0.hashCode();
      Complex complex10 = complex8.sqrt();
      complex10.ZERO.conjugate();
      Complex complex11 = complex3.sinh();
      Complex complex12 = complex11.I.cos();
      complex12.I.getField();
      Complex complex13 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex14 = Complex.valueOf(339.0, 339.0);
      complex10.sqrt();
      complex13.I.hashCode();
      complex9.pow(1.9014079059505456E-7);
      Complex.valueOf(0.0, Double.NaN);
      complex13.reciprocal();
      Complex complex15 = complex3.multiply(complex14);
      complex15.hashCode();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(1.3733830589835937E32);
      Complex complex2 = complex0.cosh();
      complex2.getArgument();
      Complex complex3 = Complex.INF;
      Complex complex4 = Complex.valueOf(Double.NaN, 1.3733830589835937E32);
      complex4.divide(complex2);
      complex1.sin();
      Complex complex5 = new Complex((-1044.0548841333234));
      complex5.negate();
      Complex complex6 = complex0.multiply(810);
      complex6.cosh();
      complex6.nthRoot(810);
      Complex complex7 = complex4.asin();
      complex7.asin();
      Complex complex8 = Complex.valueOf(0.0, (-1091.895778));
      Complex complex9 = complex7.add(complex1);
      Complex complex10 = Complex.valueOf((double) 1411);
      complex10.divide(complex8);
      complex9.add(Double.NaN);
      complex7.conjugate();
      complex5.isInfinite();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.tanh();
      Complex.valueOf((-312.0), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Complex complex2 = Complex.valueOf((-2.2667083759873216E16));
      Complex complex3 = complex0.acos();
      complex3.ONE.exp();
      Complex complex4 = complex3.cos();
      Complex complex5 = complex4.exp();
      Complex complex6 = Complex.I;
      complex0.asin();
      Complex complex7 = new Complex(339.0, (-2.2667083759873216E16));
      Complex complex8 = complex7.cos();
      complex2.getArgument();
      complex8.readResolve();
      complex0.multiply(121.325349345);
      complex5.hashCode();
      complex1.asin();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.pow(Double.NaN);
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.ONE.cos();
      complex2.NaN.getArgument();
      Complex complex3 = new Complex(339.0, 339.0);
      Complex complex4 = complex0.ONE.divide(complex3);
      Complex complex5 = complex4.I.divide(Double.NaN);
      Complex complex6 = complex5.ZERO.multiply(complex3);
      complex5.ZERO.sqrt1z();
      complex0.abs();
      complex3.nthRoot(794);
      complex5.asin();
      complex5.asin();
      Complex complex7 = complex5.pow(complex3);
      Complex complex8 = complex7.asin();
      complex8.readResolve();
      Complex complex9 = complex3.sqrt();
      complex8.createComplex(Double.NaN, Double.NaN);
      Complex complex10 = Complex.ZERO;
      complex9.divide(complex8);
      complex0.sinh();
      Object object0 = new Object();
      complex4.equals("l_c-2[vm");
      complex1.createComplex((-3015.241063416642), 339.0);
      complex9.nthRoot(1404);
      complex6.getImaginary();
      Complex.valueOf((double) 794);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-667.0));
      Complex complex1 = complex0.cosh();
      complex0.I.getArgument();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.NaN.sin();
      Complex complex4 = complex2.negate();
      Complex complex5 = complex0.multiply(1411);
      Complex complex6 = complex5.ZERO.cosh();
      complex3.sqrt1z();
      Complex complex7 = complex0.sinh();
      complex0.add(0.0);
      complex0.pow((double) 1411);
      Complex complex8 = complex0.add(complex1);
      complex6.getField();
      Complex complex9 = complex6.sqrt();
      complex4.hashCode();
      complex9.sqrt();
      Complex complex10 = complex3.conjugate();
      complex5.sinh();
      complex8.cos();
      complex7.divide((-667.0));
      complex10.createComplex(0.0, (-667.0));
      complex8.sqrt();
      complex6.hashCode();
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex11.pow(91.06594603922832);
      complex8.conjugate();
      complex12.reciprocal();
      complex1.multiply(complex9);
      Complex complex13 = Complex.ONE;
      complex13.hashCode();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-667.0));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex1.sin();
      complex3.add((-3461.66));
      Complex complex4 = complex2.exp();
      Complex complex5 = Complex.valueOf(Double.NaN);
      complex1.add(1969.0);
      complex0.tan();
      complex2.getImaginary();
      complex1.atan();
      complex5.divide(complex4);
      Complex complex6 = Complex.NaN;
      complex6.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf((-2.2667083759873216E16));
      complex0.tan();
      Complex complex2 = complex1.asin();
      Complex.valueOf((-2.2667083759873216E16), (-2.2667083759873216E16));
      complex2.nthRoot(Integer.MAX_VALUE);
      Complex complex3 = Complex.NaN;
      complex1.reciprocal();
      complex0.getField();
      try { 
        complex2.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex(3684.873443615);
      Complex complex1 = complex0.I.add(3684.873443615);
      Complex.valueOf(3684.873443615);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.exp();
      Complex complex4 = complex2.cos();
      complex0.exp();
      complex2.tanh();
      complex4.asin();
      complex2.cos();
      complex1.getArgument();
      complex2.readResolve();
      complex2.multiply(0.129004567861557);
      complex1.hashCode();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1059.2874190381647), (-1059.2874190381647));
      complex0.conjugate();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3087.630638107), (-3087.630638107));
      complex0.cosh();
      complex0.multiply((-3087.630638107));
      complex0.tan();
      Complex complex1 = Complex.INF;
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-699.0), (-699.0));
      Complex complex1 = complex0.createComplex(1593.041229, (-1403.7662276912));
      complex1.ONE.getField();
      Complex complex2 = complex1.ZERO.add(complex0);
      complex1.getArgument();
      Complex complex3 = complex0.acos();
      complex3.getField();
      complex1.add(complex0);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex0.log();
      complex1.negate();
      Complex complex6 = complex5.multiply(1593.041229);
      Complex complex7 = complex6.tan();
      complex7.ZERO.subtract(complex2);
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(339.0, 339.0);
      Complex complex1 = (Complex)complex0.readResolve();
      Complex.valueOf((-0.9871086951291462), (-2493.293845681764));
      complex0.conjugate();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.cos();
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex3.divide(Double.POSITIVE_INFINITY);
      complex2.tan();
      complex1.divide((-1100.189535));
      Complex complex6 = Complex.valueOf(2.6688244275922255, (-0.9871086951291462));
      complex6.tan();
      complex1.getImaginary();
      complex5.atan();
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      complex7.divide(complex6);
      Complex complex8 = Complex.ZERO;
      complex7.multiply(Double.POSITIVE_INFINITY);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.ONE.cos();
      complex2.NaN.getArgument();
      Complex complex3 = new Complex(339.0, 339.0);
      Complex complex4 = complex0.ONE.divide(complex3);
      Complex complex5 = complex4.I.divide(Double.NaN);
      Complex complex6 = complex5.ZERO.multiply(complex3);
      complex5.ZERO.sqrt1z();
      complex3.exp();
      Complex complex7 = Complex.NaN;
      Complex complex8 = Complex.INF;
      complex2.tanh();
      complex2.getReal();
      complex5.negate();
      Complex.valueOf(1.570796358727876);
      complex6.getImaginary();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(3684.873443615);
      complex0.I.add(3684.873443615);
      complex0.reciprocal();
      complex0.tan();
      Complex complex1 = complex0.asin();
      int int0 = 0;
      complex1.ONE.tanh();
      try { 
        complex1.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex((-1504.21506), 0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex2.ZERO.divide(complex1);
      complex0.getField();
      Complex complex4 = complex2.INF.subtract((-4333.3372097));
      Complex complex5 = complex2.ZERO.sqrt1z();
      Complex complex6 = complex5.ZERO.log();
      Complex complex7 = complex0.add(complex1);
      complex7.I.sin();
      Complex complex8 = complex3.tan();
      Complex complex9 = complex8.INF.cos();
      Complex complex10 = complex1.cosh();
      complex10.ZERO.nthRoot(1212);
      complex10.ZERO.add(complex6);
      complex4.add((-6.243126731995636E-8));
      complex9.equals(complex10);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.conjugate();
      Complex.valueOf(9.979706999541057E-9);
      Complex complex2 = complex0.tan();
      complex2.INF.getArgument();
      complex1.getReal();
      complex0.negate();
      Complex complex3 = Complex.valueOf(0.0);
      complex3.getImaginary();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-222.0));
      complex1.INF.toString();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.reciprocal();
      Complex complex4 = complex3.createComplex(2.436652183532715, 0.0);
      complex4.ZERO.asin();
      complex3.sqrt1z();
      Complex complex5 = complex1.sqrt();
      complex5.ONE.negate();
      Complex complex6 = complex5.log();
      complex6.abs();
      Complex complex7 = complex2.reciprocal();
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.isInfinite();
      Complex complex1 = complex0.I.reciprocal();
      complex1.ZERO.readResolve();
      complex0.ZERO.add((-3209.200029232617));
      Complex complex2 = complex0.INF.multiply(245.3583);
      complex2.ZERO.subtract(complex0);
      Complex complex3 = new Complex((-1.0), (-1775.88));
      Complex complex4 = complex3.INF.subtract((-1775.88));
      complex4.exp();
      Complex complex5 = complex0.pow(complex3);
      complex4.abs();
      Complex complex6 = complex5.pow(0.0);
      Complex complex7 = complex6.ZERO.sin();
      complex5.ONE.exp();
      complex7.ONE.nthRoot(994);
      Complex.valueOf(0.0);
      complex3.pow(complex0);
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      complex8.NaN.sin();
      complex3.isInfinite();
      complex2.tanh();
      Complex complex9 = complex7.sin();
      complex3.multiply(1);
      complex9.cosh();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(14.447902247496229);
      Complex complex1 = complex0.INF.negate();
      Complex complex2 = complex0.divide(complex1);
      complex2.subtract(Double.NaN);
      complex0.sinh();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.sin();
      Complex.valueOf(20.0, (-1326.5));
      Complex complex5 = Complex.valueOf(1.7567694187164307);
      complex5.add(0.21765980124473572);
      Complex complex6 = Complex.INF;
      complex6.tan();
      complex6.sqrt();
      Object object0 = new Object();
      complex5.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      complex0.sqrt1z();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sin();
      Complex complex2 = complex1.NaN.log();
      complex0.readResolve();
      Complex complex3 = complex0.ONE.negate();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex2.I.multiply(complex4);
      complex5.ONE.log();
      complex0.createComplex((-901.9), Double.POSITIVE_INFINITY);
      Complex complex6 = complex3.ONE.conjugate();
      try { 
        complex6.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply((-2005.2508652));
      complex0.add((-2005.2508652));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.tanh();
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.ZERO.multiply(0.0);
      Complex complex3 = complex0.createComplex(2.0, 2.0);
      complex3.ZERO.getField();
      complex1.ZERO.getField();
      complex2.I.subtract(complex0);
      complex0.add(2.0);
      Complex complex4 = complex2.subtract(2.0);
      Object object0 = complex4.readResolve();
      complex0.equals(object0);
      complex4.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.multiply((-2448.1570185));
      complex1.INF.getArgument();
      complex0.ZERO.getArgument();
      Complex complex2 = complex0.negate();
      complex2.reciprocal();
      Complex complex3 = complex1.tanh();
      complex3.ONE.subtract(complex0);
      Complex complex4 = complex3.I.cos();
      Complex complex5 = complex2.INF.asin();
      complex3.ZERO.getArgument();
      Complex complex6 = complex1.subtract((-2448.1570185));
      complex6.ONE.divide(20.0);
      complex2.isInfinite();
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex7.exp();
      complex7.ONE.multiply((-2448.1570185));
      complex8.multiply(complex5);
      complex8.abs();
      complex1.isInfinite();
      complex6.multiply(0.0);
      complex4.multiply(complex6);
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.divide(complex1);
      complex0.ZERO.getField();
      Complex complex3 = complex1.ONE.sqrt1z();
      Complex complex4 = Complex.valueOf((-930.77010093));
      Complex complex5 = complex2.ONE.divide(complex0);
      Complex complex6 = complex2.multiply(0.22392448782920837);
      Complex complex7 = complex1.ONE.atan();
      complex7.ZERO.conjugate();
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex4.multiply(1800);
      complex6.I.cosh();
      complex7.NaN.multiply(0.0);
      complex2.getField();
      Complex complex10 = complex5.pow(complex4);
      Complex complex11 = complex10.cosh();
      complex11.NaN.createComplex((-930.77010093), 1800);
      Complex complex12 = complex11.ZERO.log();
      Complex complex13 = complex12.I.pow(complex1);
      complex13.I.subtract(complex0);
      complex4.nthRoot(2407);
      complex6.toString();
      complex3.cos();
      complex7.getImaginary();
      complex6.toString();
      Complex complex14 = Complex.valueOf(0.22392448782920837, 0.0);
      Complex complex15 = complex14.ONE.acos();
      complex0.add(complex14);
      complex9.exp();
      complex8.subtract(0.22392448782920837);
      complex15.conjugate();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide(429.76745062363);
      Complex complex2 = complex1.sin();
      complex0.I.divide(0.0);
      Complex complex3 = complex0.INF.createComplex(1.3443336486816406, 1.3443336486816406);
      Complex complex4 = complex2.NaN.subtract(1.3443336486816406);
      Object object0 = complex0.readResolve();
      complex2.equals(object0);
      Complex complex5 = complex0.atan();
      complex5.I.multiply(538);
      complex5.ZERO.toString();
      Complex complex6 = complex5.exp();
      Complex complex7 = complex6.asin();
      Complex complex8 = complex5.sin();
      complex8.cos();
      complex8.ONE.conjugate();
      complex8.ONE.multiply(538);
      complex0.getReal();
      complex8.sqrt();
      complex5.log();
      complex7.createComplex(1.0, 1.0);
      complex0.getField();
      Complex complex9 = complex7.acos();
      complex4.sqrt1z();
      Complex.valueOf(1.3443336486816406, 1.0);
      complex3.log();
      complex9.isInfinite();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-667.0));
      Complex complex1 = complex0.cosh();
      complex0.I.getArgument();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.divide(complex2);
      complex1.NaN.sin();
      complex3.negate();
      Complex complex4 = complex0.multiply(1411);
      Complex complex5 = complex4.ZERO.cosh();
      complex4.I.nthRoot(1411);
      Complex complex6 = complex4.asin();
      complex6.INF.asin();
      complex6.NaN.pow(complex2);
      Complex complex7 = complex0.asin();
      complex7.NaN.readResolve();
      complex4.ZERO.sqrt();
      complex7.I.createComplex(1411, 2856.899164241091);
      Complex complex8 = Complex.ZERO;
      complex7.divide(complex8);
      complex3.sinh();
      Object object0 = new Object();
      complex1.equals(object0);
      complex7.createComplex((-2025.4), 1.5707963267948966);
      try { 
        complex5.nthRoot((-2017));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,017
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(15.272138829722124);
      Complex complex1 = complex0.INF.negate();
      complex0.divide(complex1);
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = Complex.I;
      complex1.toString();
      complex0.add(complex1);
      Complex.valueOf(0.0);
      complex1.NaN.getArgument();
      complex1.toString();
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex1.ZERO.createComplex(1866.19023048, 0.0);
      Complex complex4 = complex0.sqrt();
      complex4.multiply(242.6593126454893);
      Complex complex5 = complex4.ZERO.createComplex(3.5037536832675478E-217, 924.61055124254);
      complex0.NaN.nthRoot(Integer.MAX_VALUE);
      complex1.multiply(Integer.MAX_VALUE);
      Complex complex6 = complex0.sin();
      Complex complex7 = complex5.multiply(complex6);
      complex7.log();
      complex2.acos();
      complex3.cosh();
      complex3.divide(complex2);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1206.5829723, 1206.5829723);
      Complex complex1 = Complex.NaN;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(1431655717);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(7);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.createComplex((-450.56222800184), (-450.56222800184));
      complex0.NaN.toString();
      complex0.INF.sinh();
      complex0.getReal();
      complex1.getReal();
      Complex complex2 = complex1.ONE.exp();
      Complex complex3 = Complex.valueOf((-450.56222800184), 762.0623);
      Complex complex4 = complex3.ZERO.sinh();
      complex3.conjugate();
      complex0.add(complex2);
      complex4.cosh();
      complex3.negate();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.divide(0.0);
      Complex complex1 = complex0.tanh();
      complex1.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.reciprocal();
      complex0.multiply(279);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.asin();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.divide(17.966135552354196);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.nthRoot(293);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.nthRoot((-1991));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,991
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.hashCode();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.tan();
      complex0.multiply(0.4356052279472351);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex((-667.0));
      Complex complex1 = Complex.NaN;
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.ONE.cos();
      Complex complex3 = complex2.ZERO.add(complex1);
      Complex complex4 = complex0.INF.exp();
      complex4.I.asin();
      complex0.INF.abs();
      Complex complex5 = complex0.subtract(complex1);
      Complex complex6 = complex5.atan();
      complex6.I.sin();
      Complex complex7 = complex0.acos();
      Complex complex8 = complex7.cos();
      complex6.readResolve();
      Complex complex9 = complex8.sqrt();
      complex9.NaN.tan();
      Complex complex10 = complex8.asin();
      complex8.sinh();
      Complex complex11 = complex8.I.asin();
      complex11.ZERO.sinh();
      complex8.INF.sin();
      complex10.I.toString();
      complex10.ZERO.add(Double.POSITIVE_INFINITY);
      Complex complex12 = Complex.valueOf(0.0, (-520.3));
      complex12.I.readResolve();
      Complex complex13 = complex10.cosh();
      complex13.NaN.hashCode();
      Complex.valueOf(0.0, 630.8091);
      Complex complex14 = complex3.divide(complex2);
      complex8.readResolve();
      complex9.atan();
      Complex complex15 = complex1.cos();
      complex1.pow(Double.POSITIVE_INFINITY);
      complex15.multiply(1);
      complex5.acos();
      complex14.atan();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.ONE.cos();
      complex2.NaN.getArgument();
      Complex complex3 = new Complex(339.0, 339.0);
      Complex complex4 = complex0.ONE.divide(complex3);
      Complex complex5 = complex4.I.divide(Double.NaN);
      complex5.ZERO.multiply(complex3);
      Complex complex6 = complex5.ZERO.sqrt1z();
      complex0.abs();
      Complex complex7 = complex0.sqrt1z();
      complex0.ZERO.sinh();
      Complex complex8 = complex7.add(0.0);
      complex8.pow(Double.NaN);
      Complex complex9 = complex7.NaN.add(complex3);
      complex8.INF.getField();
      complex7.ZERO.sqrt();
      complex0.hashCode();
      Complex complex10 = complex8.sqrt();
      Complex complex11 = complex10.ZERO.conjugate();
      Complex complex12 = complex3.sinh();
      complex12.I.cos();
      Complex complex13 = complex3.divide(Double.POSITIVE_INFINITY);
      Complex complex14 = complex10.createComplex(339.0, 20.0);
      complex10.sqrt();
      complex13.I.hashCode();
      complex9.pow(1.9014079059505456E-7);
      complex11.conjugate();
      complex13.reciprocal();
      Complex complex15 = complex3.multiply(complex14);
      complex15.hashCode();
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.negate();
      Complex complex2 = complex1.ONE.cos();
      complex2.NaN.getArgument();
      Complex complex3 = complex0.ONE.divide(complex1);
      Complex complex4 = complex3.I.divide(Double.NaN);
      complex4.ZERO.multiply(complex1);
      complex4.ZERO.sqrt1z();
      complex0.abs();
      Complex complex5 = complex0.sqrt1z();
      complex0.ZERO.sinh();
      Complex complex6 = complex5.add(0.0);
      Complex complex7 = complex6.pow(Double.NaN);
      complex7.ZERO.divide(1059.9019318215114);
      complex5.NaN.add(complex1);
      complex6.INF.getField();
      Complex complex8 = complex5.ZERO.sqrt();
      complex0.hashCode();
      Complex complex9 = complex6.sqrt();
      Complex complex10 = complex9.ZERO.conjugate();
      Complex complex11 = complex2.sinh();
      complex11.I.cos();
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.tan();
      complex8.getImaginary();
      complex5.atan();
      complex11.divide(complex10);
      complex6.pow(complex10);
      complex9.nthRoot(2039988882);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply(1468);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
      complex0.divide(0.48430514335632324);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.cos();
      complex0.acos();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.valueOf(949.1547, 949.1547);
      complex0.ONE.toString();
      double double0 = (-243.1231783);
      Complex complex1 = Complex.valueOf((-243.1231783), 615.2164468);
      complex1.NaN.toString();
      Complex complex2 = complex0.NaN.createComplex((-243.1231783), 615.2164468);
      complex2.ZERO.conjugate();
      complex2.ONE.log();
      try { 
        complex0.nthRoot((-1178));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,178
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = new Complex(339.0, 339.0);
      Complex complex1 = Complex.INF;
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.sqrt1z();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex1.log();
      complex2.I.subtract((-64.085));
      complex2.INF.nthRoot(1);
      Complex complex4 = complex3.ZERO.multiply(1560.56602005);
      Complex complex5 = complex4.INF.subtract(complex3);
      complex5.I.divide((-64.085));
      complex1.hashCode();
      complex2.getArgument();
      complex1.cos();
      Complex complex6 = complex1.asin();
      Complex complex7 = complex6.INF.multiply(complex2);
      Complex complex8 = Complex.valueOf(1560.56602005);
      complex8.I.add(complex7);
      complex2.cosh();
      Complex complex9 = complex0.sin();
      complex9.add(0.23324856162071228);
      complex7.negate();
      complex6.divide(9.693260855961159E-8);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3310.4661, 3031.0);
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = Complex.valueOf(0.0, (-3601.65592));
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex0.sqrt();
      Complex complex5 = complex4.pow((-3601.65592));
      Complex complex6 = complex4.INF.sqrt1z();
      complex4.ZERO.multiply(1.0187277793884277);
      complex6.INF.pow(complex0);
      Complex complex7 = complex5.I.cosh();
      complex4.getField();
      complex2.sin();
      Complex complex8 = complex1.log();
      Complex complex9 = complex2.multiply((-2124.5433333272667));
      complex9.nthRoot(1477);
      complex3.cos();
      complex8.equals(complex7);
      complex4.atan();
      complex2.cosh();
      complex2.negate();
      complex6.isInfinite();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex1.asin();
      complex0.NaN.divide(complex1);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.abs();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.add(Double.NaN);
      Complex complex1 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply(1022);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.atan();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = Complex.valueOf(937.6381, 937.6381);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1.0));
      Complex complex1 = Complex.INF;
      complex1.NaN.tanh();
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.NaN.sqrt1z();
      Complex complex4 = complex0.negate();
      Complex complex5 = complex4.NaN.createComplex((-1.0), 0.4932899475097656);
      complex4.abs();
      complex2.tan();
      complex4.tan();
      complex4.readResolve();
      complex5.subtract(complex0);
      complex4.nthRoot(1615);
      complex2.getField();
      complex5.getReal();
      complex0.reciprocal();
      complex3.add((-1.0));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.reciprocal();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.tan();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = new Complex(20.0);
      complex0.NaN.divide(complex4);
      Complex.valueOf((-2271.72272007));
      complex1.abs();
      complex1.conjugate();
      complex3.subtract((-2271.72272007));
      Complex complex5 = complex3.negate();
      Complex.valueOf((-1445.301147));
      complex5.getReal();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply((-6.336314643222911E118));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.multiply(0.0);
      Complex complex2 = Complex.valueOf((-2.2667083759873216E16));
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.ONE.exp();
      complex4.I.cos();
      Complex complex5 = complex0.exp();
      complex4.sqrt();
      complex0.acos();
      Complex complex6 = complex3.asin();
      complex1.exp();
      Complex complex7 = complex6.createComplex(0.0, 1.8057908946543575);
      complex0.equals(complex7);
      complex5.sqrt();
      complex1.hashCode();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = new Object();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = new Complex(339.0, 339.0);
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.divide(2.0);
      Complex complex3 = complex2.tan();
      complex0.getImaginary();
      complex1.atan();
      Complex complex4 = Complex.ZERO;
      complex2.divide(complex0);
      Complex complex5 = Complex.ONE;
      complex4.pow(complex3);
      complex5.cos();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.cos();
      complex0.isInfinite();
      complex1.ONE.reciprocal();
      Complex complex2 = complex0.reciprocal();
      complex2.add(complex1);
      complex2.conjugate();
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.reciprocal();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.reciprocal();
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-650.028), (-650.028));
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = new Complex((-466.6672261497084), 432.887);
      Complex complex1 = complex0.I.sinh();
      complex1.ONE.getField();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.atan();
      complex0.multiply(398);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.atan();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = Complex.valueOf(353.24373, 353.24373);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(398);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-58.5363934));
      complex0.ONE.add(415.16717);
      complex0.I.tanh();
      Complex complex1 = Complex.ZERO;
      complex1.INF.toString();
      complex1.ZERO.cos();
      Complex complex2 = complex0.INF.subtract(complex1);
      complex2.NaN.toString();
      Complex complex3 = complex2.ZERO.atan();
      complex3.ONE.multiply(17);
      complex2.NaN.getArgument();
      Complex.valueOf((-58.5363934));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex.valueOf(30.511503135174834);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.add(complex1);
      complex0.getField();
      complex1.ONE.atan();
      Complex complex3 = new Complex(1.0000000000000004, 1.0000000000000004);
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex4.conjugate();
      complex5.sinh();
      Complex complex6 = complex2.tan();
      complex1.getImaginary();
      Complex complex7 = new Complex((-785.0), Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.valueOf(1.0000000000000004, 1957.3618923987224);
      complex6.pow(complex8);
      complex1.toString();
      Complex complex9 = complex7.asin();
      complex3.tanh();
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = new Complex((-3534.858697121792));
      complex0.ZERO.getField();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.sqrt();
      complex0.NaN.pow(complex2);
      complex0.INF.readResolve();
      Complex complex3 = complex0.ZERO.tan();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex3.INF.conjugate();
      Complex complex6 = complex5.I.multiply(465.0);
      Complex complex7 = complex5.NaN.pow((-3058.98192));
      Complex complex8 = complex5.ZERO.log();
      complex8.sqrt1z();
      Complex complex9 = complex0.createComplex((-1.0), 870.57490191);
      Complex complex10 = complex9.I.pow(complex0);
      Complex complex11 = complex10.ZERO.sqrt();
      complex11.INF.cosh();
      Complex complex12 = complex9.ZERO.cos();
      complex4.ONE.cosh();
      complex0.asin();
      Complex complex13 = complex4.reciprocal();
      complex13.multiply(3.0227439688367925E-44);
      complex9.add(complex4);
      complex6.multiply((-2682));
      complex12.equals((Object) null);
      complex7.reciprocal();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply((-667.0));
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.sin();
      Complex complex2 = complex0.I.sin();
      Complex complex3 = complex2.NaN.sqrt();
      complex2.I.toString();
      Complex complex4 = complex0.ZERO.negate();
      Complex.valueOf(0.0);
      complex3.NaN.hashCode();
      complex0.I.toString();
      Complex complex5 = complex0.I.multiply((-159));
      Complex complex6 = complex5.I.divide(0.0);
      complex6.INF.subtract(Double.POSITIVE_INFINITY);
      Complex complex7 = complex5.ZERO.multiply(complex4);
      complex7.I.log();
      complex7.ONE.sinh();
      complex0.INF.hashCode();
      Complex complex8 = complex0.INF.reciprocal();
      Complex complex9 = complex8.cos();
      complex2.I.atan();
      Complex complex10 = complex9.ONE.createComplex(0.0, (-2823.6183733162306));
      complex0.hashCode();
      complex1.hashCode();
      Complex complex11 = complex4.exp();
      complex3.hashCode();
      complex0.subtract((double) (-159));
      complex5.I.log();
      complex11.ONE.add((double) (-159));
      complex10.asin();
      complex6.log();
      complex10.sqrt1z();
      complex11.multiply((-802.553));
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = Complex.valueOf(900.0);
      Complex complex1 = complex0.cosh();
      Complex.valueOf(0.0);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex0.ONE.acos();
      complex3.ZERO.subtract(complex1);
      Complex complex4 = complex2.ONE.sin();
      complex2.ZERO.pow(complex1);
      complex4.ONE.sqrt1z();
      complex0.subtract(complex2);
      complex2.hashCode();
      Complex complex5 = Complex.valueOf((-1837.8935), (-4292.0477));
      complex5.ONE.createComplex(1152.465155563782, (-4292.0477));
      complex0.multiply(complex5);
      complex2.createComplex(900.0, 187.098957506506);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.add((-53.39126321282934));
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.createComplex((-53.39126321282934), (-53.39126321282934));
      Complex complex4 = complex2.NaN.atan();
      Complex complex5 = complex4.NaN.pow(0.4531385898590088);
      complex5.ONE.hashCode();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex0.add(complex6);
      complex6.hashCode();
      Complex complex8 = complex6.exp();
      Complex complex9 = complex7.I.sqrt();
      complex9.acos();
      Complex complex10 = Complex.valueOf((-53.39126321282934));
      Complex complex11 = complex10.I.asin();
      complex11.exp();
      complex7.createComplex((-53.39126321282934), 0.0);
      complex8.equals(complex2);
      complex11.sqrt();
      complex6.multiply(complex7);
      complex6.hashCode();
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.1914734393460718E-8));
      complex0.subtract((-1.1914734393460718E-8));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.add((-20.0));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(1117);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.hashCode();
      Complex complex1 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.add((-53.39126321282934));
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.createComplex((-53.39126321282934), (-53.39126321282934));
      Complex complex4 = complex2.NaN.atan();
      Complex complex5 = complex4.NaN.pow(0.4531385898590088);
      complex5.ONE.hashCode();
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex0.add(complex6);
      complex6.hashCode();
      Complex complex8 = complex6.exp();
      Complex complex9 = complex7.I.sqrt();
      complex9.acos();
      Complex complex10 = Complex.valueOf((-53.39126321282934));
      Complex complex11 = complex10.I.asin();
      complex11.exp();
      complex7.createComplex((-53.39126321282934), 0.0);
      complex8.equals(complex2);
      complex11.sqrt();
      complex3.subtract(2.0);
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = new Complex((-854.14611), (-854.14611));
      complex0.readResolve();
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = complex0.pow(complex1);
      complex3.NaN.cosh();
      Complex complex4 = complex2.exp();
      complex4.subtract(Double.NaN);
      Complex.valueOf(Double.NaN);
      Complex complex5 = complex4.tan();
      complex5.ONE.reciprocal();
      Complex complex6 = complex4.exp();
      complex6.ONE.getArgument();
      complex0.ONE.add(110.042938);
      Complex complex7 = complex6.INF.pow(0.0);
      complex7.ZERO.multiply(0.0);
      Complex complex8 = complex0.createComplex((-2709.0029935), (-2709.0029935));
      complex6.cos();
      complex2.sin();
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.ONE.sin();
      Complex complex4 = complex1.add((-3461.66));
      complex1.ZERO.exp();
      Complex.valueOf((-3461.66));
      Complex complex5 = complex4.add(415.7);
      Complex complex6 = complex3.createComplex((-1731.5), (-3461.66));
      Complex complex7 = complex6.sqrt();
      complex1.hashCode();
      complex7.pow(20.0);
      Complex complex8 = Complex.INF;
      complex8.NaN.subtract(complex3);
      complex8.conjugate();
      complex2.reciprocal();
      complex3.multiply(complex6);
      Complex complex9 = new Complex((-1731.5));
      complex9.hashCode();
      complex5.tanh();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.negate();
      Complex complex1 = complex0.I.multiply(0);
      Complex complex2 = complex0.NaN.tanh();
      Complex complex3 = complex2.ZERO.tanh();
      complex3.ZERO.tanh();
      complex0.getImaginary();
      Complex complex4 = complex2.exp();
      complex4.hashCode();
      Complex complex5 = complex2.add(complex4);
      complex5.I.reciprocal();
      Complex complex6 = complex5.ZERO.log();
      complex2.toString();
      Complex.valueOf(0.0);
      Complex complex7 = complex2.multiply(0.0);
      complex1.NaN.negate();
      Complex complex8 = Complex.valueOf((double) 0, (-20.0));
      Complex complex9 = complex7.ONE.add(complex8);
      complex9.ZERO.conjugate();
      Complex complex10 = complex9.NaN.acos();
      Complex complex11 = complex10.I.pow((-3966.2011));
      Complex complex12 = complex1.subtract((double) 0);
      Complex complex13 = complex12.divide((-186.99924));
      complex13.getField();
      complex11.sqrt();
      complex6.readResolve();
      complex10.nthRoot(1673);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.isNaN();
      Complex complex1 = complex0.asin();
      Complex complex2 = Complex.valueOf(0.0);
      complex2.NaN.abs();
      Complex complex3 = complex1.ONE.multiply(complex0);
      Complex complex4 = Complex.valueOf(148.54044618);
      Complex complex5 = complex4.tanh();
      Complex complex6 = complex5.ZERO.add(Double.NaN);
      complex6.ONE.atan();
      complex6.I.getField();
      Complex complex7 = complex0.subtract(148.54044618);
      complex7.NaN.divide(complex4);
      complex5.isInfinite();
      complex0.multiply(1492);
      complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      Complex complex2 = new Complex(326.0858, 2018.2230412);
      Object object0 = complex2.readResolve();
      complex1.equals(object0);
      Complex complex3 = complex1.add(complex2);
      Complex complex4 = complex1.log();
      Complex complex5 = complex4.NaN.log();
      complex5.I.sin();
      complex4.NaN.multiply(904);
      complex4.ZERO.getArgument();
      Complex complex6 = complex2.pow(complex0);
      Complex complex7 = complex6.sin();
      complex4.ONE.sin();
      complex4.INF.toString();
      Complex complex8 = complex7.ONE.sin();
      complex8.NaN.divide(0.0);
      complex3.multiply((-993));
      complex2.acos();
      complex4.multiply((double) (-993));
      complex2.abs();
      Complex complex9 = Complex.valueOf((-20.0), 0.0);
      complex9.I.pow(complex3);
      Complex complex10 = complex0.atan();
      complex9.isInfinite();
      Complex complex11 = complex10.multiply((-993));
      complex11.I.tanh();
      Complex complex12 = complex3.multiply(0.0);
      complex12.ONE.multiply(complex2);
      complex1.multiply(complex5);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = Complex.valueOf(519.0);
      Complex complex1 = new Complex(519.0, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow(576.4315);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.multiply(0.0);
      Complex.valueOf((-2.2667083759873216E16));
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.exp();
      complex2.I.cos();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.tanh();
      complex4.NaN.asin();
      complex2.cos();
      complex3.getArgument();
      complex3.readResolve();
      complex1.multiply((-2.2667083759873216E16));
      complex0.hashCode();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.getArgument();
      Complex complex1 = complex0.INF.add(0.0);
      complex0.I.toString();
      complex0.readResolve();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex1.negate();
      complex1.toString();
      Complex complex4 = complex1.createComplex(0.0, 0.0);
      Complex complex5 = complex4.ZERO.subtract(0.7853981633974483);
      Complex complex6 = new Complex(0.7853981633974483, 0.7853981633974483);
      Complex complex7 = complex4.subtract(complex6);
      Complex complex8 = complex3.multiply(complex7);
      Complex complex9 = complex6.ONE.createComplex(0.7853981633974483, 1084.6355961933139);
      Complex complex10 = complex0.pow(complex2);
      Complex complex11 = complex10.sinh();
      complex11.hashCode();
      assertEquals(0.2698318730806651, complex11.getReal(), 0.01);
      
      Complex complex12 = complex8.pow(0.0);
      Complex complex13 = complex7.tanh();
      complex0.subtract(6.283185307179586);
      Complex complex14 = complex6.multiply(complex5);
      assertEquals((-0.6168502750680849), complex14.getReal(), 0.01);
      assertEquals((-0.6168502750680849), complex14.getImaginary(), 0.01);
      
      Complex complex15 = complex9.subtract(complex7);
      assertEquals(1085.4209943567114, complex15.getImaginary(), 0.01);
      
      complex7.abs();
      complex8.sin();
      complex3.sinh();
      complex3.getField();
      Complex complex16 = complex3.pow(complex6);
      Complex complex17 = complex16.NaN.asin();
      Complex complex18 = complex13.sqrt();
      complex12.isNaN();
      assertTrue(complex12.equals((Object)complex17));
      
      complex13.getField();
      complex5.isNaN();
      Complex complex19 = complex18.pow(1.1158160971176672E-222);
      assertEquals((-1.524021637360903E-222), complex19.getImaginary(), 0.01);
      
      Complex complex20 = complex6.cosh();
      assertEquals(0.6142431274865955, complex20.getImaginary(), 0.01);
      assertEquals(0.9366400694314301, complex20.getReal(), 0.01);
  }
}
