/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 09:10:23 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-734.0));
      complex0.cos();
      Complex complex2 = new Complex((-20.0), (-20.0));
      complex2.tan();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex.valueOf((-2795.0));
      Complex complex0 = new Complex((-2795.0), Double.NaN);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-2769.4735171506713), 20.0);
      complex0.asin();
      complex1.tan();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.pow(1133.7961739586249);
      Complex complex2 = complex0.pow(complex1);
      complex2.tanh();
      Complex complex3 = complex1.pow((-734.0));
      Complex complex4 = complex0.reciprocal();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex3.asin();
      Complex complex7 = Complex.valueOf(1693.5735526535907);
      complex7.exp();
      Complex complex8 = complex6.pow((-1707.03927444623));
      Complex complex9 = new Complex((-20.0));
      complex3.cos();
      complex8.tan();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.INF.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2522.564106235429, 2196.4885);
      Complex complex1 = new Complex(2522.564106235429, 2522.564106235429);
      Complex complex2 = complex0.I.divide(complex1);
      complex2.ONE.cosh();
      Complex complex3 = complex2.ONE.cos();
      complex2.INF.hashCode();
      Complex complex4 = complex0.cos();
      complex4.I.add(complex0);
      Complex complex5 = complex4.negate();
      complex5.NaN.cos();
      complex1.NaN.readResolve();
      complex4.INF.sin();
      Complex complex6 = complex0.pow(complex1);
      complex6.ONE.multiply((-1073741824));
      Complex complex7 = complex0.multiply(1955);
      Complex complex8 = complex0.pow(1.0);
      Complex complex9 = complex4.log();
      complex3.nthRoot(1955);
      complex9.multiply(complex8);
      Complex complex10 = complex7.negate();
      complex10.ZERO.divide(2196.4885);
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.ONE.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract((-2241.94931189));
      Complex complex2 = Complex.valueOf(20.0, 20.0);
      complex0.getArgument();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.divide(complex2);
      Complex.valueOf((-3264.9379));
      Complex complex5 = complex4.conjugate();
      Complex complex6 = Complex.INF;
      complex5.cosh();
      Complex complex7 = complex1.multiply(2113);
      complex4.equals(complex7);
      Complex complex8 = new Complex(0.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      complex1.divide(complex0);
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex2.subtract(complex3);
      complex4.multiply(218);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.1304970373249033E199);
      Complex complex1 = Complex.valueOf(6194.720131613771, 1.1304970373249033E199);
      complex1.multiply((-226));
      complex1.asin();
      Complex.valueOf(3786593.294137773);
      complex0.pow(1.1304970373249033E199);
      complex0.multiply((-226));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = Complex.valueOf(341.32631854105);
      Complex complex4 = complex1.cosh();
      complex3.atan();
      Complex complex5 = complex1.conjugate();
      complex2.sin();
      complex3.multiply(complex5);
      Complex complex6 = Complex.INF;
      Complex complex7 = complex4.tan();
      Complex complex8 = new Complex((-2726.56563128), (-0.6905817003766437));
      complex8.INF.sqrt();
      complex8.asin();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow((-1474.1827369753144));
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = Complex.valueOf((-7911841.269726428));
      Complex complex4 = complex2.tan();
      Complex complex5 = Complex.valueOf((-2.3470351753125604E-8), (-7911841.269726428));
      complex5.multiply(0);
      complex5.exp();
      Complex complex6 = complex4.asin();
      Complex complex7 = Complex.valueOf((double) (-226));
      complex6.pow(802.521865415);
      Complex complex8 = new Complex(2158.86929);
      complex3.cos();
      complex0.cos();
      Complex complex9 = Complex.valueOf((-2890.9433875882874));
      complex7.add(complex9);
      complex4.sinh();
      Complex.valueOf(802.521865415);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.1924652852269793), (-1.1924652852269793));
      Complex complex1 = complex0.INF.subtract((-1.1924652852269793));
      complex0.sinh();
      complex1.ONE.getArgument();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.divide(complex2);
      Complex.valueOf((-1.1924652852269793));
      Complex complex4 = complex3.NaN.cosh();
      Complex complex5 = complex3.atan();
      complex5.I.conjugate();
      complex3.ZERO.sin();
      Complex complex6 = complex5.multiply(2135);
      complex5.getArgument();
      complex6.equals(complex0);
      complex4.readResolve();
      Complex complex7 = new Complex(2135, 2135);
      complex7.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.ONE.createComplex(1.1304970373249033E199, 479.037);
      Complex complex3 = complex2.ZERO.sqrt1z();
      complex2.ONE.cos();
      Complex complex4 = complex3.cosh();
      complex0.getArgument();
      Complex complex5 = complex0.conjugate();
      complex5.getArgument();
      complex5.reciprocal();
      Complex complex6 = Complex.I;
      complex1.add(1.1304970373249033E199);
      Complex complex7 = complex0.sqrt1z();
      Complex complex8 = complex4.cos();
      complex7.tan();
      complex6.cos();
      complex8.add(complex6);
      complex6.nthRoot(3962);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-2.0), Double.NaN);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.pow(6.283185307179586);
      complex2.I.pow(complex3);
      Complex complex4 = complex2.NaN.tan();
      Complex.valueOf(Double.NaN, 1546.021988);
      Complex complex5 = Complex.valueOf((-1.2362653723769037E-8));
      Complex complex6 = complex5.multiply((-1565));
      complex1.exp();
      complex4.asin();
      Complex complex7 = Complex.valueOf((double) (-1565));
      complex7.pow(1546.021988);
      complex5.NaN.cos();
      Complex complex8 = new Complex(Double.NaN);
      complex6.isInfinite();
      Complex complex9 = complex3.multiply(270);
      complex9.I.add(complex4);
      Complex complex10 = complex1.multiply((double) 1665);
      complex6.isInfinite();
      Complex complex11 = complex0.reciprocal();
      Complex complex12 = complex10.tanh();
      complex11.isInfinite();
      complex12.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-1474.1827369753144), 3097.36);
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex3.ONE.pow(3097.36);
      Complex complex5 = complex4.I.reciprocal();
      Complex.valueOf(1768.078393, 1768.078393);
      complex5.toString();
      complex2.add((-0.0016036703588885725));
      Complex complex6 = Complex.valueOf(359.70971242, 359.70971242);
      Complex complex7 = complex6.subtract(1768.078393);
      Complex complex8 = Complex.valueOf((-476.8));
      complex8.abs();
      complex5.sqrt();
      complex7.add(complex4);
      complex0.reciprocal();
      complex8.getField();
      Complex complex9 = Complex.NaN;
      Complex complex10 = Complex.INF;
      Complex.valueOf((-1474.1827369753144), 9539520.533492);
      Complex complex11 = complex10.multiply(complex6);
      complex11.nthRoot(2085);
      Complex complex12 = complex6.multiply(1811);
      complex12.reciprocal();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.createComplex((-359.70971242), 3097.748617847619);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex1.pow(3097.748617847619);
      Complex complex5 = complex2.reciprocal();
      complex3.toString();
      complex3.subtract(2.5346947846365435E-89);
      complex5.toString();
      Complex.valueOf(2.5346947846365435E-89, (-476.8));
      complex5.toString();
      Complex complex6 = complex2.add(0.7071067811865476);
      Complex complex7 = complex6.subtract(140.113906326503);
      complex0.abs();
      Complex complex8 = complex5.sqrt();
      Complex complex9 = complex8.add(complex7);
      Complex complex10 = complex9.reciprocal();
      complex10.getField();
      Complex complex11 = Complex.NaN;
      complex4.I.add(140.113906326503);
      Complex complex12 = Complex.INF;
      Complex complex13 = Complex.valueOf(0.0, (-3502.3782852161));
      complex0.multiply(complex13);
      complex6.nthRoot(1183);
      complex3.multiply((-809));
      complex4.reciprocal();
      complex12.sqrt();
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3045.4);
      Complex complex1 = Complex.valueOf(3045.4);
      Complex complex2 = complex1.pow((-1259.7405650724252));
      Complex complex3 = complex2.reciprocal();
      complex1.toString();
      Complex complex4 = complex2.subtract((-476.8));
      complex4.toString();
      Complex complex5 = Complex.valueOf((-476.8), 2899.11623533826);
      complex1.getArgument();
      Complex complex6 = Complex.ONE;
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = Complex.I;
      Complex complex9 = complex3.add(3045.4);
      complex9.INF.sinh();
      Complex complex10 = complex7.sqrt1z();
      Complex complex11 = complex0.cos();
      complex11.tan();
      complex0.cos();
      complex5.add(complex10);
      complex1.nthRoot(309);
      complex5.pow(complex9);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.ONE.createComplex(1.1304970373249033E199, 479.037);
      Complex complex3 = complex2.exp();
      Complex complex4 = complex1.tan();
      Complex complex5 = Complex.valueOf(0.0, (-916.66934212));
      Complex complex6 = complex5.multiply(37);
      complex6.exp();
      Complex complex7 = complex0.asin();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex3.pow(Double.POSITIVE_INFINITY);
      Complex complex8 = new Complex(20.0);
      complex6.isInfinite();
      complex7.multiply((-226));
      complex5.sinh();
      Complex complex9 = complex8.multiply(6.283185307179586);
      Complex complex10 = new Complex(941.5698235, (-226));
      complex10.isInfinite();
      Complex complex11 = Complex.ONE;
      complex11.reciprocal();
      complex7.tanh();
      complex9.isInfinite();
      complex4.subtract(1673.86895539);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.add(247.8819);
      Complex complex1 = Complex.valueOf(247.8819, 247.8819);
      complex1.tan();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-5.574080023496771E-94));
      Complex complex1 = complex0.multiply(2500);
      complex1.equals(complex0);
      Complex complex2 = new Complex(2500, (-1987.51));
      complex2.acos();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.sqrt1z();
      Complex complex1 = complex0.ONE.createComplex(1.1304970373249033E199, 479.037);
      Complex complex2 = complex1.ZERO.sqrt1z();
      complex1.ONE.cos();
      complex2.cosh();
      complex0.getArgument();
      Complex complex3 = complex0.conjugate();
      Complex complex4 = Complex.NaN;
      complex1.sinh();
      Complex complex5 = Complex.NaN;
      Complex complex6 = complex5.divide((-1684.93));
      complex6.ONE.multiply(complex3);
      Complex complex7 = Complex.INF;
      complex7.tan();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.sqrt1z();
      Complex complex1 = complex0.ONE.createComplex(1.1304970373249033E199, 479.037);
      Complex complex2 = complex1.ZERO.sqrt1z();
      complex1.ONE.cos();
      Complex complex3 = complex2.cosh();
      complex0.getArgument();
      complex0.equals(complex2);
      complex3.readResolve();
      Complex complex4 = complex0.asin();
      Complex.valueOf(1.1304970373249033E199);
      Complex complex5 = complex4.pow((-2180.79460036));
      Complex complex6 = new Complex((-1213.0));
      Complex complex7 = Complex.ZERO;
      complex7.isInfinite();
      complex5.multiply(1665);
      complex5.sinh();
      complex0.multiply((double) 1665);
      complex2.isInfinite();
      complex1.reciprocal();
      complex7.tanh();
      complex6.isInfinite();
      Complex complex8 = Complex.I;
      complex8.subtract(3179.0645823119);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(1185.221956, 20.0);
      Complex complex1 = Complex.I;
      complex1.toString();
      Complex complex2 = Complex.valueOf(5.1847060206155E21, 20.0);
      complex0.getArgument();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = Complex.I;
      complex3.add(5.1847060206155E21);
      complex0.isInfinite();
      Complex complex5 = complex2.multiply(601);
      Complex complex6 = complex2.tanh();
      Complex complex7 = new Complex(20.0);
      Complex complex8 = complex7.negate();
      Object object0 = new Object();
      complex4.equals((Object) null);
      complex7.tanh();
      Object object1 = complex6.readResolve();
      complex2.equals(object1);
      complex0.acos();
      complex6.subtract(complex0);
      complex1.pow(complex5);
      Complex complex9 = new Complex(1185.221956, (-1849.699965247));
      complex8.hashCode();
      Complex complex10 = Complex.valueOf(0.41078129050290885);
      Complex complex11 = complex10.divide(2.2086994756104319E-75);
      complex7.abs();
      complex1.createComplex(5.1847060206155E21, 1404350.0849844662);
      complex7.asin();
      complex11.readResolve();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(2147483554);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.add(1.0);
      Complex complex3 = complex2.tan();
      complex2.equals(complex2);
      Complex complex4 = new Complex(1.0, 5.924290380648597E-224);
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.subtract(2.0);
      complex0.getArgument();
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.sin();
      Complex complex4 = Complex.valueOf(76.103629194, 2645.74061);
      complex4.toString();
      Complex complex5 = complex4.add(2.0);
      Complex complex6 = complex3.subtract(0.0);
      complex5.sqrt();
      Complex complex7 = complex5.add(complex1);
      Complex complex8 = complex1.reciprocal();
      complex8.getField();
      Complex complex9 = complex7.sin();
      complex6.reciprocal();
      complex9.multiply(complex8);
      complex2.nthRoot(37);
      complex6.multiply(37);
      complex5.multiply((-1029));
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-1474.1827369753144), 3097.36);
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex3.ONE.pow(3097.36);
      Complex complex5 = complex4.I.reciprocal();
      complex0.I.toString();
      complex3.ONE.subtract((-476.8));
      complex0.NaN.toString();
      Complex complex6 = Complex.valueOf((-1474.1827369753144), 2199.32);
      complex6.NaN.getArgument();
      Complex complex7 = complex1.INF.reciprocal();
      Complex complex8 = complex7.NaN.createComplex((-1474.1827369753144), 3097.36);
      Complex complex9 = complex0.add(3097.36);
      complex1.isInfinite();
      Complex complex10 = complex8.conjugate();
      complex6.toString();
      complex5.subtract((-675.8427491598));
      Complex complex11 = complex10.divide((-1474.1827369753144));
      Complex complex12 = complex11.cosh();
      Complex complex13 = complex12.sinh();
      complex1.cosh();
      complex9.getArgument();
      complex2.equals(complex7);
      complex13.NaN.cosh();
      complex2.readResolve();
      complex12.multiply((-429));
      complex10.divide(complex4);
      Complex complex14 = Complex.INF;
      complex13.sqrt1z();
      Complex.valueOf((-3618.77));
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.subtract(0.0);
      complex1.NaN.sinh();
      complex1.ONE.getArgument();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = Complex.valueOf(0.0);
      complex3.NaN.cosh();
      Complex complex5 = complex3.atan();
      Complex complex6 = complex5.I.conjugate();
      complex6.ONE.pow(complex3);
      complex3.ZERO.sin();
      complex5.ONE.asin();
      Complex complex7 = complex5.multiply(2090);
      complex2.hashCode();
      complex3.conjugate();
      complex7.toString();
      complex1.subtract((double) 2090);
      Complex complex8 = complex3.divide((double) 2090);
      complex8.INF.cosh();
      complex0.NaN.sinh();
      complex7.multiply(2090);
      complex3.divide(complex6);
      complex7.negate();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.ONE.createComplex(1.1304970373249033E199, 479.037);
      Complex complex3 = complex2.ZERO.sqrt1z();
      complex2.ONE.cos();
      Complex complex4 = complex3.cosh();
      complex0.getArgument();
      complex0.equals(complex3);
      complex4.readResolve();
      Complex complex5 = complex2.cosh();
      complex1.getArgument();
      Complex complex6 = Complex.valueOf(1474.2186269095398);
      complex0.equals(complex6);
      complex4.readResolve();
      complex0.multiply((-429));
      complex6.divide(complex5);
      Complex complex7 = Complex.INF;
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-1474.1827369753144), 3097.36);
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex3.ONE.pow(3097.36);
      Complex complex5 = complex4.I.reciprocal();
      complex0.I.toString();
      Complex complex6 = complex3.ONE.subtract((-476.8));
      complex0.NaN.toString();
      Complex.valueOf((-1474.1827369753144), 2199.32);
      complex4.toString();
      complex1.add(20.0);
      Complex complex7 = complex5.subtract(1661.74081);
      complex7.ONE.abs();
      Complex complex8 = complex5.sqrt();
      Complex complex9 = complex0.add(complex6);
      Complex complex10 = complex8.reciprocal();
      complex5.getField();
      Complex complex11 = Complex.NaN;
      Complex complex12 = Complex.INF;
      complex12.reciprocal();
      complex10.multiply(complex6);
      complex0.nthRoot(1183);
      complex6.multiply(1183);
      Complex complex13 = complex9.multiply((-4717));
      complex13.divide(242.21100530733065);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.subtract(0.0);
      Complex complex2 = Complex.ZERO;
      complex1.ONE.getArgument();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.divide(complex3);
      Complex.valueOf(0.0);
      complex4.NaN.cosh();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex5.I.conjugate();
      complex6.ONE.pow(complex4);
      complex4.ZERO.sin();
      complex5.ONE.asin();
      Complex complex7 = complex5.multiply(2090);
      complex3.hashCode();
      complex4.conjugate();
      complex7.toString();
      complex1.subtract((double) 2090);
      Complex complex8 = complex4.divide((double) 2090);
      Complex complex9 = complex8.INF.cosh();
      complex0.NaN.sinh();
      complex9.INF.cosh();
      complex3.getArgument();
      complex2.equals(complex0);
      complex4.readResolve();
      complex2.multiply((-429));
      complex5.divide(complex1);
      Complex complex10 = Complex.INF;
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = Complex.INF;
      complex2.multiply((-2146881698));
      complex0.equals(complex1);
      Complex complex3 = new Complex(2135, 2135);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1989.443));
      complex0.getField();
      Complex complex1 = Complex.valueOf((-1989.443));
      Complex complex2 = complex1.log();
      Complex complex3 = complex0.sinh();
      Complex complex4 = complex1.exp();
      Complex complex5 = Complex.valueOf((-1989.443));
      complex5.cosh();
      Complex complex6 = complex2.asin();
      complex6.ONE.divide(1.0);
      Complex complex7 = complex4.cosh();
      complex7.toString();
      Complex complex8 = Complex.I;
      complex8.add(35.49720735433735);
      complex0.subtract(1.1241179396053055E261);
      complex2.sqrt();
      Complex complex9 = Complex.ZERO;
      Complex complex10 = complex9.add(complex3);
      Complex complex11 = complex3.reciprocal();
      complex10.getField();
      complex11.sin();
      complex5.reciprocal();
      complex5.multiply(complex7);
      try { 
        complex1.nthRoot((-1029));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,029
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.232209857605591E19);
      Complex complex1 = complex0.ZERO.negate();
      complex0.acos();
      Complex complex2 = complex1.createComplex(4.232209857605591E19, 4.232209857605591E19);
      complex2.I.tan();
      complex2.ZERO.conjugate();
      try { 
        complex2.ONE.nthRoot((-2791));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,791
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.add(Double.NaN);
      Complex complex1 = Complex.INF;
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      complex0.abs();
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.pow(6.283185307179586);
      Complex complex4 = complex2.I.pow(complex3);
      Complex complex5 = complex4.exp();
      Complex complex6 = complex5.NaN.tan();
      Complex complex7 = Complex.valueOf(438.3028473, 6.283185307179586);
      complex6.getArgument();
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = complex8.createComplex(6.505543680281925E9, 438.3028473);
      complex0.add(Double.NaN);
      complex1.isInfinite();
      Complex complex10 = complex1.multiply(37);
      complex8.tanh();
      Complex complex11 = complex9.negate();
      Object object0 = new Object();
      complex7.equals(complex8);
      Complex complex12 = complex2.tanh();
      complex8.equals((Object) null);
      Complex complex13 = complex11.acos();
      Complex complex14 = Complex.INF;
      complex0.subtract(complex14);
      complex5.pow(complex10);
      complex4.readResolve();
      complex3.hashCode();
      complex13.cosh();
      complex8.abs();
      complex12.createComplex(Double.NaN, (-1.0));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-1474.1827369753144), 3097.36);
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex3.ONE.pow(3097.36);
      complex4.I.reciprocal();
      complex0.I.toString();
      complex3.ONE.subtract((-476.8));
      complex0.NaN.toString();
      Complex complex5 = Complex.valueOf((-1474.1827369753144), 2199.32);
      complex5.NaN.getArgument();
      Complex complex6 = complex1.INF.reciprocal();
      Complex complex7 = complex6.NaN.createComplex((-1474.1827369753144), 3097.36);
      complex0.add(3097.36);
      complex1.isInfinite();
      Complex complex8 = complex0.multiply(37);
      Complex complex9 = complex8.tanh();
      complex0.negate();
      Object object0 = new Object();
      complex3.equals(object0);
      complex0.tanh();
      complex7.equals(object0);
      Complex complex10 = complex1.acos();
      complex3.subtract(complex9);
      Complex complex11 = complex3.pow(complex9);
      complex11.ZERO.sqrt1z();
      complex11.readResolve();
      complex11.hashCode();
      complex2.cosh();
      complex10.abs();
      complex0.createComplex(9.060454075431377, (-77.84269039));
      complex9.divide((-476.8));
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.readResolve();
      complex0.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.pow(6.283185307179586);
      Complex complex3 = complex1.I.pow(complex2);
      Complex complex4 = complex3.exp();
      complex4.NaN.tan();
      complex3.NaN.reciprocal();
      Complex complex5 = Complex.valueOf(1546.021988, 0.0);
      complex5.I.multiply((-226));
      Complex complex6 = complex5.INF.exp();
      complex6.NaN.asin();
      Complex complex7 = Complex.valueOf(6.283185307179586);
      complex7.pow(6.283185307179586);
      complex2.I.sqrt1z();
      complex0.isInfinite();
      complex2.multiply(1665);
      complex3.nthRoot(49);
      complex2.nthRoot(49);
      complex1.getImaginary();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.createComplex(1132.918033, Double.POSITIVE_INFINITY);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = complex1.NaN.tanh();
      Complex complex3 = complex2.ONE.pow(3097.36);
      Complex complex4 = complex3.I.reciprocal();
      complex0.I.toString();
      complex2.ONE.subtract((-476.8));
      complex0.NaN.toString();
      Complex complex5 = Complex.valueOf((-1474.1827369753144), 2199.32);
      complex5.NaN.getArgument();
      Complex complex6 = complex0.INF.reciprocal();
      complex6.NaN.createComplex((-1474.1827369753144), 3097.36);
      Complex complex7 = complex6.exp();
      Complex complex8 = complex7.asin();
      Complex complex9 = Complex.NaN;
      complex9.pow((-1474.1827369753144));
      complex7.sqrt1z();
      complex4.isInfinite();
      complex8.multiply(1665);
      complex0.sinh();
      complex1.multiply(2199.32);
      complex0.isInfinite();
      complex5.reciprocal();
      complex6.tanh();
      complex8.isInfinite();
      Complex complex10 = new Complex(2.0);
      complex10.subtract((-1.900947109027913E-7));
      complex9.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.subtract(2.0);
      complex0.getArgument();
      Complex complex2 = complex1.createComplex(2.0, 2.0);
      complex0.sqrt1z();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.tan();
      complex2.cos();
      complex4.add(complex3);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.readResolve();
      complex0.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.pow(6.283185307179586);
      Complex complex3 = complex1.I.pow(complex2);
      Complex complex4 = complex3.exp();
      Complex complex5 = complex1.atan();
      Complex complex6 = complex5.conjugate();
      Complex complex7 = complex6.pow(complex4);
      Complex complex8 = complex1.sin();
      Complex complex9 = complex0.asin();
      Complex complex10 = complex2.multiply(2090);
      complex2.hashCode();
      complex2.conjugate();
      complex10.toString();
      complex2.subtract(1.0);
      Complex complex11 = complex5.divide(6.283185307179586);
      complex7.cosh();
      Complex complex12 = complex9.sinh();
      Complex complex13 = complex8.cosh();
      complex3.getArgument();
      complex2.equals("(-637.8076824621277, -304.0366372926853)");
      complex4.readResolve();
      complex10.multiply(2146456635);
      complex11.divide(complex12);
      complex13.negate();
      Complex complex14 = Complex.I;
      complex14.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1230.068545366), (-1230.068545366));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.log();
      complex4.ONE.sinh();
      complex2.ZERO.cos();
      complex2.I.acos();
      complex1.INF.pow((-1230.068545366));
      Complex complex5 = complex2.subtract(complex3);
      Complex complex6 = complex1.divide(1944.48632205);
      Complex complex7 = Complex.ZERO;
      complex7.cosh();
      Complex complex8 = complex5.sinh();
      Complex complex9 = complex6.cosh();
      complex9.getArgument();
      complex7.equals((Object) null);
      Complex complex10 = Complex.INF;
      complex10.readResolve();
      Complex complex11 = complex3.multiply((-429));
      complex8.divide(complex11);
      Complex complex12 = new Complex(20.0, (-429));
      complex12.negate();
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      assertEquals((-0.8813735870195429), complex1.getImaginary(), 0.01);
      
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ONE.sqrt();
      Complex complex2 = complex1.NaN.multiply(0.0);
      Complex complex3 = complex0.INF.sqrt1z();
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex4.NaN.sqrt();
      Complex complex6 = complex0.sqrt1z();
      complex6.INF.add(0.0);
      complex4.ONE.tan();
      Complex complex7 = complex0.cosh();
      complex7.NaN.tan();
      complex4.divide(complex3);
      complex5.pow(complex4);
      complex0.pow(0.0);
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.sqrt1z();
      Complex complex1 = complex0.ONE.createComplex(1.1304970373249033E199, 479.037);
      complex1.ZERO.sqrt1z();
      Complex complex2 = complex1.ONE.cos();
      complex0.tan();
      Complex complex3 = complex0.cos();
      complex2.add(complex3);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = new Complex((-3987.89178499296), (-3987.89178499296));
      Complex complex1 = complex0.add((-3819.81069));
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.toString();
      Complex complex1 = new Complex(0.0, 1646.168);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.I.negate();
      complex0.isNaN();
      Complex complex4 = Complex.valueOf(2027.4244);
      complex4.INF.exp();
      complex0.readResolve();
      complex3.pow(0.0);
      complex2.toString();
      complex2.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0342514383702196E-7), (-1.0342514383702196E-7));
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex0.divide((-1.0342514383702196E-7));
      complex2.I.acos();
      complex1.ZERO.multiply(complex0);
      complex2.ONE.readResolve();
      Complex complex3 = complex0.atan();
      complex3.INF.readResolve();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex0.sinh();
      Complex complex6 = complex1.acos();
      Complex complex7 = complex6.sqrt1z();
      complex2.I.divide(0.0);
      Complex.valueOf((-1.0342514383702196E-7), (-1.0));
      complex0.isInfinite();
      complex2.getField();
      complex7.tanh();
      Complex.valueOf((-1.0342514383702196E-7));
      complex6.cosh();
      Complex complex8 = Complex.valueOf((-1.0342514383702196E-7));
      complex8.NaN.cos();
      Complex complex9 = complex1.subtract(complex8);
      complex9.isNaN();
      complex5.asin();
      complex0.hashCode();
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.multiply((-1714));
      complex1.ONE.getArgument();
      Complex complex2 = complex1.INF.conjugate();
      Complex complex3 = complex2.ZERO.divide(complex0);
      complex3.NaN.abs();
      Complex complex4 = complex0.acos();
      Complex complex5 = complex4.ZERO.multiply((-1714));
      complex1.INF.multiply((-1714));
      complex0.getArgument();
      Complex complex6 = complex1.ONE.log();
      complex6.reciprocal();
      complex1.NaN.getArgument();
      Complex complex7 = complex1.divide(complex4);
      Complex complex8 = complex0.cosh();
      Complex complex9 = complex7.multiply(complex1);
      Complex complex10 = complex9.I.add(complex8);
      Complex complex11 = complex10.INF.multiply(complex3);
      Complex complex12 = complex11.cosh();
      complex12.I.cosh();
      Complex complex13 = complex0.exp();
      complex8.getArgument();
      complex4.ONE.tanh();
      complex8.I.acos();
      Complex complex14 = complex5.subtract(complex11);
      complex4.sqrt();
      Complex complex15 = complex8.conjugate();
      Complex complex16 = complex14.reciprocal();
      Complex.valueOf(Double.NaN, Double.NaN);
      complex13.toString();
      complex14.INF.readResolve();
      Complex.valueOf(0.5421652793884277);
      complex5.sin();
      complex15.getArgument();
      complex15.cos();
      complex16.getField();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3395.18335), (-3395.18335));
      Complex complex1 = Complex.NaN;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf((-1341.911688), (-1341.911688));
      complex1.ZERO.subtract(complex0);
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ONE.sin();
      complex2.NaN.sqrt1z();
      complex0.readResolve();
      complex2.isInfinite();
      complex2.tanh();
      complex1.isInfinite();
      Complex complex4 = complex3.multiply((-3120.0));
      Complex complex5 = complex1.acos();
      complex5.INF.createComplex((-1341.911688), 0.0);
      complex4.add(complex5);
      complex5.readResolve();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.I.subtract(2.0);
      Complex complex4 = complex1.subtract(complex0);
      complex4.ZERO.pow(2.0);
      complex2.toString();
      Complex.valueOf((-3276.0495929189));
      complex0.reciprocal();
      complex4.tanh();
      complex3.pow(8.584676196065558E-8);
      complex2.isNaN();
      complex0.getField();
      Complex.valueOf(666.8, 2.0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex.valueOf(3045.4);
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.sinh();
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.sinh();
      Complex complex4 = Complex.INF;
      complex3.tan();
      complex1.isNaN();
      complex3.multiply(1.0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = new Complex(1185.221956, 20.0);
      complex0.ONE.tan();
      Complex.valueOf((-1032.394));
      Complex complex1 = complex0.asin();
      complex0.multiply(0.0);
      complex1.asin();
      Complex complex2 = complex1.createComplex(1203.1403, 0.0);
      complex2.getReal();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.sin();
      Complex complex1 = complex0.I.asin();
      complex0.I.hashCode();
      Complex complex2 = new Complex(0.0, 1471.705141587242);
      Complex complex3 = complex2.NaN.sin();
      complex3.acos();
      complex3.ZERO.sinh();
      Complex complex4 = complex0.pow(complex2);
      complex2.getField();
      complex4.I.nthRoot(1192);
      Complex complex5 = complex3.multiply(complex4);
      Complex complex6 = complex5.I.tanh();
      complex6.ONE.negate();
      complex1.readResolve();
      complex4.tan();
      complex2.conjugate();
      complex4.tan();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide((-590.69));
      complex1.I.sin();
      Complex complex2 = complex1.ZERO.pow(1.9503931430716318E-65);
      Complex complex3 = complex0.cosh();
      complex3.NaN.tan();
      complex3.ONE.tan();
      Complex complex4 = complex1.ONE.pow(0.0);
      Complex complex5 = Complex.valueOf(Double.NaN);
      complex5.ONE.acos();
      complex1.getArgument();
      complex2.getReal();
      complex1.tanh();
      Complex complex6 = complex1.sin();
      complex2.readResolve();
      Complex complex7 = complex5.multiply(1096);
      complex6.sinh();
      complex0.toString();
      complex4.cosh();
      complex7.getReal();
      complex2.getField();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.tan();
      complex0.subtract(complex1);
      Complex complex2 = complex0.INF.conjugate();
      complex2.ONE.createComplex(1519.99915491, 1519.99915491);
      Complex complex3 = complex0.cosh();
      complex3.asin();
      Complex complex4 = complex3.sinh();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(1217);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.NaN.divide(complex0);
      Complex complex3 = complex2.ZERO.cos();
      Complex complex4 = complex2.I.cosh();
      Complex complex5 = complex1.acos();
      complex3.ONE.subtract(2236.075);
      Complex complex6 = complex3.pow(complex1);
      complex6.log();
      complex0.INF.multiply(1);
      Complex complex7 = complex5.divide(Double.POSITIVE_INFINITY);
      complex7.ONE.cos();
      complex4.getImaginary();
      complex0.sqrt();
      complex7.divide(Double.POSITIVE_INFINITY);
      complex7.divide(1595.320733621109);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3045.4);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.sinh();
      complex1.I.sinh();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex1.tan();
      complex0.equals(complex2);
      complex0.readResolve();
      complex4.add(complex0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.ZERO.acos();
      complex2.isInfinite();
      Complex complex4 = complex2.log();
      Complex complex5 = complex0.acos();
      complex5.ZERO.divide(0.0);
      complex5.NaN.cosh();
      Complex complex6 = complex1.subtract(0.0);
      Complex complex7 = complex0.subtract(0.0);
      Complex complex8 = complex7.NaN.add(complex6);
      complex4.NaN.exp();
      Complex complex9 = complex8.ZERO.add(0.0);
      complex1.ONE.sqrt1z();
      complex9.sinh();
      complex9.I.toString();
      Complex complex10 = complex4.divide(0.0);
      complex10.hashCode();
      complex7.subtract(complex6);
      Complex complex11 = complex8.createComplex(0.0, 0.0);
      Complex complex12 = Complex.valueOf((-1025.433265949), 0.0);
      Complex complex13 = Complex.ZERO;
      Complex.valueOf(0.0, (-1025.433265949));
      complex12.multiply(complex13);
      complex1.negate();
      Complex complex14 = complex6.add(complex8);
      complex2.subtract(0.0);
      complex12.equals(complex14);
      complex10.getField();
      complex3.atan();
      complex11.negate();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = new Complex(3011.35807379204, 167.2229817);
      complex0.ZERO.createComplex(1.1645605564117432, 337.73);
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.acos();
      Complex complex2 = complex0.INF.tanh();
      Complex complex3 = complex2.log();
      complex0.ZERO.readResolve();
      Complex complex4 = Complex.valueOf(350.544692946, 350.544692946);
      Complex complex5 = complex0.reciprocal();
      Complex complex6 = complex5.INF.sin();
      complex6.reciprocal();
      complex6.add(complex1);
      complex5.ZERO.sqrt();
      Complex complex7 = complex1.sin();
      complex7.multiply(3.5371542244169364E-8);
      Complex complex8 = complex0.negate();
      complex8.ZERO.divide(complex4);
      Complex complex9 = complex6.sinh();
      complex9.pow(262.882);
      complex7.divide(8.72220314694275E58);
      complex3.subtract((-1217.309597315169));
      complex0.isInfinite();
      complex9.readResolve();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex.valueOf(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.INF.tanh();
      complex1.I.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1718.7769, 2179.597601746);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.NaN.tanh();
      complex2.ZERO.pow(complex0);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex1.ONE.subtract(complex3);
      Complex complex5 = complex0.negate();
      complex1.I.sin();
      Complex complex6 = complex0.add(complex1);
      Complex complex7 = complex6.tan();
      Complex complex8 = complex1.negate();
      complex7.ZERO.abs();
      Complex complex9 = complex5.negate();
      Complex complex10 = complex9.createComplex(2179.597601746, 2179.597601746);
      complex9.INF.add(complex3);
      Complex complex11 = complex7.exp();
      complex8.getReal();
      Complex complex12 = complex5.log();
      complex11.toString();
      Complex complex13 = complex12.conjugate();
      complex10.add(0.0);
      complex13.toString();
      Complex complex14 = complex7.sqrt1z();
      complex14.INF.sinh();
      Complex complex15 = complex14.INF.cos();
      Complex.valueOf(1718.7769, (-2160.2360438201977));
      complex4.reciprocal();
      complex12.sinh();
      complex13.acos();
      complex11.multiply(complex10);
      complex6.createComplex(2179.597601746, (-2160.2360438201977));
      complex6.subtract(Double.NaN);
      complex15.getReal();
      Complex.valueOf(Double.NaN, 406.01966781897);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex((-95.052667));
      complex0.ONE.readResolve();
      complex0.hashCode();
      complex0.abs();
      Complex complex1 = complex0.I.asin();
      complex0.hashCode();
      Complex complex2 = complex0.asin();
      complex2.INF.getArgument();
      Complex complex3 = complex2.ZERO.exp();
      Complex complex4 = complex2.divide((-95.052667));
      Complex complex5 = complex1.atan();
      complex5.INF.toString();
      complex5.I.toString();
      Complex complex6 = complex3.log();
      Complex.valueOf((-4846.68657));
      complex1.getField();
      complex4.sqrt();
      complex6.negate();
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.acos();
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2237.43849, Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = Complex.INF;
      complex3.tan();
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1095.97713301046, 0.0);
      Complex complex1 = complex0.acos();
      complex1.INF.sinh();
      Complex complex2 = complex0.cos();
      Complex complex3 = Complex.valueOf(1351.9559661);
      Complex complex4 = complex3.sqrt1z();
      complex2.NaN.sqrt1z();
      Complex complex5 = complex2.pow(complex0);
      complex5.isInfinite();
      Complex complex6 = complex1.cos();
      complex1.hashCode();
      Complex complex7 = complex0.pow(0.0);
      Complex complex8 = complex7.INF.negate();
      Complex complex9 = Complex.I;
      complex8.ONE.pow(complex9);
      Complex complex10 = complex5.createComplex(1351.9559661, 1095.97713301046);
      complex5.pow(complex7);
      Complex complex11 = complex2.multiply(1095.97713301046);
      Complex complex12 = complex11.conjugate();
      Complex complex13 = Complex.valueOf(1095.97713301046, 1351.9559661);
      complex13.INF.cosh();
      complex11.ONE.readResolve();
      complex4.INF.abs();
      complex10.equals(complex13);
      complex12.getImaginary();
      complex6.readResolve();
      complex6.negate();
      complex4.subtract(1351.9559661);
      complex12.atan();
      complex10.atan();
      complex6.cos();
      complex8.divide(Double.POSITIVE_INFINITY);
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = Complex.valueOf(66.9498571746922);
      complex1.INF.readResolve();
      complex0.toString();
      Complex complex3 = complex0.atan();
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.cosh();
      complex3.ONE.pow(complex2);
      Complex complex6 = complex5.I.negate();
      Complex complex7 = complex6.NaN.asin();
      complex5.I.nthRoot(1);
      complex6.I.add(complex4);
      complex4.ZERO.add(1558.109810153353);
      Complex complex8 = complex5.createComplex(3.323458344853057E-8, 0.0);
      complex8.atan();
      Complex complex9 = complex0.subtract(1558.109810153353);
      complex9.ZERO.acos();
      complex7.exp();
      complex2.divide(0.0);
      complex3.sin();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      complex0.abs();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex1.NaN.cosh();
      complex0.isInfinite();
      Complex complex3 = complex2.atan();
      try { 
        complex3.INF.nthRoot((-1610));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,610
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.ONE.createComplex(1.1304970373249033E199, 479.037);
      Complex complex3 = complex2.ZERO.sqrt1z();
      Complex complex4 = complex2.ONE.cos();
      Complex complex5 = complex3.cosh();
      complex0.getArgument();
      complex0.equals(complex3);
      complex5.readResolve();
      complex2.cosh();
      complex1.getArgument();
      Complex complex6 = Complex.valueOf(1474.2186269095398);
      complex0.equals(complex6);
      complex2.tan();
      Complex complex7 = new Complex(3549.13867997);
      complex7.cos();
      Complex complex8 = Complex.INF;
      complex4.add(complex8);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.tan();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.readResolve();
      complex0.abs();
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.pow(6.283185307179586);
      Complex complex3 = complex1.I.pow(complex2);
      Complex complex4 = complex3.exp();
      complex4.NaN.tan();
      Complex complex5 = Complex.valueOf(1546.021988, 0.0);
      Complex complex6 = complex5.I.multiply((-226));
      Complex complex7 = complex5.INF.exp();
      complex7.NaN.asin();
      Complex complex8 = Complex.valueOf(6.283185307179586);
      complex8.pow(6.283185307179586);
      Complex complex9 = complex2.I.sqrt1z();
      complex0.isInfinite();
      Complex complex10 = complex2.multiply(1665);
      complex9.sinh();
      complex10.multiply((double) (-226));
      complex2.isInfinite();
      Complex complex11 = complex10.reciprocal();
      complex11.tanh();
      complex6.isInfinite();
      complex8.subtract((-20.0));
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.asin();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex((-2795.0), (-2795.0));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2795.0), (-2795.0));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1230.068545366), (-1230.068545366));
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.ONE.sinh();
      complex2.ZERO.cos();
      complex2.I.acos();
      Complex complex6 = complex1.INF.pow((-1230.068545366));
      complex2.subtract(complex3);
      Complex complex7 = complex3.subtract(complex4);
      complex0.multiply(1915.739373151);
      complex5.atan();
      complex7.sqrt();
      Complex.valueOf((-1230.068545366));
      complex6.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(1634);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.ZERO.log();
      complex1.ONE.readResolve();
      complex0.I.add(complex1);
      Complex complex4 = complex0.ZERO.reciprocal();
      complex0.asin();
      Complex complex5 = complex4.cos();
      Complex complex6 = complex5.ZERO.createComplex(Double.POSITIVE_INFINITY, 2023.34);
      complex6.NaN.abs();
      complex4.NaN.subtract((-2581.526418));
      Complex complex7 = Complex.valueOf((-1.2296934902142301E22));
      Complex complex8 = complex6.ZERO.sqrt();
      Complex complex9 = complex4.pow(Double.POSITIVE_INFINITY);
      Complex complex10 = complex4.divide((-564.4));
      complex9.ONE.createComplex((-564.4), (-1.2296934902142301E22));
      complex10.sin();
      complex8.nthRoot(3344);
      Complex complex11 = complex6.log();
      complex5.conjugate();
      complex7.abs();
      Complex complex12 = complex0.createComplex(0.0, 1.0854897499084473);
      complex12.pow(complex9);
      complex7.sqrt1z();
      complex4.sqrt1z();
      Complex complex13 = complex9.sqrt1z();
      complex13.NaN.pow(complex2);
      complex11.nthRoot(1092);
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.toString();
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex0.NaN.subtract(complex2);
      Complex complex4 = complex3.I.sin();
      Complex complex5 = complex4.ZERO.divide(0.0);
      complex2.I.tanh();
      Complex complex6 = complex4.INF.pow(complex2);
      Complex complex7 = complex6.ONE.cos();
      complex0.pow(0.0);
      Complex complex8 = complex2.cosh();
      complex8.ONE.abs();
      complex4.getArgument();
      Complex complex9 = Complex.valueOf(0.0, 0.0);
      complex4.INF.tan();
      Complex complex10 = complex9.createComplex(1.0, 1.5707963267948966);
      Complex complex11 = complex10.NaN.asin();
      complex0.getImaginary();
      Complex.valueOf(0.0);
      Complex.valueOf(1.4282730618002001E-8, 1377.33253);
      complex8.conjugate();
      complex7.getImaginary();
      complex8.subtract(complex11);
      complex6.add(complex5);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.divide(0.021893918115615918);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.atan();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = new Complex(1302.7347);
      Complex complex1 = complex0.ZERO.pow(1302.7347);
      Complex complex2 = complex1.INF.pow(complex0);
      Complex complex3 = complex2.I.subtract(0.0);
      complex0.isInfinite();
      Complex complex4 = complex0.conjugate();
      complex4.log();
      Complex complex5 = complex1.multiply(1);
      Complex complex6 = complex0.createComplex(1, 3.430336362898836E-90);
      complex6.ONE.divide(complex3);
      complex5.atan();
      complex6.createComplex(1302.7347, (-1031.292));
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex((-1370.7));
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = new Complex(2.0);
      Complex complex1 = complex0.subtract(2.0);
      complex0.getArgument();
      complex1.sin();
      Complex complex2 = complex0.sin();
      complex1.nthRoot(1213);
      complex1.add(6.569676185250389E-264);
      int int0 = 0;
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      complex1.INF.createComplex(0.8, 0.8);
      Complex complex2 = complex0.subtract(complex1);
      Complex complex3 = complex2.tan();
      complex0.INF.abs();
      Complex complex4 = complex2.I.reciprocal();
      complex2.negate();
      complex4.I.toString();
      Complex complex5 = complex1.pow(2.2086994756104319E-75);
      complex5.NaN.hashCode();
      complex3.equals(complex0);
      complex2.getField();
      Complex complex6 = new Complex(2.2086994756104319E-75);
      complex1.equals(complex6);
      complex6.acos();
      complex2.sqrt1z();
      Complex complex7 = complex1.pow(complex3);
      complex7.NaN.cos();
      Complex complex8 = complex7.exp();
      Complex.valueOf(2.2086994756104319E-75, Double.POSITIVE_INFINITY);
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ZERO;
      complex1.negate();
      complex0.equals(complex1);
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.7311513682845094E303);
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-5.574080023496771E-94));
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.INF.subtract(0.0);
      Complex complex2 = complex1.NaN.sinh();
      complex1.ONE.getArgument();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex0.divide(complex3);
      complex4.NaN.readResolve();
      complex4.NaN.cosh();
      Complex complex5 = complex4.atan();
      Complex complex6 = complex5.I.conjugate();
      Complex complex7 = complex6.ONE.pow(complex4);
      complex4.ZERO.sin();
      complex5.ONE.asin();
      Complex complex8 = complex5.multiply(2090);
      complex3.hashCode();
      complex4.conjugate();
      complex8.toString();
      complex1.subtract((double) 2090);
      Complex complex9 = complex4.divide(0.0);
      Complex complex10 = complex9.INF.cosh();
      complex0.NaN.sinh();
      complex10.INF.cosh();
      complex3.getArgument();
      complex2.equals(complex0);
      complex4.readResolve();
      complex2.multiply((-429));
      complex5.divide(complex1);
      complex7.negate();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.add((-523.7919702189145));
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.abs();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.nthRoot((-1629));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,629
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.110168847922469E-5, 4.110168847922469E-5);
      complex0.NaN.sinh();
      complex0.divide(4.110168847922469E-5);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply(5.399127681704086E43);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1989.443));
      complex0.getField();
      Complex complex1 = complex0.INF.atan();
      complex1.ONE.cos();
      Complex complex2 = Complex.ZERO;
      complex2.I.hashCode();
      complex2.ZERO.getField();
      Complex complex3 = complex0.divide(complex2);
      Complex.valueOf((-1989.443), (-1810.407776));
      complex3.toString();
      complex2.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply((-486));
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.add((-2297.16209));
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.hashCode();
      Complex complex1 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sqrt1z();
      Complex complex2 = complex0.ONE.createComplex(1.1304970373249033E199, 479.037);
      Complex complex3 = complex2.ZERO.sqrt1z();
      complex2.ONE.cos();
      Complex complex4 = complex3.cosh();
      complex0.getArgument();
      complex0.equals(complex3);
      complex4.readResolve();
      Complex complex5 = complex2.cosh();
      complex1.getArgument();
      Complex complex6 = Complex.valueOf(1474.2186269095398);
      Complex complex7 = Complex.NaN;
      Complex complex8 = Complex.INF;
      Complex.valueOf((-1.9589778310104216E-74), Double.NaN);
      complex5.multiply(complex0);
      complex1.nthRoot(326);
      complex7.multiply(326);
      Complex complex9 = new Complex((-2476.211741));
      complex9.reciprocal();
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.subtract(919.288994536);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.pow(Double.POSITIVE_INFINITY);
      complex0.NaN.add(Double.POSITIVE_INFINITY);
      int int0 = 0;
      try { 
        complex1.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = new Complex(2462.3, 2462.3);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-1474.1827369753144), 3097.36);
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex3.ONE.pow(3097.36);
      Complex complex5 = complex4.I.reciprocal();
      complex0.I.toString();
      complex3.ONE.subtract((-476.8));
      complex5.NaN.getArgument();
      complex1.INF.reciprocal();
      Complex complex6 = Complex.I;
      complex6.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.sqrt1z();
      Complex complex1 = Complex.valueOf(1.1304970373249033E199);
      complex1.sqrt1z();
      Complex complex2 = complex1.ONE.cos();
      complex0.tan();
      Complex complex3 = complex0.cos();
      complex2.add(complex3);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = new Complex(140.113906326503);
      complex0.multiply(140.113906326503);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3045.4);
      Complex complex1 = Complex.valueOf(3045.4);
      Complex complex2 = complex1.ONE.atan();
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = Complex.I;
      complex4.equals(complex3);
      complex2.readResolve();
      Complex complex5 = complex3.cosh();
      complex3.getArgument();
      Complex complex6 = Complex.valueOf((-445.0));
      Object object0 = complex6.readResolve();
      complex0.equals(object0);
      complex0.readResolve();
      Complex complex7 = complex6.multiply((-3158));
      complex4.divide(complex1);
      Complex complex8 = Complex.INF;
      complex5.sqrt1z();
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = new Complex(140.113906326503);
      Complex complex1 = Complex.NaN;
      complex1.subtract(140.113906326503);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.hashCode();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = new Object();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = new Complex((-3984.8048777786), (-3984.8048777786));
      Complex complex1 = complex0.NaN.tanh();
      complex1.ZERO.subtract((-3984.8048777786));
      complex1.readResolve();
      Complex complex2 = complex0.tanh();
      Complex complex3 = complex2.ZERO.negate();
      Complex complex4 = complex2.ONE.multiply(0);
      complex4.I.multiply((double) 0);
      complex0.toString();
      complex0.isInfinite();
      Complex complex5 = complex0.tan();
      complex5.INF.reciprocal();
      complex2.sin();
      complex4.multiply(complex5);
      complex3.createComplex((-3984.8048777786), 0);
      complex0.multiply((-3984.8048777786));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf(0.0, Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex0.subtract(0.0);
      complex0.INF.sqrt1z();
      Complex complex3 = complex1.pow(0.0);
      complex3.I.createComplex(0.0, (-1555.64374193952));
      Complex complex4 = complex1.ZERO.pow(0.0);
      complex3.nthRoot(1);
      Complex complex5 = complex3.atan();
      Complex complex6 = complex5.ONE.add(1.241529292737115E-25);
      complex6.ZERO.atan();
      complex5.getReal();
      Complex complex7 = complex2.atan();
      complex7.ONE.pow(complex1);
      complex7.ONE.nthRoot(1);
      Complex complex8 = complex2.ZERO.multiply(0);
      complex8.I.sqrt();
      complex4.add(1.241529292737115E-25);
      Complex complex9 = complex7.reciprocal();
      complex9.ONE.subtract(1686.067903);
      Complex complex10 = complex9.multiply(0.0);
      complex10.NaN.asin();
      Complex.valueOf(9.158530500130718E-9, 716.09811);
      complex4.multiply((double) 1);
      complex0.multiply(0.0);
      Complex complex11 = Complex.ONE;
      Complex complex12 = complex1.pow(complex11);
      complex12.acos();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      complex1.ONE.getField();
      Complex complex2 = complex0.tan();
      complex0.I.pow(complex1);
      Complex.valueOf((-1405.29221497));
      Complex complex3 = complex1.negate();
      Complex complex4 = complex2.ONE.acos();
      complex4.I.subtract(complex0);
      complex2.sin();
      Complex complex5 = complex1.pow(complex2);
      complex2.sin();
      complex1.sin();
      complex2.nthRoot(1);
      complex2.log();
      complex3.multiply(complex4);
      complex3.log();
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.ONE.readResolve();
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex2.negate();
      complex2.toString();
      Complex complex4 = complex3.NaN.multiply(1);
      Complex complex5 = complex2.sin();
      complex5.I.divide(complex2);
      complex5.INF.multiply((double) 1);
      complex5.getField();
      complex1.readResolve();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply(55);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(493);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.I;
      complex1.ZERO.reciprocal();
      Complex complex2 = complex0.pow(complex1);
      complex0.ONE.add(complex2);
      Complex complex3 = complex2.NaN.tanh();
      complex3.INF.multiply(complex1);
      complex2.tan();
      complex3.acos();
      complex0.add(1214.93);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(0.0);
      complex0.INF.getArgument();
      complex0.multiply(complex1);
      Complex complex2 = Complex.valueOf(0.0);
      complex2.INF.log();
      complex2.INF.sinh();
      Complex complex3 = complex2.ONE.exp();
      complex3.NaN.cosh();
      Complex complex4 = complex3.ZERO.asin();
      complex3.NaN.cosh();
      complex0.toString();
      Complex complex5 = complex1.add(1.1241179396053055E261);
      Complex complex6 = complex5.INF.subtract(0.0);
      Complex complex7 = complex6.sqrt();
      Complex complex8 = complex7.ZERO.add(complex4);
      complex8.I.reciprocal();
      complex2.getField();
      Complex complex9 = complex3.sin();
      complex9.reciprocal();
      complex9.multiply(complex5);
      int int0 = (-1029);
      try { 
        complex3.nthRoot((-1029));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,029
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.sqrt1z();
      Complex complex1 = complex0.ONE.createComplex(1.1304970373249033E199, 479.037);
      complex1.ZERO.sqrt1z();
      Complex complex2 = complex1.ONE.cos();
      complex2.isInfinite();
      complex1.acos();
      complex1.createComplex((-3659.19323855526), 1.1304970373249033E199);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.pow((-4306.491));
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ONE.sqrt();
      Complex complex3 = complex2.pow(0.0);
      complex3.INF.tanh();
      complex1.ONE.multiply((-907));
      Complex complex4 = Complex.valueOf((-1906.081), 107.799298420757);
      complex0.getReal();
      complex0.abs();
      complex0.toString();
      Complex complex5 = complex1.pow(0.0);
      complex4.hashCode();
      complex4.abs();
      Complex complex6 = Complex.valueOf(920.530814);
      complex6.ONE.sqrt();
      complex5.getField();
      Complex complex7 = complex0.sinh();
      complex7.ZERO.sin();
      complex4.multiply(1550);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-1474.1827369753144), 3097.36);
      Complex complex2 = complex1.ONE.acos();
      Complex complex3 = complex2.NaN.tanh();
      Complex complex4 = complex3.ONE.pow(3097.36);
      complex4.I.reciprocal();
      complex0.I.toString();
      complex3.ONE.subtract((-476.8));
      complex0.NaN.toString();
      Complex complex5 = Complex.valueOf((-1474.1827369753144), 2199.32);
      complex5.NaN.getArgument();
      Complex complex6 = complex1.INF.reciprocal();
      Complex complex7 = complex6.NaN.createComplex((-1474.1827369753144), 3097.36);
      complex0.add(3097.36);
      complex1.isInfinite();
      Complex complex8 = complex0.multiply(37);
      Complex complex9 = complex8.tanh();
      complex0.negate();
      Object object0 = new Object();
      complex3.equals(object0);
      complex0.tanh();
      complex7.equals(object0);
      Complex complex10 = complex1.acos();
      complex3.subtract(complex9);
      Complex complex11 = complex3.pow(complex9);
      complex11.readResolve();
      complex11.hashCode();
      complex2.cosh();
      complex10.abs();
      complex0.createComplex(9.060454075431377, (-77.84269039));
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sqrt1z();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex1.NaN.add(complex0);
      Complex complex4 = complex3.ONE.sqrt();
      Complex complex5 = complex2.NaN.cosh();
      complex2.ZERO.pow(complex1);
      complex4.I.hashCode();
      Complex complex6 = (Complex)complex1.INF.readResolve();
      assertTrue(complex6.isInfinite());
      
      complex0.getReal();
      Complex complex7 = complex3.subtract(complex1);
      Complex complex8 = complex1.NaN.sqrt();
      Complex complex9 = complex8.INF.multiply(100);
      assertEquals(Double.POSITIVE_INFINITY, complex9.getReal(), 0.01);
      
      Complex complex10 = complex1.NaN.sqrt();
      List<Complex> list0 = complex2.ZERO.nthRoot(7);
      assertTrue(list0.contains(complex0));
      assertEquals(7, list0.size());
      
      complex1.I.getField();
      complex1.equals("must have n >= 0 for binomial coefficient (n, k), got n = {0}");
      Complex complex11 = complex7.add(complex0);
      Complex complex12 = complex11.exp();
      Complex complex13 = complex11.I.pow(2379.49663544);
      Complex complex14 = complex13.I.acos();
      Complex complex15 = complex14.ZERO.tan();
      assertEquals(0.0, complex15.getReal(), 0.01);
      
      complex1.isInfinite();
      Complex complex16 = complex0.sinh();
      complex2.abs();
      Complex complex17 = complex16.acos();
      complex17.ONE.hashCode();
      Complex complex18 = (Complex)complex17.readResolve();
      assertEquals(1.5707963267948966, complex18.getReal(), 0.01);
      
      complex17.ONE.createComplex(2.0, 0.0);
      assertTrue(complex16.equals((Object)complex15));
      assertEquals(0.0, complex16.getImaginary(), 0.01);
      
      Complex complex19 = complex2.add(complex13);
      assertEquals((-0.7108339750440191), complex13.getImaginary(), 0.01);
      assertEquals(1.703359836728768, complex19.getReal(), 0.01);
      
      Complex complex20 = Complex.valueOf(0.0);
      assertEquals(0.0, complex20.getReal(), 0.01);
      
      Complex complex21 = complex10.subtract(0.0);
      assertSame(complex21, complex5);
      assertSame(complex21, complex12);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tan();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(1.557407724654902, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0);
      Complex complex1 = complex0.divide(Double.NaN);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex1.equals((Object)complex0));
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertFalse(complex0.isInfinite());
      assertEquals(2.0, complex0.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.110168847922469E-5, 4.110168847922469E-5);
      Complex complex1 = complex0.divide(4.110168847922469E-5);
      assertEquals(1.0, complex1.getImaginary(), 0.01);
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(4.110168847922469E-5, complex0.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertEquals(4.110168847922469E-5, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = new Complex(1634);
      Complex complex1 = complex0.conjugate();
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1634.0, complex0.getReal(), 0.01);
      assertEquals(1634.0, complex1.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3045.4);
      Complex complex1 = Complex.valueOf(3045.4);
      Complex complex2 = complex1.ONE.atan();
      complex2.I.sinh();
      Complex complex3 = complex0.conjugate();
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      
      complex0.negate();
      Complex complex4 = complex2.ONE.sinh();
      Complex complex5 = complex4.I.divide((-928.983848262));
      assertEquals((-0.0010764449800401389), complex5.getImaginary(), 0.01);
      
      Complex complex6 = complex1.tan();
      assertEquals(2.5473702104509286, complex6.getReal(), 0.01);
      assertFalse(complex6.isNaN());
      
      Complex complex7 = complex2.sinh();
      assertEquals(0.8686709614860095, complex7.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      assertTrue(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cosh();
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-2146881698));
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals((-2.146881698E9), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Complex complex0 = new Complex((-2795.0));
      assertFalse(complex0.isInfinite());
      assertEquals((-2795.0), complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(0.0, complex0.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.7615941559557649, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      assertEquals(1.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.452316818502442E-102);
      Complex complex1 = complex0.multiply((-151));
      Complex complex2 = complex0.ONE.tanh();
      assertEquals(0.7615941559557649, complex2.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      complex1.ZERO.cosh();
      Complex complex3 = complex0.atan();
      complex3.NaN.conjugate();
      Complex complex4 = complex3.divide(complex0);
      assertEquals(0.0, complex3.getImaginary(), 0.01);
      
      Complex complex5 = complex1.negate();
      Complex complex6 = complex5.cos();
      assertEquals(5.212998395938687E-100, complex5.getReal(), 0.01);
      assertTrue(complex6.equals((Object)complex4));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1828.11874271);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertEquals(1828.11874271, complex0.getReal(), 0.01);
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cos();
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(1.5430806348152437, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.conjugate();
      assertSame(complex2, complex1);
  }
}
