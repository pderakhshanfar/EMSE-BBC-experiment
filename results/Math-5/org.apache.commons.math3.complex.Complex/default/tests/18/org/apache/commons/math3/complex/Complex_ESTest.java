/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:44:58 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf(19.54530718526, 19.54530718526);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = Complex.valueOf(2.0862779590338074);
      complex2.subtract(662.15511345);
      complex0.nthRoot(811);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex1.add(complex3);
      Complex.valueOf((double) 811);
      complex4.multiply(complex2);
      complex4.nthRoot(2580);
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(20.324058567764293, 20.324058567764293);
      Complex complex1 = new Complex(20.0, 2.1525406805994896E-208);
      complex1.NaN.readResolve();
      Complex complex2 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex2.INF.divide(1679.6);
      complex1.getArgument();
      Complex complex3 = Complex.valueOf(2.3778839111328125, 20.0);
      complex3.tan();
      complex0.divide((-4209.884448436841));
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(107.478455066224, Double.POSITIVE_INFINITY);
      complex0.tanh();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf((-7.203406074689495), (-1.4656240137098836E157));
      complex1.tanh();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex(20.324058567764293, 20.324058567764293);
      Complex complex1 = Complex.valueOf(1.8070706111091015E8, (-1182.410707998));
      Complex complex2 = complex1.tan();
      complex1.getArgument();
      complex1.tan();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex.valueOf(20.324058567764293, 20.0);
      Complex complex0 = new Complex(20.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex((-10.372158548896069), (-4177.5));
      complex0.divide(Double.NaN);
      Complex complex1 = Complex.I;
      Complex complex2 = new Complex((-10.372158548896069), (-10.372158548896069));
      Complex complex3 = new Complex((-4177.5), Double.NaN);
      complex0.multiply(693.267);
      Complex.valueOf(1340.6114154319644, 693.267);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.isInfinite();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(19.545307185263297, 19.545307185263297);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 2.0);
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(20.758294869673595, (-1.860165465666482E-10));
      Complex complex1 = Complex.valueOf(20.758294869673595, 0.0);
      Complex complex2 = new Complex(20.758294869673595, 1175.0);
      Complex complex3 = Complex.valueOf((-1.860165465666482E-10), 816.56216309134);
      Complex complex4 = complex1.subtract(complex0);
      complex3.toString();
      Complex complex5 = complex0.I.divide(complex4);
      complex5.acos();
      complex2.tan();
      complex0.add(1175.0);
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 845.9947871139346);
      Complex complex1 = new Complex(2.4801413921885483E-274, (-20.0));
      Complex complex2 = Complex.valueOf(845.9947871139346, (-20.0));
      Complex complex3 = complex0.subtract(complex2);
      complex3.toString();
      Complex complex4 = complex1.tan();
      complex1.exp();
      Complex complex5 = new Complex(816.56216309134, 1175.0);
      complex5.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      // Undeclared exception!
      complex1.nthRoot(525588892);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = new Complex(3989.3290892871405, (-1516.119715554));
      Complex complex1 = complex0.multiply((-1515));
      Complex complex2 = complex1.I.divide(complex0);
      Complex complex3 = complex2.INF.pow(complex0);
      Complex complex4 = complex3.tan();
      Complex complex5 = Complex.valueOf(1151.7401923);
      Complex complex6 = complex5.ZERO.sqrt1z();
      complex6.ONE.reciprocal();
      Complex complex7 = Complex.valueOf(1151.7401923, 20.0);
      Complex complex8 = complex1.exp();
      Complex complex9 = complex8.ONE.multiply(complex0);
      Complex complex10 = complex8.cosh();
      complex1.sqrt();
      complex1.toString();
      Complex complex11 = complex8.conjugate();
      complex9.ONE.conjugate();
      complex0.ONE.readResolve();
      complex11.ZERO.add(1570.2366663160726);
      Complex complex12 = complex10.cosh();
      complex1.cosh();
      complex8.sin();
      Complex complex13 = complex10.asin();
      complex13.ONE.multiply(complex10);
      complex13.INF.getField();
      complex12.divide((-2186.178));
      Complex complex14 = complex4.reciprocal();
      complex2.conjugate();
      complex14.exp();
      complex9.abs();
      complex8.sinh();
      complex11.abs();
      complex7.createComplex((-2856.83653396788), 0.0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.524817943572998, 1.524817943572998);
      Complex complex1 = new Complex(215.900688, 215.900688);
      Complex complex2 = Complex.valueOf((-205.2), (-424.452419914132));
      Complex complex3 = new Complex(Double.POSITIVE_INFINITY, (-424.452419914132));
      complex3.NaN.atan();
      Complex complex4 = Complex.valueOf((-1.530845432304069E240), (-424.452419914132));
      Complex complex5 = complex4.subtract(complex1);
      complex2.toString();
      complex5.tan();
      Complex complex6 = complex5.exp();
      complex2.pow(complex0);
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.multiply(Double.POSITIVE_INFINITY);
      Complex complex3 = complex1.tanh();
      complex2.pow(0.1384023129940033);
      Complex complex4 = complex1.tanh();
      complex0.add(complex4);
      complex3.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-173.924689213731), (-173.924689213731));
      Complex complex1 = (Complex)complex0.INF.readResolve();
      Complex complex2 = new Complex((-173.924689213731), (-173.924689213731));
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.multiply((-173.924689213731));
      Complex complex5 = Complex.valueOf(0.022423424490272126, 0.022423424490272126);
      Complex complex6 = complex4.divide(complex5);
      Complex complex7 = Complex.valueOf(2730.46629, 2730.46629);
      Complex complex8 = complex3.subtract(complex6);
      complex5.tanh();
      complex2.cos();
      complex1.divide(Double.POSITIVE_INFINITY);
      complex8.toString();
      complex7.toString();
      Complex complex9 = new Complex(933.927896, 4329.546489452);
      complex5.tanh();
      complex7.pow(complex6);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.multiply(0.7850955494052939);
      complex1.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = new Complex(845.9947871139346, 3.2213508786799503);
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex1.multiply(3.2213508786799503);
      Complex complex4 = complex1.INF.reciprocal();
      complex4.ONE.log();
      Complex complex5 = Complex.valueOf((-20.0), (-1550.10460346));
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex1.pow(0.009583562585739211);
      complex5.tanh();
      complex3.add(complex7);
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.pow(1.7470924137873214E-8);
      Complex complex3 = complex1.pow(complex0);
      complex0.abs();
      Complex complex4 = complex2.acos();
      Complex complex5 = Complex.valueOf(1.7470924137873214E-8);
      Complex complex6 = complex5.reciprocal();
      Complex complex7 = Complex.ZERO;
      complex2.pow(complex4);
      complex6.divide(complex7);
      Complex complex8 = Complex.INF;
      Complex complex9 = Complex.ONE;
      Complex complex10 = Complex.valueOf((-156.8565752971927));
      Complex complex11 = complex9.subtract(complex10);
      Complex complex12 = complex5.tanh();
      Complex complex13 = new Complex((-561.106355566467));
      Complex complex14 = Complex.ONE;
      Complex complex15 = complex3.divide(2333.5907);
      Complex complex16 = new Complex((-2259.58338394), 1615.96776);
      complex16.toString();
      complex11.toString();
      Complex complex17 = new Complex((-2259.58338394), Double.POSITIVE_INFINITY);
      complex12.tanh();
      complex15.pow(complex7);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-930), (-930));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.414213562373095, (-1431.350243));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex1.ONE.multiply(complex0);
      complex2.subtract((-1246.71));
      Complex complex3 = complex0.log();
      complex3.subtract(1864.261811587737);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getArgument();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.hashCode();
      complex0.getReal();
      complex0.abs();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex1.sinh();
      Complex complex4 = complex0.tanh();
      complex3.abs();
      Complex complex5 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex6 = complex3.multiply(complex1);
      complex5.sin();
      Complex complex7 = complex6.reciprocal();
      complex7.subtract(complex6);
      Complex complex8 = Complex.NaN;
      complex8.getArgument();
      complex2.pow(3146.5);
      complex3.tanh();
      complex8.pow(Double.NaN);
      complex1.pow(complex8);
      Complex.valueOf(3146.5);
      Complex complex9 = Complex.INF;
      try { 
        complex4.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.hashCode();
      complex0.getReal();
      complex0.abs();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.atan();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex3.sin();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex2.subtract(complex5);
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex1.pow((-561.106355566467));
      complex5.pow(complex2);
      complex7.abs();
      Complex complex10 = complex3.acos();
      Complex complex11 = complex8.reciprocal();
      Complex complex12 = Complex.ZERO;
      Complex complex13 = complex11.pow(complex12);
      complex8.divide(complex7);
      Complex.valueOf(Double.NaN, 20.0);
      complex4.subtract(complex1);
      complex4.tanh();
      complex10.cos();
      Complex complex14 = Complex.ONE;
      complex9.getImaginary();
      Complex complex15 = complex10.tanh();
      complex13.readResolve();
      Complex complex16 = Complex.I;
      Object object0 = complex16.readResolve();
      complex16.equals(object0);
      Complex complex17 = Complex.I;
      complex0.acos();
      complex15.multiply(0);
      complex13.conjugate();
      complex10.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex((-2.1414301981236817E-8), (-1.860165465666482E-10));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex1.I.sinh();
      complex0.abs();
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.multiply(complex1);
      Complex complex6 = complex3.sin();
      Complex complex7 = new Complex((-2.1414301981236817E-8));
      Complex complex8 = complex0.subtract(complex5);
      Complex complex9 = complex7.subtract(complex2);
      complex9.getArgument();
      Complex complex10 = complex6.tanh();
      complex10.hashCode();
      Complex complex11 = complex7.pow((-0.524817943572998));
      Complex complex12 = complex7.pow(complex11);
      complex7.abs();
      complex4.acos();
      complex6.reciprocal();
      complex8.pow(complex9);
      Complex complex13 = Complex.valueOf(2.1414301981236817E-8);
      Complex complex14 = complex13.divide(complex3);
      Complex.valueOf(Double.NaN, (-2.1414301981236817E-8));
      Complex complex15 = new Complex(1.0989797886073793);
      complex5.subtract(complex15);
      complex0.tanh();
      complex11.cos();
      complex3.divide(0.0);
      Complex complex16 = Complex.INF;
      complex16.toString();
      Complex complex17 = complex14.tanh();
      complex17.INF.multiply((-514.64));
      complex17.INF.sqrt1z();
      complex12.pow(complex1);
      complex7.acos();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.524817943572998, 1.524817943572998);
      Complex complex1 = new Complex(1.524817943572998, 1.524817943572998);
      Complex complex2 = Complex.valueOf(7.0816970994232115E-9, 0.0);
      Complex complex3 = complex0.ONE.subtract(complex1);
      complex0.toString();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.exp();
      complex4.ONE.createComplex(7.0816970994232115E-9, 7.0816970994232115E-9);
      complex3.getArgument();
      Complex complex6 = complex0.pow((-1.9022804905733464));
      complex6.getArgument();
      Complex complex7 = complex6.exp();
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.sqrt1z();
      Object object0 = complex2.readResolve();
      Complex complex10 = complex6.add(Double.POSITIVE_INFINITY);
      complex1.acos();
      Complex complex11 = Complex.I;
      Complex complex12 = complex9.conjugate();
      complex12.ZERO.createComplex(7.0816970994232115E-9, Double.POSITIVE_INFINITY);
      Complex complex13 = Complex.ZERO;
      complex4.NaN.add(complex7);
      complex13.sqrt1z();
      Complex complex14 = complex4.tanh();
      complex1.readResolve();
      complex3.equals(object0);
      complex5.add(complex14);
      complex8.abs();
      complex8.createComplex(0.46546183608937153, 1.524817943572998);
      complex9.cos();
      complex10.toString();
      complex4.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(845.9947871139346, 845.9947871139346);
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1477.6206409982);
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = complex1.ONE.tan();
      complex2.ZERO.createComplex(1477.6206409982, 1438.3497);
      Complex complex3 = complex0.ONE.multiply(complex1);
      Complex complex4 = Complex.valueOf(1477.6206409982, 1477.6206409982);
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex6.INF.log();
      complex7.NaN.sin();
      Complex complex8 = complex3.exp();
      complex8.INF.reciprocal();
      complex6.isInfinite();
      complex0.log();
      Complex complex9 = complex4.subtract(1477.6206409982);
      complex9.ZERO.sinh();
      Complex complex10 = complex7.sqrt1z();
      complex10.INF.cosh();
      Complex complex11 = complex3.log();
      complex8.cosh();
      complex2.tanh();
      complex10.asin();
      Complex complex12 = Complex.ZERO;
      complex10.subtract(complex12);
      complex11.log();
      Complex complex13 = complex6.conjugate();
      complex13.exp();
      complex6.sin();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2609.25065970667, 2609.25065970667);
      complex0.ZERO.reciprocal();
      complex0.INF.createComplex(2609.25065970667, 2609.25065970667);
      complex0.ZERO.tanh();
      Complex complex1 = complex0.exp();
      complex1.negate();
      complex0.subtract((-478.8007965));
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.hashCode();
      complex0.equals((Object) null);
      complex0.getReal();
      complex0.abs();
      Complex complex1 = Complex.ZERO;
      complex0.I.atan();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ONE.log();
      Complex.valueOf((-928.0));
      complex1.readResolve();
      Complex complex4 = complex0.I.sqrt1z();
      Complex complex5 = (Complex)complex4.readResolve();
      complex1.ONE.add(0.0);
      Complex complex6 = complex0.acos();
      Complex complex7 = complex2.tanh();
      Complex complex8 = complex1.ONE.multiply((-945));
      complex8.conjugate();
      Complex complex9 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.ONE.tanh();
      Complex complex11 = (Complex)complex3.readResolve();
      complex9.equals(complex11);
      complex9.add(complex1);
      complex2.INF.abs();
      complex5.createComplex((-928.0), (-945));
      complex6.cos();
      complex10.toString();
      complex2.divide(complex7);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = new Complex((-2.1414301981236817E-8), (-1.860165465666482E-10));
      Complex complex1 = complex0.cosh();
      complex1.INF.sinh();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex1.tanh();
      complex0.abs();
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.multiply(complex4);
      Complex complex6 = complex5.ONE.sin();
      Complex complex7 = complex6.I.reciprocal();
      Complex complex8 = complex6.ZERO.subtract(complex3);
      complex8.INF.getArgument();
      complex4.I.pow(0.0);
      Complex complex9 = complex4.tanh();
      Complex complex10 = complex9.INF.pow(2.14151098876284E-8);
      complex10.pow(complex4);
      Complex.valueOf((-1.860165465666482E-10));
      Complex complex11 = Complex.INF;
      complex11.add(complex10);
      Complex.valueOf(402.516, 0.7853981633974483);
      Complex complex12 = Complex.ONE;
      complex5.getImaginary();
      complex5.tanh();
      complex12.readResolve();
      complex9.equals(complex2);
      Complex complex13 = Complex.I;
      complex7.acos();
      complex12.multiply(0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(Double.NaN);
      complex0.multiply(1052.66);
      Complex.valueOf(Double.NaN, 1052.66);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.524817943572998, 1.524817943572998);
      Complex complex1 = new Complex(1.524817943572998, 1.524817943572998);
      Complex complex2 = Complex.valueOf(7.0816970994232115E-9, 0.0);
      Complex complex3 = complex0.ONE.subtract(complex1);
      complex0.toString();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.exp();
      complex4.ONE.createComplex(7.0816970994232115E-9, 7.0816970994232115E-9);
      complex3.getArgument();
      Complex complex6 = complex0.pow((-1.9022804905733464));
      complex6.getArgument();
      complex6.exp();
      Complex complex7 = complex2.pow((-1.4940476035631032));
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex6.pow((-1973.5534));
      Complex complex10 = complex4.pow(complex8);
      complex10.abs();
      complex3.acos();
      Complex complex11 = complex1.reciprocal();
      complex6.pow(complex7);
      complex0.divide(complex1);
      Complex.valueOf((-1973.5534), 0.0);
      Complex complex12 = Complex.ZERO;
      complex12.subtract(complex9);
      complex0.tanh();
      complex6.cos();
      complex11.divide((-1973.5534));
      complex5.toString();
      Complex complex13 = new Complex(2.0);
      complex13.tanh();
      complex9.pow(complex6);
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = (-1223.6495708);
      Complex complex1 = complex0.multiply((-1223.6495708));
      Complex complex2 = complex1.reciprocal();
      complex2.divide((-1223.6495708));
      Complex complex3 = new Complex((-1223.6495708), 0);
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(3221);
      Complex complex1 = Complex.valueOf((double) 3221, 2880.92);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = Complex.valueOf(746.952558, 1934.0);
      Complex complex4 = new Complex(746.952558, 3221);
      complex4.getImaginary();
      complex2.tanh();
      Complex.valueOf(6.283185307179586);
      complex0.equals(": ");
      complex3.acos();
      complex3.INF.abs();
      complex3.multiply(0);
      complex4.sin();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex2.ZERO.subtract(complex0);
      Complex complex4 = complex0.pow(complex1);
      assertEquals(0.20787957635076193, complex4.getReal(), 0.01);
      assertEquals(0.0, complex4.getImaginary(), 0.01);
      
      Complex complex5 = complex3.tan();
      assertFalse(complex5.isInfinite());
      assertEquals((-0.7615941559557649), complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      complex5.I.exp();
      Complex complex6 = complex2.createComplex((-5428.79915), (-5428.79915));
      Complex complex7 = complex6.atan();
      complex2.multiply(complex1);
      complex7.multiply(2376);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.524817943572998, 1.524817943572998);
      Complex complex1 = new Complex(1.524817943572998, 1.524817943572998);
      Complex complex2 = Complex.valueOf(7.0816970994232115E-9, 0.0);
      Complex complex3 = complex0.ONE.subtract(complex1);
      complex0.toString();
      Complex complex4 = complex0.tan();
      complex3.asin();
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex4.multiply(complex5);
      complex5.sinh();
      complex5.atan();
      complex3.add(complex2);
      Complex complex7 = complex3.add(1.524817943572998);
      complex6.negate();
      complex5.isInfinite();
      Complex.valueOf(2.6209850274990846E-218);
      Complex complex8 = Complex.INF;
      Complex complex9 = complex8.add(complex7);
      Complex.valueOf(2.6209850274990846E-218, 2.3547754287719727);
      Complex complex10 = Complex.ONE;
      complex5.getImaginary();
      complex8.tanh();
      complex10.readResolve();
      Complex complex11 = Complex.INF;
      complex11.equals(complex3);
      Complex complex12 = Complex.I;
      complex2.acos();
      complex9.multiply(1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.524817943572998, 1.524817943572998);
      Complex complex1 = new Complex(1.524817943572998, 1.524817943572998);
      Complex.valueOf(7.0816970994232115E-9, 0.0);
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex0.toString();
      Complex complex3 = complex2.tan();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex3.divide(complex4);
      Complex complex6 = complex5.log();
      Complex.valueOf(1.524817943572998);
      complex3.readResolve();
      Complex complex7 = complex5.sqrt1z();
      complex1.readResolve();
      Complex complex8 = complex5.add(1842.0524765784578);
      complex0.acos();
      Complex complex9 = complex0.tanh();
      complex9.conjugate();
      Complex complex10 = complex4.sqrt1z();
      Complex complex11 = complex10.tanh();
      complex9.readResolve();
      Complex complex12 = Complex.NaN;
      complex11.equals(complex12);
      complex6.add(complex3);
      complex8.abs();
      complex11.createComplex(1.3548138612715822E-9, (-494.352717723));
      complex4.cos();
      complex4.toString();
      complex7.divide(complex12);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.hashCode();
      complex0.equals((Object) null);
      complex0.getReal();
      complex0.abs();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.atan();
      Complex complex3 = complex0.divide(complex1);
      complex3.ONE.log();
      Complex complex4 = Complex.valueOf((-928.0));
      Complex complex5 = (Complex)complex1.readResolve();
      Complex complex6 = complex0.I.sqrt1z();
      Complex complex7 = (Complex)complex6.readResolve();
      complex4.getField();
      complex6.sqrt();
      Complex complex8 = Complex.valueOf(1730.0336537, 1.5790225424597901);
      complex1.nthRoot(639);
      Complex complex9 = new Complex(Double.NaN);
      Complex complex10 = complex7.multiply(complex9);
      complex5.equals(complex2);
      complex6.getReal();
      complex9.tan();
      complex9.exp();
      complex1.readResolve();
      complex7.subtract(complex8);
      complex7.equals(complex10);
      complex5.getReal();
      Complex complex11 = Complex.I;
      complex9.getField();
      complex9.sqrt();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex((-2.1414301981236817E-8), (-1.860165465666482E-10));
      Complex complex1 = complex0.cosh();
      complex1.INF.sinh();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex1.tanh();
      complex0.abs();
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.multiply(complex4);
      Complex complex6 = complex5.ONE.sin();
      Complex complex7 = complex6.I.reciprocal();
      Complex complex8 = complex6.ZERO.subtract(complex3);
      complex8.INF.getArgument();
      complex4.I.pow(0.0);
      Complex complex9 = complex4.tanh();
      Complex complex10 = complex9.INF.pow(2.14151098876284E-8);
      Complex complex11 = complex10.pow(complex4);
      complex3.NaN.abs();
      complex5.INF.acos();
      complex1.I.reciprocal();
      Complex complex12 = complex0.pow(complex5);
      Complex complex13 = complex12.divide(complex2);
      Complex complex14 = Complex.valueOf(2.14151098876284E-8, (-1.860165465666482E-10));
      complex2.subtract(complex0);
      Complex complex15 = complex13.tanh();
      Complex complex16 = complex15.ONE.cos();
      complex14.divide(2.14151098876284E-8);
      complex4.toString();
      complex16.tanh();
      complex11.toString();
      complex7.divide(complex10);
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.524817943572998, 1.524817943572998);
      Complex complex1 = new Complex(1.524817943572998, 1.524817943572998);
      Complex.valueOf(7.0816970994232115E-9, 1.524817943572998);
      Complex complex2 = complex0.ONE.subtract(complex1);
      complex0.toString();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex3.exp();
      complex3.ONE.createComplex(7.0816970994232115E-9, 7.0816970994232115E-9);
      Complex complex5 = Complex.valueOf(20.0, 1.524817943572998);
      Complex complex6 = complex2.divide(complex4);
      complex6.cos();
      Complex complex7 = complex2.cos();
      complex7.multiply(965254711);
      complex1.asin();
      complex4.getField();
      Complex.valueOf(20.0);
      complex5.sinh();
      complex3.add(complex2);
      Complex complex8 = Complex.NaN;
      complex8.sqrt();
      complex6.nthRoot(1501);
      Complex.valueOf(321.601521594252, 1610.023);
      Complex complex9 = Complex.ONE;
      complex9.add(complex8);
      complex6.subtract((double) 1501);
      complex7.getReal();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex((-173.924689213731));
      Complex complex1 = complex0.ZERO.exp();
      complex0.NaN.abs();
      Complex complex2 = complex0.multiply((-173.924689213731));
      complex2.I.cosh();
      complex2.getArgument();
      complex2.I.getArgument();
      Complex complex3 = Complex.valueOf((-173.924689213731), Double.NaN);
      Complex complex4 = complex3.NaN.cos();
      complex4.ZERO.add(-0.0);
      Complex complex5 = complex1.acos();
      complex0.pow(Double.NaN);
      complex5.ONE.abs();
      Complex complex6 = complex3.negate();
      complex6.NaN.tan();
      complex1.createComplex(Double.NaN, 2250.151563);
      Complex complex7 = complex5.INF.sin();
      complex7.divide(2.0);
      complex5.hashCode();
      Complex complex8 = complex4.ONE.subtract((-4912.17484926));
      complex8.ZERO.subtract((-5475.77266054));
      Complex.valueOf(1.0);
      complex5.log();
      complex4.tan();
      complex7.isInfinite();
      complex4.sinh();
      complex6.add(93.7320212);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      complex1.ZERO.abs();
      Complex complex2 = complex0.ZERO.add(complex1);
      complex2.I.sinh();
      Complex complex3 = Complex.valueOf((-3726.8006));
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.subtract((-3726.8006));
      Complex complex6 = complex5.add((-3726.8006));
      Complex complex7 = complex4.INF.reciprocal();
      Complex complex8 = complex4.asin();
      complex4.cosh();
      complex0.ONE.negate();
      Complex.valueOf((-6.989541353565502E-4));
      Complex complex9 = complex3.acos();
      Complex complex10 = Complex.valueOf((-3726.8006));
      Complex complex11 = complex10.NaN.pow(complex8);
      complex11.createComplex((-3726.8006), (-2390.859934949436));
      Complex complex12 = complex0.divide(complex3);
      Complex complex13 = complex3.pow(0.8164702121821802);
      complex13.multiply(0.0);
      complex9.getImaginary();
      complex13.isInfinite();
      Complex complex14 = complex10.multiply(6.989541353565502E-4);
      complex6.cos();
      complex0.NaN.readResolve();
      complex8.isInfinite();
      complex7.equals(complex14);
      complex12.isInfinite();
      complex4.sqrt1z();
      Complex.valueOf(6.989541353565502E-4, (-8.91645255913243));
      Complex complex15 = complex5.divide((-2390.859934949436));
      complex5.add(complex15);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-854.69));
      Complex complex1 = new Complex(-0.0, (-854.69));
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex1.sinh();
      complex1.sinh();
      complex3.abs();
      Complex complex4 = Complex.I;
      complex3.multiply(complex1);
      Complex complex5 = complex4.sin();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex2.subtract(complex5);
      complex0.getArgument();
      Complex complex8 = complex6.pow(-0.0);
      Complex complex9 = complex8.pow(3.141592653589793);
      Complex complex10 = complex9.pow(complex3);
      complex6.abs();
      complex6.acos();
      complex10.reciprocal();
      Complex complex11 = complex9.pow(complex1);
      Complex complex12 = Complex.NaN;
      Complex complex13 = complex2.divide(complex12);
      Complex complex14 = Complex.valueOf(Double.NaN, Double.POSITIVE_INFINITY);
      Complex complex15 = new Complex((-4141.75071102503), 2045.72229276);
      complex3.subtract(complex15);
      complex13.tanh();
      complex7.cos();
      complex11.divide(0.9993012901330554);
      complex14.toString();
      complex7.tanh();
      Complex complex16 = complex6.pow(complex8);
      complex16.acos();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.hashCode();
      complex0.equals((Object) null);
      complex0.getReal();
      complex0.abs();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.atan();
      Complex complex3 = complex2.divide(complex1);
      Complex complex4 = complex2.log();
      Complex.valueOf((-928.0));
      complex3.readResolve();
      Complex complex5 = complex4.sqrt1z();
      complex5.readResolve();
      Complex complex6 = complex0.add(1.0);
      Complex complex7 = complex2.acos();
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex8.multiply((-945));
      Complex complex10 = complex7.conjugate();
      complex10.sqrt1z();
      Complex complex11 = complex7.tanh();
      complex1.readResolve();
      Object object0 = new Object();
      complex6.equals(object0);
      Complex complex12 = Complex.ONE;
      complex10.add(complex12);
      complex6.abs();
      Complex complex13 = complex6.createComplex(1.4142135623730951, 0.0);
      complex9.cos();
      complex11.toString();
      complex2.divide(complex13);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.324058567764293, 20.324058567764293);
      complex0.tanh();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf((-391.510279), Double.NaN);
      complex0.multiply(56.19922);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.524817943572998, 1.524817943572998);
      Complex complex1 = new Complex(1.524817943572998, 1.524817943572998);
      Complex complex2 = Complex.valueOf(7.0816970994232115E-9, 0.0);
      Complex complex3 = complex0.ONE.subtract(complex1);
      complex0.toString();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.exp();
      complex4.ONE.createComplex(7.0816970994232115E-9, 7.0816970994232115E-9);
      complex3.getArgument();
      Complex complex6 = complex0.pow((-1.9022804905733464));
      complex6.getArgument();
      complex6.exp();
      Complex complex7 = complex2.pow((-1.4940476035631032));
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex6.pow((-1973.5534));
      Complex complex10 = complex4.pow(complex8);
      complex10.abs();
      complex3.acos();
      Complex complex11 = complex1.reciprocal();
      complex6.pow(complex7);
      complex0.divide(complex1);
      Complex.valueOf((-1973.5534), 0.0);
      Complex complex12 = Complex.ZERO;
      complex12.subtract(complex9);
      complex0.tanh();
      complex6.cos();
      complex11.divide((-1973.5534));
      complex5.toString();
      Complex complex13 = new Complex(2.0);
      complex13.tanh();
      complex9.pow(complex6);
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.hashCode();
      Complex complex1 = Complex.NaN;
      complex0.I.divide(complex1);
      try { 
        complex0.I.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-2.1414301981236817E-8), (-1.860165465666482E-10));
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex1.I.sinh();
      Complex complex4 = complex1.tanh();
      complex0.abs();
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.multiply(complex5);
      Complex complex7 = complex6.ONE.sin();
      complex7.I.reciprocal();
      Complex complex8 = complex7.ZERO.subtract(complex4);
      complex8.INF.getArgument();
      complex5.I.pow(0.0);
      complex5.tanh();
      Complex complex9 = complex4.acos();
      Complex complex10 = complex0.tanh();
      Complex complex11 = complex10.multiply((-945));
      complex11.conjugate();
      complex4.sqrt1z();
      Complex complex12 = complex8.tanh();
      complex5.equals(complex12);
      complex8.add(complex4);
      complex3.abs();
      complex4.createComplex((-1.860165465666482E-10), 1.0764821798895017);
      complex2.cos();
      complex11.toString();
      complex9.divide(complex4);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = Complex.INF;
      complex3.INF.divide((-7.683019590615251E-133));
      Complex complex5 = complex4.ZERO.asin();
      Complex complex6 = complex0.ONE.cosh();
      complex5.INF.multiply(complex4);
      complex5.I.sinh();
      complex6.ONE.atan();
      complex4.NaN.add(complex0);
      Complex complex7 = complex6.NaN.add((-1046.0));
      Complex complex8 = complex7.negate();
      complex0.isInfinite();
      Complex.valueOf(2.6209850274990846E-218);
      complex0.add(complex5);
      Complex complex9 = Complex.valueOf((-1046.0), 746.952558);
      complex2.getImaginary();
      complex3.tanh();
      complex9.equals(complex2);
      Complex complex10 = complex8.acos();
      complex10.multiply(2109);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.524817943572998, 1.524817943572998);
      Complex complex1 = new Complex(1.524817943572998, 1.524817943572998);
      Complex complex2 = Complex.valueOf(7.0816970994232115E-9, 0.0);
      Complex complex3 = complex0.ONE.subtract(complex1);
      complex0.toString();
      Complex complex4 = complex0.tan();
      complex4.exp();
      Complex complex5 = complex4.ONE.createComplex(7.0816970994232115E-9, 7.0816970994232115E-9);
      complex3.getArgument();
      Complex complex6 = complex0.pow((-1.9022804905733464));
      complex6.getArgument();
      Complex complex7 = complex6.exp();
      complex6.createComplex(0.0, (-1.9022804905733464));
      complex3.cosh();
      Complex complex8 = complex3.exp();
      complex2.pow(complex6);
      complex8.toString();
      complex1.tanh();
      complex5.negate();
      try { 
        complex7.nthRoot((-1910));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,910
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-81.11292696));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(19.54530718526, 19.54530718526);
      Complex complex1 = Complex.valueOf(1.1776625988228244E-9);
      complex0.pow(complex1);
      Complex complex2 = Complex.valueOf((-5.179903818099661E-9));
      Complex complex3 = Complex.INF;
      Complex complex4 = complex3.add(complex1);
      Complex.valueOf((-372.2), 1.1776625988228244E-9);
      Complex complex5 = Complex.ONE;
      complex0.getImaginary();
      Complex complex6 = complex2.tanh();
      Complex complex7 = Complex.I;
      complex7.readResolve();
      Object object0 = new Object();
      Complex complex8 = Complex.INF;
      Object object1 = complex8.readResolve();
      complex4.equals(object1);
      Complex complex9 = Complex.I;
      complex8.acos();
      complex6.multiply(0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex4.divide((-1.6033298379625194E-4));
      Complex complex6 = complex4.asin();
      Complex complex7 = complex5.cosh();
      Complex complex8 = complex6.multiply(complex4);
      complex7.sinh();
      complex3.atan();
      complex1.add(complex4);
      complex3.add((-7.683019590615251E-133));
      Complex complex9 = complex7.negate();
      complex9.isInfinite();
      Complex.valueOf((-1632800.140545476));
      complex9.add(complex8);
      Complex.valueOf(2.3547754287719727, 2.6209850274990846E-218);
      Complex complex10 = Complex.ONE;
      complex10.getImaginary();
      complex9.tanh();
      Object object0 = complex0.readResolve();
      complex4.equals(object0);
      Complex complex11 = Complex.I;
      Complex complex12 = complex11.acos();
      complex12.multiply(2109);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = Complex.ZERO;
      complex3.divide((-1.6033298379625194E-4));
      Complex complex4 = complex3.asin();
      Complex complex5 = complex4.multiply(complex3);
      complex3.sinh();
      complex2.atan();
      Complex complex6 = new Complex((-1.6033298379625194E-4), (-1.6033298379625194E-4));
      complex2.add((-7.683019590615251E-133));
      Complex complex7 = complex0.negate();
      complex7.isInfinite();
      Complex.valueOf((-1632800.140545476));
      complex7.add(complex5);
      Complex.valueOf(2.3547754287719727, 2.6209850274990846E-218);
      Complex complex8 = Complex.ONE;
      complex8.getImaginary();
      complex7.tanh();
      Object object0 = complex0.readResolve();
      complex3.equals(object0);
      Complex complex9 = Complex.I;
      Complex complex10 = complex9.acos();
      complex10.multiply(2109);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = new Complex(107.478455066224, 107.478455066224);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.cosh();
      Complex complex3 = complex2.multiply((-334455469));
      Complex complex4 = complex3.pow((-9725103.6201));
      Complex complex5 = complex3.pow(1.2761111606368036E-133);
      complex5.getField();
      Complex complex6 = Complex.NaN;
      complex6.toString();
      complex2.getField();
      complex1.sqrt();
      List<Complex> list0 = complex6.nthRoot(37);
      complex1.multiply(complex3);
      complex1.equals(list0);
      complex6.getReal();
      complex2.tan();
      Complex complex7 = complex5.exp();
      complex1.readResolve();
      complex4.subtract(complex1);
      complex7.equals("(NaN, NaN)");
      complex4.getReal();
      complex1.getField();
      Complex complex8 = complex7.sqrt();
      complex3.log();
      complex2.getImaginary();
      Complex.valueOf(0.0);
      complex8.readResolve();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(289);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      double double0 = 0.0;
      Complex complex1 = complex0.multiply(0.0);
      Complex complex2 = complex1.reciprocal();
      complex2.divide(0.0);
      Complex complex3 = new Complex(0.0, 0);
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.524817943572998, 1.524817943572998);
      Complex complex1 = new Complex(1.524817943572998, 1.524817943572998);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex0.sinh();
      complex1.tanh();
      complex0.abs();
      Complex complex4 = Complex.I;
      Complex complex5 = complex2.multiply(complex4);
      Complex complex6 = Complex.INF;
      complex6.sin();
      Complex complex7 = complex6.reciprocal();
      Complex complex8 = complex3.subtract(complex4);
      complex2.getArgument();
      Complex complex9 = complex5.pow(1.0);
      Complex complex10 = complex4.tanh();
      complex9.pow(7.0816970994232115E-9);
      Complex complex11 = complex1.pow(complex8);
      complex11.abs();
      Complex complex12 = complex1.acos();
      complex10.reciprocal();
      Complex complex13 = complex7.pow(complex10);
      complex11.divide(complex5);
      Complex complex14 = Complex.valueOf(2.1564182159507865, 3503.3706);
      Complex complex15 = new Complex(1.524817943572998, 0.0);
      complex15.subtract(complex12);
      Complex complex16 = complex12.tanh();
      complex6.cos();
      complex14.divide(1.5289723523900467);
      complex16.toString();
      Complex complex17 = Complex.NaN;
      complex17.tanh();
      complex3.pow(complex2);
      complex13.acos();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.hashCode();
      complex0.equals((Object) null);
      complex0.getReal();
      complex0.abs();
      Complex complex1 = Complex.ZERO;
      complex0.I.atan();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.ONE.log();
      Complex.valueOf((-928.0));
      complex1.readResolve();
      Complex complex4 = complex0.I.sqrt1z();
      complex4.readResolve();
      complex1.ONE.add(0.0);
      complex0.acos();
      Complex complex5 = complex2.tanh();
      Complex complex6 = complex1.ONE.multiply((-945));
      complex6.conjugate();
      Complex complex7 = complex5.sqrt1z();
      complex7.ONE.tanh();
      Object object0 = complex3.readResolve();
      complex7.equals(object0);
      complex7.add(complex1);
      complex2.INF.abs();
      Complex complex8 = complex1.createComplex(Double.POSITIVE_INFINITY, 3.071569248856111E-202);
      complex2.cos();
      complex8.toString();
      complex0.divide(complex8);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sinh();
      Complex complex2 = complex1.INF.subtract(complex0);
      Complex complex3 = complex0.ZERO.asin();
      Complex complex4 = Complex.valueOf(1144.5238612552973);
      Complex complex5 = complex1.ZERO.subtract(1464.7349229236047);
      Complex complex6 = complex5.I.cosh();
      complex6.INF.divide(complex4);
      Complex complex7 = complex1.NaN.tan();
      Complex complex8 = complex7.NaN.multiply(0.0);
      complex7.subtract(complex2);
      complex4.NaN.getField();
      complex3.INF.acos();
      Complex complex9 = complex1.subtract(complex4);
      complex9.atan();
      complex3.INF.negate();
      complex0.INF.log();
      complex3.getArgument();
      Complex complex10 = Complex.valueOf((-3193.870014476));
      complex10.add(2755.28929);
      complex8.sqrt();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.valueOf(769.681617700025, 769.681617700025);
      Complex complex1 = complex0.INF.pow(769.681617700025);
      complex0.ZERO.hashCode();
      Complex complex2 = complex0.NaN.tan();
      Complex complex3 = complex0.pow(769.681617700025);
      complex3.sqrt();
      Complex complex4 = complex0.NaN.cos();
      Complex complex5 = complex1.I.add(complex4);
      Complex complex6 = complex5.I.conjugate();
      complex6.INF.toString();
      complex6.INF.readResolve();
      Complex complex7 = complex5.INF.sinh();
      complex7.NaN.getField();
      Complex complex8 = complex0.ZERO.divide((-1836.7754455935));
      complex8.getField();
      complex8.I.getField();
      Complex complex9 = complex0.log();
      complex8.hashCode();
      complex0.INF.multiply(7);
      Complex complex10 = complex9.cosh();
      Complex complex11 = complex1.log();
      complex1.exp();
      complex0.ONE.getField();
      complex4.hashCode();
      complex11.multiply(1094);
      complex2.INF.tan();
      complex5.getImaginary();
      complex3.subtract(complex10);
      complex3.getReal();
      complex2.acos();
      Complex.valueOf((-528.44101), (double) 1094);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1816.4);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.multiply(complex0);
      Complex complex3 = complex0.add(complex1);
      complex1.toString();
      complex1.getReal();
      Complex complex4 = new Complex(1816.4);
      Complex complex5 = complex2.I.pow((-1205.613));
      Complex complex6 = complex5.NaN.conjugate();
      complex6.ZERO.abs();
      complex0.I.getArgument();
      Complex complex7 = new Complex(0.0);
      complex4.INF.add(complex7);
      Complex complex8 = complex5.sinh();
      Complex complex9 = complex4.ZERO.pow(1816.4);
      Complex complex10 = complex9.cosh();
      complex10.ZERO.log();
      complex1.ZERO.tan();
      Complex complex11 = complex2.divide(complex4);
      Complex complex12 = complex4.subtract(complex11);
      complex12.readResolve();
      complex0.NaN.add(0.0);
      Complex complex13 = complex12.NaN.sqrt();
      Complex complex14 = complex2.negate();
      Complex complex15 = complex14.log();
      complex4.subtract(complex13);
      Complex complex16 = complex3.pow(1816.4);
      complex16.sqrt();
      complex8.log();
      complex4.hashCode();
      complex0.getArgument();
      complex3.multiply(complex15);
      Complex complex17 = Complex.INF;
      complex17.NaN.readResolve();
      complex14.equals(complex17);
      complex16.createComplex(1.5707963267948966, 0.0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = new Complex((-0.25), (-0.25));
      Complex complex1 = complex0.ONE.cosh();
      Complex complex2 = complex0.ONE.subtract((-577.9328456481477));
      Complex complex3 = complex2.ONE.tanh();
      complex0.toString();
      complex1.acos();
      complex3.abs();
      Complex.valueOf((-20.0), (-20.0));
      complex2.exp();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 1145.2165809885146);
      Complex complex1 = complex0.sinh();
      complex0.NaN.createComplex(1145.2165809885146, 0.0);
      complex0.ZERO.pow(0.0);
      complex1.ONE.acos();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.524817943572998, 1.524817943572998);
      Complex complex1 = new Complex(1.524817943572998, 1.524817943572998);
      Complex complex2 = Complex.valueOf(7.0816970994232115E-9, 0.0);
      Complex complex3 = complex0.ONE.subtract(complex1);
      complex0.toString();
      Complex complex4 = complex3.tan();
      Complex complex5 = complex4.exp();
      complex2.subtract(1042.845);
      complex2.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.sin();
      complex2.getField();
      Complex complex3 = complex2.sqrt();
      List<Complex> list0 = complex3.nthRoot(1418);
      Complex complex4 = complex2.multiply(complex0);
      complex1.equals(complex0);
      complex0.getReal();
      Complex complex5 = complex4.tan();
      complex5.exp();
      complex1.readResolve();
      complex5.subtract(complex1);
      complex0.equals(list0);
      complex4.getReal();
      complex3.getField();
      Complex complex6 = Complex.valueOf(3719.02);
      complex6.sqrt();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tanh();
      complex0.readResolve();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex2 = Complex.I;
      complex1.acos();
      complex0.multiply(0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
      Complex complex1 = Complex.NaN;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.subtract(Double.NaN);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ZERO.tan();
      complex1.ZERO.multiply(complex0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1372.5346);
      Complex complex1 = complex0.I.negate();
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.ZERO.multiply(complex1);
      Complex complex4 = complex2.ONE.tanh();
      complex1.ZERO.getArgument();
      complex0.I.multiply(2110);
      Complex complex5 = complex2.INF.subtract((-1927.0));
      complex0.NaN.tan();
      complex0.multiply(complex2);
      complex3.readResolve();
      Complex complex6 = complex4.atan();
      complex2.subtract(complex4);
      Complex complex7 = complex3.add((double) 2110);
      Complex complex8 = complex6.ZERO.negate();
      complex7.multiply((-78));
      Complex complex9 = complex8.I.sin();
      Complex complex10 = complex9.tanh();
      complex3.multiply(2110);
      complex2.divide(complex7);
      complex6.tan();
      complex3.subtract(Double.NaN);
      Complex.valueOf(953.6982516998919, (-748.0));
      complex1.sqrt();
      complex5.multiply(2110);
      Complex complex11 = complex7.negate();
      complex11.pow(complex3);
      complex10.cos();
      complex2.abs();
      Complex.valueOf(0.0, (double) (-78));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.NaN.sin();
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.divide(0.0);
      complex1.ZERO.divide(0.0);
      complex0.abs();
      Complex complex2 = Complex.valueOf((-254.0669606));
      Complex complex3 = complex0.createComplex((-254.0669606), 2407.5084);
      Complex.valueOf((-4535.4402), 0.0);
      complex3.NaN.subtract(complex1);
      complex2.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(20.75829487, 0.04373173827618444);
      Complex.valueOf(20.75829487, 0.0);
      Complex complex1 = new Complex(20.75829487, 1175.0);
      complex0.divide(0.0);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = new Complex((-2714.3236));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.add(complex1);
      complex2.ZERO.multiply((-2714.3236));
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.divide((-2714.3236));
      int int0 = 0;
      try { 
        complex4.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.asin();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5707963267948966, complex1.getReal(), 0.01);
      
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.subtract(0.0);
      complex0.multiply(complex1);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.ONE.log();
      Complex complex4 = complex0.tanh();
      Complex complex5 = complex4.I.divide((-2667.2760664));
      complex5.NaN.negate();
      complex0.ONE.subtract(complex4);
      complex2.NaN.exp();
      Complex complex6 = complex4.NaN.tanh();
      complex0.hashCode();
      complex2.abs();
      complex3.getReal();
      Complex complex7 = complex2.cos();
      complex7.INF.exp();
      complex6.ONE.asin();
      complex0.hashCode();
      Complex complex8 = Complex.valueOf(0.0, 0.0);
      Complex complex9 = complex8.ONE.sinh();
      complex1.INF.add(complex3);
      complex2.INF.sqrt();
      complex0.pow(1672.144128032335);
      Complex complex10 = complex3.sqrt1z();
      Complex complex11 = complex10.cosh();
      complex11.ZERO.hashCode();
      complex6.subtract(20.0);
      complex7.tanh();
      complex11.divide(complex9);
      complex10.abs();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = new Complex((-2.1414301981236817E-8), (-1.860165465666482E-10));
      Complex complex1 = complex0.cosh();
      complex1.INF.sinh();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex1.tanh();
      complex0.abs();
      Complex complex4 = Complex.I;
      Complex complex5 = complex3.multiply(complex4);
      Complex complex6 = complex5.ONE.sin();
      complex6.I.reciprocal();
      Complex complex7 = complex6.ZERO.subtract(complex3);
      complex7.INF.getArgument();
      complex4.I.pow(0.0);
      Complex complex8 = complex4.tanh();
      Complex complex9 = complex8.INF.pow(2.14151098876284E-8);
      complex9.pow(complex4);
      complex3.NaN.abs();
      complex5.INF.acos();
      complex1.I.reciprocal();
      Complex complex10 = complex0.pow(complex5);
      Complex complex11 = complex10.divide(complex2);
      Complex complex12 = Complex.valueOf(2.14151098876284E-8, (-1.860165465666482E-10));
      complex2.subtract(complex0);
      Complex complex13 = complex11.tanh();
      Complex complex14 = complex13.ONE.cos();
      Complex complex15 = complex12.divide(2.14151098876284E-8);
      complex4.toString();
      complex14.tanh();
      complex14.pow(complex15);
      complex14.acos();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply(58);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.asin();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.cosh();
      complex0.multiply(58);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.divide((-20.0));
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.nthRoot(1627);
      complex0.tanh();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sqrt1z();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.pow(742.20742329318);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.add(2.196992908096383);
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-20.0));
      Complex complex1 = complex0.I.tan();
      Complex complex2 = complex1.ZERO.add(1567.6581386);
      complex2.ONE.subtract(complex1);
      try { 
        complex0.nthRoot((-56));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -56
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(278);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.tan();
      Complex complex1 = Complex.I;
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.add(1.0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex1.sinh();
      complex1.add(complex2);
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.multiply(1);
      complex1.ONE.toString();
      Complex complex2 = complex0.ONE.multiply(0);
      complex2.INF.exp();
      Complex complex3 = complex0.NaN.subtract(9.22064170155394E22);
      complex3.I.toString();
      complex0.ONE.multiply(complex1);
      Complex complex4 = complex0.multiply(198);
      complex4.hashCode();
      complex4.add(complex3);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.758294869673595, 20.758294869673595);
      Complex complex1 = Complex.I;
      complex1.getArgument();
      complex0.tan();
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.valueOf((double) 2094518612, (double) 2094518612);
      complex0.NaN.subtract(complex1);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.tan();
      complex0.subtract(939.9032875);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = new Complex((-3981.777), (-1681.578232872901));
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.ZERO;
      complex1.NaN.pow(complex3);
      Complex complex4 = complex2.INF.divide(0.2324748933315277);
      Complex complex5 = complex0.sinh();
      complex5.sqrt();
      Complex complex6 = complex4.negate();
      complex1.hashCode();
      Complex complex7 = complex6.log();
      complex7.NaN.subtract(1797.697514);
      complex2.ONE.getField();
      Complex complex8 = complex5.divide(325.8435);
      Complex.valueOf(1653.3796928249544);
      Complex.valueOf(4785.0, 0.0);
      complex8.I.readResolve();
      complex8.I.tanh();
      complex8.getField();
      complex5.conjugate();
      complex4.atan();
      Complex.valueOf(1653.3796928249544, 0.2324748933315277);
      Complex complex9 = Complex.valueOf((-5.4199510725063615E129));
      complex9.ONE.nthRoot(1);
      Complex.valueOf((-944.0), 4785.0);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-854.69));
      Complex complex1 = complex0.ONE.createComplex(3.6741841454219095E-195, (-20.0));
      Complex complex2 = Complex.valueOf(2263.82);
      Complex complex3 = complex1.I.add(3.6741841454219095E-195);
      Complex complex4 = complex0.subtract(complex2);
      Complex complex5 = complex4.ZERO.subtract((-854.69));
      Complex complex6 = Complex.valueOf((-2176.4594), 4015.1);
      Complex complex7 = complex5.ONE.divide(complex1);
      Complex complex8 = complex4.NaN.cos();
      Complex complex9 = complex8.ZERO.cos();
      complex4.pow((-20.0));
      complex2.pow(complex4);
      Complex complex10 = Complex.valueOf(0.4512746334075928);
      complex10.abs();
      Complex complex11 = complex8.acos();
      Complex complex12 = complex3.reciprocal();
      Complex complex13 = complex6.pow(complex2);
      Complex complex14 = complex9.divide(complex6);
      Complex.valueOf(1732.527869263378, (-1808.01195959));
      complex14.subtract(complex13);
      complex1.tanh();
      complex9.cos();
      complex12.divide(2616.0306847);
      complex11.toString();
      complex2.tanh();
      complex6.pow(complex7);
      complex14.acos();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getArgument();
      Complex complex1 = null;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.nthRoot((-226));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -226
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-1.860165465666482E-10), (-1.860165465666482E-10));
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex1.tanh();
      Complex complex6 = new Complex((-1.860165465666482E-10), 1.0897650150425796E-132);
      complex6.abs();
      Complex complex7 = Complex.I;
      Complex complex8 = complex1.multiply(complex2);
      Complex complex9 = complex7.sin();
      Complex complex10 = complex7.subtract(complex9);
      complex7.getArgument();
      Complex complex11 = complex0.pow(1.860165465666482E-10);
      Complex complex12 = complex9.tanh();
      complex8.pow(complex1);
      complex10.abs();
      Complex complex13 = complex12.acos();
      Complex complex14 = complex1.reciprocal();
      complex1.pow(complex13);
      complex4.divide(complex5);
      Complex.valueOf(1.860165465666482E-10, 0.17520119364380138);
      complex13.subtract(complex3);
      complex14.tanh();
      Complex complex15 = new Complex(1.0897650150425796E-132, 0.17520119364380138);
      complex15.cos();
      complex8.divide((-2441.65));
      complex5.toString();
      complex10.tanh();
      complex5.pow(complex11);
      complex8.acos();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(3221);
      Complex complex1 = Complex.valueOf(1934.0);
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(107.478455066224, Double.POSITIVE_INFINITY);
      Complex complex2 = Complex.valueOf(107.478455066224);
      complex1.asin();
      complex2.cosh();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.acos();
      complex0.multiply((-931));
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex.valueOf(19.545307185263297, 19.545307185263297);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.pow(Double.NaN);
      complex2.ONE.asin();
      Complex.valueOf(1.0000000000000004, Double.NaN);
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = new Complex(0.23697291631767256);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.ONE.pow(Double.NaN);
      complex2.ONE.asin();
      Complex complex3 = complex0.I.sin();
      Complex complex4 = complex3.ONE.acos();
      Complex complex5 = complex4.sqrt();
      complex5.ONE.pow(complex0);
      complex0.hashCode();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sinh();
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply(841.639624);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.hashCode();
      Complex complex1 = complex0.asin();
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = new Complex(2451.70104638);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.getField();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.NaN.divide((-20.0));
      Complex complex4 = complex0.ZERO.sqrt1z();
      complex4.ONE.toString();
      Complex complex5 = complex4.I.tanh();
      Complex complex6 = Complex.valueOf(2.69449520111084, 1890.0);
      Complex complex7 = complex6.I.reciprocal();
      Complex complex8 = complex1.multiply((-1067));
      Complex complex9 = complex8.NaN.pow(complex1);
      complex5.readResolve();
      complex8.getReal();
      Complex complex10 = complex6.cosh();
      Complex complex11 = complex10.INF.pow(complex3);
      Complex complex12 = complex0.conjugate();
      complex12.NaN.hashCode();
      complex12.INF.readResolve();
      complex9.getImaginary();
      complex6.INF.sqrt();
      complex0.asin();
      complex0.ONE.divide(complex5);
      complex6.getReal();
      Complex complex13 = Complex.valueOf(2401.749094184);
      complex13.ONE.getField();
      complex7.readResolve();
      complex3.isNaN();
      complex11.divide(complex6);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.tan();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertTrue(complex1.equals((Object)complex0));
      assertFalse(complex1.isInfinite());
      
      Complex complex2 = complex0.reciprocal();
      complex2.atan();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-356.185));
      complex0.toString();
      Complex complex1 = complex0.tan();
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.createComplex(1615.96776, 3.2213508786799503);
      complex1.getArgument();
      Complex complex4 = complex3.pow(1628.1);
      complex0.getArgument();
      Complex complex5 = complex3.exp();
      Complex complex6 = complex0.pow(594.2004727779826);
      complex5.pow(complex0);
      complex2.abs();
      complex6.acos();
      Complex complex7 = complex1.reciprocal();
      Complex complex8 = complex2.pow(complex6);
      complex3.divide(complex6);
      Complex complex9 = Complex.valueOf(0.0, (-356.185));
      Complex complex10 = Complex.ZERO;
      complex9.subtract(complex5);
      complex8.tanh();
      complex9.cos();
      complex7.divide(2710.6);
      Complex complex11 = Complex.I;
      Complex complex12 = new Complex(1322.65042736);
      complex4.tanh();
      complex3.pow(complex12);
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.getField();
      Complex complex1 = Complex.valueOf(0.0);
      complex0.NaN.multiply(complex1);
      complex0.nthRoot(1382);
      try { 
        complex0.nthRoot((-441));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -441
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = new Complex((-173.924689213731), (-173.924689213731));
      complex0.INF.readResolve();
      Complex complex1 = complex0.divide((-173.924689213731));
      Complex complex2 = complex1.I.negate();
      complex2.INF.tan();
      complex0.multiply((-991.1583202836026));
      Complex complex3 = complex0.pow(6.229095980733463E-53);
      complex3.INF.asin();
      Complex complex4 = complex1.tanh();
      complex4.readResolve();
      complex1.add(complex3);
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = new Complex((-173.924689213731), (-173.924689213731));
      Complex complex1 = (Complex)complex0.INF.readResolve();
      Complex complex2 = complex0.divide((-173.924689213731));
      Complex complex3 = complex2.I.negate();
      Complex complex4 = complex3.INF.tan();
      complex1.tanh();
      Complex complex5 = Complex.valueOf((-173.924689213731));
      complex5.pow((-173.924689213731));
      Complex complex6 = complex2.pow(complex1);
      Complex complex7 = Complex.valueOf((-173.924689213731));
      Complex complex8 = Complex.INF;
      complex4.add(complex7);
      Complex.valueOf((-173.924689213731), 402.516);
      Complex complex9 = Complex.ONE;
      complex3.getImaginary();
      complex4.tanh();
      complex7.readResolve();
      complex8.isNaN();
      Complex complex10 = Complex.I;
      complex1.acos();
      complex6.multiply((-36));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply((-226));
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.multiply(1);
      complex1.ONE.toString();
      Complex complex2 = complex0.ONE.multiply(0);
      complex2.INF.exp();
      Complex complex3 = complex0.NaN.subtract(9.22064170155394E22);
      complex3.I.toString();
      complex0.pow(complex3);
      Complex complex4 = Complex.valueOf(9.22064170155394E22, 9.22064170155394E22);
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.reciprocal();
      Complex complex3 = complex2.ONE.negate();
      complex0.NaN.subtract(complex3);
      complex1.I.readResolve();
      Complex complex4 = complex0.I.exp();
      complex2.I.hashCode();
      Complex complex5 = complex4.ONE.divide((-1818.7562));
      Complex complex6 = complex5.INF.pow(complex3);
      complex6.ONE.abs();
      Complex complex7 = complex0.NaN.pow(complex1);
      complex1.ZERO.acos();
      complex0.toString();
      Complex complex8 = complex0.conjugate();
      complex3.sin();
      complex7.readResolve();
      Complex complex9 = complex7.sqrt1z();
      complex9.INF.getField();
      complex8.acos();
      Complex.valueOf(1.0);
      complex8.getField();
      complex0.readResolve();
      complex0.tan();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex0.divide(1462.736075);
      Complex complex4 = complex1.I.sinh();
      complex3.INF.readResolve();
      complex2.abs();
      Complex complex5 = complex4.atan();
      complex1.getImaginary();
      Complex complex6 = complex1.tanh();
      complex6.abs();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = new Complex(828.7170032098);
      Complex complex1 = complex0.ZERO.add(828.7170032098);
      Complex complex2 = complex0.cosh();
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = Complex.valueOf((-1973.16), 0.0);
      complex2.add(complex4);
      Complex complex5 = complex0.I.createComplex(828.7170032098, 828.7170032098);
      complex5.I.multiply(0);
      complex2.INF.readResolve();
      complex2.getImaginary();
      Complex complex6 = complex0.pow(complex1);
      Complex complex7 = complex6.sinh();
      complex7.negate();
      complex6.subtract(complex7);
      complex7.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.exp();
      complex1.INF.reciprocal();
      complex1.I.toString();
      complex0.tanh();
      complex1.atan();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.INF.negate();
      complex2.ZERO.exp();
      Complex complex3 = complex2.INF.reciprocal();
      complex1.abs();
      Complex complex4 = complex0.tan();
      complex1.isInfinite();
      complex1.readResolve();
      complex3.ONE.sqrt();
      Complex complex5 = complex1.NaN.conjugate();
      complex5.INF.log();
      complex0.negate();
      complex3.isInfinite();
      complex4.isInfinite();
      Complex.valueOf(1117.07197309, 1117.07197309);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = new Complex(318.799995);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = new Complex(1.1004278077575267E-8, (-20.0));
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.I.sqrt();
      complex2.INF.toString();
      complex1.getField();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex0.createComplex((-20.0), (-3.359944163407147E-8));
      Complex complex5 = complex4.ONE.tan();
      complex5.ONE.exp();
      Complex complex6 = complex1.I.subtract((-3.359944163407147E-8));
      complex6.I.getField();
      complex6.INF.negate();
      Complex complex7 = complex3.INF.sqrt();
      complex0.isInfinite();
      Complex complex8 = complex7.log();
      complex8.ZERO.acos();
      complex0.isNaN();
      Complex complex9 = complex0.sqrt1z();
      Complex complex10 = complex7.INF.createComplex(1.1004278077575267E-8, (-703.76506));
      complex10.ONE.sinh();
      Complex complex11 = complex7.multiply(2170.607348005923);
      Complex complex12 = Complex.valueOf(1.1004278077575267E-8);
      Complex complex13 = complex9.log();
      complex13.I.nthRoot(617);
      Complex complex14 = complex11.atan();
      Complex complex15 = complex7.tan();
      complex6.divide(complex12);
      complex15.hashCode();
      complex2.cosh();
      complex14.getField();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.tanh();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply((-226));
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.conjugate();
      Complex complex2 = complex0.sinh();
      complex1.NaN.subtract(2.0);
      complex2.ZERO.subtract(complex1);
      complex2.abs();
      complex0.ZERO.atan();
      Complex complex3 = complex1.exp();
      complex3.I.toString();
      complex0.sin();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-854.69));
      Complex complex1 = complex0.ONE.createComplex(3.6741841454219095E-195, (-20.0));
      Complex complex2 = Complex.valueOf(2263.82);
      complex1.I.add(3.6741841454219095E-195);
      Complex complex3 = complex0.subtract(complex2);
      Complex complex4 = complex3.ZERO.subtract((-854.69));
      Complex.valueOf((-2176.4594), 4015.1);
      complex4.ONE.divide(complex1);
      Complex complex5 = complex3.NaN.cos();
      Complex complex6 = complex5.ZERO.cos();
      complex3.INF.multiply(1);
      Complex complex7 = complex3.asin();
      complex0.getField();
      Complex.valueOf((-20.0));
      Complex complex8 = complex6.sinh();
      Complex complex9 = complex3.ZERO.add(complex8);
      complex9.INF.sqrt();
      complex3.INF.sin();
      complex1.nthRoot(901);
      Complex complex10 = Complex.valueOf(3.6741841454219095E-195, (-211.143831592592));
      complex5.add(complex10);
      complex7.subtract((-20.0));
      complex9.getReal();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(107.478455066224, Double.POSITIVE_INFINITY);
      complex1.multiply(849);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-536.2029386), (-536.2029386));
      complex0.NaN.asin();
      complex0.sqrt();
      Complex complex1 = complex0.divide((-1793.34016925304));
      Complex complex2 = Complex.ONE;
      complex2.INF.acos();
      Complex complex3 = complex1.pow(complex2);
      complex2.isInfinite();
      complex3.sqrt();
      Complex.valueOf(20.0, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex0.NaN.multiply(complex1);
      complex3.INF.divide((-7.683019590615251E-133));
      Complex complex5 = complex4.ZERO.asin();
      Complex complex6 = complex0.ONE.cosh();
      complex5.INF.multiply(complex4);
      complex5.I.sinh();
      complex6.ONE.atan();
      complex4.NaN.add(complex0);
      Complex complex7 = complex6.NaN.add((-1046.0));
      Complex complex8 = complex7.negate();
      complex0.isInfinite();
      Complex.valueOf(2.6209850274990846E-218);
      complex0.add(complex5);
      Complex complex9 = Complex.valueOf((-1046.0), 746.952558);
      complex2.getImaginary();
      complex3.tanh();
      complex9.equals(complex2);
      Complex complex10 = complex8.acos();
      complex10.multiply(2109);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow(6643.75947324089);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide(Double.NaN);
      complex0.sqrt();
      Complex complex1 = complex0.exp();
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sqrt();
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.I.reciprocal();
      complex2.INF.sin();
      Complex complex3 = complex1.I.negate();
      Complex complex4 = complex3.ZERO.subtract(complex1);
      Complex complex5 = complex4.ONE.cosh();
      complex5.ONE.abs();
      Complex complex6 = complex0.subtract(complex1);
      complex6.ZERO.atan();
      Complex complex7 = complex0.atan();
      complex6.ZERO.pow(1.0);
      complex7.ONE.add(complex5);
      complex0.hashCode();
      complex6.ZERO.divide(complex7);
      complex4.getArgument();
      int int0 = (-826);
      try { 
        complex0.nthRoot((-826));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -826
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.divide(3.0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = new Complex(1329.05966, 1329.05966);
      complex0.isInfinite();
      Complex complex1 = complex0.createComplex(1329.05966, 614.2689413);
      Complex complex2 = complex0.createComplex(1329.05966, (-1430.70904));
      Complex complex3 = Complex.valueOf((-1430.70904));
      Complex complex4 = complex2.ONE.subtract(complex1);
      Complex complex5 = complex4.INF.multiply((-181));
      complex5.abs();
      Complex complex6 = complex2.divide(1329.05966);
      complex6.I.pow(1329.05966);
      Complex complex7 = complex3.conjugate();
      Complex complex8 = complex6.add(complex3);
      Complex complex9 = complex8.I.exp();
      complex9.INF.sin();
      complex1.I.tan();
      Complex complex10 = complex3.cos();
      Complex complex11 = complex10.I.divide((-1430.70904));
      Complex complex12 = complex3.asin();
      Complex complex13 = complex12.NaN.negate();
      complex13.ONE.subtract(complex1);
      Complex.valueOf(3481.755883);
      complex11.acos();
      Complex complex14 = complex11.sqrt();
      complex14.log();
      complex7.toString();
      complex11.isInfinite();
      complex2.getReal();
      Complex complex15 = complex6.reciprocal();
      complex1.exp();
      complex2.hashCode();
      complex15.exp();
      complex14.add(complex12);
      complex0.isInfinite();
      complex11.abs();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.hashCode();
      complex0.equals((Object) null);
      complex0.getReal();
      complex0.abs();
      Complex complex1 = Complex.ZERO;
      complex0.I.atan();
      Complex complex2 = complex0.divide(complex1);
      complex2.ONE.log();
      Complex.valueOf((-928.0));
      complex1.readResolve();
      Complex complex3 = complex0.I.sqrt1z();
      complex3.readResolve();
      complex1.ONE.add(0.0);
      complex0.acos();
      Complex complex4 = complex2.tanh();
      Complex complex5 = complex1.ONE.multiply((-945));
      complex5.conjugate();
      Complex complex6 = complex4.sqrt1z();
      complex6.ONE.tanh();
      Complex complex7 = Complex.I;
      complex6.equals(complex7);
      complex6.add(complex1);
      complex2.INF.abs();
      Complex complex8 = complex1.createComplex(Double.NaN, 3.071569248856111E-202);
      complex2.cos();
      complex8.toString();
      complex0.divide(complex8);
      Complex complex9 = Complex.valueOf(Double.NaN);
      try { 
        complex9.nthRoot((-945));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -945
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex.valueOf(1384.5963);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      double double0 = 1.524817943572998;
      Complex complex0 = Complex.valueOf(1.524817943572998, 1.524817943572998);
      Complex complex1 = new Complex(1.524817943572998, 1.524817943572998);
      Complex complex2 = Complex.valueOf(7.0816970994232115E-9, 0.0);
      Complex complex3 = complex0.ONE.subtract(complex1);
      complex0.toString();
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.exp();
      complex4.ONE.createComplex(7.0816970994232115E-9, 7.0816970994232115E-9);
      complex3.getArgument();
      Complex complex6 = complex0.pow((-1.9022804905733464));
      complex6.getArgument();
      Complex complex7 = complex6.exp();
      Complex complex8 = complex7.NaN.createComplex((-1.4940476035631032), (-1076.6497269859));
      complex8.I.cosh();
      complex7.ONE.exp();
      complex7.NaN.pow(complex2);
      complex7.I.toString();
      complex3.ZERO.tanh();
      complex7.I.negate();
      try { 
        complex5.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = new Complex((-826.1347133318263));
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.hashCode();
      complex0.getReal();
      double double0 = complex0.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.I.atan();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex3.sin();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex2.subtract(complex5);
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex1.pow((-561.106355566467));
      Complex complex10 = complex5.pow(complex2);
      double double1 = complex7.abs();
      assertEquals(Double.NaN, double1, 0.01);
      
      Complex complex11 = complex3.acos();
      Complex complex12 = complex8.reciprocal();
      Complex complex13 = Complex.ZERO;
      complex12.pow(complex13);
      complex8.divide(complex7);
      Complex complex14 = Complex.valueOf(Double.NaN, 20.0);
      assertSame(complex14, complex6);
      
      Complex complex15 = complex4.subtract(complex1);
      assertTrue(complex15.isInfinite());
      
      Complex complex16 = complex4.tanh();
      assertSame(complex16, complex10);
      
      Complex complex17 = complex11.cos();
      assertEquals(0.9999999999999999, complex17.getImaginary(), 0.01);
      
      Complex complex18 = complex5.divide(Double.POSITIVE_INFINITY);
      complex0.toString();
      complex18.INF.toString();
      Complex complex19 = new Complex(611.78433780277, (-1550.7006085903));
      complex19.tanh();
      complex18.pow(complex9);
      assertEquals(0.0, complex18.getReal(), 0.01);
      assertEquals(1.1752011936438014, complex5.getImaginary(), 0.01);
      assertEquals(0.0, complex5.getReal(), 0.01);
      
      Complex complex20 = complex3.acos();
      assertFalse(complex20.equals((Object)complex15));
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.pow(complex0);
      assertSame(complex2, complex1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.exp();
      assertEquals(0.5403023058681398, complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.8414709848078965, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      assertEquals(1.557407724654902, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }
}
