/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 09:06:57 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = complex0.subtract(748.5214419914726);
      Complex complex2 = complex1.log();
      Complex complex3 = complex1.tan();
      complex0.pow(0.41421356237309515);
      Complex complex4 = complex2.exp();
      complex4.isInfinite();
      complex2.subtract(complex3);
      complex1.abs();
      Complex complex5 = complex4.multiply(complex2);
      complex1.subtract(complex3);
      Complex complex6 = complex2.negate();
      complex3.multiply(Double.POSITIVE_INFINITY);
      Complex complex7 = Complex.valueOf((-1944.8), (-1.7772927065973874E-8));
      complex7.getField();
      complex6.tanh();
      Complex complex8 = new Complex((-520.44));
      complex8.tanh();
      complex5.subtract((-2174.255428117786));
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3.8718282216768776E250, 1434.1111576019);
      Complex complex1 = complex0.sqrt1z();
      complex1.readResolve();
      Complex complex2 = Complex.valueOf(3729.0, (-729.161914040384));
      Complex complex3 = complex2.subtract(2.417189020581056E-8);
      Complex complex4 = complex2.log();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex1.pow((-729.161914040384));
      Complex complex7 = complex2.exp();
      Complex complex8 = Complex.valueOf((-729.161914040384), 2.417189020581056E-8);
      Complex complex9 = Complex.INF;
      complex8.multiply(complex9);
      complex1.isInfinite();
      complex8.subtract(complex7);
      complex2.abs();
      complex3.multiply(complex1);
      complex5.subtract(complex1);
      complex4.negate();
      complex7.multiply((-2.5600502005716343E-8));
      Complex complex10 = Complex.INF;
      complex8.tan();
      complex6.readResolve();
      Complex complex11 = Complex.ONE;
      Complex complex12 = Complex.ZERO;
      complex12.multiply(complex7);
      Complex.valueOf(1163.410907721, 2888.0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.hashCode();
      complex0.ZERO.toString();
      Complex complex1 = complex0.sqrt();
      complex1.pow(complex0);
      complex1.createComplex(1873.1486661395447, 1873.1486661395447);
      complex1.add(1873.1486661395447);
      Complex complex2 = complex1.subtract(complex0);
      complex0.tanh();
      try { 
        complex2.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 20.0);
      Complex complex1 = complex0.multiply(425.958129);
      complex0.abs();
      complex1.INF.getField();
      complex1.ZERO.hashCode();
      complex0.getField();
      complex1.asin();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.acos();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.pow(complex3);
      Complex complex5 = Complex.valueOf(20.0);
      complex3.getArgument();
      complex5.ZERO.sqrt1z();
      Complex complex6 = complex5.divide(760.65);
      complex4.readResolve();
      complex5.tanh();
      Complex complex7 = new Complex((-867.483483), (-867.483483));
      Complex complex8 = complex3.add(43.827);
      complex6.add(complex0);
      complex4.tan();
      complex8.readResolve();
      Complex complex9 = Complex.NaN;
      complex9.sin();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.divide(Double.POSITIVE_INFINITY);
      complex1.add(complex0);
      Complex complex2 = complex0.asin();
      Complex complex3 = complex2.createComplex((-1784.92058), Double.POSITIVE_INFINITY);
      Complex complex4 = new Complex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex2.tanh();
      Complex complex5 = complex1.tanh();
      complex3.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(3938.218737322213);
      Complex complex1 = complex0.createComplex(2364.8994981, 2364.8994981);
      Complex complex2 = complex0.multiply(1297);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.acos();
      Complex complex5 = complex1.pow(complex4);
      Complex complex6 = Complex.valueOf(6.283185307179586);
      complex1.getArgument();
      complex2.divide(3938.218737322213);
      complex6.readResolve();
      complex4.tanh();
      Complex complex7 = new Complex(2364.8994981, 1588.07147427);
      Complex complex8 = complex1.add(1.0);
      Complex complex9 = complex8.add(complex2);
      complex8.tan();
      complex9.readResolve();
      complex3.toString();
      complex9.sin();
      complex5.cosh();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.multiply(58);
      complex1.pow(complex0);
      complex1.nthRoot(58);
      complex0.ONE.divide(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.add(complex0);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex0.pow(complex2);
      complex3.getField();
      complex2.sqrt();
      complex4.add(complex2);
      Complex.valueOf(1107.3888906506);
      Complex complex5 = Complex.I;
      complex5.INF.createComplex((-1359.882405578), Double.POSITIVE_INFINITY);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      complex0.NaN.subtract(complex1);
      complex0.nthRoot(1170);
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = new Complex(178.32768);
      Complex complex1 = complex0.createComplex((-399.0), 178.32768);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.pow(complex1);
      Complex complex4 = Complex.valueOf((-2982.80865382));
      complex3.getArgument();
      complex3.divide(2755.693396354728);
      complex4.readResolve();
      Complex complex5 = new Complex((-5.275210583909726E-8), Double.NaN);
      complex1.add((-2982.80865382));
      Complex complex6 = complex5.tan();
      complex1.readResolve();
      complex4.toString();
      complex6.sin();
      Complex.valueOf(1339.081523);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(3962.0);
      Complex complex1 = Complex.valueOf(3962.0);
      Complex complex2 = Complex.valueOf((-1129.482044), 3962.0);
      Complex complex3 = complex1.reciprocal();
      complex3.I.cos();
      Complex complex4 = complex0.multiply(complex2);
      Complex complex5 = complex4.ZERO.createComplex(3962.0, (-5113.0));
      Complex complex6 = Complex.valueOf((-1129.482044));
      complex0.ONE.subtract(0.9127689912020085);
      Complex complex7 = complex4.ONE.createComplex(3962.0, (-1129.482044));
      complex7.ZERO.tan();
      complex4.sqrt1z();
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.pow((-5113.0));
      complex1.atan();
      complex5.divide(complex6);
      complex1.getField();
      complex4.multiply(complex5);
      complex9.abs();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.pow(complex0);
      Complex complex3 = complex0.negate();
      complex3.getArgument();
      Complex complex4 = complex2.divide((-5582.925074631611));
      Complex.valueOf((-1052.647042883));
      complex4.tanh();
      Complex complex5 = new Complex(6.562319473965767E278, (-20.0));
      Complex complex6 = complex4.add((-1391.7145763631722));
      complex5.tan();
      complex0.subtract((-1738.17676011988));
      Complex complex7 = Complex.ZERO;
      Complex complex8 = complex6.negate();
      Complex complex9 = Complex.ZERO;
      complex8.tanh();
      Complex complex10 = Complex.valueOf(1823.142723);
      complex10.equals(complex6);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex2.multiply((-1073804734));
      Complex complex4 = complex1.sin();
      Complex complex5 = complex3.reciprocal();
      complex4.subtract(complex5);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex3.tan();
      Complex complex8 = Complex.ONE;
      complex7.sqrt1z();
      complex3.divide(complex0);
      complex5.getField();
      complex3.multiply(complex6);
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-422.692669168487));
      Complex complex1 = Complex.valueOf(6.562319473965767E278, 3729.0);
      Complex complex2 = complex1.reciprocal();
      complex1.multiply(58);
      complex0.divide(69.88646602785366);
      Complex complex3 = complex0.add(complex1);
      Complex complex4 = complex3.asin();
      complex4.getField();
      Complex complex5 = new Complex(3729.0, (-1.0000000335916794));
      complex2.add(complex0);
      Complex.valueOf(69.88646602785366);
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex((-1476.0784), (-1476.0784));
      Complex complex1 = complex0.asin();
      Complex complex2 = (Complex)complex1.readResolve();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = Complex.valueOf(3729.0);
      complex4.abs();
      complex3.isInfinite();
      complex3.getField();
      Complex complex5 = (Complex)complex4.readResolve();
      Complex complex6 = Complex.valueOf((-2982.5), 855.4);
      complex6.sin();
      Complex complex7 = complex3.atan();
      Complex complex8 = complex2.tan();
      complex5.log();
      Complex complex9 = complex7.pow(3729.0);
      complex2.sqrt1z();
      Complex complex10 = Complex.NaN;
      Complex complex11 = Complex.valueOf(855.4, -0.0);
      complex10.divide((-1476.0784));
      Object object0 = new Object();
      complex9.equals(complex8);
      complex11.createComplex((-1476.0784), 20.0);
      complex10.createComplex(Double.POSITIVE_INFINITY, (-2.2638405280103866E14));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = complex2.cos();
      Complex complex4 = new Complex((-20.0), (-1125.86));
      Complex complex5 = new Complex(20.0);
      Object object0 = new Object();
      complex4.equals(object0);
      Complex complex6 = complex5.atan();
      Complex complex7 = complex3.add(complex1);
      complex6.reciprocal();
      Complex.valueOf((-6.50348962894948E133));
      complex2.cos();
      complex2.add(complex7);
      complex3.add(complex0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.I;
      complex0.readResolve();
      complex0.sqrt1z();
      Complex complex2 = Complex.valueOf((-796.472665008182));
      complex1.abs();
      complex2.isInfinite();
      complex0.getField();
      Complex complex3 = Complex.valueOf(855.4, 1.0);
      complex2.sin();
      Complex complex4 = new Complex((-2982.5), (-796.472665008182));
      Complex complex5 = complex4.reciprocal();
      complex5.cos();
      Complex complex6 = new Complex((-20.0), Double.POSITIVE_INFINITY);
      Complex complex7 = new Complex(1.0);
      Object object0 = new Object();
      Object object1 = new Object();
      complex5.equals(object1);
      complex4.atan();
      complex1.add(complex0);
      complex1.reciprocal();
      Complex.valueOf(3038.8789856);
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.cos();
      complex3.add(complex0);
      complex9.add(complex2);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = new Complex((-27.66));
      Complex complex1 = complex0.add(Double.NaN);
      Complex complex2 = new Complex((-27.66));
      complex0.multiply(complex2);
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.pow(643.587366);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-310.0));
      Complex complex1 = complex0.pow((-310.0));
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.INF.cosh();
      complex3.I.getField();
      Complex complex4 = complex0.atan();
      double double0 = 0.7768193998956958;
      complex2.INF.acos();
      Complex complex5 = complex3.divide(0.7768193998956958);
      Complex complex6 = Complex.valueOf(Double.NaN);
      complex6.I.hashCode();
      complex4.ONE.multiply(complex0);
      Complex complex7 = complex5.add(complex3);
      complex7.NaN.multiply(complex2);
      double double1 = (-500.17);
      complex5.I.subtract((-500.17));
      complex2.abs();
      complex1.add(complex3);
      complex7.abs();
      Complex complex8 = complex5.acos();
      complex8.ONE.add(1321.505);
      try { 
        complex4.INF.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.pow(Double.NaN);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.NaN.multiply(complex1);
      complex3.I.hashCode();
      Complex complex5 = Complex.ZERO;
      complex0.divide(complex5);
      Complex complex6 = complex0.atan();
      Complex complex7 = new Complex(0.0, 0.0);
      complex0.negate();
      complex2.pow(0.0);
      complex7.equals(complex4);
      Complex complex8 = complex3.sqrt1z();
      complex8.NaN.multiply(complex4);
      complex5.getField();
      complex5.sqrt();
      complex6.add(complex2);
      Complex.valueOf((-275.33620315141087));
      Complex complex9 = Complex.ZERO;
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = new Complex((-1476.0784), (-1476.0784));
      Complex complex1 = complex0.asin();
      Complex complex2 = (Complex)complex1.readResolve();
      Complex complex3 = complex1.sqrt1z();
      Complex complex4 = Complex.valueOf(3729.0);
      complex4.abs();
      complex3.isInfinite();
      complex3.getField();
      Complex complex5 = (Complex)complex4.readResolve();
      Complex complex6 = Complex.valueOf((-2982.5), 855.4);
      Complex complex7 = complex6.sin();
      Complex complex8 = complex3.atan();
      Complex complex9 = complex2.tan();
      complex5.log();
      Complex complex10 = complex8.pow(3729.0);
      complex2.sqrt1z();
      Complex complex11 = Complex.NaN;
      Complex.valueOf(855.4, -0.0);
      complex11.divide((-1476.0784));
      complex9.atan();
      complex10.divide(complex4);
      complex4.getField();
      complex5.multiply(complex11);
      complex4.tanh();
      complex7.cos();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.asin();
      complex1.I.subtract(complex0);
      Complex complex2 = complex1.ONE.multiply((-310));
      Complex complex3 = complex1.ONE.sin();
      complex3.ONE.reciprocal();
      Complex complex4 = complex3.NaN.subtract(complex2);
      Complex complex5 = complex4.I.divide((double) (-310));
      complex5.reciprocal();
      complex0.cos();
      Complex complex6 = new Complex((-310), (-3729.0));
      Complex complex7 = new Complex((-1351.569429));
      Object object0 = new Object();
      complex3.equals(complex1);
      Complex complex8 = Complex.ZERO;
      complex8.atan();
      Complex complex9 = Complex.ONE;
      complex4.add(complex9);
      Complex complex10 = Complex.valueOf((double) (-310), 2952.156578632309);
      complex10.reciprocal();
      Complex.valueOf((-2196.8269492));
      complex8.cos();
      complex0.add(complex9);
      complex3.add(complex1);
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.asin();
      Complex.valueOf(0.39433568716049194, 0.39433568716049194);
      complex1.reciprocal();
      Complex complex2 = complex1.multiply((-1195));
      complex0.nthRoot(7);
      Complex complex3 = complex2.divide(2815.2);
      Complex complex4 = Complex.INF;
      complex1.add(complex4);
      Complex complex5 = complex2.asin();
      complex5.getField();
      Complex complex6 = complex3.sqrt();
      complex6.add(complex2);
      Complex.valueOf(3222.9457518186764);
      Complex complex7 = Complex.ZERO;
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      complex1.INF.toString();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = complex2.INF.sin();
      complex2.INF.abs();
      complex2.getField();
      complex2.ONE.nthRoot(1299);
      complex2.abs();
      complex2.add((-2575.297500523822));
      Complex complex4 = complex0.tan();
      Complex complex5 = complex4.subtract((-2575.297500523822));
      complex3.negate();
      Complex complex6 = new Complex(Double.NaN, (-4357614.732380968));
      complex6.acos();
      complex5.sin();
      Complex complex7 = Complex.I;
      complex7.acos();
      complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.NaN.multiply(complex1);
      complex3.I.hashCode();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex0.divide(complex5);
      complex0.atan();
      Complex complex7 = new Complex(0.0, 0.0);
      Complex complex8 = complex0.negate();
      complex2.pow(0.0);
      Object object0 = complex8.readResolve();
      complex7.equals(object0);
      Complex complex9 = complex3.sqrt1z();
      Complex complex10 = complex9.NaN.multiply(complex4);
      complex9.ZERO.asin();
      Complex complex11 = Complex.ZERO;
      complex11.asin();
      complex5.pow(complex8);
      complex5.getField();
      complex6.sqrt();
      complex10.add(complex2);
      Complex.valueOf((-9.861874467486796E-4));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.NaN.multiply(complex1);
      complex3.I.hashCode();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex0.divide(complex5);
      Complex complex7 = Complex.I;
      Complex complex8 = new Complex(0.0, 0.0);
      Complex complex9 = complex0.negate();
      complex8.pow(1.3121577447283033);
      Complex complex10 = (Complex)complex9.readResolve();
      complex8.equals(complex10);
      Complex complex11 = complex3.sqrt1z();
      complex11.NaN.multiply(complex4);
      complex5.getField();
      Complex complex12 = complex10.sqrt();
      complex7.add(complex2);
      complex6.tanh();
      complex12.tanh();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3729.0, 3729.0);
      Complex complex1 = complex0.createComplex(6.283185307179586, 6.283185307179586);
      Complex complex2 = complex1.multiply((-3177));
      complex1.abs();
      complex2.isInfinite();
      complex2.getField();
      Complex complex3 = complex0.reciprocal();
      complex3.hashCode();
      Complex.valueOf((-1041665.81739264), (-7.512438321498593E-8));
      Complex complex4 = complex0.exp();
      Complex complex5 = complex0.pow((-76.881258));
      Complex.valueOf(3729.0);
      complex5.cos();
      Complex complex6 = complex2.sin();
      Complex complex7 = complex0.tan();
      complex4.tan();
      complex4.hashCode();
      complex4.multiply(complex2);
      complex3.multiply(8.885765876316732);
      complex7.getField();
      complex6.acos();
      Complex complex8 = Complex.INF;
      complex8.add((-7.512438321498593E-8));
      complex6.getField();
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex((-3038.8789856), (-1476.078374));
      Complex complex1 = (Complex)complex0.readResolve();
      Complex complex2 = complex0.multiply(complex0);
      complex0.hashCode();
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex1.divide(complex0);
      Complex complex5 = complex4.atan();
      complex1.add(complex2);
      Complex complex6 = complex3.negate();
      complex1.pow(1584.838);
      complex3.readResolve();
      Complex complex7 = Complex.ZERO;
      complex3.equals(complex7);
      Complex complex8 = complex6.multiply(complex5);
      Complex complex9 = new Complex((-374.0763326), (-3038.8789856));
      complex9.asin();
      complex5.negate();
      Complex complex10 = Complex.ZERO;
      complex10.sinh();
      Complex complex11 = Complex.NaN;
      complex8.conjugate();
      complex2.tanh();
      complex4.atan();
      Complex complex12 = complex0.log();
      Complex complex13 = Complex.I;
      complex13.readResolve();
      complex12.divide((-1476.078374));
      complex11.readResolve();
      complex7.toString();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.ONE.multiply((-310));
      Complex complex4 = complex1.ONE.sin();
      complex4.ONE.reciprocal();
      Complex complex5 = complex4.NaN.subtract(complex3);
      Complex complex6 = complex5.I.divide((double) (-310));
      Complex complex7 = complex3.NaN.tan();
      Complex complex8 = complex7.NaN.log();
      Object object0 = new Object();
      complex5.equals(complex8);
      Complex complex9 = complex7.atan();
      Complex complex10 = complex4.add(complex5);
      complex6.reciprocal();
      Complex.valueOf((-2.2711230715729753E-308));
      complex2.cos();
      complex0.add(complex10);
      Complex complex11 = Complex.valueOf((-349.6154156418489), (-2.2711230715729753E-308));
      complex11.add(complex3);
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, 6.562319473965767E278);
      Complex complex1 = complex0.sinh();
      Complex complex2 = Complex.valueOf((-990.263));
      complex2.add(complex1);
      complex1.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ZERO;
      // Undeclared exception!
      complex1.nthRoot(1431655720);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex((-1476.078374), (-1476.078374));
      Complex complex1 = complex0.asin();
      complex1.readResolve();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = Complex.valueOf(3729.0);
      complex3.abs();
      complex2.isInfinite();
      complex2.getField();
      Complex complex4 = complex2.reciprocal();
      complex4.hashCode();
      Complex complex5 = Complex.valueOf(3729.0, (-1476.078374));
      Complex complex6 = complex0.exp();
      Complex complex7 = complex5.pow(3729.0);
      Complex.valueOf((-1476.078374));
      Complex complex8 = complex4.cos();
      Complex complex9 = complex4.sin();
      Complex complex10 = complex1.tan();
      complex9.tan();
      complex6.hashCode();
      Complex complex11 = complex8.multiply(3729.0);
      complex3.getField();
      complex11.acos();
      complex1.add((-967.6381994));
      complex0.getField();
      complex6.tanh();
      complex5.reciprocal();
      complex3.pow(complex7);
      complex10.multiply((-1406));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0889924897128367E-4, 1.0889924897128367E-4);
      Complex complex1 = complex0.createComplex((-202.30045266), 5144.4399032);
      Complex complex2 = complex1.multiply((-1061));
      Complex complex3 = complex0.negate();
      Complex complex4 = complex1.acos();
      Complex complex5 = Complex.I;
      Complex complex6 = complex1.pow(complex5);
      Complex complex7 = complex4.negate();
      complex0.getArgument();
      Complex complex8 = complex2.divide(1902.8496072572);
      complex3.readResolve();
      Complex complex9 = new Complex((-3038.8789856));
      Complex complex10 = Complex.ZERO;
      complex3.tanh();
      Complex complex11 = complex1.exp();
      Complex complex12 = complex2.multiply(0.7853981633974483);
      Complex complex13 = complex12.sin();
      Complex complex14 = Complex.INF;
      complex1.add(535.4916555247646);
      complex10.conjugate();
      complex13.pow(complex0);
      complex11.getReal();
      Complex complex15 = complex7.conjugate();
      complex13.cos();
      Complex complex16 = Complex.valueOf(0.7853981633974483);
      complex16.sqrt();
      complex6.isNaN();
      complex8.asin();
      complex15.multiply(complex7);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3729.0, 3729.0);
      Complex complex1 = complex0.createComplex(6.283185307179586, 6.283185307179586);
      complex1.multiply((-3177));
      Complex complex2 = complex0.negate();
      complex2.acos();
      Complex complex3 = complex0.pow(complex1);
      complex2.negate();
      complex2.getArgument();
      Complex complex4 = complex1.divide(3729.0);
      complex4.readResolve();
      Complex complex5 = new Complex(2295.699998481028);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex1.exp();
      complex5.multiply((-2.356194490192345));
      Complex complex9 = complex1.sin();
      Complex complex10 = Complex.INF;
      complex10.add(4115.0);
      complex6.conjugate();
      complex3.pow(complex1);
      complex7.getReal();
      Complex complex11 = complex5.conjugate();
      complex0.cos();
      complex8.sqrt();
      complex9.isNaN();
      complex2.asin();
      complex6.multiply(complex11);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3729.0, 3729.0);
      Complex complex1 = complex0.createComplex(2295.699998481028, 2295.699998481028);
      Complex complex2 = complex0.multiply(626);
      Complex complex3 = complex1.negate();
      Complex complex4 = complex1.acos();
      complex4.pow(complex3);
      Complex complex5 = complex2.negate();
      complex0.getArgument();
      Complex complex6 = complex0.divide((double) 626);
      complex0.readResolve();
      Complex complex7 = new Complex((-416.6074709667949));
      Complex complex8 = complex6.tanh();
      Complex complex9 = complex3.exp();
      Complex complex10 = complex2.multiply(2295.699998481028);
      complex8.tanh();
      Complex complex11 = complex10.sin();
      complex9.divide(complex10);
      Complex complex12 = complex0.add((-824.940509242));
      Complex complex13 = complex12.conjugate();
      complex13.NaN.hashCode();
      complex9.pow(complex12);
      complex3.getReal();
      complex1.conjugate();
      complex11.cos();
      complex5.sqrt();
      complex8.isNaN();
      Complex complex14 = complex3.asin();
      complex14.multiply(complex6);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.ONE.readResolve();
      Complex complex1 = complex0.asin();
      complex1.ZERO.multiply((-2013.3586));
      complex1.getImaginary();
      complex1.sinh();
      complex0.isNaN();
      Complex complex2 = complex0.ZERO.multiply(1765);
      Complex.valueOf(0.0, (-2013.3586));
      Complex.valueOf(328.19922485);
      Complex complex3 = complex1.negate();
      complex3.ONE.negate();
      Complex complex4 = complex0.ZERO.reciprocal();
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.ZERO.sin();
      Complex complex7 = complex6.log();
      Complex complex8 = complex0.ZERO.multiply(complex7);
      complex8.ONE.exp();
      complex8.getField();
      complex1.reciprocal();
      complex1.conjugate();
      Complex complex9 = new Complex((-2013.3586));
      complex9.tanh();
      complex3.atan();
      complex9.log();
      complex5.readResolve();
      complex2.divide(2295.699998481028);
      Complex complex10 = Complex.INF;
      complex10.readResolve();
      object0.toString();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3729.0, 3729.0);
      Complex complex1 = complex0.createComplex(2295.699998481028, 2295.699998481028);
      Complex complex2 = complex1.negate();
      Complex complex3 = complex2.INF.acos();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.negate();
      complex5.INF.getArgument();
      Complex complex6 = complex4.ZERO.divide(0.7853981633974483);
      complex6.ZERO.readResolve();
      Complex complex7 = new Complex(0.0);
      Complex complex8 = complex7.ONE.tanh();
      complex0.ONE.exp();
      complex8.ZERO.multiply((-3185.782414655));
      Complex complex9 = complex7.NaN.tanh();
      complex9.INF.sin();
      complex7.I.add(2295.699998481028);
      complex0.subtract(2295.699998481028);
      Complex.valueOf(0.0, 3729.0);
      complex4.atan();
      complex3.getReal();
      complex0.sin();
      Complex.valueOf(1.8836492887460383E270, (-1121.04118379211));
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      Complex complex2 = complex0.asin();
      complex2.ZERO.multiply((-2013.3586));
      complex2.getImaginary();
      Complex complex3 = complex2.sinh();
      complex0.isNaN();
      Complex complex4 = complex0.ZERO.multiply(1765);
      Complex.valueOf(0.0, (-2013.3586));
      complex2.negate();
      complex3.negate();
      Complex complex5 = complex3.reciprocal();
      Complex complex6 = Complex.I;
      Complex complex7 = complex4.sin();
      complex5.log();
      Complex complex8 = new Complex((-1830.2113722815));
      Complex complex9 = complex2.multiply(complex8);
      Complex complex10 = complex5.exp();
      Complex complex11 = Complex.ZERO;
      complex11.divide(complex5);
      complex8.getArgument();
      complex7.isNaN();
      complex1.multiply(complex7);
      complex10.sinh();
      complex9.subtract(3.141592653589793);
      complex4.cosh();
      complex4.isNaN();
      complex3.getField();
      Complex complex12 = Complex.I;
      complex12.getField();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(1565);
      complex0.I.hashCode();
      complex0.getImaginary();
      complex0.hashCode();
      Complex complex2 = complex1.tan();
      complex0.nthRoot(1565);
      Complex complex3 = (Complex)complex1.readResolve();
      Complex complex4 = complex0.I.atan();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex2.ZERO.cos();
      Complex complex7 = new Complex(2.499312400817871, (-2618.369));
      complex1.equals(complex7);
      Complex complex8 = complex2.atan();
      Complex complex9 = complex8.add(complex5);
      complex7.INF.reciprocal();
      complex9.equals("=iy");
      complex9.exp();
      complex4.log();
      complex6.divide(complex3);
      complex7.negate();
      Complex.valueOf(2.6628529957961817E-4, 0.0);
      complex5.reciprocal();
      complex8.conjugate();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.INF;
      int int0 = 182;
      Complex complex1 = complex0.multiply(182);
      complex1.nthRoot(182);
      double double0 = (-49.2455719);
      Complex complex2 = complex1.divide((-49.2455719));
      complex1.add(complex0);
      complex2.asin();
      complex2.divide((-49.2455719));
      complex0.asin();
      Complex complex3 = complex2.asin();
      Complex complex4 = Complex.INF;
      complex4.add(complex1);
      complex1.tan();
      Complex.valueOf(0.08782485127449036, (-4221.9));
      complex0.pow(complex3);
      try { 
        complex3.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(617.1888008996816);
      Complex complex1 = complex0.sinh();
      complex1.getImaginary();
      complex0.getField();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = complex1.multiply(complex0);
      complex0.sin();
      complex3.getArgument();
      complex2.createComplex(1.2290570545894685E191, (-6.97066538508643E-8));
      complex0.sqrt();
      Complex complex4 = complex2.cosh();
      try { 
        complex4.nthRoot((-1073741824));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,073,741,824
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.NaN.multiply(complex1);
      complex3.I.hashCode();
      Complex complex5 = Complex.ZERO;
      complex0.divide(complex5);
      complex0.atan();
      Complex complex6 = complex0.negate();
      complex2.pow(0.0);
      Object object0 = complex6.readResolve();
      complex2.equals(object0);
      Complex complex7 = complex3.sqrt1z();
      complex7.NaN.multiply(complex4);
      complex7.ZERO.asin();
      complex1.negate();
      complex1.sinh();
      Complex complex8 = complex6.add((-1447.692879648237));
      complex1.ONE.subtract(2821.952741951);
      Complex complex9 = Complex.valueOf(1.8836492887460383E270, 1.8836492887460383E270);
      Complex complex10 = Complex.ONE;
      complex3.createComplex(50.512604952, 3.2081817253680657E168);
      Complex complex11 = Complex.NaN;
      complex11.subtract(complex1);
      complex9.asin();
      complex8.abs();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-1442.0));
      Complex complex2 = complex1.sinh();
      complex2.getImaginary();
      complex0.getField();
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = complex2.multiply(complex3);
      Complex complex5 = complex0.sin();
      complex0.getArgument();
      complex4.createComplex(Double.NaN, (-1442.0));
      complex5.sqrt();
      complex0.cosh();
      complex3.nthRoot(285);
      complex1.divide(complex4);
      Complex complex6 = Complex.ONE;
      complex4.createComplex(1.5707963267948966, 0);
      Complex complex7 = new Complex(1572.3907);
      complex6.subtract(complex7);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex((-3038.8789856), (-1476.078374));
      Complex complex1 = complex0.ONE.asin();
      complex0.readResolve();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = Complex.valueOf((-3038.8789856));
      complex1.abs();
      complex1.isInfinite();
      complex0.getField();
      Complex complex4 = complex0.reciprocal();
      complex1.INF.hashCode();
      Complex.valueOf((-1476.078374), 0.0);
      Complex complex5 = complex3.exp();
      complex5.ZERO.pow(0.0);
      Complex.valueOf(5891.95685230547);
      Complex complex6 = complex2.cos();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex7.INF.tan();
      Complex complex9 = complex4.tan();
      complex9.ONE.hashCode();
      complex4.multiply(complex6);
      Complex complex10 = complex8.multiply((-967.6381994));
      complex10.ZERO.getField();
      complex4.acos();
      complex8.add((-1476.078374));
      complex0.getField();
      complex10.tanh();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 6.562319473965767E278);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.INF.multiply(58);
      complex3.nthRoot(58);
      Complex complex4 = complex2.ONE.divide(Double.POSITIVE_INFINITY);
      complex2.add(complex0);
      Complex complex5 = complex2.asin();
      Complex complex6 = complex5.divide(6.562319473965767E278);
      Complex complex7 = complex6.asin();
      Complex complex8 = complex6.INF.asin();
      Complex complex9 = complex7.INF.add(complex5);
      Complex complex10 = complex4.INF.tan();
      Complex complex11 = Complex.valueOf((-568.0408100402), Double.POSITIVE_INFINITY);
      complex9.pow(complex4);
      complex4.tan();
      complex10.hashCode();
      Complex complex12 = complex8.multiply(complex1);
      complex4.multiply((double) 58);
      complex12.getField();
      complex5.add(1.0);
      complex2.getField();
      complex11.multiply(0.0);
      complex9.asin();
      Complex complex13 = new Complex(236.3238, (-3919.554123097));
      complex13.exp();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.readResolve();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.multiply((-2013.3586));
      complex1.getImaginary();
      complex1.sinh();
      complex0.isNaN();
      complex0.ZERO.multiply(1765);
      Complex complex3 = Complex.valueOf(0.0, (-2013.3586));
      Complex complex4 = complex1.negate();
      Complex complex5 = complex4.ONE.negate();
      complex3.reciprocal();
      Complex complex6 = Complex.I;
      complex5.sin();
      Complex complex7 = complex1.log();
      complex4.multiply(complex7);
      Complex complex8 = complex4.exp();
      complex1.divide(complex7);
      complex7.getArgument();
      complex5.isNaN();
      complex2.multiply(complex5);
      complex8.sinh();
      complex1.subtract((-1014.00601203844));
      complex4.cosh();
      complex3.isNaN();
      complex3.getField();
      complex5.getField();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1368.6142, 1368.6142);
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = new Complex(3729.0, 3729.0);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0);
      Complex complex1 = complex0.INF.conjugate();
      complex1.ZERO.toString();
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = Complex.valueOf(0.0, 188.7530398878735);
      complex3.I.divide(complex4);
      complex0.INF.cos();
      Complex complex5 = complex3.ZERO.sin();
      complex5.NaN.tan();
      Complex complex6 = complex0.sqrt();
      complex2.INF.divide(0.0);
      Complex complex7 = complex1.atan();
      Complex complex8 = complex3.negate();
      complex8.divide(complex0);
      complex8.INF.multiply(complex7);
      complex6.isInfinite();
      complex6.exp();
      complex2.log();
      double double0 = (-2975.05);
      Complex complex9 = Complex.valueOf((-2975.05));
      Complex.valueOf(0.0, 0.0);
      try { 
        complex9.ONE.nthRoot((-2882));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,882
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex2.ONE.acos();
      Complex complex4 = complex2.NaN.conjugate();
      complex4.ONE.add((-6.968742825553785E-8));
      complex2.I.log();
      Complex complex5 = complex0.I.subtract((-2137.9));
      Complex complex6 = Complex.valueOf((-1.0356006160554071E245), (-1.0356006160554071E245));
      Complex complex7 = complex5.ONE.sinh();
      complex7.INF.getField();
      Complex complex8 = complex0.multiply(4.406750291994231E-9);
      complex8.ZERO.pow(complex0);
      complex5.ONE.toString();
      Complex complex9 = complex0.sinh();
      Complex complex10 = complex9.NaN.createComplex(0.0, 4.734805892507655E-8);
      Complex complex11 = complex10.sinh();
      complex5.isInfinite();
      Complex complex12 = complex6.log();
      Complex complex13 = complex12.ZERO.reciprocal();
      complex0.getReal();
      complex0.getImaginary();
      Complex complex14 = complex0.tanh();
      complex10.sinh();
      complex2.INF.conjugate();
      complex0.multiply(4.734805892507655E-8);
      complex6.getArgument();
      complex14.divide(complex11);
      complex13.acos();
      complex9.cosh();
      complex3.cosh();
      complex13.cosh();
      complex2.toString();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.multiply(0.0);
      Complex complex2 = complex1.ONE.multiply(1449);
      Complex complex3 = complex2.ZERO.divide(complex0);
      complex3.I.getField();
      complex3.I.tanh();
      Complex complex4 = complex0.NaN.sin();
      Complex complex5 = complex4.NaN.cos();
      Complex complex6 = complex4.INF.acos();
      complex0.getArgument();
      complex0.nthRoot(1548);
      complex0.abs();
      Complex complex7 = complex2.acos();
      complex4.createComplex(1081.0, (-1525.140821));
      complex4.abs();
      Complex complex8 = complex1.ZERO.add(complex5);
      complex3.tanh();
      Complex complex9 = complex6.divide(complex3);
      complex9.multiply(17);
      complex2.abs();
      complex8.conjugate();
      Complex.valueOf(0.4794800877571106, 1449.0);
      Complex complex10 = complex9.sqrt1z();
      complex10.I.createComplex(0.0, (-1514.7));
      complex7.sqrt();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.sqrt1z();
      Complex complex2 = complex1.INF.negate();
      Complex complex3 = complex0.ONE.subtract(0.0);
      complex3.ONE.tan();
      Complex.valueOf(0.0, 163.5);
      Complex.valueOf(0.0, 157.1213);
      complex0.readResolve();
      complex0.getArgument();
      complex1.I.pow(0.0);
      Complex complex4 = complex0.divide(0.0);
      complex4.hashCode();
      Complex complex5 = complex2.subtract(0.0);
      complex0.ZERO.divide(0.0);
      complex5.reciprocal();
      complex1.conjugate();
      complex4.hashCode();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1018, 1018);
      Complex complex2 = new Complex(1018, 1018);
      Complex complex3 = complex2.log();
      Complex complex4 = complex2.tan();
      complex3.pow((-20.0));
      complex0.exp();
      complex4.isInfinite();
      complex0.multiply(complex2);
      complex1.sin();
      complex3.sinh();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-75.63382656280015));
      complex1.nthRoot(184);
      Complex complex2 = Complex.valueOf((double) 184);
      complex1.sqrt1z();
      complex1.nthRoot(2555);
      Complex complex3 = Complex.valueOf(1981.442804, Double.NaN);
      Complex complex4 = complex3.subtract(3729.0);
      Complex complex5 = complex2.log();
      Complex.valueOf(Double.NaN);
      complex0.tan();
      Complex complex6 = complex1.pow(3.3075532478807267E-308);
      complex5.exp();
      complex0.isInfinite();
      complex0.multiply(complex1);
      complex6.acos();
      complex4.asin();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.sin();
      Complex complex4 = complex0.I.sqrt();
      Complex complex5 = complex4.I.divide((-1014.00601203844));
      Complex complex6 = complex4.I.subtract(complex2);
      Complex complex7 = complex6.I.add(complex3);
      complex3.ONE.divide(complex4);
      complex1.multiply((-1414));
      complex5.abs();
      Complex complex8 = complex0.NaN.negate();
      Complex complex9 = complex8.ZERO.multiply(1095);
      complex2.pow(complex5);
      complex1.isNaN();
      complex2.createComplex(20.0, 9.861874467486796E-4);
      complex7.acos();
      complex5.add(complex3);
      complex9.divide(complex7);
      complex8.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.NaN.divide(complex1);
      complex0.getArgument();
      Complex complex4 = complex0.sinh();
      complex4.subtract((-1.0808162722402073E-8));
      Complex complex5 = complex1.multiply(complex0);
      Complex complex6 = complex5.ONE.divide(0.0);
      complex6.hashCode();
      Complex complex7 = complex0.multiply((-1.0808162722402073E-8));
      Complex complex8 = complex7.tan();
      complex7.INF.acos();
      Complex complex9 = complex8.ONE.conjugate();
      Complex complex10 = complex9.ZERO.add(0.0);
      Complex complex11 = complex7.subtract(complex5);
      complex11.INF.tanh();
      Complex complex12 = complex7.sqrt1z();
      complex8.sqrt();
      complex8.multiply(complex7);
      complex7.negate();
      complex2.getImaginary();
      complex3.negate();
      complex12.subtract(complex10);
      complex1.conjugate();
      Complex.valueOf(0.0, 0.0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.tanh();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.NaN, (-20.0));
      complex0.subtract(Double.NaN);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex2.log();
      Complex complex4 = complex2.tan();
      complex4.pow((-20.0));
      Complex complex5 = new Complex(938.6, Double.NaN);
      complex5.exp();
      complex0.isInfinite();
      complex3.multiply(complex2);
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.readResolve();
      Complex complex1 = complex0.asin();
      complex1.ZERO.multiply((-2013.3586));
      complex1.getImaginary();
      Complex complex2 = complex1.sinh();
      complex0.isNaN();
      complex0.ZERO.multiply(1765);
      Complex.valueOf(0.0, (-2013.3586));
      Complex complex3 = complex1.negate();
      complex3.ONE.negate();
      Complex complex4 = complex0.ZERO.reciprocal();
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.ZERO.sin();
      Complex complex7 = complex6.log();
      Complex complex8 = complex0.ZERO.multiply(complex7);
      complex8.ONE.exp();
      Complex complex9 = complex0.divide(complex5);
      complex9.ZERO.getArgument();
      complex4.isNaN();
      Complex complex10 = complex4.multiply(complex2);
      complex4.INF.sinh();
      Complex complex11 = complex1.subtract(Double.NaN);
      complex11.cosh();
      complex11.isNaN();
      complex2.getField();
      complex10.getField();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.sin();
      Complex complex1 = complex0.multiply(0);
      complex0.INF.readResolve();
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = Complex.valueOf((-2.3085653185818848E-7));
      complex1.add(complex4);
      complex3.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.INF.toString();
      Complex complex1 = complex0.multiply(0.0);
      complex1.ONE.toString();
      Complex complex2 = complex1.multiply(complex0);
      complex0.hashCode();
      Complex complex3 = complex2.atan();
      complex3.ZERO.subtract(complex1);
      Complex complex4 = complex2.multiply(complex0);
      complex4.hashCode();
      complex2.sqrt1z();
      Complex complex5 = complex4.INF.cos();
      Complex complex6 = complex2.I.sqrt1z();
      Complex complex7 = complex5.INF.subtract(0.0);
      complex2.ZERO.hashCode();
      complex7.ONE.abs();
      Complex complex8 = complex2.I.sin();
      Complex complex9 = complex2.tanh();
      complex2.toString();
      complex1.pow(complex9);
      complex2.ONE.reciprocal();
      Complex complex10 = complex5.subtract(0.0);
      complex9.cosh();
      Complex complex11 = complex10.add(complex6);
      complex5.createComplex(0.0, (-2436.16));
      Complex complex12 = complex11.divide((-2436.16));
      complex12.getReal();
      complex8.acos();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex((-1020.6208));
      complex0.ZERO.exp();
      Complex complex1 = complex0.tan();
      complex1.I.cosh();
      Complex complex2 = complex0.sqrt1z();
      complex1.INF.toString();
      complex1.nthRoot(127);
      Complex complex3 = complex2.add(complex1);
      complex3.INF.multiply(complex1);
      Complex complex4 = complex0.divide((double) 127);
      complex3.cos();
      complex4.getImaginary();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.ZERO.abs();
      complex0.ONE.nthRoot(1777);
      complex0.abs();
      complex0.hashCode();
      Complex complex1 = complex0.add(0.0);
      complex0.getField();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex0.subtract(0.0);
      complex1.equals("");
      Complex complex5 = complex4.exp();
      complex5.log();
      complex3.divide(complex4);
      complex0.negate();
      Complex complex6 = Complex.valueOf((double) 1777, (double) 1777);
      complex6.reciprocal();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.tan();
      complex1.ZERO.tan();
      complex0.acos();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex0.add((-158.6423820729459));
      complex2.hashCode();
      complex2.atan();
      Complex complex4 = complex0.add((-158.6423820729459));
      complex4.toString();
      complex1.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = new Complex((-27.661119231820837));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt();
      complex1.multiply(516);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, 0.0);
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.NaN.conjugate();
      complex2.ZERO.conjugate();
      Complex complex3 = complex1.add(20.08553695678711);
      complex0.ONE.reciprocal();
      complex1.negate();
      complex3.sinh();
      complex1.tanh();
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, (-546.202672));
      complex0.I.createComplex(Double.NaN, (-4.448550564530588E-8));
      complex0.I.createComplex((-546.202672), (-4.448550564530588E-8));
      Complex complex1 = Complex.ZERO;
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = new Complex(1998.929575, 1859.16263403);
      Complex complex2 = complex1.acos();
      complex2.I.log();
      Complex complex3 = complex0.pow(complex1);
      Complex complex4 = complex3.INF.add(0.0);
      Complex complex5 = complex4.ZERO.reciprocal();
      Complex complex6 = complex0.INF.reciprocal();
      complex1.acos();
      Complex complex7 = complex1.divide(complex3);
      complex1.abs();
      Complex complex8 = complex7.pow(1859.16263403);
      complex5.I.asin();
      complex6.ZERO.log();
      Complex complex9 = complex1.ZERO.conjugate();
      complex9.I.nthRoot(2763);
      complex5.INF.abs();
      Complex complex10 = complex5.I.acos();
      complex10.I.sin();
      Complex complex11 = complex8.createComplex(2729.872734319871, 1181.83218056);
      Complex complex12 = complex11.ONE.acos();
      complex5.pow(complex3);
      Complex complex13 = complex7.sinh();
      complex13.ONE.sin();
      complex4.sinh();
      complex6.add(complex12);
      complex2.divide(1859.16263403);
      complex7.log();
      Complex.valueOf(2729.872734319871, 1998.929575);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tanh();
      complex1.abs();
      complex0.nthRoot(33);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.sinh();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2197.74451259), (-2197.74451259));
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.pow(complex1);
      Complex complex3 = Complex.valueOf((-2197.74451259));
      complex1.I.readResolve();
      complex1.createComplex((-2197.74451259), 573.4174389);
      complex3.divide((-2197.74451259));
      complex2.pow((-2197.74451259));
      complex2.multiply((-2197.74451259));
      complex0.divide((-2197.74451259));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex((-3038.8789856), (-1476.078374));
      Complex complex1 = complex0.ONE.asin();
      complex0.readResolve();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.subtract(complex0);
      complex1.abs();
      complex1.isInfinite();
      complex0.getField();
      Complex complex4 = complex0.reciprocal();
      complex1.INF.hashCode();
      Complex.valueOf((-1476.078374), 0.0);
      Complex complex5 = complex3.exp();
      complex5.ZERO.pow(0.0);
      Complex.valueOf(5891.95685230547);
      Complex complex6 = complex2.cos();
      Complex complex7 = complex6.sin();
      Complex complex8 = complex7.INF.tan();
      Complex complex9 = complex4.tan();
      complex9.ONE.hashCode();
      complex4.multiply(complex6);
      Complex complex10 = complex8.multiply((-967.6381994));
      complex10.ZERO.getField();
      complex4.acos();
      complex8.add((-1476.078374));
      complex0.getField();
      Complex complex11 = complex8.multiply(0.0);
      complex11.asin();
      complex11.exp();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.tanh();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.ZERO.reciprocal();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.reciprocal();
      Complex complex2 = complex1.ZERO.sqrt();
      complex1.I.getField();
      Complex complex3 = complex1.ZERO.asin();
      Complex complex4 = complex3.ZERO.multiply(562.14009632);
      complex4.I.add(complex1);
      Complex complex5 = complex0.negate();
      complex2.asin();
      complex5.INF.conjugate();
      complex0.subtract(complex3);
      Complex complex6 = complex0.sin();
      complex5.pow(5.745586744591196E-8);
      Complex complex7 = complex1.NaN.add(complex6);
      complex7.NaN.toString();
      complex7.ZERO.pow(complex3);
      complex3.add((-4.4200075770425176E-8));
      complex2.sqrt();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.NaN.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.tan();
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex.valueOf((-1.809622142990733E-8), Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(1137);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex.valueOf(Double.POSITIVE_INFINITY, 6.562319473965767E278);
      Complex complex1 = complex0.reciprocal();
      int int0 = 58;
      Complex complex2 = complex1.INF.multiply(58);
      complex2.nthRoot(58);
      Complex complex3 = complex1.ONE.divide(Double.POSITIVE_INFINITY);
      complex1.add(complex0);
      Complex complex4 = complex1.asin();
      Complex complex5 = complex4.divide(6.562319473965767E278);
      Complex complex6 = complex5.asin();
      complex5.INF.asin();
      Complex complex7 = complex6.INF.add(complex4);
      complex3.INF.tan();
      Complex.valueOf((-568.0408100402), Double.POSITIVE_INFINITY);
      complex7.pow(complex3);
      try { 
        complex0.INF.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.sin();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      complex0.I.divide(complex1);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.nthRoot(1);
      Complex complex1 = complex0.INF.sinh();
      complex1.readResolve();
      Complex complex2 = complex0.ZERO.subtract((-1495.8));
      Complex complex3 = complex2.NaN.asin();
      complex3.sin();
      complex0.isNaN();
      Complex complex4 = complex3.ONE.multiply((-1227.399938311706));
      complex4.ONE.tanh();
      Complex complex5 = complex0.subtract((-1546.875214));
      complex0.ZERO.add(1634.030771944549);
      Complex complex6 = complex5.add(complex0);
      Complex complex7 = complex0.exp();
      complex2.INF.reciprocal();
      Complex complex8 = complex7.I.atan();
      complex7.divide(complex3);
      complex3.hashCode();
      complex0.getField();
      complex3.sqrt();
      complex6.sqrt();
      complex5.cos();
      complex2.abs();
      complex0.pow(1.0);
      complex8.sqrt();
      Complex.valueOf(0.0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1595.02475, (-6.414337408955734E-8));
      complex0.conjugate();
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex0.add(1595.02475);
      Complex complex3 = complex2.sqrt1z();
      Complex complex4 = new Complex((-6.414337408955734E-8), (-20.0));
      Complex complex5 = complex0.multiply(complex4);
      Complex complex6 = complex5.I.exp();
      complex6.ZERO.tanh();
      complex3.pow(complex2);
      complex1.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY, 6.562319473965767E278);
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = complex2.INF.multiply(58);
      complex3.nthRoot(58);
      Complex complex4 = complex2.ONE.divide(Double.POSITIVE_INFINITY);
      complex2.add(complex0);
      Complex complex5 = complex2.asin();
      Complex complex6 = complex5.divide(6.562319473965767E278);
      Complex complex7 = complex6.asin();
      Complex complex8 = complex6.INF.asin();
      Complex complex9 = complex7.INF.add(complex5);
      Complex complex10 = complex4.INF.tan();
      Complex complex11 = Complex.valueOf((-568.0408100402), Double.POSITIVE_INFINITY);
      complex9.pow(complex4);
      complex4.tan();
      complex10.hashCode();
      Complex complex12 = complex8.multiply(complex1);
      complex4.multiply((double) 58);
      complex12.getField();
      complex8.acos();
      complex5.add(1.0);
      complex2.getField();
      complex11.multiply(0.0);
      complex9.asin();
      Complex complex13 = new Complex(236.3238, (-3919.554123097));
      complex13.exp();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-143.42));
      complex0.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = new Complex(1.1541756557557508E254, 0.0);
      complex0.getReal();
      Complex complex1 = Complex.valueOf(2.0);
      Complex complex2 = complex1.INF.pow(complex0);
      complex0.getArgument();
      Complex complex3 = complex0.ZERO.atan();
      complex3.I.multiply(1.1541756557557508E254);
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = complex0.ONE.acos();
      Complex complex6 = complex0.sin();
      Complex complex7 = complex4.INF.multiply(0.0);
      complex7.ONE.sinh();
      complex6.NaN.subtract(complex1);
      Complex complex8 = complex6.createComplex(439.3851592093, 0.0);
      complex8.ZERO.exp();
      complex2.I.cosh();
      complex8.I.add(complex5);
      Complex complex9 = complex0.I.sqrt1z();
      Complex complex10 = complex9.pow(complex8);
      complex10.asin();
      complex4.pow(complex6);
      complex2.ZERO.add(0.0);
      Complex complex11 = complex5.multiply((-97.1505542881));
      complex2.asin();
      Complex complex12 = new Complex((-97.1505542881), 0.0);
      complex5.divide(complex12);
      Complex complex13 = complex11.asin();
      complex3.isNaN();
      complex2.multiply(316);
      Complex complex14 = Complex.I;
      complex13.pow(complex14);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.subtract(2716.68229);
      Complex complex1 = new Complex((-567.0122752));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY, 3.889885799962507E-216);
      Complex complex2 = complex0.pow(Double.POSITIVE_INFINITY);
      Object object0 = complex1.readResolve();
      complex2.equals(object0);
      complex2.sqrt1z();
      Complex complex3 = complex1.multiply(complex1);
      complex2.getField();
      complex3.sqrt();
      Complex complex4 = Complex.INF;
      complex4.add(complex2);
      Complex.valueOf((-20.0));
      Complex complex5 = Complex.ZERO;
      Complex complex6 = Complex.I;
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.asin();
      complex1.I.subtract(complex0);
      Complex complex2 = complex1.ONE.multiply((-310));
      Complex complex3 = complex1.ONE.sin();
      complex3.ONE.reciprocal();
      Complex complex4 = complex3.NaN.subtract(complex2);
      Complex complex5 = complex4.I.divide((double) (-310));
      Complex complex6 = complex4.pow((double) (-310));
      Object object0 = complex6.readResolve();
      complex6.equals(object0);
      Complex complex7 = complex3.sqrt1z();
      complex1.multiply(complex2);
      complex7.asin();
      Complex complex8 = Complex.ZERO;
      Complex complex9 = complex5.asin();
      complex1.pow(complex7);
      complex0.getField();
      complex8.sqrt();
      complex7.add(complex4);
      Complex.valueOf((-9.861874467486796E-4));
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.exp();
      complex2.NaN.multiply(complex1);
      complex3.I.hashCode();
      Complex complex4 = Complex.ZERO;
      complex0.divide(complex4);
      Complex complex5 = Complex.I;
      Complex complex6 = new Complex(0.0, 0.0);
      complex0.negate();
      complex2.pow(0.0);
      complex6.equals(complex5);
      complex3.sqrt1z();
      Complex complex7 = Complex.ZERO;
      complex7.tanh();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex1 = complex0.INF.multiply(58);
      Complex complex2 = complex1.negate();
      complex2.pow((double) 58);
      complex0.readResolve();
      complex1.equals(complex0);
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, (-423.2));
      complex3.sqrt1z();
      Complex complex4 = Complex.valueOf((-423.2), (-1848.25109731454));
      complex2.multiply(complex4);
      Complex complex5 = Complex.valueOf((double) 58);
      complex5.asin();
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex4.asin();
      complex1.pow(complex3);
      complex3.getField();
      Complex complex8 = Complex.INF;
      complex8.sqrt();
      complex6.add(complex5);
      Complex.valueOf(94.51844824437016);
      complex8.tanh();
      complex7.asin();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.valueOf(617.1888008996816);
      complex0.NaN.getField();
      Complex complex1 = complex0.sqrt();
      Complex complex2 = Complex.ZERO;
      complex1.divide((-1.0));
      Complex complex3 = complex1.subtract((-1.0));
      complex3.I.acos();
      complex3.add(complex1);
      Complex complex4 = Complex.NaN;
      complex4.toString();
      complex1.equals("w$L9T=");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sinh();
      Complex complex2 = complex0.NaN.add(0.0);
      complex0.multiply(315);
      Complex complex3 = complex0.acos();
      Complex complex4 = complex3.INF.asin();
      complex4.I.multiply(0.0);
      Complex complex5 = Complex.valueOf((double) 315, (double) 315);
      Complex complex6 = complex3.subtract(complex5);
      complex3.I.hashCode();
      complex1.multiply(1);
      complex3.subtract(complex6);
      Complex complex7 = complex2.reciprocal();
      complex7.INF.getArgument();
      complex6.equals("|0o.7ME+Vi%YB7 !");
      complex1.getField();
      complex1.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.atan();
      complex0.getField();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = new Complex(3938.218737322213, 3938.218737322213);
      Complex complex1 = complex0.sin();
      complex1.asin();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.multiply(1291);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2300209999084473, 1.2300209999084473);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply(244);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(1698);
      complex0.ONE.subtract((double) 1698);
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.valueOf(6.562319473965767E278, Double.POSITIVE_INFINITY);
      complex1.reciprocal();
      Complex complex2 = complex1.multiply(58);
      complex2.nthRoot(58);
      Complex complex3 = Complex.ONE;
      complex1.asin();
      complex0.getField();
      Complex complex4 = complex1.sqrt();
      Complex complex5 = Complex.ZERO;
      complex5.add(complex4);
      Complex.valueOf(0.45160030615905045);
      complex3.tanh();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.NaN.subtract(complex1);
      complex0.multiply(1374.9866899924332);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = new Complex((-567.0122752));
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-143.42));
      complex0.divide((-143.42));
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.divide(238.5176546540178);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.subtract(6303.999841370554);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.subtract((-915.6325592245482));
      Complex complex2 = complex0.INF.multiply(complex1);
      complex0.ZERO.readResolve();
      complex0.multiply(0.0);
      complex2.getArgument();
      Complex.valueOf((-20.27516), (-414.96502081975));
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      complex1.abs();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.add(1.0);
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ONE.abs();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3729.0, 3729.0);
      complex0.NaN.hashCode();
      complex0.INF.getField();
      complex0.tanh();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.313664294893465E-7);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.cosh();
      Complex complex1 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(1109);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(1162);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      double double0 = 0.0;
      double double1 = 1590.737485109984;
      Complex complex0 = Complex.valueOf(0.0, 1590.737485109984);
      complex0.ONE.hashCode();
      try { 
        complex0.nthRoot((-2102));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,102
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.getArgument();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply((-2684.6620030938));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = Complex.valueOf(617.1888008996816);
      complex0.NaN.getField();
      Complex complex1 = complex0.sqrt();
      complex1.INF.add(complex0);
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = new Complex(3729.0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.nthRoot((-245));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -245
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = new Complex((-35.524), (-35.524));
      Complex.valueOf((-35.524));
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.NaN.tanh();
      complex1.INF.pow((-1749.76));
      complex2.I.sqrt1z();
      complex1.INF.createComplex((-35.524), (-1749.76));
      complex0.getArgument();
      try { 
        complex2.nthRoot((-2917));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,917
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex.valueOf((-1948.864861));
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2.1349396267483754E184));
      complex0.equals("OUT_OF_RANGE_RIGHT");
      Complex.valueOf(0.0);
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.sqrt();
      complex3.ZERO.cosh();
      Complex complex4 = complex3.createComplex((-1.1505428993246996E-8), 0.0);
      Complex complex5 = complex1.cosh();
      Complex complex6 = complex5.ONE.tanh();
      complex6.NaN.tan();
      Complex complex7 = complex0.cos();
      Complex complex8 = complex7.ZERO.multiply(complex3);
      Complex.valueOf(Double.NaN);
      Complex complex9 = complex8.NaN.acos();
      Complex complex10 = complex8.ONE.negate();
      complex10.NaN.multiply(264.41687853518);
      complex7.NaN.add(complex4);
      complex3.abs();
      complex2.pow(complex3);
      complex3.pow(complex0);
      complex9.getImaginary();
      complex1.tan();
      complex4.toString();
      complex4.reciprocal();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex.valueOf(3729.0, 3729.0);
      Complex complex0 = Complex.valueOf(3729.0, (-3686.289544));
      Complex complex1 = complex0.add(1602.95838675385);
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex0.tan();
      complex0.readResolve();
      complex3.toString();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = new Complex((-2317.9), (-2317.9));
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.valueOf((-2317.9));
      complex2.INF.getArgument();
      Complex complex3 = new Complex(1418.1, 1.998471736907959);
      Complex complex4 = complex2.ONE.divide(complex3);
      Complex complex5 = complex4.I.subtract(1418.1);
      Complex.valueOf(1403.70442);
      complex1.INF.multiply(complex5);
      Complex complex6 = complex2.INF.createComplex(1.998471736907959, 1418.1);
      complex6.acos();
      complex4.NaN.abs();
      Complex complex7 = complex0.ZERO.add(complex1);
      complex1.pow(complex3);
      Complex complex8 = Complex.valueOf(0.7853981633974483, 1.998471736907959);
      complex8.ZERO.getField();
      complex7.NaN.sin();
      complex0.isInfinite();
      complex7.readResolve();
      complex7.getReal();
      complex2.reciprocal();
      complex2.nthRoot(2774);
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(1213.8967903431985, 15.388);
      complex1.ZERO.negate();
      Complex complex2 = complex0.tan();
      Complex complex3 = complex0.INF.multiply(complex2);
      Complex complex4 = Complex.valueOf(0.0);
      Complex complex5 = Complex.valueOf(451.0185);
      complex4.ONE.reciprocal();
      Complex complex6 = Complex.valueOf(0.0, 0.0);
      complex5.ONE.getArgument();
      complex2.I.getField();
      complex4.INF.subtract(complex5);
      Complex complex7 = complex0.atan();
      complex3.NaN.subtract((-869.8437507204131));
      Complex complex8 = complex7.ZERO.asin();
      complex8.NaN.atan();
      complex2.toString();
      Complex complex9 = complex3.multiply(816);
      complex9.NaN.subtract(0.0);
      complex0.exp();
      complex3.asin();
      complex6.readResolve();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(complex0);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply((-2684.6620030938));
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3729.0, 3729.0);
      complex0.NaN.pow(3729.0);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.add(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.hashCode();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.NaN.multiply(complex1);
      complex3.I.hashCode();
      Complex complex5 = Complex.ZERO;
      complex0.divide(complex5);
      Complex complex6 = complex0.atan();
      Complex complex7 = complex6.NaN.add(complex1);
      Complex complex8 = complex0.negate();
      complex2.pow(0.0);
      Object object0 = complex8.readResolve();
      complex7.equals(object0);
      Complex complex9 = complex3.sqrt1z();
      complex9.NaN.multiply(complex4);
      complex9.ZERO.asin();
      complex1.negate();
      complex1.sinh();
      complex8.add((-1447.692879648237));
      complex1.ONE.subtract(2821.952741951);
      Complex.valueOf(1.8836492887460383E270, 1.8836492887460383E270);
      complex7.atan();
      complex1.getReal();
      complex6.sin();
      Complex.valueOf(1.0, 1403.4);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.multiply(1565);
      complex0.I.hashCode();
      complex0.getImaginary();
      complex0.hashCode();
      Complex complex2 = complex1.tan();
      complex0.nthRoot(1565);
      complex1.readResolve();
      complex1.I.sin();
      Complex complex3 = complex0.I.atan();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex2.ZERO.cos();
      Complex complex6 = new Complex(2.499312400817871, (-2618.369));
      complex1.equals(complex6);
      Complex complex7 = complex2.atan();
      complex7.add(complex4);
      complex6.INF.reciprocal();
      Complex.valueOf((double) 1565);
      Complex complex8 = complex5.cos();
      complex8.INF.add(complex6);
      complex8.abs();
      complex7.NaN.tan();
      Complex complex9 = complex6.multiply((double) 1565);
      complex9.I.multiply(1565);
      complex9.I.nthRoot(1565);
      complex4.getReal();
      complex7.sinh();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3729.0, 3729.0);
      Complex complex1 = complex0.createComplex(6.283185307179586, 6.283185307179586);
      complex1.getField();
      Complex complex2 = complex0.sqrt();
      complex2.add(complex1);
      complex1.multiply(Double.NaN);
      complex1.asin();
      complex0.exp();
      complex0.createComplex(0.3777897342085996, 2295.699998481028);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.I.sinh();
      complex0.getImaginary();
      complex1.ONE.getField();
      complex1.I.sqrt1z();
      Complex complex2 = complex1.multiply(complex0);
      complex2.ZERO.sin();
      double double0 = (-6.97066538508643E-8);
      complex0.ZERO.getArgument();
      complex1.createComplex((-6.97066538508643E-8), 0.0);
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.cosh();
      int int0 = 0;
      try { 
        complex4.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.asin();
      Complex complex2 = complex1.I.subtract(complex0);
      Complex complex3 = complex1.ONE.multiply((-310));
      Complex complex4 = complex1.ONE.sin();
      complex4.ONE.reciprocal();
      Complex complex5 = complex4.NaN.subtract(complex3);
      complex5.I.divide((double) (-310));
      Complex complex6 = complex3.NaN.tan();
      Complex complex7 = complex6.NaN.log();
      Complex complex8 = complex2.INF.pow(0.0);
      Complex complex9 = complex8.sqrt1z();
      complex9.ZERO.divide((-9.868269632073771E-8));
      Complex complex10 = complex8.ZERO.atan();
      complex10.ONE.divide(complex0);
      complex0.getField();
      complex3.getField();
      Complex complex11 = complex1.reciprocal();
      complex1.INF.conjugate();
      complex11.NaN.tanh();
      Complex complex12 = complex2.atan();
      complex12.ZERO.log();
      complex1.readResolve();
      complex7.divide(1.8510795864289367E226);
      complex1.readResolve();
      complex3.toString();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.I;
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = new Complex((-3630.24381815), (-3630.24381815));
      Complex complex1 = complex0.multiply((-849.2759128932516));
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = Complex.valueOf((-3630.24381815));
      Complex complex4 = complex0.tanh();
      complex1.isInfinite();
      complex0.getImaginary();
      Complex complex5 = complex3.cosh();
      complex4.isInfinite();
      Complex complex6 = complex5.createComplex(1.9809842109680176, (-3630.24381815));
      complex5.ONE.subtract((-3630.24381815));
      complex6.tan();
      complex4.add((-849.2759128932516));
      complex2.ONE.subtract(1.9809842109680176);
      Complex complex7 = complex2.subtract((-3630.24381815));
      Complex complex8 = Complex.valueOf(570.95474);
      Complex complex9 = complex7.cosh();
      Complex complex10 = complex5.exp();
      complex9.negate();
      complex10.cos();
      Complex.valueOf(1.9809842109680176);
      complex8.cosh();
      complex0.multiply(complex3);
      Complex.valueOf((-742.0));
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = complex0.multiply(2.9046141593926277E-8);
      Complex.valueOf(2.0, 2.9046141593926277E-8);
      complex1.subtract(2.9046141593926277E-8);
      Complex.valueOf(2.0, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply((-20.0));
      Complex complex1 = complex0.acos();
      complex1.NaN.reciprocal();
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3729.0, 3729.0);
      Complex complex1 = complex0.createComplex(2295.699998481028, 2295.699998481028);
      Complex complex2 = complex0.ONE.multiply((-3177));
      Complex complex3 = complex1.negate();
      complex3.INF.acos();
      Complex complex4 = complex0.pow(complex1);
      Complex complex5 = complex4.negate();
      complex5.INF.getArgument();
      Complex complex6 = complex4.ZERO.divide(0.7853981633974483);
      complex6.ZERO.readResolve();
      Complex complex7 = new Complex(0.0);
      Complex complex8 = complex7.ONE.tanh();
      complex0.ONE.exp();
      complex8.ZERO.multiply((-3185.782414655));
      Complex complex9 = complex7.NaN.tanh();
      complex9.INF.sin();
      complex7.I.add(2295.699998481028);
      complex9.conjugate();
      complex4.pow(complex7);
      complex7.getReal();
      complex0.ONE.conjugate();
      complex4.cos();
      complex1.sqrt();
      complex0.isNaN();
      Complex complex10 = complex2.asin();
      complex10.multiply(complex8);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.exp();
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.exp();
      Complex complex1 = complex0.tan();
      complex1.I.cosh();
      complex1.divide(1.5292916297912598);
      Complex complex2 = complex0.sqrt1z();
      complex1.INF.toString();
      complex1.nthRoot(127);
      Complex complex3 = complex2.add(complex1);
      Complex complex4 = complex3.INF.multiply(complex1);
      Complex complex5 = complex0.divide((double) 127);
      complex5.ZERO.log();
      complex1.cos();
      complex5.getImaginary();
      complex4.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.negate();
      Complex complex1 = complex0.atan();
      complex0.add(complex1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex1.log();
      Complex complex3 = complex2.ZERO.pow((-152.4643));
      Complex complex4 = complex3.NaN.divide(complex2);
      complex2.ZERO.abs();
      complex1.isNaN();
      Complex.valueOf((-2684.62));
      complex0.isInfinite();
      complex4.nthRoot(17);
      complex3.hashCode();
      complex4.getReal();
      Complex complex5 = Complex.valueOf(0.0, 0.0);
      complex3.add(874.4);
      Complex complex6 = complex5.atan();
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex0.ZERO.add(complex1);
      Complex complex3 = complex0.NaN.multiply(363);
      Complex complex4 = complex3.NaN.acos();
      Complex complex5 = complex0.tan();
      complex0.readResolve();
      Complex complex6 = complex3.acos();
      complex6.ONE.reciprocal();
      Complex.valueOf((-20.0), 0.0);
      Complex complex7 = complex4.NaN.exp();
      complex7.sqrt();
      complex2.NaN.subtract((-1310.63705526));
      complex4.ZERO.divide(complex3);
      complex0.equals((Object) null);
      complex2.cos();
      Complex.valueOf(0.0);
      complex1.reciprocal();
      complex0.divide((-1807.3382671928332));
      complex5.subtract(complex4);
      Complex complex8 = complex0.sqrt1z();
      Complex complex9 = complex8.INF.cos();
      Complex.valueOf((-2831.40786918025), (-1310.63705526));
      complex9.nthRoot(363);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow(20.0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.asin();
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-504.26555), (-504.26555));
      Complex complex1 = complex0.INF.log();
      Complex complex2 = complex1.ZERO.sin();
      Complex complex3 = complex0.I.multiply(944.28188724);
      Complex complex4 = complex3.INF.log();
      Complex complex5 = complex4.INF.sin();
      Complex complex6 = complex0.tan();
      Complex complex7 = complex0.reciprocal();
      complex2.INF.reciprocal();
      Complex complex8 = complex7.I.asin();
      complex5.ONE.createComplex((-504.26555), (-504.26555));
      Complex complex9 = complex8.ONE.subtract(complex2);
      complex9.cos();
      Complex complex10 = complex7.asin();
      assertEquals((-9.915407390826284E-4), complex10.getReal(), 0.01);
      
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex2.subtract(complex11);
      complex0.getImaginary();
      complex4.log();
      Complex complex13 = complex5.pow(0.0);
      complex13.INF.exp();
      Complex complex14 = complex2.sqrt();
      assertEquals(0.0, complex14.getReal(), 0.01);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex15 = complex1.add((-504.26555));
      Complex complex16 = complex15.acos();
      complex11.isNaN();
      Complex complex17 = complex1.atan();
      assertSame(complex17, complex16);
      
      complex8.hashCode();
      Complex complex18 = complex5.negate();
      Complex complex19 = complex18.ONE.conjugate();
      Complex complex20 = complex19.NaN.asin();
      Complex complex21 = complex18.reciprocal();
      assertSame(complex18, complex20);
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertFalse(complex21.equals((Object)complex6));
      assertSame(complex21, complex13);
      assertSame(complex21, complex12);
      assertFalse(complex21.equals((Object)complex14));
      assertTrue(complex4.isInfinite());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.cos();
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertEquals(1.5430806348152437, complex1.getReal(), 0.01);
      
      Complex complex2 = (Complex)complex0.readResolve();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertFalse(complex2.isNaN());
      assertFalse(complex2.isInfinite());
      assertEquals(1.0, complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.conjugate();
      assertEquals(1.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      
      Complex complex2 = complex0.tanh();
      assertEquals(0.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertEquals(1.557407724654902, complex2.getImaginary(), 0.01);
  }
}
