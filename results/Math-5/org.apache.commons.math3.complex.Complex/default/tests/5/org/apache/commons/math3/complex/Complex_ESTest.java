/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 08:39:57 GMT 2020
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = new Complex((-185.6));
      Complex complex1 = Complex.valueOf((-185.6), 376.49253001);
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex1.INF.multiply((-7.0));
      complex3.NaN.getField();
      Complex complex4 = complex3.I.subtract((-1318.0));
      complex4.NaN.sqrt();
      Complex complex5 = complex3.createComplex(1.609620121802469E50, 908.455311);
      complex5.asin();
      Complex.valueOf(908.455311);
      Complex complex6 = complex0.divide((-185.6));
      complex6.negate();
      Complex complex7 = complex6.I.reciprocal();
      complex6.ZERO.getArgument();
      complex6.ZERO.exp();
      Complex complex8 = complex1.sinh();
      Complex complex9 = complex8.ONE.log();
      Complex complex10 = complex1.sinh();
      complex10.ONE.add(908.455311);
      complex10.ZERO.multiply(4788);
      complex3.acos();
      complex8.log();
      Complex complex11 = complex9.sinh();
      complex6.exp();
      complex11.multiply(0);
      complex2.add(6.206173237694985E28);
      complex7.exp();
      complex9.getField();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ONE.createComplex((-2250.23323908), (-2250.23323908));
      Complex.valueOf((-2250.23323908));
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.valueOf(703.0, 3536.7008408569104);
      complex2.NaN.cosh();
      Complex complex3 = Complex.valueOf((-20.0), (-1013.719039));
      Complex complex4 = complex3.tanh();
      complex4.log();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(1.0239791185239086E-7, Double.POSITIVE_INFINITY);
      complex0.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      Complex complex2 = new Complex((-20), (-20));
      complex2.tan();
      Complex complex3 = complex0.multiply((-20));
      complex3.cos();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.divide(Double.NaN);
      complex0.multiply(complex0);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.acos();
      complex1.ZERO.getField();
      complex0.NaN.getArgument();
      complex1.negate();
      Complex complex2 = complex1.cos();
      Complex complex3 = complex2.INF.pow(complex1);
      Complex complex4 = new Complex(Double.NaN, (-18.0));
      complex3.I.add(complex4);
      complex1.INF.sqrt();
      Complex complex5 = complex2.ZERO.divide((-500.118367));
      Complex complex6 = complex1.exp();
      Complex complex7 = complex6.subtract(complex2);
      complex7.subtract(complex5);
      Complex complex8 = complex6.sqrt1z();
      Complex complex9 = complex5.NaN.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex.valueOf(0.6926587820053101, Double.POSITIVE_INFINITY);
      complex9.toString();
      Complex complex10 = complex8.ONE.sqrt();
      Complex complex11 = complex2.sin();
      complex11.ZERO.pow((-500.118367));
      Complex complex12 = complex5.createComplex((-500.118367), (-500.118367));
      complex12.I.asin();
      Complex.valueOf(1.1691184043884277, (-500.118367));
      complex11.sin();
      complex5.subtract(complex0);
      complex10.readResolve();
      complex10.sinh();
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0E-8, 1.0E-8);
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.ZERO;
      Complex.valueOf(1.0E-8);
      Complex complex3 = complex2.log();
      complex3.toString();
      Complex complex4 = complex1.acos();
      complex3.equals(complex4);
      complex3.cos();
      complex3.sqrt();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.ONE.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex(2020.40112045);
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ZERO.negate();
      Complex complex3 = new Complex((-0.9092974268256817));
      complex0.I.divide((-0.9092974268256817));
      complex2.NaN.subtract((-0.9092974268256817));
      complex2.I.getArgument();
      complex1.conjugate();
      complex2.I.add(complex3);
      Complex complex4 = Complex.valueOf(1.999999987845058E-8);
      Complex complex5 = complex0.ZERO.negate();
      Complex complex6 = complex5.ZERO.add(complex0);
      complex6.INF.readResolve();
      complex0.NaN.createComplex(4.888792154132158E-111, 1.5707963267948966);
      complex6.INF.reciprocal();
      Complex complex7 = complex4.tan();
      complex7.I.add(complex0);
      Complex complex8 = complex1.pow(132.32443);
      complex4.createComplex((-1.0E-8), Double.NaN);
      complex1.sin();
      complex8.conjugate();
      complex1.nthRoot(1205);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 1);
      complex0.tanh();
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex(20.0);
      Complex complex1 = complex0.createComplex(20.0, 20.0);
      complex1.toString();
      Complex complex2 = complex1.tan();
      complex2.NaN.reciprocal();
      complex2.acos();
      complex2.divide(20.0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt();
      complex1.ONE.divide(94.3811);
      complex1.ONE.conjugate();
      complex0.ONE.getArgument();
      complex0.getField();
      Complex complex2 = complex0.tan();
      complex2.reciprocal();
      Complex complex3 = complex2.ZERO.acos();
      complex2.nthRoot(4109);
      Complex complex4 = complex0.divide(0.0);
      Complex complex5 = complex4.exp();
      complex5.NaN.multiply(640);
      complex4.createComplex(4109, (-2113.402699186447));
      Complex complex6 = complex0.divide((-2113.402699186447));
      complex6.INF.multiply(640);
      complex3.conjugate();
      complex3.add(Double.NaN);
      complex6.abs();
      Complex.valueOf((-2113.402699186447), (-352.0));
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.acos();
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 1);
      Complex complex1 = complex0.multiply(Double.POSITIVE_INFINITY);
      complex1.sin();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-4920.9914), (-4920.9914));
      complex0.tan();
      Complex.valueOf((-4920.9914));
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      Complex complex1 = Complex.valueOf(20.0);
      Complex complex2 = complex1.tanh();
      Complex complex3 = complex0.log();
      Complex complex4 = new Complex(1.00000001, 20.0);
      complex4.toString();
      Complex complex5 = complex2.acos();
      Complex complex6 = Complex.NaN;
      complex6.subtract(complex1);
      Complex complex7 = complex3.multiply(850);
      complex7.multiply((double) 850);
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.abs();
      complex0.NaN.subtract((-7.630957994128623E-8));
      Complex complex1 = Complex.valueOf((-7.630957994128623E-8));
      Complex complex2 = complex1.I.tan();
      complex2.I.getArgument();
      complex2.add(442.27433038263);
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf(Double.POSITIVE_INFINITY, 0.5930450044066168);
      complex0.pow(1463.9700480053);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex1.INF.subtract(complex0);
      complex0.divide(complex1);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.560749900884836, (-846.3));
      Complex complex1 = complex0.exp();
      complex0.add(221.65888901994046);
      Complex complex2 = complex1.conjugate();
      complex2.getField();
      Complex complex3 = new Complex(547.7621033512496);
      complex3.multiply(complex0);
      complex3.pow((-1.6379825102473853E-8));
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.sqrt1z();
      // Undeclared exception!
      complex0.nthRoot(2045222521);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex0.log();
      Complex.valueOf(9.158530500130718E-9, 9.158530500130718E-9);
      complex1.toString();
      Complex complex3 = Complex.I;
      Complex complex4 = Complex.INF;
      complex4.readResolve();
      complex2.equals(complex3);
      Complex complex5 = new Complex(3018.0, (-3392.769028048822));
      complex5.acos();
      Object object0 = new Object();
      complex1.readResolve();
      complex4.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.divide((-408.8928975));
      Complex complex3 = complex2.divide(complex1);
      complex3.multiply(complex2);
      complex2.multiply((-1));
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.560749900884836, (-846.3));
      Complex complex1 = Complex.ZERO;
      Complex complex2 = (Complex)complex0.readResolve();
      complex1.tan();
      Complex complex3 = Complex.valueOf(8.560749900884836);
      complex3.getArgument();
      Complex complex4 = complex0.multiply(complex2);
      complex4.pow(complex0);
      Object object0 = new Object();
      complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = Complex.ONE;
      Complex complex3 = complex0.conjugate();
      Complex complex4 = Complex.ZERO;
      complex2.readResolve();
      Complex complex5 = Complex.valueOf((-2394.5));
      Complex complex6 = Complex.ONE;
      complex3.isInfinite();
      Complex complex7 = complex5.tanh();
      Complex complex8 = complex7.tan();
      Complex.valueOf((-2394.5), Double.NaN);
      complex8.log();
      complex7.toString();
      complex1.readResolve();
      complex5.equals(complex2);
      Complex complex9 = new Complex(8.560749900884836, 2255.42459867127);
      Complex complex10 = Complex.NaN;
      Complex complex11 = Complex.ONE;
      Complex complex12 = Complex.NaN;
      complex11.equals(complex12);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.abs();
      complex0.INF.add(Double.NaN);
      Complex complex1 = new Complex(1866);
      Complex.valueOf(6.436942652763215E-5, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(473);
      Complex complex1 = new Complex((-408.8928975), (-568.7348124782));
      Complex complex2 = complex0.divide(complex1);
      complex2.ZERO.add(complex0);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.560749900884836, (-846.3));
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.ZERO;
      complex1.readResolve();
      Complex complex3 = Complex.valueOf((-846.3));
      Complex complex4 = complex0.tanh();
      complex4.log();
      complex3.toString();
      complex0.acos();
      Complex complex5 = Complex.INF;
      complex2.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.sqrt();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(241);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ZERO.createComplex((-408.8928975), (-408.8928975));
      complex1.createComplex((-408.8928975), (-408.8928975));
      Complex complex2 = new Complex((-408.8928975));
      Complex complex3 = complex2.tan();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = Complex.I;
      complex3.pow(complex5);
      complex4.equals(complex3);
      complex5.multiply((-576));
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.560749900884836, (-846.3));
      Complex complex1 = complex0.I.createComplex(8.560749900884836, (-846.3));
      Complex complex2 = complex1.exp();
      complex1.subtract((-1.0));
      complex2.readResolve();
      complex1.conjugate();
      complex2.multiply((-2614.77166));
      complex0.negate();
      complex0.equals((Object) null);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.toString();
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.NaN;
      complex1.equals(complex2);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.sqrt1z();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.divide((-474.0917806));
      Complex complex3 = complex1.I.divide(complex0);
      Complex complex4 = complex3.NaN.multiply(complex2);
      Complex complex5 = complex4.createComplex((-474.0917806), (-474.0917806));
      Complex complex6 = complex3.tan();
      complex4.conjugate();
      complex2.pow(complex5);
      complex6.equals(complex2);
      complex2.multiply((-576));
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0E-8, 1.0E-8);
      Complex complex1 = complex0.exp();
      Complex complex2 = Complex.NaN;
      complex1.equals(complex2);
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.multiply(1284.0);
      Complex complex3 = new Complex(477.0037138747799);
      complex3.getField();
      Complex complex4 = complex1.divide(0.040196798741817474);
      complex0.hashCode();
      Complex complex5 = complex4.subtract(complex0);
      Complex complex6 = complex5.divide(complex2);
      complex3.acos();
      Complex complex7 = complex3.divide(0.040196798741817474);
      complex7.cos();
      complex2.atan();
      Object object0 = new Object();
      complex4.isNaN();
      Complex complex8 = complex6.multiply(0.7615941559557649);
      Object object1 = new Object();
      Complex complex9 = complex8.tanh();
      Complex complex10 = new Complex(3173.8700421288, 2103.808734873198);
      complex10.cosh();
      Object object2 = complex10.readResolve();
      complex8.equals(object2);
      complex5.divide(complex9);
      Complex complex11 = complex7.pow(477.0037138747799);
      complex11.getArgument();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow(1.7976931348623157E308);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.7591819833844019E252, 2218.595842143362);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2215.203077213);
      Complex complex1 = complex0.divide(2215.203077213);
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex1.atan();
      Complex complex4 = complex2.exp();
      complex3.reciprocal();
      complex4.readResolve();
      Complex complex5 = complex2.negate();
      complex1.getArgument();
      complex3.conjugate();
      complex5.tan();
      complex4.pow((-639.641271273));
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2215.203077213);
      Complex complex1 = complex0.INF.divide(2215.203077213);
      Complex complex2 = complex1.I.sinh();
      complex1.getArgument();
      Complex.valueOf(407.303, (-3674.6723015102307));
      Complex complex3 = complex2.log();
      complex0.toString();
      complex1.equals((Object) null);
      Complex complex4 = complex2.acos();
      complex2.equals(complex4);
      Complex complex5 = complex3.reciprocal();
      complex5.sinh();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.tan();
      complex2.I.sqrt1z();
      complex1.getArgument();
      complex2.ONE.conjugate();
      Complex complex3 = Complex.ZERO;
      Object object0 = complex3.readResolve();
      Complex.valueOf((-3481.4));
      Complex complex4 = Complex.ONE;
      complex4.isInfinite();
      Complex complex5 = complex0.tanh();
      complex5.tan();
      Complex complex6 = Complex.valueOf(0.0, (-3481.4));
      complex4.log();
      complex1.toString();
      Object object1 = complex6.readResolve();
      complex3.equals(object1);
      Complex complex7 = new Complex(1218.17, (-2182.7499073201525));
      Complex complex8 = Complex.NaN;
      complex2.equals(object0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.log();
      complex0.toString();
      complex1.acos();
      complex0.equals(complex1);
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.560749900884836, (-846.3));
      Complex complex1 = complex0.sqrt1z();
      complex0.getArgument();
      Complex complex2 = complex0.conjugate();
      Complex complex3 = complex2.multiply((-3520.7942));
      double double0 = 2103.808734873198;
      complex0.getField();
      Complex complex4 = complex2.divide(1303.92738566);
      complex0.hashCode();
      Complex complex5 = complex1.subtract(complex2);
      complex0.divide(complex3);
      complex0.acos();
      Complex complex6 = complex0.divide(0.99939298542256);
      Complex complex7 = complex6.cos();
      complex6.atan();
      complex0.equals(complex7);
      Complex complex8 = complex4.multiply(0.3529726295962578);
      Object object0 = new Object();
      complex3.tanh();
      complex2.cosh();
      Object object1 = complex5.readResolve();
      complex6.equals(object1);
      try { 
        complex8.nthRoot((-373));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -373
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.cosh();
      complex1.subtract((-2947.095422199));
      complex1.readResolve();
      Complex complex3 = complex0.conjugate();
      complex2.multiply((-3747.9693));
      Complex complex4 = complex1.negate();
      complex1.equals(complex3);
      complex3.multiply(complex0);
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(576.0);
      complex0.isInfinite();
      complex0.ZERO.cosh();
      Complex complex1 = Complex.valueOf(2684.06419611274, 576.0);
      complex1.multiply(576.0);
      complex0.sqrt();
      Complex complex2 = complex1.multiply(2753);
      Complex complex3 = complex2.ONE.tanh();
      complex1.log();
      complex0.toString();
      Object object0 = complex0.readResolve();
      complex2.equals(object0);
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.subtract((-3293.8137892088807));
      Complex.valueOf(2860.07);
      Complex complex2 = complex0.tan();
      complex0.getArgument();
      Complex complex3 = complex2.multiply(complex0);
      complex3.atan();
      Complex complex4 = complex1.exp();
      Complex complex5 = Complex.valueOf((-3.348471032333413E-8));
      Complex complex6 = complex5.reciprocal();
      complex5.readResolve();
      Complex complex7 = complex4.negate();
      complex3.getArgument();
      complex3.conjugate();
      complex6.tan();
      complex7.pow((-3.348471032333413E-8));
      Complex complex8 = Complex.NaN;
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1296.3203555862506);
      Complex complex1 = complex0.tanh();
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf(576.0);
      complex0.isInfinite();
      complex0.ZERO.cosh();
      Complex complex1 = Complex.valueOf(2683.2185398854663, 576.0);
      complex1.multiply(576.0);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex1.multiply(2753);
      complex3.ONE.tanh();
      complex3.sinh();
      try { 
        complex2.nthRoot((-899));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -899
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf(24.0, 0.0);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.createComplex((-846.3), (-846.3));
      Complex complex3 = complex2.exp();
      Complex complex4 = complex1.multiply(complex3);
      Complex complex5 = Complex.valueOf(0.0);
      complex1.isInfinite();
      Complex complex6 = new Complex(0.0);
      complex6.tanh();
      Complex.valueOf(24.0, 6.283185307179586);
      complex3.log();
      complex4.toString();
      complex5.equals("NO_DEGREES_OF_FREEDOM");
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) (-52));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex.valueOf(Double.NaN, (-918.4082949));
      Complex complex1 = new Complex((-918.4082949));
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(576.0);
      complex0.isInfinite();
      complex0.ZERO.cosh();
      Complex complex1 = Complex.valueOf(2683.2185398854663, 576.0);
      complex1.multiply(576.0);
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.reciprocal();
      complex1.readResolve();
      Complex complex4 = new Complex(0.07159365713596344, (-0.1666666567325592));
      complex4.negate();
      Complex complex5 = Complex.INF;
      complex5.getArgument();
      complex3.conjugate();
      Complex complex6 = Complex.ZERO;
      complex6.tan();
      complex1.pow((double) 2753);
      Complex complex7 = Complex.valueOf((-1112.0498514360434));
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.abs();
      Complex complex1 = complex0.NaN.subtract((-7.630957994128623E-8));
      Complex complex2 = Complex.valueOf((-7.630957994128623E-8));
      Complex complex3 = complex2.I.tan();
      complex3.I.getArgument();
      Complex complex4 = complex1.subtract(0.3127557039260864);
      complex3.readResolve();
      complex4.conjugate();
      Complex complex5 = Complex.valueOf(2.9613666114064216E47);
      Complex complex6 = complex5.multiply(1251.644);
      complex5.negate();
      complex0.equals("3;n#\u0006$ qko^");
      complex2.multiply(complex6);
      Complex complex7 = new Complex(Double.NaN);
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(2705.1792553683, 2705.1792553683);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.subtract(1.0);
      Complex complex2 = Complex.valueOf(7.529170882336924E-162);
      Complex complex3 = complex1.tan();
      complex1.getArgument();
      complex3.multiply(complex1);
      Complex complex4 = complex0.atan();
      Complex complex5 = complex2.exp();
      Complex complex6 = complex1.reciprocal();
      complex5.readResolve();
      Complex complex7 = complex0.negate();
      complex7.getArgument();
      Complex complex8 = complex6.conjugate();
      complex8.tan();
      complex6.pow(2.356194490192345);
      complex4.getField();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = new Complex(111.229748, 111.229748);
      Complex complex1 = complex0.ZERO.reciprocal();
      complex0.isNaN();
      complex1.hashCode();
      Complex complex2 = complex0.exp();
      Complex.valueOf(111.229748, 111.229748);
      Complex complex3 = complex2.I.multiply((-3293.8137892088807));
      complex1.sqrt1z();
      Complex complex4 = complex1.tan();
      complex3.INF.sin();
      complex4.add(111.229748);
      Complex complex5 = complex3.multiply(1);
      complex5.ZERO.negate();
      Complex complex6 = complex4.divide(complex0);
      complex6.I.pow(0.0);
      Complex.valueOf((-3293.8137892088807));
      Complex complex7 = complex0.sin();
      complex1.divide(111.229748);
      complex7.sqrt();
      Complex complex8 = Complex.valueOf(111.229748, (double) 1);
      complex3.pow(complex8);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2502.8712), (-2502.8712));
      complex0.getImaginary();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.NaN.exp();
      Complex complex2 = complex0.I.divide((-2405.4));
      complex1.multiply(complex2);
      complex2.INF.abs();
      Complex complex3 = complex0.INF.multiply(complex2);
      Complex complex4 = complex3.INF.pow((-2224.510249097));
      complex1.cosh();
      complex3.NaN.hashCode();
      Complex complex5 = Complex.valueOf((-637.0), (-637.0));
      complex1.I.reciprocal();
      complex0.isNaN();
      Complex complex6 = complex0.multiply(complex2);
      Complex.valueOf(1.1991832256317139, 1.1991832256317139);
      Complex complex7 = complex1.pow((-112.744413));
      complex3.ONE.divide(complex2);
      complex7.INF.multiply((-1));
      Complex.valueOf(0.0, (-1276.7839));
      complex7.ONE.cosh();
      complex6.INF.multiply(0.0);
      Complex complex8 = complex7.NaN.sin();
      complex8.sqrt();
      complex8.ONE.hashCode();
      complex2.multiply(57);
      Complex complex9 = complex5.reciprocal();
      complex9.ONE.add(complex5);
      complex6.multiply(2289.0);
      complex4.log();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.sin();
      complex0.INF.pow(0.0);
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.sqrt1z();
      Complex complex3 = complex2.INF.sinh();
      complex1.atan();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.I.log();
      complex5.I.sinh();
      Complex.valueOf(1439.17967159);
      complex0.toString();
      complex4.sqrt();
      complex2.getArgument();
      Complex.valueOf((-2419.0));
      complex3.exp();
      complex1.multiply((-147));
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(397.9039);
      complex0.ONE.hashCode();
      Complex complex1 = Complex.valueOf(163.351, 3358.63871569974);
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex2.subtract(163.351);
      complex0.asin();
      complex0.multiply(0.0);
      complex1.isNaN();
      complex3.NaN.negate();
      complex0.divide(complex1);
      Complex complex4 = complex3.divide(complex0);
      Complex complex5 = complex4.ZERO.divide(complex3);
      Complex complex6 = complex5.INF.exp();
      complex6.ZERO.pow((-469.0));
      complex0.I.add(3358.63871569974);
      complex2.nthRoot(261);
      complex2.NaN.toString();
      Complex complex7 = Complex.valueOf((-27.0463989));
      Complex complex8 = complex7.ONE.tan();
      Complex.valueOf((-1.0), 0.0);
      complex2.multiply(complex0);
      Complex complex9 = Complex.INF;
      complex8.add(complex9);
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 1);
      complex0.NaN.add((-2.5445477450140954E103));
      complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.hashCode();
      Complex complex1 = Complex.ZERO;
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.I.pow(complex1);
      complex2.ZERO.toString();
      Complex complex3 = complex0.createComplex((-930.5099124572813), (-300.2725584747));
      try { 
        complex3.I.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(5016.005925, 5016.005925);
      complex1.getImaginary();
      Complex complex2 = complex1.sqrt1z();
      complex2.I.negate();
      complex2.ZERO.sin();
      try { 
        complex2.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(20.0, 0.0);
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.cosh();
      complex0.getField();
      complex0.isInfinite();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.INF.conjugate();
      Complex complex4 = complex2.ZERO.atan();
      Complex complex5 = complex2.add(1423.38523079607);
      Complex.valueOf((-4056.9038018), 1423.38523079607);
      complex1.isNaN();
      Complex complex6 = complex1.negate();
      Complex complex7 = complex6.divide(complex1);
      Complex complex8 = complex7.ONE.pow(1423.38523079607);
      complex8.cos();
      Complex complex9 = complex8.ZERO.tanh();
      Complex complex10 = complex0.subtract(1423.38523079607);
      complex10.ZERO.add((-4056.9038018));
      Complex complex11 = complex6.NaN.subtract(complex8);
      complex0.subtract(complex6);
      complex11.ZERO.getArgument();
      complex0.multiply((-879));
      complex7.asin();
      complex2.pow(1423.38523079607);
      complex11.nthRoot(882);
      complex9.reciprocal();
      complex5.getArgument();
      complex3.cos();
      complex4.multiply(9.39987974788905E-8);
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-846.3));
      Complex complex1 = complex0.I.createComplex(0.0, (-846.3));
      Complex complex2 = complex1.exp();
      complex0.INF.multiply(complex2);
      Complex.valueOf(0.0);
      complex0.isInfinite();
      complex1.I.tanh();
      Complex complex3 = Complex.valueOf((-846.3), 407.303);
      complex1.ZERO.log();
      complex3.INF.toString();
      complex1.equals("");
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.toString();
      Complex complex1 = Complex.ZERO;
      complex1.ONE.toString();
      complex0.hashCode();
      complex1.ZERO.add(complex0);
      Complex complex2 = complex1.ONE.pow(1.0);
      Complex complex3 = complex2.ONE.tanh();
      Complex complex4 = Complex.NaN;
      Complex complex5 = complex2.ZERO.divide(complex4);
      Complex complex6 = complex5.ONE.exp();
      Complex complex7 = complex3.INF.sinh();
      Complex complex8 = complex0.divide(complex1);
      Complex complex9 = complex8.ONE.sinh();
      Complex complex10 = complex1.log();
      complex7.multiply(2208.83204216626);
      complex10.conjugate();
      Complex.valueOf(0.0);
      complex9.multiply(299);
      complex1.exp();
      complex6.cos();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex((-1.0));
      Complex complex1 = Complex.valueOf(0.0);
      complex1.I.toString();
      Complex complex2 = complex0.createComplex((-1.0), (-1.0));
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.I.divide(0.25694090127944946);
      Complex complex3 = Complex.INF;
      complex2.ONE.pow(complex3);
      Complex complex4 = complex0.INF.multiply(complex2);
      Complex complex5 = complex0.ZERO.multiply(0);
      Complex complex6 = complex1.ZERO.createComplex(1297.32, (-2496.223250607619));
      complex6.INF.createComplex(0, (-2496.223250607619));
      Complex complex7 = complex5.I.createComplex((-6381.1895556015), 0);
      complex0.multiply((-2496.223250607619));
      complex1.hashCode();
      complex7.isNaN();
      complex0.conjugate();
      complex4.add(0.25694090127944946);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide(0.0);
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.log();
      Complex complex2 = complex1.createComplex((-3449.732879878), (-3449.732879878));
      Complex complex3 = complex2.INF.multiply((-108));
      Complex complex4 = complex3.reciprocal();
      complex4.abs();
      complex0.reciprocal();
      int int0 = 789;
      Complex complex5 = complex0.ZERO.multiply(789);
      Complex complex6 = complex2.pow(complex1);
      Complex complex7 = complex0.exp();
      complex7.cos();
      Complex complex8 = complex0.divide(0.0);
      Complex complex9 = complex8.divide(complex3);
      complex9.ONE.getArgument();
      complex8.I.tanh();
      complex2.hashCode();
      complex3.NaN.log();
      complex9.ZERO.readResolve();
      complex0.pow(complex6);
      Complex complex10 = complex3.conjugate();
      Complex complex11 = complex10.ONE.subtract((double) (-108));
      complex11.I.sin();
      try { 
        complex5.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      complex0.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.INF.reciprocal();
      complex2.INF.createComplex(0.0, 0.0);
      complex0.ZERO.createComplex(1254.0, 1046.76822456);
      complex0.pow(complex1);
      complex1.multiply(complex0);
      Complex complex3 = complex1.sinh();
      Complex.valueOf(871.149);
      complex3.asin();
      complex0.ONE.add(0.0);
      Complex complex4 = complex3.divide(1254.0);
      Complex complex5 = complex0.sqrt();
      complex4.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.abs();
      Complex complex1 = complex0.INF.sinh();
      complex0.ONE.nthRoot(17);
      complex0.ONE.getArgument();
      complex0.isInfinite();
      complex1.getArgument();
      Complex complex2 = complex1.subtract(1.0);
      Complex complex3 = complex2.ZERO.divide(complex1);
      complex0.readResolve();
      complex1.pow(1.0);
      complex0.readResolve();
      Complex complex4 = complex1.conjugate();
      complex4.I.sinh();
      Complex complex5 = Complex.valueOf(0.0);
      Complex complex6 = complex5.divide(1.0);
      complex2.isInfinite();
      Complex complex7 = complex0.reciprocal();
      Complex complex8 = complex2.ONE.sqrt1z();
      complex8.I.divide((-745.2547615609));
      Complex complex9 = complex7.I.conjugate();
      complex0.hashCode();
      complex3.getField();
      complex9.atan();
      complex7.multiply(complex1);
      complex6.readResolve();
      try { 
        complex1.nthRoot((-2088));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,088
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(0.0);
      Complex complex2 = complex0.subtract(complex1);
      complex1.conjugate();
      complex2.ZERO.toString();
      Complex complex3 = complex2.NaN.cos();
      Complex complex4 = complex3.NaN.pow(0.0);
      complex2.INF.createComplex((-408.0), 1073.60404295894);
      Complex.valueOf((-408.0));
      complex4.ONE.getField();
      Complex complex5 = complex3.ONE.conjugate();
      complex4.readResolve();
      complex1.hashCode();
      Complex complex6 = complex3.asin();
      complex6.ONE.exp();
      Complex complex7 = complex0.add(0.0);
      Complex complex8 = complex6.pow(complex0);
      complex7.cos();
      complex0.cosh();
      complex1.multiply(complex8);
      complex5.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.I.readResolve();
      Complex complex1 = complex0.multiply((-86));
      complex1.createComplex((-2571.08381), 3666.9084048);
      complex1.multiply((-86));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.negate();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex(0.4318077564239502, (-875.75366486));
      complex0.INF.abs();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex0.pow(0.0);
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.ZERO.acos();
      complex4.ONE.getArgument();
      Complex complex6 = complex3.reciprocal();
      Complex complex7 = complex6.NaN.conjugate();
      complex7.NaN.negate();
      complex6.I.multiply(4492);
      Complex complex8 = complex2.sqrt1z();
      complex1.sqrt1z();
      complex2.hashCode();
      Complex complex9 = Complex.INF;
      complex9.ZERO.sinh();
      Complex.valueOf(0.0, (-1341.8));
      complex3.subtract(complex9);
      Complex complex10 = complex9.cos();
      Complex complex11 = complex5.divide(complex8);
      Complex.valueOf(0.0);
      complex9.multiply(424);
      complex2.add(complex9);
      Object object0 = new Object();
      complex11.equals(object0);
      complex1.readResolve();
      complex10.pow((-1341.8));
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.conjugate();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.add(3.0465278560980536E188);
      complex0.conjugate();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.I.add((-855.6247873297807));
      complex0.multiply(1312.7171535406);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      complex0.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.INF.cosh();
      complex0.tan();
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply(4024);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.cosh();
      Complex complex1 = Complex.valueOf(2.0, 2.0);
      complex1.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.toString();
      complex0.acos();
      complex0.equals("(1.0, 0.0)");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.cosh();
      complex1.ONE.subtract((-2947.095422199));
      complex1.readResolve();
      Complex complex3 = complex2.ZERO.conjugate();
      complex3.NaN.multiply((-2947.095422199));
      complex3.NaN.negate();
      complex0.equals(complex1);
      complex1.multiply(complex2);
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.pow(3153.506009);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex1.log();
      complex2.toString();
      complex0.equals(complex0);
      Complex complex3 = new Complex((-4457.8), Double.NaN);
      complex2.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(1235);
      Complex complex1 = Complex.NaN;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.acos();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex2.I.sqrt1z();
      complex1.getArgument();
      complex2.ONE.conjugate();
      Complex complex4 = complex2.NaN.multiply(0.0);
      complex1.NaN.getField();
      Complex complex5 = complex4.divide(2103.808734873198);
      complex1.hashCode();
      Complex complex6 = complex0.subtract(complex2);
      Complex complex7 = complex6.divide(complex4);
      Complex complex8 = complex5.acos();
      complex8.INF.divide((-1385.0));
      Complex complex9 = complex5.cos();
      complex9.atan();
      complex0.equals(complex2);
      complex7.INF.multiply(6480.1757605);
      Object object0 = new Object();
      complex6.NaN.tanh();
      complex6.NaN.cosh();
      complex3.equals(object0);
      int int0 = (-373);
      try { 
        complex7.nthRoot((-373));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -373
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = new Complex(2020.40112045);
      Complex complex1 = complex0.asin();
      Complex complex2 = new Complex(3123.752);
      complex2.ZERO.divide(Double.NaN);
      complex0.sin();
      try { 
        complex1.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.sinh();
      Complex complex1 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.nthRoot((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.divide((-1.0));
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.createComplex(0.0, 0.0);
      Complex complex1 = complex0.tan();
      complex1.ZERO.exp();
      complex1.conjugate();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.valueOf(187.37927, 3.442477422913037E-14);
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.INF.add(complex0);
      complex1.ONE.sinh();
      complex2.INF.multiply(0);
      complex0.I.divide(complex1);
      Complex complex3 = complex0.asin();
      Complex complex4 = complex3.NaN.cos();
      complex4.I.getField();
      complex3.ZERO.getArgument();
      Complex complex5 = complex3.acos();
      Complex complex6 = Complex.valueOf(187.37927);
      complex6.INF.getArgument();
      complex6.ZERO.negate();
      complex3.abs();
      complex0.tan();
      complex1.multiply(0);
      Complex complex7 = complex3.exp();
      Complex complex8 = Complex.ZERO;
      complex5.divide(complex8);
      complex7.createComplex(297.2, 297.2);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.multiply(407.303);
      Object object0 = new Object();
      Complex complex4 = complex0.tanh();
      complex0.cosh();
      complex1.equals((Object) null);
      complex4.nthRoot(927);
      complex2.divide(complex3);
      complex2.pow((double) (-373));
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = Complex.valueOf(8.257484966196574E-8);
      Complex complex1 = complex0.ZERO.log();
      complex0.INF.abs();
      Complex complex2 = Complex.ONE;
      Complex.valueOf(0.6882524490356445);
      Complex complex3 = complex0.NaN.subtract(complex2);
      complex3.I.tan();
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex1.sinh();
      complex2.getField();
      Complex complex6 = complex2.subtract(906.2498189689115);
      complex4.ZERO.pow((-2850.205543));
      complex1.isInfinite();
      Complex complex7 = complex6.NaN.log();
      Complex complex8 = complex0.add(complex4);
      complex5.subtract(0.6882524490356445);
      Complex complex9 = complex6.cos();
      Complex complex10 = complex3.sqrt();
      Complex complex11 = Complex.valueOf(0.6882524490356445);
      Complex complex12 = complex10.ZERO.multiply(complex11);
      complex12.ONE.divide(complex8);
      complex7.sin();
      Complex complex13 = complex6.negate();
      complex9.getReal();
      complex13.toString();
      complex13.reciprocal();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = new Complex(111.229748, 111.229748);
      Complex complex1 = complex0.ZERO.reciprocal();
      complex0.isNaN();
      complex1.hashCode();
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.valueOf(111.229748, 111.229748);
      Complex complex4 = complex2.I.multiply((-3293.8137892088807));
      Complex complex5 = new Complex(111.229748, (-3293.8137892088807));
      complex4.divide(complex5);
      Complex complex6 = Complex.ZERO;
      complex6.acos();
      complex5.divide((-3293.8137892088807));
      complex1.cos();
      Complex complex7 = complex4.atan();
      Object object0 = new Object();
      complex7.equals(object0);
      Complex complex8 = Complex.INF;
      double double0 = Double.NaN;
      Complex complex9 = complex8.multiply(Double.NaN);
      Object object1 = new Object();
      Complex complex10 = complex3.tanh();
      complex9.cosh();
      complex10.equals(complex0);
      try { 
        complex9.nthRoot((-373));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -373
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.pow((-4890.448564));
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-846.3), 2529.638478816517);
      Complex complex1 = complex0.createComplex((-1.3841980097978606E208), (-846.3));
      complex1.exp();
      Complex complex2 = Complex.valueOf(0.0);
      complex2.isInfinite();
      Complex complex3 = complex0.tanh();
      Complex complex4 = Complex.valueOf(2.5035535029701945E-199, 0.0);
      complex4.ZERO.negate();
      Complex complex5 = complex0.log();
      complex5.toString();
      Object object0 = new Object();
      complex1.equals(object0);
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(1866);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      complex0.I.hashCode();
      Complex complex1 = complex0.asin();
      complex1.ZERO.abs();
      Complex complex2 = complex1.reciprocal();
      Complex complex3 = Complex.valueOf(6.283185307179586);
      complex1.getImaginary();
      Complex complex4 = Complex.NaN;
      complex4.INF.getArgument();
      complex4.ZERO.toString();
      Complex complex5 = complex2.ONE.tanh();
      Complex complex6 = complex0.add(complex4);
      Complex complex7 = complex6.NaN.asin();
      Complex complex8 = complex6.I.divide(complex3);
      complex6.NaN.cosh();
      Complex complex9 = Complex.valueOf((-1360.75730744447));
      complex9.NaN.nthRoot(1);
      complex2.cosh();
      complex8.ONE.getArgument();
      Complex complex10 = complex6.pow(complex1);
      Complex complex11 = complex0.subtract(complex2);
      complex5.atan();
      Complex complex12 = complex6.pow(0.7853981633974483);
      complex10.createComplex(-0.0, 0.0);
      Complex.valueOf(0.0, (double) 1);
      complex12.reciprocal();
      complex9.pow((-1.0));
      complex8.multiply(1);
      complex11.tan();
      complex7.add(complex11);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-846.3));
      Complex complex1 = complex0.I.createComplex(0.0, (-846.3));
      Complex complex2 = complex1.exp();
      Complex complex3 = complex0.INF.multiply(complex2);
      complex2.getArgument();
      Complex complex4 = complex1.multiply(complex3);
      complex4.atan();
      complex3.exp();
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex5.reciprocal();
      complex2.readResolve();
      Complex complex7 = complex4.negate();
      complex4.getArgument();
      Complex complex8 = complex6.conjugate();
      complex8.tan();
      complex5.pow((-846.3));
      complex7.getField();
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.subtract((-112.963093003761));
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.hashCode();
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.sqrt1z();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.divide((-474.0917806));
      Complex complex3 = complex1.I.divide(complex0);
      Complex complex4 = complex3.NaN.multiply(complex2);
      complex4.createComplex((-474.0917806), (-474.0917806));
      complex3.tan();
      complex4.conjugate();
      Complex.valueOf((-474.0917806));
      complex2.asin();
      complex0.nthRoot(49);
      complex2.getArgument();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 1);
      complex0.nthRoot(1);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = new Complex(0.3084607720375061, 1611.545134190836);
      Complex complex1 = Complex.I;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ONE.subtract(0.3084607720375061);
      complex3.ZERO.nthRoot(952);
      Complex complex4 = complex0.negate();
      complex3.INF.subtract(1611.545134190836);
      complex0.hashCode();
      Complex complex5 = complex3.tan();
      complex1.add(complex4);
      Complex complex6 = complex3.atan();
      complex2.ZERO.nthRoot(952);
      complex1.negate();
      complex1.getReal();
      complex5.getReal();
      Complex complex7 = complex0.multiply(952);
      complex7.divide(1611.545134190836);
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.abs();
      Complex complex1 = Complex.valueOf((-7.630957994128623E-8));
      Complex complex2 = complex0.subtract(Double.NaN);
      complex0.readResolve();
      complex1.conjugate();
      Complex complex3 = complex1.multiply(263.1185);
      Complex complex4 = complex0.negate();
      complex0.equals(complex4);
      complex3.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.4521524906158447);
      complex0.I.cosh();
      Complex complex1 = complex0.asin();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.toString();
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 1);
      complex0.multiply(1);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply((-2151));
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.asin();
      Complex complex2 = complex1.divide(complex0);
      complex2.createComplex(1.0, 1.0);
      Complex.valueOf(1.0);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.sinh();
      complex4.I.multiply(128);
      complex4.readResolve();
      complex0.subtract(complex3);
      complex0.getReal();
      Complex complex6 = Complex.valueOf(5.070274654122399E107, (double) 128);
      complex6.getField();
      complex0.conjugate();
      complex1.sin();
      complex1.multiply(1214);
      complex5.divide(20.0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.asin();
      complex1.readResolve();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isNaN();
      Complex complex1 = Complex.ONE;
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0E-8, 1.0E-8);
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = null;
      try { 
        complex0.ONE.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.I;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2215.203077213);
      Complex complex1 = complex0.INF.divide(2215.203077213);
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex2.atan();
      Complex complex4 = complex0.exp();
      complex3.reciprocal();
      Complex complex5 = complex0.negate();
      complex5.getArgument();
      complex4.nthRoot(946);
      complex5.getArgument();
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.abs();
      complex0.NaN.subtract((-7.630957994128623E-8));
      Complex complex1 = Complex.valueOf((-7.630957994128623E-8));
      Complex complex2 = complex1.I.tan();
      Complex complex3 = Complex.valueOf(Double.NaN);
      complex3.isInfinite();
      complex2.tanh();
      Complex complex4 = Complex.valueOf(Double.NaN, (-7.630957994128623E-8));
      Complex complex5 = complex3.log();
      complex5.toString();
      Complex complex6 = Complex.I;
      complex4.equals(complex6);
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.add((-1.0));
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex.valueOf((double) (-3), (double) (-3));
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1272.958);
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.divide((-474.0917806));
      Complex complex3 = complex1.I.divide(complex0);
      complex3.NaN.multiply(complex2);
      Complex complex4 = new Complex((-2583.55350888), 0.0);
      Complex complex5 = complex1.INF.subtract(complex4);
      complex5.I.atan();
      complex1.ZERO.cos();
      Complex complex6 = complex0.sqrt();
      complex6.log();
      Complex complex7 = complex2.cosh();
      Complex complex8 = complex7.sinh();
      try { 
        complex8.INF.nthRoot((-2888));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,888
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.abs();
      Complex complex1 = complex0.subtract((-1285.064950585));
      complex1.getField();
      Complex complex2 = Complex.valueOf(1.0);
      Complex complex3 = complex2.tan();
      complex2.getArgument();
      Complex complex4 = new Complex(0.0, (-1112.605686314295));
      Complex complex5 = complex4.multiply(complex3);
      complex5.atan();
      complex2.exp();
      Complex complex6 = complex5.reciprocal();
      complex5.readResolve();
      Complex complex7 = complex4.negate();
      complex6.getArgument();
      complex5.conjugate();
      complex7.tan();
      complex2.pow(0.0);
      Complex complex8 = Complex.INF;
      complex8.getField();
      complex5.abs();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-2.0), (-1107.13624217));
      complex0.toString();
      Complex complex2 = complex1.tan();
      complex2.acos();
      Object object0 = new Object();
      Object object1 = complex1.readResolve();
      complex1.equals(object1);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.reciprocal();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.createComplex(1702.82498874224, 1416.3366614938427);
      Complex complex5 = complex2.createComplex((-2480.0), 718.342312393);
      complex4.pow(complex0);
      complex5.multiply(complex0);
      Complex complex6 = complex3.sinh();
      Complex complex7 = Complex.valueOf(1201.9811);
      complex2.sqrt();
      Complex complex8 = new Complex(1197.42221596924);
      complex7.I.cosh();
      complex8.asin();
      complex6.add(0.0);
      complex5.divide(1702.82498874224);
      complex7.sqrt();
      complex1.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.NaN.sqrt1z();
      complex0.toString();
      Complex complex2 = complex0.sin();
      Complex complex3 = complex2.atan();
      complex3.subtract(complex2);
      complex2.abs();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.pow(2495.971619125996);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Complex complex0 = new Complex(111.229748, 111.229748);
      Complex complex1 = complex0.ZERO.reciprocal();
      complex0.isNaN();
      complex1.hashCode();
      Complex complex2 = complex0.exp();
      Complex complex3 = Complex.valueOf(111.229748, 111.229748);
      Complex complex4 = complex2.I.multiply((-3293.8137892088807));
      complex1.sqrt1z();
      Complex complex5 = complex1.tan();
      complex4.INF.sin();
      complex5.add(111.229748);
      Complex complex6 = complex4.multiply(1);
      complex6.ZERO.negate();
      Complex complex7 = complex5.divide(complex0);
      complex7.I.pow(0.0);
      Complex.valueOf((-3293.8137892088807));
      complex0.sin();
      complex2.sqrt1z();
      complex3.negate();
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Complex.valueOf((-5411.757163284249));
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.2499290483167703E-9), (-1.2499290483167703E-9));
      complex0.NaN.readResolve();
      complex0.acos();
      complex0.abs();
      complex0.isNaN();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.divide(4907123.673293945);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Complex complex0 = new Complex((-1008.48));
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.ONE.add(complex1);
      complex2.ONE.readResolve();
      String string0 = complex2.toString();
      assertEquals("(NaN, NaN)", string0);
      
      complex2.INF.cos();
      Complex complex3 = new Complex((-1008.48));
      complex3.I.toString();
      Complex complex4 = complex0.add(complex3);
      Complex complex5 = complex4.NaN.sqrt();
      assertSame(complex5, complex2);
      
      Complex complex6 = complex0.multiply((-1008.48));
      Complex.valueOf((-1008.48), (-1008.48));
      complex6.I.negate();
      Complex complex7 = complex6.divide((-1008.48));
      complex7.I.readResolve();
      Complex complex8 = complex7.negate();
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex3.sinh();
      assertTrue(complex9.equals((Object)complex5));
      
      Complex complex10 = complex4.subtract(complex6);
      assertEquals(0.0, complex10.getImaginary(), 0.01);
      assertEquals((-1019048.8704), complex10.getReal(), 0.01);
      
      complex6.abs();
      complex0.INF.getField();
      Complex complex11 = complex0.I.exp();
      assertEquals(0.5403023058681398, complex11.getReal(), 0.01);
      assertEquals(0.8414709848078965, complex11.getImaginary(), 0.01);
      
      complex3.getField();
      Complex complex12 = complex4.add(3005.6731685415575);
      complex3.toString();
      Complex complex13 = complex12.log();
      assertEquals(6.896404267861175, complex13.getReal(), 0.01);
      
      Complex complex14 = complex6.tan();
      assertEquals(1.4879352487530741, complex14.getReal(), 0.01);
      assertTrue(complex0.equals((Object)complex7));
      assertEquals(-0.0, complex14.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      assertFalse(complex1.isInfinite());
      assertTrue(complex1.isNaN());
  }
}
