/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:44:11 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1121.9));
      Complex complex1 = complex0.divide((-2291.86331576617));
      complex0.INF.toString();
      Complex complex2 = complex1.acos();
      Complex complex3 = complex1.cos();
      complex2.ONE.reciprocal();
      Complex complex4 = complex3.sqrt();
      Complex complex5 = complex1.createComplex((-2291.86331576617), (-1121.9));
      complex0.sin();
      Complex complex6 = complex5.divide(complex2);
      complex4.toString();
      Complex complex7 = Complex.valueOf((-2291.86331576617), 1.3790154522394582E-163);
      Complex complex8 = complex7.I.subtract(complex2);
      complex8.I.multiply(1.3790154522394582E-163);
      Complex complex9 = complex0.add(complex1);
      Complex complex10 = complex6.negate();
      complex10.I.subtract((-3316.26));
      complex2.conjugate();
      complex6.acos();
      Complex complex11 = complex0.divide(complex1);
      complex11.ONE.toString();
      Complex complex12 = Complex.valueOf(0.0);
      complex1.add(complex12);
      complex9.getField();
      Complex complex13 = complex5.add(2.151617747224756E13);
      complex13.acos();
      complex5.atan();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.valueOf(35.19058655610766, 20.0);
      Complex complex1 = complex0.tan();
      complex1.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(2064.20191561878, 2064.20191561878);
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex((-20.0), (-20.0));
      complex1.atan();
      Complex complex2 = complex1.tan();
      complex2.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.log();
      Complex complex1 = new Complex((-20.0));
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = null;
      try { 
        complex0.NaN.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1582.0));
      try { 
        complex0.ONE.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(9.566541624209933E61, 9.566541624209933E61);
      Complex complex2 = Complex.valueOf(1.5874010519681994, 9.566541624209933E61);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex3.reciprocal();
      Complex complex5 = complex1.add(1.5874010519681994);
      Complex complex6 = Complex.ZERO;
      complex4.log();
      complex5.multiply(complex4);
      Complex complex7 = complex4.tanh();
      complex2.createComplex(1.5874010519681994, 6.283185307179586);
      complex7.multiply(complex1);
      complex1.asin();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.createComplex(35.279747270496216, 6.283185307179586);
      complex0.getArgument();
      Complex complex1 = Complex.I;
      complex0.getField();
      Complex complex2 = new Complex(35.279747270496216);
      Complex complex3 = complex2.createComplex((-2483.03), Double.NaN);
      Complex complex4 = new Complex(1149.56, 1149.56);
      Complex.valueOf(2621.7038, 1.241529292737115E-25);
      complex4.sqrt();
      Complex complex5 = complex4.reciprocal();
      Complex complex6 = complex0.add(1560.466859);
      Complex complex7 = Complex.ZERO;
      complex3.log();
      complex5.tanh();
      complex4.createComplex((-355.766603370225), (-355.766603370225));
      complex6.multiply(complex5);
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex0.add(1773.6);
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.ZERO;
      complex1.multiply(complex3);
      complex3.log();
      complex1.tan();
      Complex complex5 = Complex.valueOf(20.0);
      Complex complex6 = complex5.tanh();
      complex6.sqrt1z();
      Complex.valueOf(1.6266731695798413E34);
      complex2.multiply((-509.72172042934));
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.NaN.divide(complex1);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex0.add((-1548.1864));
      Complex complex5 = complex4.INF.tanh();
      Complex complex6 = complex5.NaN.divide(complex2);
      Complex complex7 = complex6.I.divide((-1548.1864));
      complex7.ZERO.abs();
      complex5.ONE.multiply(17);
      complex7.ZERO.multiply(complex0);
      Complex complex8 = complex0.ONE.subtract((-1548.1864));
      complex3.nthRoot(730);
      Complex complex9 = complex3.subtract(complex0);
      Complex complex10 = complex5.NaN.acos();
      complex10.ONE.add(952.056260234);
      complex0.getField();
      complex5.readResolve();
      complex4.toString();
      complex4.asin();
      Complex complex11 = complex3.divide((-1548.1864));
      Complex complex12 = complex4.conjugate();
      complex12.NaN.abs();
      Complex.valueOf(3.7461156227026295, (double) 730);
      complex8.nthRoot(730);
      Complex complex13 = complex4.asin();
      Complex complex14 = complex11.multiply((-1548.1864));
      complex5.reciprocal();
      Complex complex15 = complex9.multiply(730);
      complex15.NaN.multiply((-2291.86331576617));
      complex8.log();
      complex13.cosh();
      complex14.nthRoot(730);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      complex0.readResolve();
      complex0.tan();
      complex1.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.atan();
      complex1.I.tan();
      Complex complex2 = Complex.ONE;
      Complex complex3 = new Complex(1518.01609, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.POSITIVE_INFINITY, (-2291.86331576617));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.createComplex((-2291.86331576617), (-796.9));
      complex2.getArgument();
      Complex complex3 = Complex.I;
      complex0.getField();
      complex0.createComplex((-1899.810631104408), (-2.806960854862824));
      Complex complex4 = new Complex((-2.806960854862824), 0.5021947622299194);
      Complex.valueOf(531.7794, (-1899.810631104408));
      Complex complex5 = complex0.sqrt();
      Complex complex6 = complex5.reciprocal();
      complex4.add((-5523.3774221));
      Complex complex7 = Complex.ZERO;
      complex2.log();
      Complex complex8 = new Complex((-796.9), (-796.9));
      complex8.tanh();
      Complex complex9 = new Complex((-5523.3774221), (-2291.86331576617));
      Complex complex10 = complex9.createComplex(5079.44991, 1.0);
      complex6.multiply(complex10);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.log();
      complex1.tanh();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex(2690.85579876316, (-3188.0));
      Complex complex1 = complex0.createComplex(2690.85579876316, (-2483.03));
      complex1.getArgument();
      Complex complex2 = Complex.I;
      complex2.getField();
      Complex complex3 = complex2.createComplex(913.3928174861379, 341.232);
      Complex complex4 = new Complex((-2483.03), 2194.309157108763);
      Complex.valueOf(2612.8, (-2003.3182583241407));
      Complex complex5 = Complex.NaN;
      complex5.sqrt();
      complex1.reciprocal();
      complex2.add(2690.85579876316);
      Complex complex6 = Complex.ZERO;
      complex6.I.negate();
      Complex complex7 = Complex.INF;
      complex7.log();
      Complex complex8 = complex5.tanh();
      complex8.createComplex(1923.0, (-2483.03));
      Complex complex9 = new Complex(2194.309157108763);
      Complex complex10 = complex9.multiply(complex7);
      complex10.asin();
      complex3.pow(3489.9154195536994);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.getArgument();
      Complex complex1 = Complex.I;
      complex1.getField();
      Complex complex2 = complex0.createComplex(0.0, 2483.03);
      Complex complex3 = new Complex(1823.591163201561, Double.NaN);
      complex2.sqrt();
      complex3.reciprocal();
      Complex complex4 = complex1.add(973.29470458855);
      Complex complex5 = Complex.ZERO;
      Complex complex6 = complex4.log();
      complex5.tanh();
      Complex complex7 = complex6.createComplex((-195.235), 8.707092668016246E-211);
      Complex complex8 = Complex.valueOf(0.0);
      Complex complex9 = complex7.multiply(complex8);
      complex9.asin();
      complex3.acos();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2291.86331576617), (-2291.86331576617));
      Complex complex1 = complex0.ONE.createComplex((-2009.51185719388), (-2483.03));
      complex1.getArgument();
      Complex complex2 = complex0.I.negate();
      complex0.ONE.getField();
      Complex complex3 = complex2.createComplex((-2.2511812794770383), 913.3928174861379);
      complex2.sqrt();
      Complex complex4 = new Complex((-2291.86331576617), 913.3928174861379);
      complex4.sqrt();
      complex1.NaN.reciprocal();
      Complex complex5 = complex0.add(468.2721525646093);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.ZERO.multiply(complex0);
      complex5.log();
      Complex complex8 = complex5.sqrt1z();
      Complex complex9 = Complex.NaN;
      complex9.multiply(complex4);
      complex9.asin();
      complex3.add(complex7);
      complex8.cos();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.3364262260704764, 2777.31569);
      complex0.abs();
      Complex complex1 = Complex.valueOf(0.3364262260704764);
      Complex complex2 = Complex.valueOf((-180.68101525729));
      Complex complex3 = complex2.INF.negate();
      complex3.I.subtract(complex2);
      complex0.equals(complex1);
      Complex complex4 = complex1.negate();
      complex4.INF.readResolve();
      Complex complex5 = complex0.divide(2777.3157103762583);
      Complex complex6 = complex5.I.tanh();
      complex6.NaN.pow((-1.0));
      Complex complex7 = complex0.subtract(complex4);
      Complex complex8 = complex7.ZERO.sinh();
      complex1.toString();
      Complex complex9 = complex7.pow(complex5);
      complex9.ONE.multiply(complex5);
      Complex complex10 = Complex.NaN;
      Complex complex11 = complex4.pow(complex10);
      complex11.NaN.sqrt1z();
      complex5.toString();
      Complex complex12 = Complex.valueOf((-1.0));
      complex10.I.subtract(complex12);
      complex12.cos();
      complex10.conjugate();
      Complex.valueOf(Double.NaN, (-1.0));
      complex8.sin();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      Object object0 = complex0.readResolve();
      Complex complex2 = complex1.add(Double.POSITIVE_INFINITY);
      complex2.ONE.sqrt1z();
      complex1.reciprocal();
      complex1.getImaginary();
      Complex complex3 = Complex.ZERO;
      complex0.asin();
      complex0.equals(object0);
      complex1.atan();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2291.86331576617), (-2291.86331576617));
      Complex complex1 = complex0.ONE.createComplex((-2003.3182583241407), (-2483.03));
      complex1.getArgument();
      Complex complex2 = complex0.I.negate();
      complex0.ONE.getField();
      complex2.createComplex((-2.249672233819907), 913.3928174861379);
      Complex complex3 = complex2.sqrt();
      Complex complex4 = Complex.valueOf((-2291.86331576617), (-2483.03));
      Complex complex5 = complex4.log();
      Complex complex6 = complex2.divide(complex5);
      Complex complex7 = Complex.ONE;
      complex3.pow(complex7);
      complex5.divide(complex1);
      complex7.getReal();
      complex6.exp();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(981);
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex(2152);
      complex0.tan();
      Complex.valueOf(2353.22422805664, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(2690.85579876316, (-7.897146442236022E215));
      complex0.multiply(2690.85579876316);
      complex0.add(2690.85579876316);
      complex0.sqrt1z();
      Complex complex1 = Complex.valueOf((-567.402), (-120.87176156));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.NaN.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.I;
      complex1.asin();
      Complex complex4 = Complex.ZERO;
      complex0.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.readResolve();
      complex0.tan();
      complex0.INF.getArgument();
      complex0.add(Double.POSITIVE_INFINITY);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex1.sqrt1z();
      complex2.reciprocal();
      Complex complex3 = Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      complex3.getImaginary();
      Complex complex4 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex4.sinh();
      Complex.valueOf((-3284.192));
      complex2.cos();
      Complex complex5 = Complex.ZERO;
      complex5.pow(1823.591163201561);
      complex3.tan();
      Complex complex6 = Complex.ONE;
      Complex complex7 = Complex.ZERO;
      complex7.tan();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.I;
      // Undeclared exception!
      complex0.nthRoot(1881211196);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2291.86331576617), (-2291.86331576617));
      Complex complex1 = complex0.ONE.createComplex((-2003.3182583241407), (-2483.03));
      complex1.getArgument();
      Complex complex2 = complex0.I.negate();
      complex0.ONE.getField();
      complex2.createComplex((-2.249672233819907), 913.3928174861379);
      complex2.sqrt();
      Complex complex3 = new Complex((-2291.86331576617), 913.3928174861379);
      complex3.sqrt();
      complex1.add((-2291.86331576617));
      Complex complex4 = Complex.ZERO;
      complex4.log();
      Complex complex5 = Complex.valueOf(913.3928174861379, (-2003.3182583241407));
      complex5.tanh();
      complex5.multiply(complex2);
      complex2.asin();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = (Complex)complex0.readResolve();
      complex0.tan();
      Complex complex3 = complex1.add(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.ZERO.exp();
      complex1.isInfinite();
      complex1.equals(complex2);
      complex3.tan();
      complex2.getField();
      complex4.cos();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(Double.NaN, (-1071.15056421));
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = new Complex(0.0, 0.0);
      Complex complex5 = Complex.INF;
      complex5.readResolve();
      complex0.sqrt1z();
      complex5.add(complex4);
      complex0.getImaginary();
      Complex complex6 = Complex.I;
      complex6.pow(3438.950074165);
      complex0.acos();
      Complex.valueOf(1.0847913100494912E-238);
      complex4.sqrt();
      Complex complex7 = Complex.ONE;
      complex1.nthRoot(216);
      complex7.pow(3438.950074165);
      complex3.subtract(0.009126633104495407);
      Complex complex8 = new Complex((-968.088934));
      complex8.pow(complex7);
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.pow(0.33333333333333337);
      Complex complex4 = Complex.valueOf(0.33333333333333337, (-2259.112373084381));
      Complex.valueOf(0.7853981633974483, (-2259.112373084381));
      Complex complex5 = complex3.add(0.33333333333333337);
      Complex complex6 = new Complex(0.7853981633974483, (-2259.112373084381));
      complex5.sinh();
      Complex complex7 = Complex.NaN;
      complex7.exp();
      complex6.reciprocal();
      complex1.toString();
      Complex.valueOf(155.94451144630037);
      complex4.isInfinite();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.pow(0.33333333333333337);
      Complex.valueOf(0.33333333333333337, (-2259.112373084381));
      Complex complex4 = Complex.valueOf(0.7853981633974483, (-2259.112373084381));
      complex3.add((-3387.8833201109233));
      Complex complex5 = new Complex(0.7853981633974483, (-2259.112373084381));
      complex5.readResolve();
      Complex complex6 = complex1.sqrt1z();
      complex4.add(complex3);
      complex3.getImaginary();
      Complex complex7 = Complex.I;
      complex7.pow((-20.0));
      complex4.acos();
      Complex.valueOf(0.009126633104495407);
      complex7.sqrt();
      Complex complex8 = Complex.ONE;
      complex8.nthRoot(216);
      complex6.getReal();
      complex5.exp();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = (Complex)complex0.readResolve();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex1.add(Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.ONE.sqrt1z();
      Complex complex6 = complex1.reciprocal();
      Complex.valueOf(Double.POSITIVE_INFINITY);
      complex1.getImaginary();
      Complex complex7 = complex4.I.sinh();
      complex6.INF.cos();
      complex3.pow((-2372.55));
      complex2.tan();
      Complex complex8 = Complex.ONE;
      complex7.tan();
      complex0.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = new Complex((-2291.86331576617));
      Complex complex1 = complex0.ONE.createComplex((-2003.3182583241407), (-2483.03));
      complex1.getArgument();
      complex1.exp();
      Complex complex2 = new Complex((-538.0984), (-2483.03));
      complex2.divide((-538.0984));
      complex0.sin();
      complex2.getArgument();
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      complex1.readResolve();
      Complex complex2 = complex1.tan();
      complex0.add(2690.85579876316);
      complex2.sqrt1z();
      complex0.reciprocal();
      Complex complex3 = new Complex(2690.85579876316, 674.2083767);
      complex3.getImaginary();
      complex0.sinh();
      complex3.cos();
      complex2.pow(Double.POSITIVE_INFINITY);
      complex2.tan();
      Complex complex4 = Complex.ONE;
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.valueOf(35.19058655610766, 35.19058655610766);
      Complex complex1 = complex0.tan();
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = Complex.ONE;
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.pow(0.33333333333333337);
      Complex.valueOf(0.33333333333333337, (-2259.112373084381));
      Complex complex4 = Complex.valueOf(0.7853981633974483, (-2259.112373084381));
      Complex complex5 = complex3.add((-3387.8833201109233));
      Complex complex6 = new Complex(0.7853981633974483, (-2259.112373084381));
      Complex complex7 = (Complex)complex6.readResolve();
      Complex complex8 = complex1.sqrt1z();
      complex4.add(complex3);
      complex3.getImaginary();
      Complex complex9 = Complex.I;
      complex9.pow((-20.0));
      complex4.acos();
      Complex.valueOf(0.009126633104495407);
      complex9.sqrt();
      Complex complex10 = Complex.ONE;
      complex10.nthRoot(216);
      complex5.pow((-503.54961623175));
      complex8.subtract(Double.POSITIVE_INFINITY);
      complex7.pow(complex0);
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2291.86331576617), (-2291.86331576617));
      Complex complex1 = complex0.ONE.createComplex((-2003.3182583241407), (-2483.03));
      complex1.getArgument();
      Complex complex2 = complex0.I.negate();
      complex0.ONE.getField();
      complex2.createComplex((-2.249672233819907), 913.3928174861379);
      complex2.sqrt();
      Complex complex3 = new Complex((-2291.86331576617), 913.3928174861379);
      complex3.subtract((-191.0));
      complex0.sin();
      complex2.getField();
      complex0.multiply(193);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.getArgument();
      Complex complex1 = complex0.pow(0.7853981633974483);
      Complex complex2 = Complex.I;
      Complex complex3 = complex1.pow(0.33333333333333337);
      Complex complex4 = complex1.cos();
      complex1.multiply(complex3);
      Complex complex5 = Complex.valueOf(0.7853981633974483, (-2259.112373084381));
      Complex complex6 = complex3.add((-3386.0));
      Complex complex7 = new Complex(0.7853981633974483, (-2259.112373084381));
      complex7.readResolve();
      Complex complex8 = complex1.sqrt1z();
      Complex complex9 = complex5.add(complex4);
      complex3.getImaginary();
      Complex complex10 = Complex.I;
      complex10.pow((-20.0));
      complex5.acos();
      Complex.valueOf(0.009126633104495407);
      complex10.sqrt();
      Complex complex11 = Complex.ONE;
      complex11.nthRoot(216);
      complex6.pow((-503.54961623175));
      complex8.subtract(Double.POSITIVE_INFINITY);
      complex9.subtract(complex3);
      complex0.isInfinite();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex0.divide(complex1);
      Complex complex2 = Complex.I;
      Complex complex3 = complex2.reciprocal();
      complex1.add(1207.288513);
      Complex complex4 = Complex.valueOf(1207.288513, 2355.0);
      complex4.exp();
      Complex complex5 = complex3.cosh();
      Complex complex6 = Complex.ONE;
      complex6.negate();
      complex5.sinh();
      Complex complex7 = complex0.pow(complex2);
      complex2.subtract(2.0);
      Complex.valueOf(4.3079982556221595E-8);
      complex2.getField();
      complex7.INF.asin();
      complex7.multiply(1);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.I.atan();
      complex0.readResolve();
      Complex complex3 = complex0.tan();
      complex1.add(1264.890482);
      Complex complex4 = complex0.exp();
      Complex complex5 = complex4.cosh();
      Complex complex6 = complex3.negate();
      Complex complex7 = new Complex(1264.890482);
      Complex complex8 = Complex.INF;
      complex4.divide(complex2);
      complex6.log();
      Complex complex9 = complex6.asin();
      Complex complex10 = complex9.add(complex1);
      complex0.multiply((-4769));
      Complex complex11 = new Complex(0.7080734182735711);
      Complex complex12 = complex11.subtract(complex3);
      complex5.readResolve();
      complex10.divide(complex6);
      complex12.getImaginary();
      complex6.acos();
      complex2.add(complex11);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.subtract(complex1);
      complex2.ZERO.reciprocal();
      Complex complex3 = Complex.valueOf(0.0, 0.0);
      complex3.I.getField();
      Complex complex4 = complex1.INF.exp();
      complex4.subtract(0.23941665887832642);
      complex3.I.createComplex(Double.POSITIVE_INFINITY, 0.0);
      Complex.valueOf(0.0);
      complex0.equals(complex3);
      Complex complex5 = complex1.multiply(37);
      complex3.subtract(complex0);
      complex1.readResolve();
      Complex complex6 = Complex.valueOf(1376.625564);
      complex5.divide(complex6);
      complex6.getImaginary();
      complex6.acos();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      complex0.divide(complex1);
      Complex complex2 = complex1.acos();
      Complex complex3 = complex2.log();
      complex1.divide(complex2);
      Complex complex4 = new Complex(2.446352007449162, 0.0);
      Complex complex5 = complex4.pow(complex1);
      complex0.divide(complex5);
      complex3.getReal();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = new Complex((-2291.86331576617));
      Complex complex1 = complex0.ONE.createComplex((-2003.3182583241407), (-2483.03));
      complex1.getArgument();
      Complex complex2 = complex0.I.negate();
      complex0.ONE.getField();
      Complex complex3 = complex0.add(complex2);
      complex0.getImaginary();
      Complex complex4 = Complex.valueOf((-2003.3182583241407));
      Complex complex5 = Complex.INF;
      complex5.sqrt();
      Complex complex6 = complex0.multiply(0.7615941559557649);
      complex5.nthRoot(1);
      complex4.pow(1.2765238285064697);
      complex4.subtract((-2483.03));
      complex6.subtract(complex3);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      complex1.I.atan();
      complex0.readResolve();
      Complex complex2 = complex0.tan();
      complex1.add(1264.890482);
      Complex complex3 = complex0.exp();
      complex3.cosh();
      Complex complex4 = complex2.negate();
      Complex complex5 = new Complex(1264.890482);
      complex5.sinh();
      Complex complex6 = Complex.ZERO;
      complex6.pow(complex2);
      Complex complex7 = complex2.subtract((-45.89659734));
      complex7.sin();
      complex4.getField();
      complex0.multiply(1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = new Complex((-2291.86331576617));
      Complex complex1 = complex0.ONE.createComplex((-2003.3182583241407), (-2483.03));
      complex1.getArgument();
      complex0.tan();
      Complex complex2 = new Complex((-2003.3182583241407));
      Complex complex3 = complex2.acos();
      Complex complex4 = complex1.sinh();
      Complex complex5 = Complex.valueOf((-2291.86331576617));
      Complex complex6 = complex5.negate();
      Complex complex7 = complex3.divide((-2003.3182583241407));
      Complex complex8 = complex7.sinh();
      complex5.divide(complex1);
      complex1.log();
      Complex complex9 = complex2.asin();
      Complex complex10 = complex6.add(complex8);
      complex6.multiply((-202));
      complex7.subtract(complex10);
      complex9.readResolve();
      Complex complex11 = complex6.divide(complex4);
      complex11.getImaginary();
      complex10.acos();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.hashCode();
      Complex complex1 = complex0.ZERO.exp();
      complex0.abs();
      Complex complex2 = Complex.INF;
      complex1.multiply(complex2);
      Complex complex3 = complex0.reciprocal();
      complex0.getArgument();
      Complex complex4 = complex3.exp();
      Complex complex5 = complex1.add(1.4673853093416538);
      complex3.sqrt();
      complex0.getField();
      complex4.getReal();
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.hashCode();
      Complex complex1 = complex0.ZERO.exp();
      complex0.hashCode();
      complex1.abs();
      Complex complex2 = Complex.valueOf((-3421.5402));
      Complex complex3 = complex1.multiply(complex2);
      complex3.reciprocal();
      Complex complex4 = new Complex(3968.551361, 1165.2242);
      complex4.getArgument();
      Complex complex5 = complex0.exp();
      complex0.add(0.003973780402302043);
      complex5.cos();
      complex2.sqrt();
      complex3.getField();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2690.85579876316);
      complex0.ZERO.nthRoot(591);
      complex0.getArgument();
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = Complex.INF;
      Complex complex3 = complex1.pow(0.0);
      Complex complex4 = complex3.INF.cos();
      Complex complex5 = complex2.INF.multiply(complex0);
      complex2.I.add(complex1);
      Complex complex6 = complex3.add((double) 591);
      complex6.readResolve();
      complex6.sqrt1z();
      complex6.add(complex2);
      complex1.getImaginary();
      Complex complex7 = complex5.pow(6.283185307179586);
      complex6.acos();
      Complex complex8 = Complex.valueOf(6.283185307179586);
      complex2.sqrt();
      complex1.INF.multiply((-1138.672246591));
      complex4.nthRoot(1);
      complex2.pow(6.283185307179586);
      complex7.subtract(2690.85579876316);
      complex5.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(1207.288513);
      Complex complex2 = complex1.createComplex((-7389.728377487616), 1207.288513);
      complex0.getArgument();
      Complex complex3 = complex1.negate();
      complex3.getField();
      Complex complex4 = complex2.tanh();
      complex2.createComplex((-2483.03), (-20.0));
      complex4.sqrt();
      complex4.add(174.8);
      complex0.log();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.I.atan();
      complex0.readResolve();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex1.add(Double.POSITIVE_INFINITY);
      complex4.ONE.sqrt1z();
      complex1.reciprocal();
      complex2.getImaginary();
      complex4.I.sinh();
      Complex complex5 = new Complex(Double.POSITIVE_INFINITY);
      complex2.equals((Object) null);
      complex3.pow(254.01);
      complex0.tan();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = Complex.INF;
      complex1.abs();
      Complex complex2 = complex1.cosh();
      complex2.NaN.sqrt1z();
      complex0.atan();
      complex1.getReal();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.multiply((-251.650862));
      complex0.tanh();
      Complex complex4 = complex3.atan();
      complex2.abs();
      complex0.subtract(6.781367490561107E-9);
      complex4.nthRoot(325);
      complex4.asin();
      Complex complex5 = complex2.multiply((double) 325);
      Complex complex6 = Complex.valueOf((-3324.585097025335));
      complex3.multiply(complex6);
      complex4.createComplex(2699.956588913, (-4769));
      complex1.asin();
      complex4.multiply(complex1);
      complex5.tan();
      complex2.atan();
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.acos();
      complex3.INF.getArgument();
      complex1.sqrt1z();
      Complex complex4 = complex3.asin();
      Complex complex5 = complex2.sqrt1z();
      Complex complex6 = complex5.multiply((-3512.7430193));
      Complex complex7 = complex6.tanh();
      Complex complex8 = complex6.atan();
      complex4.abs();
      Complex complex9 = new Complex(0.17520119364380138);
      Complex complex10 = complex9.subtract((-3512.7430193));
      complex2.nthRoot(353);
      complex8.asin();
      Complex complex11 = Complex.NaN;
      Complex complex12 = complex11.multiply(0.17520119364380138);
      Complex complex13 = Complex.ZERO;
      Complex complex14 = complex9.multiply(complex13);
      complex14.createComplex((-2505.38858819539), 0.0);
      complex11.asin();
      Complex complex15 = complex7.multiply(complex12);
      complex9.tan();
      complex10.atan();
      complex15.log();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      complex1.abs();
      Complex complex2 = complex1.cosh();
      complex0.toString();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex0.cosh();
      complex1.hashCode();
      Complex complex5 = complex3.divide(complex0);
      Complex complex6 = complex3.tan();
      Complex complex7 = complex5.acos();
      complex4.sinh();
      Complex complex8 = complex7.negate();
      complex3.divide(0.0);
      complex0.sinh();
      Complex complex9 = new Complex(20.0);
      Complex complex10 = Complex.INF;
      Complex complex11 = complex9.divide(complex10);
      Complex complex12 = complex11.log();
      complex2.asin();
      Complex complex13 = complex12.add(complex5);
      Complex complex14 = complex1.multiply((-4769));
      complex14.subtract(complex13);
      complex8.readResolve();
      Complex complex15 = complex6.divide(complex10);
      complex15.getImaginary();
      complex9.acos();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.ONE.divide(complex1);
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ONE;
      complex1.asin();
      double double0 = 4466.48;
      Complex complex2 = complex1.multiply(4466.48);
      complex2.tanh();
      Complex complex3 = Complex.INF;
      complex3.atan();
      complex0.subtract(61.0);
      try { 
        complex0.nthRoot((-4769));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,769
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.valueOf(35.19058655610766);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.createComplex((-2003.3182583241407), 0.0);
      Complex complex3 = Complex.I;
      complex3.getArgument();
      Complex complex4 = complex1.negate();
      complex2.getField();
      complex4.tanh();
      complex4.createComplex(0.0, (-2003.3182583241407));
      complex1.sqrt();
      complex1.add(2287.98509306076);
      complex0.log();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex((-2291.86331576617));
      Complex complex1 = complex0.atan();
      complex0.readResolve();
      complex1.tan();
      Complex complex2 = complex0.add(386.38576);
      complex0.sqrt1z();
      Complex complex3 = complex1.reciprocal();
      complex1.getImaginary();
      Complex complex4 = complex1.sinh();
      Complex complex5 = complex2.cos();
      complex4.getImaginary();
      complex3.toString();
      complex5.getArgument();
      Complex complex6 = new Complex(0.0);
      complex6.hashCode();
      complex2.sin();
      Complex complex7 = Complex.I;
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.INF.subtract(complex1);
      Complex complex3 = complex2.ZERO.reciprocal();
      Complex complex4 = Complex.valueOf(0.0, 0.0);
      complex4.I.getField();
      complex1.INF.exp();
      Complex.valueOf(0.0);
      complex0.equals(complex4);
      complex1.NaN.pow(1376.625564);
      complex3.tan();
      complex3.tan();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      Complex complex2 = Complex.ZERO;
      complex2.ONE.asin();
      complex1.equals(complex0);
      Complex.valueOf(6.283185307179586, 6.283185307179586);
      Complex complex3 = Complex.ONE;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      complex1.I.multiply(complex0);
      Complex complex2 = complex1.add((-452.1));
      Complex complex3 = Complex.ZERO;
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex2.multiply(complex1);
      Complex complex6 = complex0.log();
      Complex complex7 = complex6.tan();
      complex4.tanh();
      complex5.sqrt1z();
      Complex.valueOf(Double.NaN);
      Complex complex8 = complex7.divide(Double.NaN);
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN);
      Complex complex1 = complex0.I.createComplex(6.283185307179586, 1319.09);
      Complex complex2 = complex1.INF.sinh();
      Complex complex3 = complex0.log();
      Complex complex4 = complex0.ZERO.cosh();
      Complex complex5 = complex4.add(complex2);
      Complex.valueOf(Double.NaN);
      complex5.NaN.sqrt();
      Complex complex6 = complex3.I.asin();
      complex0.getReal();
      complex1.getField();
      Complex complex7 = complex1.ZERO.pow(3.9776772027043775E-302);
      complex6.NaN.abs();
      complex3.getArgument();
      complex7.I.toString();
      complex3.abs();
      complex6.abs();
      complex2.isInfinite();
      Complex complex8 = complex7.subtract(Double.NaN);
      Complex complex9 = complex8.ONE.acos();
      complex9.ONE.exp();
      Complex complex10 = complex2.add((-921.063288077331));
      complex10.I.divide(Double.NaN);
      complex3.NaN.subtract(complex2);
      Complex complex11 = Complex.valueOf((-2480.4564), 2534.9432962474);
      Complex complex12 = complex3.sinh();
      complex6.multiply(0);
      complex11.readResolve();
      complex12.getArgument();
      complex8.subtract(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex1.tanh();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2291.86331576617), (-2291.86331576617));
      Complex complex1 = complex0.log();
      complex0.tan();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = new Complex(2287.98509306076, (-2315.69239818506));
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex1.INF.cosh();
      complex2.NaN.tan();
      Complex complex3 = complex2.I.multiply((-1454));
      Complex complex4 = complex2.asin();
      complex0.ONE.getArgument();
      Complex complex5 = complex0.tan();
      Complex complex6 = complex5.ZERO.tanh();
      Complex complex7 = complex5.NaN.reciprocal();
      complex0.NaN.toString();
      complex5.getArgument();
      complex0.abs();
      complex2.multiply(complex7);
      complex3.I.pow(complex0);
      complex2.negate();
      Complex complex8 = complex4.pow((-6488.51926341));
      Complex complex9 = complex8.subtract(complex7);
      complex3.conjugate();
      complex5.getReal();
      complex8.getArgument();
      complex5.add(complex6);
      Complex complex10 = complex6.atan();
      Complex complex11 = Complex.valueOf((double) (-1454), 0.0);
      complex1.ONE.pow(complex11);
      Complex complex12 = complex4.sqrt1z();
      complex12.INF.toString();
      complex9.log();
      complex10.abs();
      complex10.getReal();
      complex12.sinh();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      Complex complex1 = complex0.ONE.conjugate();
      complex0.ZERO.getArgument();
      Complex complex2 = complex1.ONE.log();
      Complex complex3 = complex2.ZERO.add(complex1);
      Complex complex4 = complex3.INF.conjugate();
      Complex complex5 = complex4.cosh();
      complex3.ZERO.sinh();
      Complex complex6 = complex0.multiply(1);
      Complex complex7 = complex6.multiply(complex0);
      Complex complex8 = complex7.ZERO.tanh();
      complex8.ONE.getField();
      Complex complex9 = complex6.sqrt1z();
      Complex complex10 = complex6.ZERO.sin();
      Complex complex11 = complex9.divide((-20.0));
      Complex.valueOf(1076.283361);
      complex6.INF.createComplex(2.0, 1);
      complex11.ONE.readResolve();
      complex6.INF.nthRoot(1);
      complex10.tanh();
      Complex complex12 = complex11.I.createComplex((-20.0), 0.0);
      complex12.ONE.hashCode();
      Complex complex13 = complex9.NaN.cos();
      complex1.cosh();
      Complex complex14 = complex2.tanh();
      Complex complex15 = complex10.subtract(0.0);
      Object object0 = new Object();
      complex13.equals(object0);
      complex5.subtract(complex0);
      complex12.acos();
      complex15.reciprocal();
      complex14.createComplex(1307.2, 1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.negate();
      Complex complex1 = Complex.ZERO;
      complex0.I.getArgument();
      complex0.equals(")");
      complex0.tan();
      complex1.sin();
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.add(0.0);
      Complex complex2 = complex1.ZERO.cosh();
      Complex complex3 = complex2.ONE.log();
      complex3.ONE.add(complex2);
      Complex complex4 = complex0.divide((-538.0));
      Complex complex5 = complex1.multiply(0.27193373441696167);
      Complex complex6 = complex4.ONE.createComplex((-538.0), 0.0);
      Complex complex7 = complex6.ONE.pow(complex0);
      Complex complex8 = complex5.negate();
      complex8.ZERO.sin();
      Complex complex9 = complex8.log();
      complex9.NaN.toString();
      complex8.INF.conjugate();
      complex4.cosh();
      complex1.subtract(1346.8788841500857);
      Complex complex10 = complex1.sqrt1z();
      Complex complex11 = complex3.tanh();
      Complex complex12 = complex11.divide(complex1);
      Complex complex13 = complex12.ZERO.asin();
      complex7.divide(complex1);
      complex11.INF.nthRoot(37);
      complex7.toString();
      complex13.multiply(0.0);
      complex10.add(complex2);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.atan();
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.tan();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2005.0), (-2005.0));
      Complex complex1 = complex0.pow((-578.6658));
      Complex complex2 = Complex.valueOf((-1052.26915404));
      Complex complex3 = complex0.ONE.sqrt();
      Complex complex4 = complex3.ONE.pow(complex0);
      Complex complex5 = complex4.ZERO.negate();
      complex5.ONE.pow(complex3);
      Complex.valueOf((-20.0));
      Object object0 = complex0.readResolve();
      complex3.equals(object0);
      Complex complex6 = complex3.pow(complex2);
      complex2.equals(complex6);
      Complex complex7 = complex4.conjugate();
      Complex complex8 = complex7.multiply(complex4);
      Complex complex9 = complex8.atan();
      complex9.NaN.tan();
      Complex complex10 = complex8.ONE.pow(2.0);
      Complex complex11 = complex1.pow(complex4);
      Complex complex12 = complex8.log();
      complex11.cos();
      complex6.divide((-2005.0));
      complex3.getImaginary();
      Complex complex13 = complex5.asin();
      complex13.I.asin();
      complex12.ONE.subtract(complex10);
      complex13.nthRoot(1);
      complex4.sin();
      complex12.isNaN();
      complex6.createComplex((-20.0), 1);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.valueOf((-2189.85311));
      complex0.ZERO.divide(complex1);
      Complex complex2 = new Complex((-2189.85311));
      Complex complex3 = complex0.ONE.multiply(0);
      Complex complex4 = complex0.pow(complex2);
      complex4.NaN.createComplex((-1942.330069129328), (-2189.85311));
      complex4.ZERO.divide(complex2);
      Complex complex5 = complex2.conjugate();
      Complex complex6 = complex5.ONE.acos();
      complex6.INF.cos();
      complex2.INF.reciprocal();
      complex2.createComplex((-2189.85311), 846.073);
      complex5.multiply(complex0);
      complex5.divide(complex0);
      complex0.readResolve();
      complex3.readResolve();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.isNaN();
      Complex complex1 = complex0.createComplex(3298.4217568473, 3298.4217568473);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.NaN.cosh();
      Complex complex4 = complex0.ONE.sinh();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex0.add(complex2);
      Complex complex8 = complex7.multiply(2683);
      complex5.NaN.asin();
      Complex complex9 = complex8.NaN.reciprocal();
      Complex complex10 = complex4.add((double) 2683);
      complex7.log();
      Complex complex11 = complex6.sin();
      complex11.ONE.exp();
      Complex complex12 = complex6.multiply(complex2);
      complex10.isInfinite();
      Complex complex13 = complex3.createComplex(3298.4217568473, 2683);
      complex5.INF.sinh();
      Complex complex14 = complex7.tanh();
      complex14.NaN.asin();
      Complex complex15 = complex13.divide(6092.137924);
      Complex complex16 = complex8.atan();
      Complex complex17 = complex1.reciprocal();
      complex17.ONE.conjugate();
      complex17.ONE.multiply((double) 2683);
      complex13.INF.add(3298.4217568473);
      complex16.getField();
      complex12.sinh();
      complex15.negate();
      complex2.isInfinite();
      complex3.pow((double) 2683);
      complex13.subtract(complex9);
      complex7.tanh();
      try { 
        complex3.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.divide(1.0);
      complex0.ZERO.getArgument();
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.I.multiply((-1117));
      Complex complex4 = complex3.I.sin();
      complex1.NaN.getArgument();
      Complex complex5 = Complex.valueOf(1.0, (-20.0));
      Complex complex6 = complex5.INF.multiply(complex4);
      complex4.ONE.subtract(complex2);
      complex6.ONE.subtract((-833.9518875627));
      Complex complex7 = complex0.divide(complex2);
      Complex complex8 = complex0.NaN.reciprocal();
      complex7.tan();
      complex0.INF.cosh();
      complex7.ONE.readResolve();
      Complex complex9 = complex0.ZERO.reciprocal();
      Complex complex10 = complex7.reciprocal();
      Complex complex11 = complex10.subtract(1.0);
      Complex.valueOf(1.3115046679980076E-8);
      Complex complex12 = complex0.log();
      complex12.add(complex10);
      Complex complex13 = complex0.ONE.conjugate();
      complex13.INF.log();
      complex12.ONE.add(complex9);
      Complex complex14 = complex11.sqrt();
      complex14.INF.exp();
      complex5.isNaN();
      complex0.tan();
      complex9.add(0.0);
      complex8.add(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.reciprocal();
      complex0.multiply(2730.1228335890664);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.sinh();
      complex1.abs();
      Complex complex2 = complex1.cosh();
      complex2.NaN.sqrt1z();
      Complex complex3 = complex0.ZERO.asin();
      Complex complex4 = complex2.sqrt1z();
      complex4.I.multiply(0.0);
      complex2.tanh();
      Complex complex5 = complex0.atan();
      complex3.abs();
      complex5.ZERO.subtract(1498.28174);
      try { 
        complex4.nthRoot((-4769));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -4,769
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(2018);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      Complex complex2 = complex1.I.sinh();
      Complex complex3 = complex2.INF.cos();
      complex1.getField();
      double double0 = 6.283185307179586;
      double double1 = (-3073.61358952505);
      complex3.ONE.tan();
      Complex complex4 = complex1.I.cos();
      complex3.INF.sin();
      try { 
        complex4.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      complex1.subtract(1.3069802481237792E-8);
      Complex complex2 = Complex.valueOf(1.3069802481237792E-8, 3570.9893089);
      complex1.INF.getArgument();
      Complex complex3 = complex1.pow(complex2);
      complex2.getReal();
      Complex.valueOf(1.3069802481237792E-8, 1059.0);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.add(complex1);
      complex2.ONE.sqrt1z();
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex4.ZERO.reciprocal();
      complex1.INF.pow(0.0);
      Complex complex6 = complex3.I.multiply(complex1);
      complex3.INF.acos();
      Complex complex7 = complex1.INF.cos();
      complex4.INF.acos();
      Complex complex8 = complex4.multiply(complex0);
      Complex complex9 = complex4.sinh();
      complex9.toString();
      complex1.readResolve();
      Complex complex10 = complex0.createComplex(0.0, 0.0);
      complex10.getField();
      Complex.valueOf(1791.0);
      complex7.ZERO.reciprocal();
      complex7.multiply((-2159.8054348));
      complex6.abs();
      complex5.pow(0.0);
      complex9.nthRoot(1);
      Complex complex11 = complex7.subtract(complex8);
      complex11.ONE.acos();
      complex7.sqrt1z();
      complex3.add(1791.0);
      complex8.getReal();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2690.85579876316);
      complex0.ZERO.nthRoot(591);
      complex0.getArgument();
      Complex complex1 = complex0.pow(0.0);
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.pow(0.0);
      Complex complex4 = complex3.INF.cos();
      Complex complex5 = complex2.INF.multiply(complex0);
      complex2.I.add(complex1);
      Complex complex6 = complex3.add((double) 591);
      complex6.readResolve();
      complex6.sqrt1z();
      complex6.add(complex2);
      complex1.getImaginary();
      Complex complex7 = complex5.pow(6.283185307179586);
      complex6.acos();
      Complex complex8 = Complex.valueOf(6.283185307179586);
      complex2.sqrt();
      complex1.INF.multiply((-1138.672246591));
      complex4.nthRoot(1);
      complex2.pow(6.283185307179586);
      complex7.subtract(2690.85579876316);
      complex5.subtract(complex8);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.subtract(Double.NaN);
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.ONE.atan();
      complex0.toString();
      complex0.ONE.divide(complex1);
      Complex complex2 = complex1.divide(0.39433568716049194);
      Complex complex3 = complex2.NaN.atan();
      complex3.pow(complex0);
      Complex complex4 = complex2.ZERO.acos();
      complex4.NaN.cosh();
      complex1.acos();
      complex0.subtract(Double.NaN);
      Complex complex5 = Complex.valueOf(0.0, 0.39433568716049194);
      complex3.divide((-1561.03050599004));
      complex5.negate();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.tanh();
      complex0.NaN.sin();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex((-1524.5054812875094));
      Complex complex1 = complex0.I.exp();
      Complex complex2 = complex0.ZERO.pow(complex1);
      complex0.toString();
      complex0.abs();
      int int0 = (-496);
      try { 
        complex2.INF.nthRoot((-496));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -496
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.getArgument();
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.subtract(0.0);
      Complex complex3 = complex2.ZERO.acos();
      Complex complex4 = complex1.ZERO.negate();
      Complex complex5 = complex2.INF.tan();
      complex2.hashCode();
      complex0.NaN.divide(complex5);
      complex0.I.multiply(2907);
      complex4.I.conjugate();
      Complex complex6 = Complex.valueOf(0.7853981633974483);
      complex4.INF.asin();
      complex4.tan();
      Complex complex7 = complex2.acos();
      complex7.toString();
      complex6.multiply(1);
      complex4.cos();
      Complex.valueOf((-743.938631264019), (-3074.6));
      Complex complex8 = complex5.tanh();
      complex8.INF.multiply(2907);
      complex3.getReal();
      complex1.negate();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(6.283185307179586, (-1.279910496643312E214));
      Complex complex2 = complex0.subtract(complex1);
      complex2.reciprocal();
      Complex complex3 = Complex.valueOf((-1.279910496643312E214), (-1.279910496643312E214));
      complex2.getField();
      Complex complex4 = new Complex((-1.279910496643312E214));
      Complex complex5 = Complex.valueOf(6.283185307179586);
      complex3.equals(complex4);
      complex5.pow(6.283185307179586);
      complex0.tan();
      complex4.tan();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = (Complex)complex0.readResolve();
      complex0.tan();
      complex1.add(Double.POSITIVE_INFINITY);
      Complex complex3 = complex2.sinh();
      complex3.ZERO.conjugate();
      Complex complex4 = Complex.valueOf((-2377.0));
      complex3.cos();
      Complex complex5 = complex4.pow(Double.POSITIVE_INFINITY);
      complex5.ONE.divide((-2377.0));
      complex5.tan();
      Complex complex6 = Complex.ONE;
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.ZERO;
      Complex complex4 = complex1.asin();
      complex4.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.add(499.631691);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.pow((-822.442227));
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.NaN.sin();
      Complex complex3 = complex2.INF.acos();
      Complex complex4 = complex0.subtract(complex1);
      complex4.INF.getField();
      complex0.getReal();
      complex1.isNaN();
      complex1.nthRoot(1);
      complex0.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.asin();
      complex1.hashCode();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(1421);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply(1728.1);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.sinh();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.NaN;
      complex0.ZERO.divide(complex1);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      complex1.cosh();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      complex1.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.divide((-2291.86331576617));
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.pow((-2.130447095555397E-31));
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.NaN;
      Complex complex2 = Complex.INF;
      Complex complex3 = Complex.I;
      complex1.asin();
      Complex complex4 = Complex.NaN;
      complex0.equals(complex4);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.negate();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = Complex.ZERO;
      complex3.ONE.asin();
      complex2.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.divide(-0.0);
      complex0.multiply(1147);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.INF.divide(0.0);
      complex0.getArgument();
      complex2.ZERO.abs();
      complex0.equals(complex1);
      complex0.sqrt1z();
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = (Complex)complex0.readResolve();
      Complex complex3 = complex0.tan();
      Complex complex4 = complex1.add(Double.POSITIVE_INFINITY);
      complex2.NaN.multiply(782.837501933452);
      Complex complex5 = complex2.log();
      Complex complex6 = complex4.divide(complex3);
      Complex complex7 = complex3.pow(complex5);
      Complex complex8 = complex2.divide(complex1);
      complex6.getReal();
      complex7.exp();
      complex8.multiply(Double.NaN);
      complex4.add(complex1);
      complex4.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex1.I.atan();
      complex0.readResolve();
      complex0.tan();
      Complex complex3 = complex1.add(Double.POSITIVE_INFINITY);
      Complex complex4 = complex3.ONE.sqrt1z();
      Complex complex5 = complex1.reciprocal();
      complex2.getImaginary();
      Complex complex6 = complex3.I.sinh();
      complex5.INF.cos();
      complex1.getImaginary();
      complex5.toString();
      complex3.getArgument();
      complex0.hashCode();
      complex6.sin();
      Complex complex7 = complex4.cosh();
      Complex complex8 = complex7.acos();
      complex8.ZERO.add(Double.NaN);
      Object object0 = new Object();
      complex5.equals(object0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.INF;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1325.582612));
      complex0.NaN.conjugate();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.249672233819907, 2.249672233819907);
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.add(421.7);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.exp();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply(61);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(3065.859);
      Complex complex2 = complex1.NaN.multiply(1);
      Complex complex3 = complex1.acos();
      Complex complex4 = complex3.INF.divide((double) 1);
      complex1.log();
      Complex complex5 = complex1.sqrt();
      Complex complex6 = complex5.I.pow((-930.22823299));
      complex6.INF.log();
      complex5.ZERO.hashCode();
      complex0.ZERO.subtract((double) 1);
      complex0.sqrt1z();
      Complex complex7 = complex5.ZERO.divide(946.7960848409341);
      Complex complex8 = complex3.add(3065.859);
      Complex complex9 = complex7.I.pow(complex4);
      Complex complex10 = complex9.ZERO.cos();
      complex10.asin();
      Complex complex11 = complex8.subtract(complex3);
      Complex complex12 = complex11.I.divide((-825.3734841879847));
      complex12.I.getArgument();
      Complex complex13 = complex2.negate();
      complex13.ZERO.cos();
      Complex complex14 = complex12.sqrt1z();
      complex11.NaN.conjugate();
      Complex complex15 = complex7.log();
      complex11.hashCode();
      complex14.pow((-1544.41));
      complex15.getArgument();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      complex1.ZERO.hashCode();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex2.divide(complex1);
      complex3.I.sin();
      Complex complex4 = complex1.pow(0.8109631538391113);
      Complex complex5 = complex2.log();
      complex5.INF.readResolve();
      Complex complex6 = complex0.add(2.0916595931561093E24);
      Complex complex7 = complex6.sinh();
      Complex complex8 = complex4.conjugate();
      Complex complex9 = complex2.sinh();
      complex9.getArgument();
      Complex complex10 = complex8.divide(2.0916595931561093E24);
      complex0.I.reciprocal();
      Complex complex11 = complex10.ZERO.cosh();
      complex11.I.cos();
      Complex.valueOf(2.0916595931561093E24);
      Complex complex12 = complex1.cos();
      complex12.ZERO.sin();
      Complex complex13 = complex8.atan();
      complex13.INF.conjugate();
      complex8.add(complex10);
      Complex complex14 = complex3.atan();
      complex14.multiply(complex3);
      Complex complex15 = complex10.subtract(complex9);
      complex15.NaN.getField();
      Complex.valueOf(1568.768, 0.8109631538391113);
      complex7.add(complex0);
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = new Complex(1168);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.subtract(4907110.039999999);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.createComplex((-1700.40585551321), 268.0);
      complex0.toString();
      Complex complex1 = complex0.tanh();
      complex1.divide((-1700.40585551321));
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply((-3414));
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      double double0 = (-246.953188458815);
      Complex complex0 = new Complex((-246.953188458815));
      Complex complex1 = complex0.I.tanh();
      complex1.I.readResolve();
      Complex complex2 = complex1.INF.sqrt();
      complex2.I.sin();
      Complex complex3 = complex0.ONE.conjugate();
      complex0.exp();
      complex0.divide(complex3);
      double double1 = 0.0;
      Complex complex4 = Complex.valueOf(0.0, (-246.953188458815));
      complex1.hashCode();
      complex4.INF.sinh();
      complex1.I.hashCode();
      double double2 = 329.0;
      complex4.subtract(329.0);
      Complex complex5 = complex3.sin();
      complex5.INF.multiply(0);
      complex5.I.getField();
      try { 
        complex4.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.nthRoot((-261));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -261
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = new Complex((-2291.86331576617));
      Complex complex1 = complex0.ONE.createComplex((-2003.3182583241407), (-2483.03));
      complex1.getArgument();
      Complex complex2 = complex0.I.negate();
      complex0.ONE.getField();
      Complex complex3 = complex0.tanh();
      complex3.createComplex((-2.249672233819907), 913.3928174861379);
      complex2.sqrt();
      complex1.ONE.add((-2291.86331576617));
      Complex complex4 = complex1.log();
      complex4.tanh();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2370.0);
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = new Complex((-2291.86331576617));
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.subtract(complex0);
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = Complex.valueOf(1930.1707046287702, 2291.86331576617);
      complex2.getField();
      complex3.exp();
      Complex complex5 = Complex.valueOf(1930.1707046287702);
      Complex complex6 = Complex.valueOf((-571.119));
      complex4.equals(complex6);
      complex0.pow((-278.0));
      complex2.tan();
      Complex complex7 = new Complex((-2359.0), 1608.802325014928);
      complex7.INF.negate();
      complex7.tan();
      complex1.sqrt();
      complex5.asin();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = Complex.I;
      int int0 = 0;
      complex0.I.conjugate();
      complex0.NaN.acos();
      try { 
        complex0.I.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.cosh();
      Complex complex2 = complex0.divide(complex1);
      Complex complex3 = complex1.acos();
      complex3.INF.getArgument();
      complex0.toString();
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex4.I.cosh();
      complex5.ONE.hashCode();
      Complex complex6 = complex4.divide(complex1);
      Complex complex7 = complex6.ONE.tan();
      Complex complex8 = complex1.acos();
      Complex complex9 = complex1.sinh();
      complex1.I.negate();
      Complex complex10 = complex2.divide(0.7853981633974483);
      Complex complex11 = complex10.sinh();
      complex11.ONE.divide(complex7);
      complex8.log();
      Complex complex12 = complex7.I.asin();
      complex12.ZERO.add(complex4);
      complex3.multiply(0);
      complex2.subtract(complex9);
      complex8.readResolve();
      complex4.divide(complex7);
      complex1.getImaginary();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.subtract(789.5676439110485);
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.atan();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.readResolve();
      Complex complex1 = complex0.subtract(2867.67);
      complex1.isInfinite();
      Complex complex2 = complex1.atan();
      complex2.I.multiply((-9.909612209943178E-8));
      Complex.valueOf(155.94451144630037);
      Complex complex3 = complex1.sqrt1z();
      complex3.isInfinite();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.INF.pow(0.0);
      Complex complex2 = complex1.NaN.add(0.0);
      Complex complex3 = complex2.ONE.cosh();
      Complex complex4 = complex3.pow(complex1);
      Complex complex5 = complex0.I.sinh();
      complex2.INF.pow(complex0);
      complex0.isNaN();
      Complex complex6 = complex0.multiply(1831);
      complex0.createComplex(1831, 1831);
      Complex complex7 = complex5.multiply(0.0);
      complex3.getField();
      Complex complex8 = complex3.pow(1935.8916782);
      complex8.cos();
      complex3.createComplex((-446.165952), 0.0);
      complex4.multiply(0.0);
      complex3.equals(complex6);
      complex7.log();
      complex3.getReal();
      complex8.nthRoot(1831);
      complex0.getField();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.atan();
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.INF.nthRoot(63);
      Complex complex1 = new Complex(3.5829049382293792E280);
      Complex complex2 = Complex.NaN;
      complex1.log();
      complex2.tan();
      Complex complex3 = complex2.tanh();
      Complex complex4 = complex1.sqrt1z();
      Complex complex5 = Complex.valueOf(Double.NaN);
      Complex complex6 = complex5.multiply(Double.NaN);
      Complex complex7 = complex6.divide(complex3);
      complex4.pow(complex7);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.reciprocal();
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.exp();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-3.096733638475319E128), 1.0);
      Complex complex2 = complex1.divide(1.0);
      Complex complex3 = complex2.NaN.pow(complex1);
      Complex complex4 = complex2.NaN.createComplex((-3.096733638475319E128), 1.0);
      complex1.I.readResolve();
      Complex complex5 = complex3.divide(0.0);
      complex5.NaN.abs();
      complex4.ZERO.subtract(3569.742359385784);
      complex0.subtract(complex1);
      Complex complex6 = Complex.valueOf(1.0);
      Complex complex7 = complex6.NaN.multiply(0.0);
      complex7.ZERO.subtract(0.0);
      complex0.hashCode();
      complex1.hashCode();
      Complex complex8 = Complex.valueOf(0.0, 0.4855077862739563);
      complex8.ZERO.add(1.0);
      complex8.I.multiply(complex3);
      complex8.NaN.hashCode();
      Complex complex9 = complex0.cos();
      complex3.ONE.abs();
      complex9.ZERO.multiply(complex2);
      complex3.nthRoot(1255);
      complex4.readResolve();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = new Complex(1008);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(0.7071067811865475);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf((-3000.758512499), Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      complex1.pow(complex0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.NaN.sin();
      complex1.ZERO.exp();
      Complex complex2 = complex0.divide(331.8157447974);
      Complex complex3 = complex2.sin();
      complex1.getArgument();
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.ZERO.tan();
      complex0.isInfinite();
      Complex complex3 = complex0.sin();
      complex3.ONE.log();
      complex0.sinh();
      Complex complex4 = complex1.exp();
      Complex complex5 = complex4.ONE.reciprocal();
      complex5.ONE.toString();
      Complex.valueOf((-2018.71915214672), (-1751.910702793));
      complex0.divide((-2018.71915214672));
      complex2.multiply((-1751.910702793));
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN, Double.NaN);
      Complex complex1 = complex0.multiply((-427));
      Complex complex2 = complex1.sqrt1z();
      complex1.readResolve();
      complex2.NaN.getField();
      Complex complex3 = complex2.divide((double) (-427));
      complex0.I.cos();
      Complex complex4 = complex3.NaN.subtract((double) (-427));
      complex4.NaN.multiply(3122);
      complex4.ZERO.tan();
      complex2.isNaN();
      complex1.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.0, Double.NaN);
      Complex complex1 = complex0.ZERO.asin();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = complex0.divide(320.263890539);
      complex3.ZERO.nthRoot(1644);
      Complex complex4 = complex3.tanh();
      complex4.conjugate();
      Complex.valueOf((-4759.3), 320.263890539);
      complex1.acos();
      complex2.readResolve();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.nthRoot(186);
      Complex complex1 = complex0.cosh();
      complex1.toString();
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex3.INF.cos();
      complex0.subtract(complex3);
      complex0.pow(complex1);
      Complex complex5 = complex2.exp();
      complex5.I.multiply((double) 186);
      complex4.isInfinite();
      complex5.cos();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.INF.cosh();
      Complex complex2 = complex0.negate();
      complex2.NaN.divide(complex1);
      complex2.I.reciprocal();
      Complex complex3 = complex0.add(2.0);
      complex0.ZERO.exp();
      Complex complex4 = complex3.ZERO.cosh();
      Complex complex5 = complex4.NaN.negate();
      complex5.ZERO.sinh();
      Complex complex6 = complex4.NaN.pow(complex1);
      complex1.subtract(1637.21567);
      complex3.getField();
      complex6.multiply(1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Complex complex0 = new Complex((-2292.5002398586976));
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.negate();
      complex0.readResolve();
      Complex complex2 = complex1.tan();
      Complex complex3 = complex1.add((-1248.901311064527));
      Complex complex4 = complex3.tanh();
      Complex complex5 = Complex.ZERO;
      complex5.sqrt1z();
      complex2.multiply(complex4);
      Complex complex6 = Complex.valueOf((-1570.638252), Double.POSITIVE_INFINITY);
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.nthRoot(573);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.exp();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      complex1.getField();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply(611);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.NaN;
      complex2.getField();
      complex2.readResolve();
      complex1.toString();
      Complex complex3 = complex1.asin();
      complex0.divide(952.056260234);
      Complex complex4 = complex0.conjugate();
      complex2.abs();
      Complex complex5 = Complex.valueOf((-1946.09249531), Double.POSITIVE_INFINITY);
      complex1.nthRoot(3085);
      complex0.asin();
      complex2.multiply(1321.13017514577);
      complex3.reciprocal();
      Complex complex6 = complex5.multiply(702);
      complex6.multiply(71.37852638032285);
      complex4.log();
      complex0.cosh();
      complex1.multiply(702);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.log();
      Complex complex2 = complex1.divide(complex0);
      Complex complex3 = complex1.pow(complex2);
      complex3.ONE.divide(complex2);
      complex1.getReal();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow((-915.554177137));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.negate();
      Complex complex2 = Complex.INF;
      complex0.tan();
      complex0.divide(Double.POSITIVE_INFINITY);
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide((double) 1174);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex0.INF.reciprocal();
      List<Complex> list0 = complex2.ONE.nthRoot(15);
      assertTrue(list0.contains(complex0));
      assertEquals(15, list0.size());
      
      Complex.valueOf(0.0);
      Complex complex3 = Complex.valueOf(298.684520664, 103.8805455644);
      complex1.INF.getArgument();
      Complex complex4 = complex3.NaN.divide(complex1);
      Complex complex5 = complex4.ZERO.divide(103.8805455644);
      Complex complex6 = complex3.I.pow((-560.657244410609));
      complex6.ONE.cosh();
      assertEquals((-0.8585306002752952), complex6.getImaginary(), 0.01);
      
      Complex complex7 = complex5.subtract(complex2);
      assertEquals(0.0, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex0.multiply(452);
      complex3.getImaginary();
      complex8.hashCode();
      assertEquals(452.0, complex8.getReal(), 0.01);
      
      Complex complex9 = complex2.negate();
      Complex complex10 = complex1.pow(complex2);
      Complex complex11 = complex10.ONE.sin();
      Complex complex12 = complex10.negate();
      complex11.log();
      Complex complex13 = complex9.multiply(complex12);
      complex13.ONE.getArgument();
      assertSame(complex13, complex4);
      
      Complex complex14 = complex0.pow(complex11);
      assertEquals(0.8414709848078965, complex11.getReal(), 0.01);
      
      Complex complex15 = complex0.asin();
      assertEquals(1.5707963267948966, complex15.getReal(), 0.01);
      assertEquals(-0.0, complex15.getImaginary(), 0.01);
      
      Complex complex16 = complex2.cosh();
      assertTrue(complex16.equals((Object)complex14));
      
      complex10.createComplex(0.0, 141.7894967);
      assertNotSame(complex10, complex4);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 923);
      assertEquals(923.0, complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = (Complex)complex0.readResolve();
      Complex complex3 = complex0.tan();
      assertEquals(0.0, complex3.getReal(), 0.01);
      assertEquals(0.7615941559557649, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex1.add(Double.POSITIVE_INFINITY);
      Complex complex5 = complex2.divide(Double.POSITIVE_INFINITY);
      assertFalse(complex5.isInfinite());
      assertEquals(0.0, complex2.getReal(), 0.01);
      
      Complex complex6 = complex4.sin();
      Complex complex7 = complex6.ONE.subtract(complex1);
      assertEquals(1.0, complex7.getReal(), 0.01);
      assertEquals(1.0, complex7.getImaginary(), 0.01);
      
      Complex complex8 = complex6.acos();
      assertTrue(complex4.isInfinite());
      assertNotSame(complex8, complex5);
      assertFalse(complex8.isInfinite());
      
      Complex complex9 = complex0.log();
      assertEquals(1.5707963267948966, complex9.getImaginary(), 0.01);
      assertEquals(0.0, complex9.getReal(), 0.01);
  }
}
