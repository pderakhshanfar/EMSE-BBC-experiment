/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 12:48:55 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import org.apache.commons.math3.complex.Complex;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2166.3457714631054, 2166.3457714631054);
      complex0.ZERO.tan();
      Complex complex1 = complex0.multiply(442413.375);
      Complex complex2 = complex1.ZERO.log();
      Complex complex3 = complex1.divide(complex0);
      Complex complex4 = complex1.INF.cos();
      Complex complex5 = complex4.add(complex2);
      complex5.ZERO.divide(complex1);
      complex5.ZERO.acos();
      complex3.toString();
      Complex complex6 = complex0.reciprocal();
      complex6.ZERO.atan();
      Complex complex7 = complex2.conjugate();
      Complex complex8 = complex7.I.conjugate();
      complex7.divide(complex0);
      Complex complex9 = Complex.valueOf(2909.72);
      complex2.tan();
      Complex complex10 = complex0.sqrt1z();
      complex1.ONE.toString();
      complex0.multiply(2166.3457714631054);
      complex8.I.cos();
      Complex complex11 = complex9.sinh();
      complex11.ONE.getArgument();
      complex7.divide(complex10);
      complex0.tan();
      complex8.cos();
      complex9.multiply(1946);
      complex7.multiply(0.0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = new Complex(20.0, 27.05526076183535);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex0.ONE.multiply(complex1);
      Complex complex3 = complex1.I.tan();
      Complex complex4 = Complex.valueOf(27.05526076183535);
      complex3.NaN.asin();
      Complex complex5 = complex1.tan();
      Complex.valueOf(27.05526076183535, 20.0);
      complex5.atan();
      Complex complex6 = complex0.atan();
      Complex complex7 = complex4.sinh();
      Complex complex8 = complex5.divide(complex1);
      Complex complex9 = complex6.INF.acos();
      Complex complex10 = complex6.subtract(complex2);
      Complex complex11 = complex10.NaN.log();
      complex8.multiply(37);
      Complex complex12 = complex9.asin();
      complex12.sqrt();
      complex7.pow(1.0);
      complex3.pow(complex11);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex((-3496.010953), (-20.527775985140096));
      Complex complex1 = Complex.valueOf(41.067734201592245);
      Complex complex2 = complex0.divide((-20.0));
      complex0.multiply(complex1);
      Complex complex3 = complex2.sinh();
      Complex complex4 = new Complex((-20.0), 798303.1316000001);
      complex4.asin();
      Complex complex5 = complex1.negate();
      complex5.tanh();
      Complex complex6 = Complex.I;
      Complex.valueOf((-3496.010953), (-20.0));
      complex3.asin();
      complex4.atan();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.2111317421229415E158, (-2428.34616));
      Complex complex1 = complex0.I.createComplex(914.8273303581749, 3692.7045745);
      complex1.ZERO.createComplex(688.0649176882, (-522.0639601621606));
      complex1.ZERO.subtract((-2428.34616));
      Complex complex2 = complex0.acos();
      Complex complex3 = complex0.INF.tanh();
      Complex complex4 = complex3.INF.cos();
      Complex complex5 = complex2.INF.createComplex(1.0, 1.2111317421229415E158);
      Complex complex6 = complex2.add(1.2111317421229415E158);
      complex6.NaN.subtract(complex1);
      complex2.hashCode();
      Complex complex7 = complex0.sqrt();
      complex7.ZERO.tanh();
      Complex complex8 = complex2.atan();
      Complex complex9 = complex2.ZERO.cos();
      Complex.valueOf(1.2111317421229415E158, 1.0);
      complex5.conjugate();
      complex2.ONE.add(complex8);
      Complex complex10 = complex9.subtract((-3078.567481219));
      complex8.subtract(1.2111317421229415E158);
      complex10.pow(complex4);
      complex9.multiply(complex3);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = new Complex((-20.527775985140096));
      complex0.I.hashCode();
      Complex complex1 = complex0.createComplex((-20.527775985140096), (-20.527775985140096));
      Complex complex2 = complex1.cosh();
      Complex complex3 = Complex.I;
      Complex complex4 = complex3.sinh();
      Complex complex5 = complex4.divide(complex0);
      complex5.nthRoot(814);
      complex2.asin();
      complex5.nthRoot(494);
      complex0.negate();
      complex2.tanh();
      Complex complex6 = complex1.cos();
      Complex complex7 = complex2.negate();
      complex0.asin();
      Complex complex8 = complex0.multiply(2090);
      Complex complex9 = Complex.valueOf((double) 2090);
      complex9.nthRoot(2675);
      complex7.acos();
      complex8.sin();
      complex6.subtract(complex4);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.createComplex(8.252116273466952E112, Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.cosh();
      Complex complex3 = Complex.ONE;
      complex2.divide(complex1);
      Complex complex4 = Complex.ZERO;
      complex0.nthRoot(931);
      Complex.valueOf((double) 931, Double.POSITIVE_INFINITY);
      Complex.valueOf(2551.02186131179);
      complex3.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex(4.8935021740786486E-8, Double.NaN);
      Complex complex1 = complex0.cos();
      complex1.readResolve();
      complex1.getArgument();
      complex0.negate();
      Complex complex2 = complex0.acos();
      Complex complex3 = complex1.tanh();
      Complex complex4 = complex1.add(complex2);
      Complex complex5 = complex2.exp();
      complex0.getField();
      Complex complex6 = complex3.tanh();
      Complex complex7 = complex5.multiply(complex1);
      complex6.divide(3987.0514451);
      Complex complex8 = complex7.multiply(complex6);
      Complex complex9 = complex0.sinh();
      complex8.nthRoot(1167);
      complex4.asin();
      complex6.negate();
      complex9.tanh();
      Complex complex10 = Complex.ZERO;
      complex10.cos();
      complex0.asin();
      complex9.multiply((-744));
      complex5.nthRoot(3346);
      complex7.sin();
      complex1.subtract(complex4);
      complex7.cosh();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      complex1.sqrt();
      complex1.tanh();
      complex0.divide(492.69055566131);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.I.hashCode();
      Complex complex1 = complex0.createComplex((-20.0), (-20.0));
      Complex complex2 = Complex.I;
      complex1.cosh();
      Complex complex3 = new Complex(1817);
      complex3.cosh();
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.valueOf((double) 1817, 20.0);
      Complex complex6 = Complex.INF;
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex0.ZERO.acos();
      complex1.hashCode();
      Complex complex2 = complex0.createComplex((-2.1324678121885073E-10), Double.POSITIVE_INFINITY);
      Complex complex3 = new Complex(2.2867884635925293);
      Complex complex4 = complex0.cosh();
      complex4.ONE.cos();
      Complex complex5 = Complex.ONE;
      complex2.multiply((-1627.34062949738));
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = Complex.I;
      // Undeclared exception!
      complex0.nthRoot(2045222521);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = new Complex((-902.17723042418), 1599.5636671894);
      Complex complex1 = complex0.tanh();
      Complex complex2 = complex1.add(complex0);
      Complex complex3 = complex1.createComplex(1.7858231429575898E-263, 3366.65);
      Complex complex4 = complex1.I.multiply(1027);
      Complex complex5 = complex4.asin();
      Complex complex6 = complex1.sin();
      Complex complex7 = complex1.pow(complex0);
      complex2.NaN.subtract(complex3);
      complex7.I.getField();
      complex3.readResolve();
      Complex complex8 = complex2.sin();
      complex8.I.pow((double) 1027);
      complex8.add(2291.875021163481);
      complex6.multiply(3366.65);
      complex1.cos();
      Complex complex9 = complex5.cos();
      Complex complex10 = Complex.valueOf(3366.65, 0.7341920317561873);
      complex10.abs();
      Complex complex11 = complex9.ZERO.sin();
      complex11.I.multiply((-1821));
      Complex complex12 = complex8.cos();
      complex12.NaN.tanh();
      Complex complex13 = complex5.tanh();
      complex13.tanh();
      complex2.exp();
      complex11.getField();
      complex7.sinh();
      Complex.valueOf(1599.5636671894, 1.7858231429575898E-263);
      complex0.readResolve();
      complex1.cos();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex((-1.7685199639024618E-13));
      complex0.hashCode();
      Complex complex2 = complex0.createComplex((-8.05811864803), 1574.008687352);
      complex2.ONE.tan();
      Complex complex3 = new Complex((-8.05811864803));
      Complex complex4 = complex3.cosh();
      Complex complex5 = Complex.ONE;
      Complex complex6 = Complex.valueOf(Double.POSITIVE_INFINITY, (-8.05811864803));
      complex0.divide(complex6);
      Complex complex7 = new Complex(1574.008687352, Double.POSITIVE_INFINITY);
      complex5.pow(complex4);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2.1025776863098145);
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = new Complex((-1252.64678718), (-1252.64678718));
      complex0.I.getArgument();
      complex0.ZERO.getField();
      Complex complex1 = complex0.multiply((-254));
      Complex complex2 = complex1.ONE.cosh();
      complex0.pow(complex1);
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.nthRoot(1048);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4075.555331406);
      complex0.getArgument();
      Complex complex1 = complex0.ONE.cos();
      Complex complex2 = complex0.ZERO.tanh();
      Complex complex3 = complex2.ONE.divide(complex1);
      Complex complex4 = Complex.valueOf((-2248.4844982188965));
      Complex complex5 = complex0.pow(complex4);
      Complex complex6 = complex5.ZERO.sqrt1z();
      complex6.NaN.divide((-1.5419498926611193));
      complex5.INF.cos();
      complex3.hashCode();
      Complex complex7 = complex3.negate();
      Complex complex8 = complex7.ONE.sqrt();
      complex8.INF.divide(complex1);
      Complex.valueOf(0.0, 1677.614620540688);
      Complex complex9 = complex8.ZERO.conjugate();
      complex9.ZERO.toString();
      complex7.getReal();
      Complex complex10 = complex4.atan();
      Complex complex11 = complex10.multiply((-2176.3663));
      Complex complex12 = complex7.sinh();
      complex12.NaN.divide(complex2);
      complex11.sqrt();
      complex3.abs();
      complex8.add(complex12);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = new Complex(0.41421356237309515, 2.0);
      Complex complex1 = new Complex(4728.5758005958, 1.247835740305196);
      Complex complex2 = complex0.I.divide(complex1);
      Complex complex3 = complex2.INF.subtract((double) 1768);
      complex3.NaN.toString();
      Complex complex4 = Complex.valueOf((double) 1768, (double) 1768);
      Complex complex5 = complex4.INF.multiply(0.17759034037590027);
      Complex complex6 = complex5.NaN.sinh();
      complex0.ONE.atan();
      Complex complex7 = complex5.I.divide(complex0);
      Complex complex8 = complex6.I.subtract((-2169.183));
      Complex complex9 = complex0.NaN.multiply(1768);
      complex6.I.sinh();
      Complex complex10 = complex0.createComplex((-2169.183), 939.7056);
      complex6.negate();
      Complex complex11 = Complex.valueOf(939.7056);
      complex11.I.sin();
      Complex.valueOf((double) 1768);
      complex10.multiply(6.44741641521183E-102);
      Complex.valueOf(6.44741641521183E-102, (-3.69825494142334E-4));
      complex5.INF.divide(complex9);
      complex7.tan();
      Complex.valueOf(20.0);
      Complex complex12 = complex8.negate();
      complex12.subtract(complex9);
      complex0.nthRoot(1768);
      complex0.sqrt();
      complex4.sinh();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      complex1.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.readResolve();
      Complex complex1 = Complex.NaN;
      complex0.equals(complex1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.I.hashCode();
      Complex complex1 = complex0.createComplex((-20.0), (-20.0));
      Complex complex2 = complex1.multiply(1793);
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex3.divide(complex2);
      complex1.I.subtract(complex0);
      Complex.valueOf((double) 1793);
      Complex complex5 = Complex.NaN;
      complex0.INF.readResolve();
      Complex complex6 = complex3.divide(complex4);
      complex4.nthRoot(1793);
      complex6.asin();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.subtract(Double.NaN);
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.I.multiply((-1496));
      complex0.getField();
      Complex complex2 = complex0.multiply(0.6358739137649536);
      Complex complex3 = complex1.divide(0.6358739137649536);
      complex0.ZERO.conjugate();
      complex2.NaN.multiply(complex3);
      complex3.NaN.tan();
      complex3.ZERO.add(complex2);
      complex3.ZERO.getArgument();
      Complex complex4 = Complex.valueOf(0.6358739137649536);
      Complex complex5 = complex4.createComplex(3.11701265507138E-4, 1987.07009146);
      complex4.NaN.acos();
      complex1.pow((double) (-1496));
      complex4.conjugate();
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = new Complex((-2262.0));
      complex0.divide(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = new Complex(3208.2, 3208.2);
      Complex complex1 = complex0.divide(2571.011469198131);
      Complex complex2 = complex1.I.divide((-2703.978));
      Complex complex3 = complex0.cosh();
      Complex complex4 = Complex.ONE;
      Complex complex5 = complex3.divide(complex2);
      complex5.tan();
      Complex.valueOf(2571.011469198131);
      Complex complex6 = Complex.NaN;
      Complex complex7 = new Complex(Double.POSITIVE_INFINITY);
      Complex complex8 = Complex.I;
      complex8.nthRoot(2749);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 1.2111317421229415E158);
      Complex complex1 = Complex.NaN;
      Complex complex2 = new Complex(1.2111317421229415E158);
      Complex complex3 = complex0.cosh();
      Complex complex4 = Complex.ONE;
      Complex complex5 = Complex.ONE;
      complex5.divide(complex0);
      complex0.tan();
      Complex.valueOf(1.5886595249176025);
      Complex complex6 = Complex.NaN;
      Complex complex7 = new Complex(1.5886595249176025);
      complex3.nthRoot(250);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = new Complex(3208.2, 3208.2);
      Complex complex1 = complex0.divide(2571.011469198131);
      Complex complex2 = complex1.I.divide((-2703.978));
      complex2.I.divide(3208.2);
      complex0.multiply(1793);
      complex1.cosh();
      Complex complex3 = complex2.reciprocal();
      Complex complex4 = complex1.tanh();
      Complex complex5 = Complex.INF;
      complex2.divide(complex3);
      complex4.add(complex1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex(Double.NaN, Double.NaN);
      complex0.acos();
      complex0.exp();
      Complex complex1 = complex0.exp();
      complex1.cos();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = new Complex(3208.2, 3208.2);
      Complex complex1 = Complex.valueOf(3208.2, (-20.0));
      complex0.equals(complex1);
      Complex complex2 = Complex.valueOf(3208.2, (-1400.4));
      Complex complex3 = complex2.exp();
      complex0.cos();
      Complex complex4 = complex1.subtract(complex0);
      Complex complex5 = complex1.asin();
      complex2.subtract(complex1);
      Complex complex6 = complex4.exp();
      complex4.I.toString();
      Complex complex7 = Complex.INF;
      complex5.divide(complex3);
      complex4.getReal();
      complex7.add((-1400.4));
      complex6.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.ZERO.log();
      Complex complex1 = Complex.ZERO;
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.058784693479537964);
      complex0.readResolve();
      Object object0 = new Object();
      complex0.equals(object0);
      Complex complex1 = Complex.valueOf((-1400.4), Double.POSITIVE_INFINITY);
      Complex complex2 = complex1.exp();
      Complex complex3 = complex2.cos();
      Complex complex4 = Complex.ONE;
      complex4.subtract(complex3);
      complex3.asin();
      complex0.exp();
      complex1.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = new Complex(1.6018624066735325, 1.2111317421229415E158);
      Complex complex1 = Complex.valueOf(1.2111317421229415E158, (-1578.88857));
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.cos();
      complex1.subtract(complex3);
      complex3.asin();
      complex2.subtract(complex1);
      complex0.exp();
      Complex complex4 = Complex.INF;
      Complex.valueOf(3619.0);
      Complex.valueOf((-1578.88857), (-3007.97));
      Complex.valueOf(1.6018624066735325);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.I.negate();
      Complex complex2 = complex0.divide(0.6212903261184692);
      Complex complex3 = complex2.divide(2571.011469198131);
      complex1.NaN.getField();
      complex0.readResolve();
      Complex complex4 = complex2.subtract(complex3);
      complex1.toString();
      Complex complex5 = complex0.add((-1540.1713));
      Complex complex6 = complex5.ZERO.subtract(complex1);
      Complex complex7 = complex3.I.createComplex(3656.46370627776, (-20.0));
      Complex complex8 = complex7.tan();
      complex8.INF.sqrt();
      Complex complex9 = complex5.sinh();
      complex3.getField();
      complex1.add((-1540.1713));
      Complex complex10 = complex4.log();
      complex0.NaN.pow((-4512.5937528399645));
      Complex complex11 = complex10.I.multiply((-3618));
      complex11.I.add(complex4);
      complex4.equals((Object) null);
      Complex complex12 = complex6.add(complex7);
      complex12.I.subtract(4852.372564200292);
      complex4.getReal();
      complex5.abs();
      complex9.sin();
      complex3.subtract((-1540.1713));
      complex11.atan();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 1.2111317421229415E158);
      Complex complex1 = complex0.multiply(1793);
      Complex complex2 = complex1.cosh();
      Complex complex3 = Complex.ONE;
      Complex complex4 = complex2.divide(complex3);
      complex3.tan();
      Complex complex5 = Complex.valueOf(2.0);
      Complex complex6 = Complex.NaN;
      complex5.divide(complex2);
      complex4.nthRoot(1793);
      complex4.exp();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-194.731354218));
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = Complex.valueOf((-194.731354218), (-1400.4));
      complex1.INF.exp();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex1.ONE.subtract(complex2);
      Complex complex4 = complex2.ONE.asin();
      complex4.NaN.subtract(complex1);
      complex3.I.exp();
      Complex complex5 = Complex.INF;
      complex1.divide(complex3);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = new Complex(2.0, 1.2111317421229415E158);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      complex0.I.nthRoot(7);
      complex0.ZERO.reciprocal();
      Complex complex3 = complex0.tanh();
      complex3.divide(complex1);
      Object object0 = new Object();
      complex2.equals(object0);
      complex0.sqrt();
      Complex complex4 = complex0.conjugate();
      complex4.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, (-1086.877629));
      complex0.add((-1.247835740305196));
      Complex complex1 = Complex.INF;
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.I;
      try { 
        complex0.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.divide((-1123.55423948649));
      Complex complex2 = complex0.divide((-1123.55423948649));
      Complex complex3 = complex0.divide(1065.544);
      complex1.multiply(1746);
      Complex complex4 = complex1.cosh();
      Complex complex5 = Complex.ONE;
      complex3.divide(complex2);
      complex4.tan();
      Complex.valueOf(2305.981898206);
      Complex complex6 = Complex.NaN;
      Complex complex7 = complex6.divide(complex5);
      complex7.nthRoot(1743);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex(1.2111317421229415E158);
      Complex complex1 = Complex.NaN;
      complex1.ONE.asin();
      complex1.atan();
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = new Complex(1505.3);
      Complex complex2 = complex0.NaN.multiply(complex1);
      Complex complex3 = Complex.valueOf(20.0, 1505.3);
      complex3.reciprocal();
      complex1.tanh();
      complex2.I.toString();
      Complex complex4 = Complex.INF;
      complex2.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-194.731354218));
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = Complex.valueOf((-194.731354218), (-1400.4));
      complex1.INF.exp();
      Complex complex2 = complex0.divide((-2703.978));
      Complex complex3 = complex0.divide((-2703.978));
      complex1.multiply((-2150));
      complex1.cosh();
      Complex complex4 = Complex.ONE;
      complex4.divide(complex2);
      complex0.tan();
      Complex.valueOf(643.3642877310217);
      Complex complex5 = Complex.NaN;
      complex0.divide(complex1);
      try { 
        complex3.nthRoot((-2150));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,150
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = new Complex(3208.2, 3208.2);
      Complex complex1 = complex0.divide(2571.011469198131);
      Complex complex2 = complex1.cos();
      Complex complex3 = Complex.valueOf(3208.2, 3208.2);
      Complex complex4 = complex3.subtract(complex0);
      Complex complex5 = complex4.asin();
      Complex complex6 = complex3.subtract(complex5);
      Complex complex7 = complex6.exp();
      complex4.divide(complex5);
      complex0.equals("");
      Complex complex8 = Complex.ONE;
      Complex complex9 = complex8.pow(complex3);
      Complex complex10 = complex6.reciprocal();
      Complex complex11 = complex4.tan();
      Complex complex12 = complex9.pow(3208.2);
      Complex complex13 = complex9.sqrt();
      complex0.sin();
      complex13.divide(2571.011469198131);
      complex2.atan();
      Complex complex14 = complex7.atan();
      complex3.conjugate();
      Complex complex15 = complex11.acos();
      complex14.readResolve();
      complex12.reciprocal();
      Complex complex16 = complex0.reciprocal();
      complex12.cos();
      complex15.log();
      complex16.getField();
      complex7.pow(complex10);
      complex2.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = Complex.valueOf(643.3642877310217, (-475.9655));
      Complex complex1 = Complex.valueOf(3974.140057106626);
      Complex complex2 = complex0.add(complex1);
      Complex complex3 = complex2.multiply(complex0);
      Complex complex4 = complex0.ONE.multiply(complex1);
      complex4.ZERO.tanh();
      complex3.ZERO.cos();
      complex0.log();
      complex4.add(complex0);
      Complex complex5 = complex0.multiply(5.82190887044604E-84);
      Complex complex6 = complex3.sin();
      complex6.add(complex5);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-194.731354218));
      complex0.readResolve();
      Complex complex1 = new Complex((-194.731354218));
      Complex complex2 = complex1.conjugate();
      complex2.atan();
      Complex.valueOf((-194.731354218));
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.cos();
      complex0.divide(complex1);
      Complex complex5 = Complex.NaN;
      Complex complex6 = Complex.INF;
      complex6.pow(complex1);
      complex4.getArgument();
      complex3.isNaN();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.tan();
      complex0.abs();
      Complex complex2 = complex1.sqrt1z();
      Complex complex3 = new Complex(20.0, 1501.42);
      Complex complex4 = complex3.add(complex0);
      complex1.atan();
      Complex complex5 = complex4.atan();
      Complex complex6 = Complex.valueOf(1501.42, 0.0);
      complex6.conjugate();
      Complex complex7 = complex6.acos();
      complex0.readResolve();
      Complex complex8 = complex5.reciprocal();
      Complex complex9 = complex8.reciprocal();
      Complex complex10 = complex7.cos();
      complex1.log();
      complex8.getField();
      complex10.pow(complex9);
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex0.INF.tan();
      complex1.NaN.acos();
      complex4.I.negate();
      Complex complex5 = complex3.ONE.negate();
      Complex.valueOf(0.0);
      Complex complex6 = complex0.add((-1015.0));
      Complex complex7 = complex6.I.sqrt();
      complex6.INF.nthRoot(1);
      complex6.NaN.getField();
      complex6.INF.pow(complex2);
      Complex complex8 = complex3.divide(complex1);
      Complex complex9 = complex8.ZERO.exp();
      complex4.cosh();
      Complex complex10 = Complex.INF;
      complex10.divide(complex7);
      complex4.add(0.0);
      complex5.sinh();
      complex5.sqrt();
      complex7.nthRoot(1);
      complex4.toString();
      complex4.multiply(64);
      complex9.abs();
      Complex.valueOf((-534.189307011964), (-314.4));
      complex7.multiply(complex10);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-194.731354218));
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      Complex complex2 = Complex.valueOf((-194.731354218), (-1400.4));
      Complex complex3 = complex2.INF.exp();
      Complex complex4 = complex0.cos();
      Complex complex5 = complex2.ONE.subtract(complex4);
      Complex complex6 = complex4.ONE.asin();
      Complex complex7 = complex6.NaN.subtract(complex2);
      Complex complex8 = complex5.I.exp();
      complex5.ONE.divide(complex6);
      complex3.equals("Discrete cumulative probability function returned NaN for argument {0}");
      complex3.pow(complex5);
      complex0.reciprocal();
      Complex complex9 = complex2.tan();
      Complex complex10 = complex0.pow(427.41477);
      Complex complex11 = complex8.sqrt();
      complex11.sin();
      Complex complex12 = complex5.divide((-194.731354218));
      complex9.atan();
      Complex complex13 = complex10.atan();
      Complex complex14 = complex13.conjugate();
      complex13.acos();
      complex7.readResolve();
      complex12.reciprocal();
      Complex complex15 = complex6.reciprocal();
      complex4.cos();
      Complex complex16 = complex14.log();
      complex10.getField();
      complex15.pow(complex16);
      complex1.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-194.731354218));
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = Complex.valueOf((-194.731354218), (-1400.4));
      Complex complex2 = complex1.INF.exp();
      Complex complex3 = complex0.cos();
      Complex complex4 = complex1.ONE.subtract(complex3);
      Complex complex5 = complex3.ONE.asin();
      complex5.NaN.subtract(complex1);
      Complex complex6 = complex4.I.exp();
      complex4.ONE.divide(complex5);
      complex2.equals("Discrete cumulative probability function returned NaN for argument {0}");
      complex2.pow(complex4);
      complex0.reciprocal();
      Complex complex7 = complex1.tan();
      complex0.pow(427.41477);
      Complex complex8 = complex6.sqrt();
      complex8.sin();
      complex8.NaN.divide(complex4);
      complex8.add((-1400.4));
      complex8.sinh();
      Complex complex9 = complex7.sqrt();
      try { 
        complex9.INF.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = new Complex(3208.2, 3208.2);
      Complex complex1 = complex0.divide(2571.011469198131);
      Complex complex2 = complex1.I.divide((-2703.978));
      complex2.I.divide(3208.2);
      Complex complex3 = complex0.multiply(1793);
      Complex complex4 = complex1.cosh();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex1.divide(complex5);
      Complex complex7 = complex6.tan();
      Complex complex8 = complex4.createComplex(1793, (-1.0));
      Complex.valueOf((double) 1793);
      complex5.acos();
      complex8.NaN.divide((-1478.0));
      Complex complex9 = complex0.acos();
      complex9.ZERO.log();
      Complex complex10 = Complex.valueOf(1975.9, 1373.77);
      complex7.toString();
      complex8.ZERO.sinh();
      Complex complex11 = new Complex((-397.435));
      complex11.add(3208.2);
      complex8.getArgument();
      Complex complex12 = complex1.multiply(complex3);
      Complex complex13 = Complex.I;
      complex6.equals(complex13);
      complex12.getReal();
      complex10.equals("(0.11340960905951837, 1.1349202687299365)");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply((-2045222497));
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.multiply(1216.039858);
      Complex complex1 = new Complex(1216.039858);
      Complex.valueOf(Double.NaN, Double.NaN);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = new Complex(3208.2, 3208.2);
      Complex complex1 = complex0.divide(2571.011469198131);
      Complex complex2 = complex1.I.divide((-2703.978));
      complex2.I.divide(3208.2);
      Complex complex3 = complex0.multiply(1793);
      Complex complex4 = complex1.cosh();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex1.divide(complex5);
      complex6.tan();
      Complex complex7 = complex4.createComplex(1793, (-1.0));
      Complex complex8 = Complex.valueOf((double) 1793);
      complex5.acos();
      Complex complex9 = complex7.NaN.divide((-1478.0));
      Complex complex10 = complex0.acos();
      Complex complex11 = complex10.ZERO.log();
      complex3.subtract(complex9);
      complex6.nthRoot(1310);
      complex8.createComplex((-2703.978), 1.247835740305196);
      Complex complex12 = complex3.tan();
      Complex complex13 = complex12.atan();
      complex11.conjugate();
      complex13.sinh();
      complex12.toString();
      complex2.isNaN();
      complex6.getImaginary();
      complex11.log();
      complex8.asin();
      Complex complex14 = new Complex(1.247835740305196);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.subtract((-5.0706081370522526E85));
      Complex complex2 = Complex.valueOf((-2342.29085));
      Complex complex3 = complex1.ONE.pow(complex0);
      complex3.acos();
      Complex complex4 = complex3.I.cosh();
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex5.NaN.tan();
      complex6.ZERO.multiply(complex4);
      Complex complex7 = complex3.multiply(complex0);
      complex7.INF.pow((-5.0706081370522526E85));
      Complex complex8 = complex1.pow((-5.0706081370522526E85));
      complex8.NaN.toString();
      Complex complex9 = complex1.ZERO.conjugate();
      complex1.ZERO.nthRoot(240);
      complex0.isNaN();
      Complex complex10 = complex0.multiply(240);
      complex10.tan();
      complex1.isInfinite();
      complex9.negate();
      complex9.multiply(240);
      complex1.add(0.0);
      complex10.cosh();
      complex0.subtract(0.0);
      Complex.valueOf(1.0);
      complex2.cos();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.acos();
      complex0.I.reciprocal();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.INF.tan();
      Complex complex4 = complex1.NaN.acos();
      Complex complex5 = complex3.I.negate();
      complex5.conjugate();
      complex2.atan();
      complex0.pow(complex3);
      complex4.cos();
      Complex complex6 = Complex.ZERO;
      complex6.divide(complex1);
      Complex complex7 = new Complex(0.0, (-3.0));
      complex7.getImaginary();
      complex2.add((-1715.34019128105));
      Complex.valueOf((-3.0));
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 2562, 4.0447634595724164E195);
      Complex complex1 = Complex.valueOf(4.0447634595724164E195);
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply((-1695.131595));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.I.cosh();
      Complex complex2 = complex1.sin();
      complex2.I.divide(0.0);
      complex0.getField();
      Complex complex3 = complex0.atan();
      complex0.getArgument();
      complex3.I.abs();
      try { 
        complex3.nthRoot((-126));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -126
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(3208.2, 3208.2);
      Complex complex1 = complex0.divide(2571.011469198131);
      Complex complex2 = complex1.I.divide((-2703.978));
      complex2.I.divide(3208.2);
      Complex complex3 = complex0.multiply(1793);
      Complex complex4 = complex1.cosh();
      Complex complex5 = Complex.ONE;
      Complex complex6 = complex1.divide(complex5);
      complex6.tan();
      Complex complex7 = complex4.createComplex(1793, (-1.0));
      Complex.valueOf((double) 1793);
      Complex complex8 = complex5.acos();
      complex7.NaN.divide((-1478.0));
      Complex complex9 = complex0.acos();
      complex9.ZERO.log();
      Complex.valueOf(1975.9, 1373.77);
      complex5.toString();
      complex7.ZERO.sinh();
      complex1.I.readResolve();
      complex7.isNaN();
      complex8.pow(complex3);
      complex7.multiply(complex3);
      Complex.valueOf(0.0, 1975.9);
      complex0.subtract((-2913.9387));
      Complex complex10 = complex3.log();
      complex10.exp();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.NaN.createComplex(0.0, 0.0);
      Complex complex3 = complex0.multiply((-3338.7200365568));
      Complex complex4 = complex3.NaN.acos();
      complex4.ONE.cos();
      complex3.I.subtract(complex1);
      Complex complex5 = Complex.valueOf((-3338.7200365568));
      Complex complex6 = complex2.I.sqrt1z();
      complex5.ZERO.toString();
      complex5.toString();
      Complex complex7 = Complex.valueOf((-46.7268));
      Complex complex8 = complex5.negate();
      Complex complex9 = complex8.ZERO.acos();
      Complex complex10 = complex5.multiply(2.4944357872009277);
      Complex complex11 = complex5.subtract(complex10);
      complex11.ONE.asin();
      complex11.INF.subtract((-46.7268));
      complex11.tanh();
      complex10.add(complex7);
      complex2.asin();
      complex9.ONE.acos();
      complex11.getReal();
      complex8.add(complex4);
      Complex.valueOf(0.0);
      complex5.cos();
      complex11.atan();
      complex9.getReal();
      Complex complex12 = Complex.I;
      complex6.add(complex12);
      complex4.reciprocal();
      complex3.subtract((-694.5121041694));
      complex11.pow((-176.52652));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.6997387217850427E171, 1.6997387217850427E171);
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-2606.3845609348273));
      Complex complex1 = complex0.ONE.acos();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.ONE.multiply(complex2);
      Complex complex4 = complex0.cosh();
      Complex complex5 = complex0.subtract(complex4);
      Complex complex6 = complex2.I.pow(complex4);
      complex0.equals((Object) null);
      complex4.I.cosh();
      Complex complex7 = complex0.INF.tanh();
      complex7.divide(complex4);
      complex7.INF.sinh();
      complex3.sqrt();
      complex0.reciprocal();
      complex5.acos();
      Complex complex8 = complex1.pow(complex7);
      complex8.readResolve();
      complex6.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.abs();
      complex0.toString();
      complex0.isInfinite();
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.NaN.add(complex0);
      complex2.I.hashCode();
      Complex complex3 = complex2.NaN.tanh();
      complex1.INF.getField();
      Complex complex4 = complex3.ZERO.multiply(complex2);
      Complex complex5 = complex4.NaN.multiply(complex2);
      Complex complex6 = complex5.ONE.add(1.0);
      Complex complex7 = complex0.subtract(complex1);
      Complex complex8 = complex7.NaN.asin();
      Complex complex9 = complex7.NaN.subtract(complex6);
      complex7.NaN.cos();
      complex7.I.reciprocal();
      complex0.hashCode();
      complex3.exp();
      Complex complex10 = complex0.add((-924.5200283922455));
      Complex complex11 = complex4.tan();
      complex11.INF.atan();
      complex4.multiply(1.0);
      Complex.valueOf(1.0);
      complex2.cos();
      complex10.multiply((-924.5200283922455));
      complex6.multiply(complex8);
      complex9.asin();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.ZERO.sqrt();
      Complex complex2 = complex0.I.add(0.0);
      Complex complex3 = Complex.valueOf((-1608.0), Double.NaN);
      complex3.NaN.tan();
      Complex complex4 = complex1.cos();
      Complex complex5 = complex0.multiply(0);
      complex1.readResolve();
      Complex complex6 = complex0.asin();
      Complex complex7 = complex6.INF.tanh();
      complex7.ZERO.conjugate();
      complex4.ONE.subtract(complex6);
      Complex complex8 = complex0.pow(2.0);
      complex8.negate();
      complex3.getField();
      complex4.divide(complex6);
      complex5.subtract(complex4);
      complex2.multiply((double) 0);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf((-1.0), Double.NaN);
      Complex complex1 = Complex.ZERO;
      Complex complex2 = complex1.divide(complex0);
      complex2.tan();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      complex0.getField();
      Complex complex1 = complex0.sin();
      Complex complex2 = Complex.valueOf(0.0, 0.0);
      complex2.I.pow(complex0);
      complex0.getReal();
      Complex complex3 = complex0.INF.add(complex1);
      Complex complex4 = complex0.sqrt1z();
      complex4.NaN.nthRoot(7);
      Complex complex5 = complex4.sqrt();
      complex4.NaN.tanh();
      complex3.I.toString();
      Complex complex6 = complex0.exp();
      Complex complex7 = complex4.add(complex5);
      Complex complex8 = complex7.I.reciprocal();
      complex8.INF.atan();
      Complex complex9 = complex0.add(complex6);
      Complex complex10 = complex9.sqrt();
      complex9.ONE.tanh();
      complex3.conjugate();
      complex1.I.asin();
      complex10.cos();
      complex9.getReal();
      complex3.tan();
      Complex.valueOf(4342.6865327);
      Complex complex11 = complex5.cosh();
      complex11.sqrt1z();
      complex7.asin();
      complex0.reciprocal();
      complex6.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.5627006743114285E-7, 1.5627006743114285E-7);
      Complex complex1 = complex0.cos();
      Complex complex2 = complex0.NaN.createComplex(0.0, 0.0);
      complex2.ZERO.createComplex(1823.0, (-3364.18395));
      Complex complex3 = complex1.sin();
      Complex complex4 = complex0.ONE.createComplex(1.5627006743114285E-7, 1.5627006743114285E-7);
      Complex complex5 = complex4.INF.tan();
      complex5.NaN.abs();
      complex4.NaN.cosh();
      Complex complex6 = Complex.valueOf((-1.0));
      Complex complex7 = complex1.sinh();
      complex1.I.add(complex5);
      Complex complex8 = complex0.multiply(complex1);
      Complex complex9 = complex1.multiply(complex7);
      complex9.I.multiply((-1209));
      Complex complex10 = complex7.reciprocal();
      Complex complex11 = complex8.sinh();
      Complex complex12 = complex6.createComplex(0.0, 4051.6698447);
      complex12.INF.conjugate();
      complex7.NaN.cosh();
      complex3.subtract(complex9);
      complex3.getReal();
      Complex complex13 = complex7.sqrt1z();
      Complex.valueOf(4051.6698447, 0.8414709848078965);
      complex13.getArgument();
      complex11.sinh();
      complex0.getReal();
      complex10.multiply((-1209));
      complex1.toString();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3231.372117881, 27.287736265341);
      Complex complex1 = Complex.NaN;
      complex0.INF.pow(complex1);
      Complex complex2 = Complex.valueOf(0.0, 744.0);
      Complex complex3 = complex0.divide(complex2);
      complex3.log();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ONE.createComplex((-1261.33), 6.283185307179586);
      Complex complex2 = complex1.INF.tanh();
      Complex complex3 = complex2.INF.pow(3570.8914);
      complex3.ONE.pow(0.0);
      complex1.ONE.multiply(3570.8914);
      Complex complex4 = complex1.NaN.tan();
      complex4.ZERO.getArgument();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.ZERO.divide(1592.0);
      complex2.I.multiply(complex5);
      Complex complex7 = complex0.divide((-1439.07108519));
      complex2.asin();
      complex7.abs();
      complex4.tanh();
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = 2.0;
      double double1 = 1.2111317421229415E158;
      Complex complex0 = new Complex(2.0, 1.2111317421229415E158);
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.subtract(complex1);
      complex0.I.nthRoot(7);
      complex0.ZERO.reciprocal();
      Complex complex3 = complex0.tanh();
      complex1.sqrt1z();
      complex3.pow(complex2);
      double double2 = (-1.2030229087793677E-8);
      Complex complex4 = complex0.INF.acos();
      complex3.NaN.add(complex2);
      Complex complex5 = complex2.I.divide(complex1);
      Complex complex6 = new Complex(0.0);
      complex5.subtract(complex6);
      try { 
        complex4.ZERO.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.INF;
      complex1.divide(complex0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1.0808162722402073E-8), (-1.0808162722402073E-8));
      Complex complex1 = complex0.sin();
      Complex complex2 = complex0.I.exp();
      Complex complex3 = complex0.multiply((-1.0));
      Complex complex4 = Complex.valueOf(20.0);
      complex2.sqrt1z();
      Complex complex5 = complex3.negate();
      Complex complex6 = complex5.sqrt1z();
      Complex complex7 = complex6.tanh();
      complex4.readResolve();
      complex7.getField();
      complex3.atan();
      complex6.getField();
      complex1.pow(731.9702436372);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = new Complex((-20.0));
      complex0.I.hashCode();
      Complex complex1 = complex0.createComplex((-20.0), (-20.0));
      Complex complex2 = complex1.ZERO.multiply(7);
      complex2.ZERO.multiply(complex0);
      complex0.getImaginary();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.conjugate();
      Complex complex2 = complex0.multiply(544);
      complex1.add(0.0);
      Complex complex3 = complex1.subtract(9.602680736954162E-24);
      complex2.toString();
      complex3.createComplex(443.914871, 544);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(7176.765211, 2217.834824057);
      Complex complex1 = complex0.I.tanh();
      complex1.INF.add((-907.96723));
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex2.INF.asin();
      complex0.INF.add(complex2);
      complex0.exp();
      Complex complex4 = Complex.valueOf(2217.834824057, (-3047.787965));
      complex4.ONE.tanh();
      complex4.INF.log();
      complex3.I.log();
      Complex.valueOf(2217.834824057);
      complex0.add(complex3);
      complex2.conjugate();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.atan();
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.atan();
      try { 
        complex0.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      complex1.equals(complex0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = new Complex(3793.3596758783283);
      Complex complex1 = complex0.I.reciprocal();
      Complex complex2 = Complex.valueOf(2504.2557846);
      Complex complex3 = complex0.negate();
      Complex complex4 = complex2.conjugate();
      Complex complex5 = complex4.cos();
      complex3.I.getField();
      Complex complex6 = complex3.acos();
      Complex complex7 = complex3.createComplex(3793.3596758783283, Double.NaN);
      complex2.ONE.getField();
      Complex complex8 = complex7.exp();
      Complex complex9 = complex6.exp();
      complex9.I.multiply(complex1);
      Complex complex10 = complex3.add(complex2);
      complex10.ZERO.readResolve();
      complex6.readResolve();
      complex0.multiply(2504.2557846);
      Object object0 = new Object();
      complex1.equals(object0);
      complex0.toString();
      complex3.conjugate();
      Complex complex11 = complex3.negate();
      complex11.INF.divide(2504.2557846);
      complex4.readResolve();
      Complex complex12 = complex1.tanh();
      complex12.INF.subtract((-745.4632));
      complex1.getField();
      complex8.divide((-745.4632));
      complex5.tan();
      complex5.tan();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.ONE;
      complex0.divide(complex1);
      Complex complex2 = complex0.createComplex(0.0, 0.0);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.NaN.asin();
      Complex complex5 = complex3.cosh();
      Complex complex6 = complex2.exp();
      Complex complex7 = complex6.ONE.exp();
      complex7.ONE.tanh();
      complex3.I.add(0.0);
      complex0.getField();
      complex3.ZERO.divide(complex5);
      complex4.readResolve();
      Complex complex8 = complex3.ZERO.conjugate();
      Complex complex9 = Complex.INF;
      complex8.I.multiply(complex9);
      complex5.isInfinite();
      Complex complex10 = complex4.sqrt1z();
      complex0.conjugate();
      complex4.hashCode();
      complex10.isNaN();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = new Complex((-1.0662027949814858E-7), (-1.0662027949814858E-7));
      complex0.ONE.toString();
      Complex complex1 = complex0.INF.sqrt();
      Complex complex2 = Complex.ZERO;
      Complex complex3 = complex0.acos();
      Complex complex4 = complex0.add(complex2);
      Complex complex5 = complex4.I.sqrt1z();
      Complex complex6 = Complex.valueOf((-905.81872104357), (-905.81872104357));
      complex6.I.reciprocal();
      Complex complex7 = complex4.sqrt();
      complex2.conjugate();
      Complex complex8 = complex2.sinh();
      Complex complex9 = complex8.ZERO.subtract(complex3);
      complex0.multiply(complex2);
      Complex complex10 = complex3.pow(complex7);
      Complex complex11 = complex10.ONE.tanh();
      complex11.ONE.divide((-905.81872104357));
      Complex complex12 = complex9.add((-1.0662027949814858E-7));
      complex12.INF.sqrt();
      Complex complex13 = complex4.multiply(complex10);
      Complex.valueOf((-1.0662027949814858E-7));
      Complex complex14 = complex8.divide(complex4);
      complex1.ONE.hashCode();
      complex5.cosh();
      Complex complex15 = complex1.add(640.8559369164038);
      complex15.getField();
      complex4.readResolve();
      Complex complex16 = complex13.pow(complex3);
      complex16.ZERO.acos();
      complex3.subtract(3106.71224184);
      complex2.pow(complex6);
      complex14.multiply(2552);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.subtract(complex0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.cosh();
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.createComplex(0.0, 0.0);
      Complex complex2 = complex0.INF.exp();
      complex0.toString();
      Complex complex3 = complex0.reciprocal();
      Complex complex4 = complex3.INF.sqrt();
      Complex complex5 = complex1.pow(0.0);
      complex4.NaN.abs();
      Complex complex6 = complex3.pow(complex0);
      Complex complex7 = complex4.multiply(complex2);
      Complex complex8 = complex7.divide(complex6);
      Complex complex9 = complex6.NaN.multiply(complex5);
      complex9.NaN.exp();
      complex6.NaN.add(0.0);
      Complex.valueOf(705.17, 705.17);
      Complex complex10 = complex1.createComplex(705.17, 0.0);
      complex10.INF.tan();
      complex7.multiply(1);
      complex8.multiply((-2409.89774));
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.subtract(2.0088042407239129E-7);
      Complex complex2 = Complex.INF;
      complex1.tanh();
      Complex complex3 = complex0.divide(Double.NaN);
      complex3.exp();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = new Complex(2881.931608247388, 2881.931608247388);
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.hashCode();
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.sqrt();
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertTrue(complex1.equals((Object)complex0));
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex1.NaN.multiply(complex0);
      Complex complex3 = complex2.INF.multiply(Double.POSITIVE_INFINITY);
      Complex complex4 = complex2.I.subtract(complex1);
      complex4.ONE.divide(complex3);
      Complex complex5 = complex3.multiply(Double.POSITIVE_INFINITY);
      Complex complex6 = complex3.INF.negate();
      complex6.NaN.log();
      Complex complex7 = complex0.cos();
      complex7.ONE.getArgument();
      Complex complex8 = complex0.negate();
      Complex complex9 = Complex.valueOf((-310.862), 3530.62194904035);
      Complex complex10 = complex8.ZERO.createComplex(Double.POSITIVE_INFINITY, (-1673.7));
      complex9.NaN.acos();
      complex8.cosh();
      complex7.atan();
      complex8.subtract((-310.862));
      Complex complex11 = complex9.ONE.asin();
      complex7.isNaN();
      complex8.getField();
      Complex complex12 = complex9.tan();
      Complex complex13 = complex7.pow(3530.62194904035);
      complex13.ONE.sin();
      complex2.ONE.hashCode();
      complex10.NaN.hashCode();
      complex2.divide(0.0);
      complex7.subtract(complex10);
      complex12.divide(complex7);
      complex11.multiply((-310.862));
      complex13.atan();
      complex5.acos();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.sqrt1z();
      complex1.divide(9.268664838413565E-10);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.NaN.subtract(2140.5927664263154);
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.negate();
      complex1.add(complex0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.NaN.tanh();
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      complex0.subtract(1.0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(3691);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      Complex complex2 = complex0.subtract(Double.NaN);
      complex1.multiply(complex0);
      complex2.tanh();
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.I.hashCode();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.multiply((-49.38648));
      complex0.hashCode();
      complex0.ONE.hashCode();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex0.NaN.sqrt1z();
      complex2.I.getField();
      complex2.divide(complex0);
      Complex.valueOf((-20.0));
      Complex complex4 = complex0.sinh();
      Complex complex5 = complex4.NaN.acos();
      complex3.reciprocal();
      Complex complex6 = complex2.exp();
      complex4.tan();
      Complex complex7 = complex1.sqrt1z();
      complex4.ZERO.negate();
      Complex complex8 = complex7.ZERO.sqrt1z();
      complex8.ZERO.log();
      complex6.sinh();
      Complex complex9 = Complex.ZERO;
      complex6.multiply(complex9);
      complex2.pow((-49.38648));
      complex5.sin();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-194.731354218));
      Complex complex1 = (Complex)complex0.readResolve();
      complex0.equals(complex1);
      Complex complex2 = Complex.valueOf((-194.731354218), (-1400.4));
      complex2.INF.exp();
      Complex complex3 = complex0.cos();
      complex2.ONE.subtract(complex3);
      Complex complex4 = complex3.ONE.asin();
      complex4.getImaginary();
      complex1.tanh();
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.createComplex(94.5, 94.5);
      Complex complex2 = complex1.INF.atan();
      Complex complex3 = complex1.I.multiply((-1589.176407768407));
      complex2.I.multiply(14.4166202195);
      complex0.asin();
      complex0.abs();
      complex1.hashCode();
      complex3.hashCode();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply(2168);
      complex1.ZERO.divide(0.0);
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.valueOf(829.8050477108999);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.ONE.log();
      Complex complex2 = complex1.I.cosh();
      Complex complex3 = complex2.INF.reciprocal();
      complex3.ZERO.tanh();
      complex3.multiply(complex1);
      Complex complex4 = complex0.multiply(0);
      complex4.INF.getField();
      Complex complex5 = complex4.multiply(0);
      Complex complex6 = complex5.ONE.asin();
      Complex complex7 = complex5.I.reciprocal();
      complex5.NaN.hashCode();
      Complex complex8 = complex4.cosh();
      Complex complex9 = complex8.ONE.exp();
      complex9.ONE.toString();
      complex9.INF.getArgument();
      complex0.isNaN();
      complex4.ZERO.exp();
      complex4.isNaN();
      Complex complex10 = complex9.add(complex5);
      complex7.add(complex10);
      complex0.acos();
      Complex complex11 = complex0.sqrt();
      complex11.INF.multiply(0.0);
      complex6.add(complex1);
      complex7.hashCode();
      complex10.cosh();
      Complex.valueOf(0.0, 0.7853981633974483);
      complex8.reciprocal();
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.add((-2468.3020394871));
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.getField();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(991);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.NaN.exp();
      complex0.ONE.createComplex(663.45733, (-3458.82208));
      Complex complex2 = complex1.INF.multiply(2031.9204127580256);
      assertEquals(Double.NaN, complex1.getImaginary(), 0.01);
      assertEquals(Double.POSITIVE_INFINITY, complex2.getReal(), 0.01);
      
      Complex complex3 = complex0.conjugate();
      List<Complex> list0 = complex3.nthRoot(1142);
      assertEquals(1142, list0.size());
      
      complex0.readResolve();
      Complex complex4 = complex0.multiply((-458.24024266502));
      Complex complex5 = complex4.sqrt();
      assertEquals((-15.136714350628079), complex5.getImaginary(), 0.01);
      assertFalse(complex0.equals((Object)complex3));
      assertEquals(-0.0, complex4.getReal(), 0.01);
      assertEquals(15.136714350628077, complex5.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex0.getField();
      complex1.hashCode();
      Complex complex2 = complex1.divide(Double.POSITIVE_INFINITY);
      complex2.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex1.INF.getField();
      complex1.hashCode();
      complex0.divide(Double.POSITIVE_INFINITY);
      complex1.log();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.divide(1006.8482);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(6.283185307179586);
      complex1.INF.getField();
      complex1.NaN.getArgument();
      Complex complex2 = complex0.INF.reciprocal();
      complex2.abs();
      complex1.sqrt1z();
      Complex complex3 = complex0.add(complex1);
      complex3.getImaginary();
      Complex complex4 = complex3.add(1600.5883522548);
      Complex.valueOf(Double.NaN);
      complex4.acos();
      Complex.valueOf(6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex.valueOf((-1.0));
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.multiply((-2468.3020394871));
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex1.INF.getField();
      complex1.hashCode();
      complex0.divide(Double.POSITIVE_INFINITY);
      complex0.multiply(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply((-2468.3020394871));
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.NaN.sin();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex1.I.atan();
      complex3.I.pow(complex2);
      Complex complex4 = complex0.cos();
      Complex complex5 = complex4.divide(complex0);
      complex5.getImaginary();
      complex4.add(0.0);
      Complex.valueOf(3719.38066229);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(2009);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ZERO.log();
      complex1.I.subtract(complex0);
      complex0.multiply(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
      Complex complex1 = Complex.ZERO;
      complex1.divide(1.9713349342346191);
      Complex complex2 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.subtract((-5.0706081370522526E85));
      Complex.valueOf((-2342.29085));
      Complex complex2 = complex1.ONE.pow(complex0);
      complex2.acos();
      Complex complex3 = complex2.I.cosh();
      Complex complex4 = complex3.ZERO.sin();
      Complex complex5 = complex4.NaN.tan();
      Complex complex6 = complex5.ZERO.multiply(complex3);
      complex6.pow((-2342.29085));
      Complex complex7 = Complex.NaN;
      Complex complex8 = Complex.NaN;
      complex2.pow(complex8);
      Complex.valueOf(Double.NaN, 979.6);
      complex1.divide(complex4);
      complex8.log();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.add(2.414213562373095);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply(2235.331487);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      Complex complex2 = Complex.valueOf((-4056.880571516477), 1373.77);
      complex0.toString();
      Complex complex3 = Complex.NaN;
      complex3.sinh();
      Complex complex4 = new Complex(1373.77);
      complex1.add((-397.435));
      complex1.getArgument();
      Complex complex5 = complex1.multiply(complex4);
      Complex complex6 = Complex.I;
      complex4.equals(complex2);
      complex5.getReal();
      complex1.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.ZERO.abs();
      Complex complex1 = complex0.NaN.add(6.283185307179586);
      complex0.getReal();
      Complex complex2 = complex0.pow(complex1);
      complex2.INF.readResolve();
      Complex complex3 = complex0.NaN.sqrt1z();
      Complex complex4 = complex2.sin();
      Complex complex5 = complex4.NaN.sqrt1z();
      Complex complex6 = complex2.add(complex4);
      Complex complex7 = complex6.pow((-20.0));
      complex7.INF.sqrt();
      Complex complex8 = complex7.sin();
      complex8.NaN.pow((-20.0));
      complex3.sinh();
      Complex complex9 = complex2.exp();
      Complex complex10 = complex6.add(complex0);
      Complex complex11 = complex1.add(complex10);
      complex10.multiply(complex5);
      complex3.sin();
      Complex.valueOf((-2906.108344692836), (-20.0));
      Object object0 = new Object();
      complex9.ONE.tan();
      complex2.equals(object0);
      complex10.abs();
      Complex complex12 = complex4.add(complex9);
      complex5.add(Double.NaN);
      complex11.pow(complex6);
      complex3.reciprocal();
      complex4.sqrt1z();
      complex12.sinh();
      complex11.multiply((-1131));
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = Complex.valueOf(3231.372117881, 27.287736265341);
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.pow(3231.372117881);
      Complex complex4 = complex1.pow((-519.87981));
      Complex complex5 = complex2.conjugate();
      Complex complex6 = Complex.valueOf(2033.3696849937);
      complex6.nthRoot(240);
      complex1.isNaN();
      Complex complex7 = complex4.multiply(240);
      Complex complex8 = Complex.ZERO;
      complex8.tan();
      complex3.isInfinite();
      complex7.negate();
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex9.multiply((-3684));
      complex1.add(106.81415022205297);
      Complex complex10 = Complex.INF;
      complex10.getArgument();
      complex4.multiply(complex10);
      complex2.equals((Object) null);
      complex6.getReal();
      complex0.equals(complex5);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.subtract((-5.0706081370522526E85));
      Complex.valueOf((-2342.29085));
      Complex complex2 = complex1.ONE.pow(complex0);
      Complex complex3 = complex2.acos();
      Complex complex4 = complex2.I.cosh();
      Complex complex5 = complex4.ZERO.sin();
      Complex complex6 = complex5.NaN.tan();
      complex6.ZERO.multiply(complex4);
      Complex complex7 = complex2.multiply(complex0);
      complex7.INF.pow((-5.0706081370522526E85));
      complex1.pow((-5.0706081370522526E85));
      Complex complex8 = complex1.ZERO.conjugate();
      complex1.ZERO.nthRoot(240);
      complex0.isNaN();
      Complex complex9 = complex0.multiply(240);
      complex9.tan();
      complex1.isInfinite();
      complex8.negate();
      complex8.multiply(240);
      complex1.add(0.0);
      complex5.getArgument();
      complex8.multiply(complex4);
      complex6.equals(complex8);
      complex3.getReal();
      complex7.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = new Complex(1.1588881015777588, (-1181.46));
      Complex complex1 = complex0.I.cos();
      Complex complex2 = complex0.I.subtract(1.1588881015777588);
      complex0.tan();
      Complex.valueOf(2.0, 1.1588881015777588);
      Complex complex3 = Complex.valueOf((-1181.46), (-807.1882733501));
      complex3.pow(165.839703051);
      complex1.asin();
      complex1.multiply(0);
      complex2.equals(complex3);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.conjugate();
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex1.hashCode();
      Complex complex2 = complex0.createComplex((-2.1324678121885073E-10), Double.POSITIVE_INFINITY);
      Complex complex3 = new Complex(2.2867884635925293);
      complex0.cosh();
      Complex complex4 = Complex.ONE;
      Complex.valueOf(2.2867884635925293, 2.2867884635925293);
      complex1.divide(complex2);
      complex2.multiply(1813);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(2677.710297265665, 0.0);
      Complex complex1 = complex0.ONE.subtract(0.0);
      Complex complex2 = complex0.negate();
      Complex complex3 = complex0.sin();
      Complex complex4 = complex3.asin();
      complex2.I.add(complex4);
      Complex complex5 = complex2.INF.acos();
      Complex complex6 = complex0.divide(complex1);
      Complex complex7 = complex6.ZERO.sqrt1z();
      Complex complex8 = complex2.sqrt();
      Complex complex9 = complex8.I.cos();
      Complex complex10 = complex0.sin();
      complex10.INF.exp();
      double double1 = 0.0;
      complex7.INF.createComplex(0.0, 0.0);
      complex5.nthRoot(2993);
      complex0.isNaN();
      complex8.getReal();
      complex8.tanh();
      Complex complex11 = complex9.negate();
      complex7.atan();
      try { 
        complex11.nthRoot((-1443));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,443
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.cosh();
      complex0.getReal();
      Complex complex2 = complex0.multiply(0.0);
      Complex complex3 = complex2.reciprocal();
      complex1.ZERO.nthRoot(529);
      Complex complex4 = complex3.subtract(0.0);
      complex4.ZERO.pow(complex3);
      Complex complex5 = complex0.pow(1.0);
      complex1.INF.sinh();
      Complex complex6 = complex0.cosh();
      Complex complex7 = complex6.I.subtract(complex5);
      complex5.I.exp();
      Complex complex8 = complex7.NaN.add(1.0);
      complex8.INF.pow((double) 529);
      Complex complex9 = complex7.NaN.atan();
      Complex complex10 = complex9.INF.divide(complex2);
      complex1.ONE.negate();
      complex10.I.createComplex(0.0, 529);
      complex1.negate();
      complex2.tanh();
      complex6.cos();
      complex1.getReal();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.NaN;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.log();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply((-3206));
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.pow(136.909282);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ZERO;
      complex0.ONE.add(complex1);
      complex0.I.pow(3.763440821250655E-9);
      complex0.add(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.acos();
      Complex complex2 = complex0.I.reciprocal();
      Complex complex3 = Complex.valueOf(0.0);
      Complex complex4 = complex0.INF.tan();
      complex1.NaN.acos();
      complex4.I.negate();
      Complex complex5 = complex3.ONE.negate();
      Complex.valueOf(0.0);
      Complex complex6 = complex0.add((-1015.0));
      complex6.I.sqrt();
      complex6.INF.nthRoot(1);
      complex6.NaN.getField();
      complex6.INF.pow(complex2);
      Complex complex7 = complex3.divide(complex1);
      complex7.ZERO.exp();
      complex4.cosh();
      complex5.I.divide(0.0);
      complex1.ZERO.atan();
      Complex complex8 = complex3.atan();
      complex0.conjugate();
      Complex complex9 = complex2.acos();
      complex9.ONE.readResolve();
      Complex complex10 = complex9.reciprocal();
      complex1.reciprocal();
      complex5.cos();
      complex2.log();
      complex8.getField();
      complex0.pow(complex10);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex(Double.POSITIVE_INFINITY);
      complex1.hashCode();
      Complex complex2 = complex1.createComplex(Double.POSITIVE_INFINITY, (-2.1324678121885073E-10));
      Complex complex3 = new Complex((-2.1324678121885073E-10));
      Complex complex4 = Complex.valueOf((-4409.3418), Double.POSITIVE_INFINITY);
      Complex complex5 = complex4.cosh();
      Complex complex6 = Complex.ONE;
      Complex.valueOf((-2404.15), 3.763440821250655E-9);
      Complex complex7 = Complex.INF;
      complex5.tan();
      complex4.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.ONE;
      complex0.I.reciprocal();
      Complex complex2 = complex0.NaN.subtract(complex1);
      Complex complex3 = complex2.ZERO.reciprocal();
      complex3.cos();
      complex0.getField();
      Complex complex4 = complex3.asin();
      complex3.atan();
      complex4.atan();
      complex2.isNaN();
      Complex complex5 = new Complex(0.0, (-20.0));
      complex0.subtract(complex5);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.getField();
      Complex complex1 = complex0.I.conjugate();
      Complex complex2 = complex0.cos();
      Complex complex3 = complex0.cosh();
      complex2.abs();
      Complex.valueOf((-3394.622288043728));
      Complex complex4 = complex0.acos();
      complex4.INF.createComplex(1074.227764436, Double.POSITIVE_INFINITY);
      complex0.cosh();
      complex3.conjugate();
      complex1.sqrt();
      Complex complex5 = complex1.add((-5.46060534001412E134));
      Complex complex6 = new Complex(1074.227764436);
      complex6.ONE.negate();
      complex5.multiply(complex6);
      complex0.getReal();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      Complex complex2 = complex1.ONE.sqrt();
      double double0 = 0.0;
      complex2.ONE.multiply(999);
      try { 
        complex0.INF.nthRoot((-639));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -639
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ONE.sqrt();
      complex0.ZERO.readResolve();
      Complex complex1 = complex0.ZERO.cos();
      Complex complex2 = complex1.ONE.createComplex((-1630.98247718697), (-1630.98247718697));
      complex1.INF.readResolve();
      Complex complex3 = complex1.I.add(1.4721424579620361);
      Complex complex4 = complex0.asin();
      Complex complex5 = Complex.valueOf(1.4721424579620361, 1.4721424579620361);
      complex5.I.readResolve();
      Complex complex6 = complex5.ONE.sqrt();
      Complex complex7 = Complex.valueOf(1.4721424579620361);
      Complex complex8 = complex2.pow(complex4);
      assertEquals(101727.51410989725, complex8.getImaginary(), 0.01);
      
      Complex complex9 = complex1.INF.add(complex7);
      Complex complex10 = complex7.ZERO.multiply(0);
      assertEquals(0.0, complex10.getReal(), 0.01);
      
      Complex complex11 = complex9.NaN.tanh();
      complex11.NaN.exp();
      Complex complex12 = complex0.asin();
      Complex complex13 = complex12.ZERO.subtract(complex9);
      Complex complex14 = complex2.pow(1593.1860400538);
      Complex complex15 = complex14.ZERO.atan();
      assertEquals(0.0, complex15.getReal(), 0.01);
      assertEquals(0.0, complex15.getImaginary(), 0.01);
      
      Complex complex16 = complex5.NaN.pow((-2092.3));
      complex16.ONE.sinh();
      complex3.conjugate();
      Complex complex17 = complex5.sinh();
      assertEquals(2.2828440784801303, complex17.getImaginary(), 0.01);
      assertEquals(0.20334708993526499, complex17.getReal(), 0.01);
      
      Complex complex18 = complex13.tanh();
      assertSame(complex18, complex16);
      assertNotSame(complex18, complex3);
      assertTrue(complex13.equals((Object)complex14));
      assertTrue(complex1.equals((Object)complex6));
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.nthRoot((-2045222489));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,045,222,489
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.atan();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Complex complex0 = Complex.INF;
      boolean boolean0 = complex0.isNaN();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.multiply((-2045222521));
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals((-2.045222521E9), complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = (Complex)complex0.readResolve();
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = (Complex)complex0.readResolve();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      complex0.isNaN();
      Complex complex2 = complex0.multiply(697);
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      assertEquals(697.0, complex2.getReal(), 0.01);
      assertFalse(complex2.isInfinite());
      assertTrue(complex0.equals((Object)complex1));
  }
}
