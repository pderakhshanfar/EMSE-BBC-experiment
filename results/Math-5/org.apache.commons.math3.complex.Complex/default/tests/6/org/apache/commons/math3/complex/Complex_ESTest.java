/*
 * This file was automatically generated by EvoSuite
 * Mon Feb 01 09:05:45 GMT 2021
 */

package org.apache.commons.math3.complex;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.math3.complex.Complex;
import org.apache.commons.math3.complex.ComplexField;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Complex_ESTest extends Complex_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Complex complex0 = Complex.valueOf(9.863720960170636E228);
      Complex complex1 = Complex.I;
      complex0.I.add((-155409.20430147875));
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex0.sqrt1z();
      Complex complex4 = complex1.sin();
      Complex complex5 = complex4.INF.conjugate();
      complex5.ZERO.exp();
      complex0.sqrt1z();
      Complex complex6 = complex2.asin();
      Complex complex7 = complex0.createComplex((-1458.02), 1432.1153886);
      Complex.valueOf(1.7396889119023863E293, (-1.0938612624777085E-7));
      Complex complex8 = complex3.divide(complex2);
      complex8.NaN.sin();
      complex8.ONE.log();
      complex1.toString();
      complex1.I.conjugate();
      Complex.valueOf(9.863720960170636E228, 682.62432563915);
      complex6.getField();
      complex6.cos();
      complex1.cos();
      complex7.divide(complex8);
      complex7.subtract(4.4228706309734985E-8);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex2.atan();
      Complex complex5 = complex0.acos();
      complex3.abs();
      complex1.readResolve();
      Complex complex6 = complex0.subtract(770.2334795);
      Complex complex7 = complex5.exp();
      Complex complex8 = Complex.NaN;
      complex8.toString();
      Complex complex9 = complex5.pow(complex6);
      complex0.toString();
      complex7.toString();
      complex2.getReal();
      Complex complex10 = complex6.conjugate();
      complex3.asin();
      complex2.reciprocal();
      Complex complex11 = complex5.subtract(complex10);
      Complex complex12 = complex5.asin();
      complex2.sinh();
      complex11.add(Double.NaN);
      complex3.pow(0.8816119467927604);
      complex4.negate();
      complex9.nthRoot(63);
      complex12.sin();
      complex3.multiply(95);
      complex6.tanh();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Complex complex0 = new Complex(1.0);
      Complex complex1 = complex0.multiply(1097);
      Complex complex2 = complex1.NaN.divide(1707.0);
      complex2.I.divide(0.9999999999999916);
      complex1.divide(complex0);
      Complex complex3 = complex1.divide(1.0);
      Complex complex4 = complex1.asin();
      complex0.I.createComplex(1707.0, 81.44);
      complex3.ZERO.sqrt();
      complex3.ZERO.add(Double.NaN);
      complex4.getField();
      complex3.toString();
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Complex complex0 = new Complex((-3447982.464582252));
      Complex complex1 = Complex.valueOf(5.253714701326643E204, 1011.8677418);
      complex1.INF.sinh();
      Complex complex2 = new Complex(5.253714701326643E204, 278.1605496262);
      complex2.asin();
      complex2.multiply((-1380.57923458));
      complex2.acos();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(Double.NaN);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = new Complex((-3050.9515315625126), Double.NaN);
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Complex complex0 = new Complex((-20.0), (-20.0));
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.248132119344877), (-20.248132119344877));
      Complex complex1 = complex0.tan();
      complex1.atan();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.0));
      Complex.valueOf((-20.0), (-20.0));
      Complex complex1 = complex0.tanh();
      complex1.divide((-20.0));
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Complex.valueOf((-416.4), Double.NaN);
      Complex complex0 = Complex.ONE;
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Complex complex0 = new Complex((-436.81238413));
      assertFalse(complex0.isInfinite());
      assertEquals((-436.81238413), complex0.getReal(), 0.01);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertFalse(complex0.isNaN());
      
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.I.conjugate();
      complex0.toString();
      Complex complex3 = Complex.ONE;
      complex0.tan();
      complex2.reciprocal();
      complex3.sinh();
      Object object0 = complex3.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.INF.conjugate();
      Complex complex2 = complex1.INF.add(0.006453481103084534);
      Complex complex3 = Complex.I;
      Complex.valueOf(3008.026622);
      complex2.isInfinite();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.atan();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.7853981633974483, complex1.getReal(), 0.01);
      
      Complex complex2 = Complex.NaN;
      Complex complex3 = complex0.divide(complex2);
      Complex complex4 = complex3.cos();
      Complex complex5 = complex2.cosh();
      complex4.reciprocal();
      complex5.createComplex(174.7968349, (-50.71659119726));
      complex3.tanh();
      Complex.valueOf(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Complex complex0 = Complex.valueOf(Double.NaN);
      complex0.sqrt();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.acos();
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      
      Complex complex2 = complex1.tan();
      try { 
        complex2.add((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Complex complex0 = new Complex((-436.81238413), (-436.81238413));
      try { 
        complex0.pow((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Complex complex0 = new Complex((-1085.20250255), 20.0);
      Complex complex1 = (Complex)complex0.ONE.readResolve();
      Complex complex2 = complex0.INF.subtract((-1085.20250255));
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = Complex.valueOf(20.0, (-3008.026622));
      Complex complex5 = complex0.INF.log();
      complex5.divide(complex3);
      complex4.reciprocal();
      complex2.nthRoot(1733);
      Complex complex6 = Complex.NaN;
      complex1.pow(complex5);
      complex2.negate();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      double double0 = 20.248132119344877;
      Complex complex0 = Complex.valueOf(20.248132119344877);
      Complex complex1 = complex0.cos();
      complex1.INF.multiply(complex0);
      Complex complex2 = Complex.valueOf(20.248132119344877, 20.248132119344877);
      Complex complex3 = complex0.tan();
      Complex complex4 = complex2.reciprocal();
      Complex complex5 = complex0.add(complex2);
      complex5.I.sqrt();
      Complex complex6 = complex5.ZERO.multiply(complex4);
      Complex complex7 = complex5.ONE.divide(complex3);
      complex7.NaN.toString();
      complex6.sqrt();
      complex4.readResolve();
      complex4.ONE.reciprocal();
      try { 
        complex5.nthRoot((-1312));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,312
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.NaN.divide((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.toString();
      complex0.getImaginary();
      Complex complex1 = Complex.valueOf(Double.POSITIVE_INFINITY);
      complex0.multiply(complex1);
      Complex complex2 = complex0.atan();
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex3.add(complex0);
      complex0.divide(Double.POSITIVE_INFINITY);
      complex4.cos();
      complex2.cosh();
      complex1.reciprocal();
      complex0.createComplex(Double.POSITIVE_INFINITY, 3137.55193451593);
      Complex complex5 = Complex.INF;
      complex5.tanh();
      Complex.valueOf(1.751105307439351E7);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      try { 
        complex0.ZERO.subtract((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Complex complex0 = new Complex(6.283185307179586);
      complex0.readResolve();
      Complex complex1 = complex0.subtract(170.1302472653);
      Object object0 = new Object();
      Complex.valueOf(6.283185307179586, 170.1302472653);
      Complex complex2 = Complex.ONE;
      complex2.log();
      complex0.add(1298.0);
      Complex complex3 = Complex.ONE;
      Complex complex4 = Complex.ZERO;
      Complex complex5 = new Complex(Double.NaN, 1298.0);
      complex5.reciprocal();
      complex1.createComplex(2.237894048535414E-172, Double.NaN);
      Complex complex6 = Complex.INF;
      complex6.tanh();
      Complex.valueOf((-384.3686433082246));
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1033.99), (-1033.99));
      Complex complex1 = complex0.sin();
      complex1.NaN.conjugate();
      complex1.ONE.getArgument();
      Complex complex2 = complex1.cos();
      complex2.ONE.multiply(3584);
      Complex complex3 = complex2.INF.sinh();
      Complex complex4 = Complex.ONE;
      complex3.INF.pow(complex4);
      complex0.subtract((-730.73988));
      Complex complex5 = complex0.tan();
      complex2.nthRoot(3584);
      complex3.pow(complex5);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.6058715747676615E-4);
      complex0.multiply((-1));
      Complex complex1 = Complex.INF;
      Complex complex2 = complex0.tan();
      Complex complex3 = Complex.INF;
      Complex complex4 = complex1.divide(complex3);
      Complex complex5 = complex4.sin();
      Complex complex6 = complex0.asin();
      Complex complex7 = Complex.valueOf(1126.8567);
      complex7.getArgument();
      Complex complex8 = complex7.sinh();
      Complex complex9 = new Complex(0.14602625370025635);
      complex9.add(complex0);
      complex6.add(complex9);
      complex8.cos();
      Complex complex10 = complex5.sqrt();
      complex1.pow(complex5);
      Object object0 = new Object();
      Complex.valueOf((-1470.04));
      Complex complex11 = complex8.multiply(1126.8567);
      complex6.reciprocal();
      complex2.log();
      complex11.pow(complex9);
      Complex complex12 = Complex.ZERO;
      Complex complex13 = Complex.I;
      Complex complex14 = Complex.I;
      Complex complex15 = new Complex(10.9547);
      complex13.equals(complex15);
      complex10.log();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.log();
      Complex complex1 = complex0.tanh();
      complex0.INF.getField();
      Complex complex2 = Complex.valueOf(1315.40125810297);
      Complex complex3 = complex0.NaN.multiply(complex1);
      complex1.nthRoot(4036);
      complex0.isInfinite();
      Complex complex4 = complex0.sin();
      complex4.ZERO.sinh();
      Complex complex5 = complex1.exp();
      Complex complex6 = complex5.I.pow(complex1);
      Complex complex7 = complex6.NaN.log();
      Complex complex8 = complex3.cosh();
      complex8.ZERO.getArgument();
      complex5.acos();
      Complex complex9 = complex7.NaN.sinh();
      complex9.ONE.divide(1315.40125810297);
      complex4.asin();
      complex3.subtract(complex7);
      Complex complex10 = complex2.createComplex(1.1588881015777588, 4036);
      complex7.multiply(4021);
      complex5.asin();
      complex10.createComplex(Double.NaN, 824.2896203435);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.divide(Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Complex complex0 = Complex.valueOf(4.6058715747676615E-4);
      Complex.valueOf(1126.8567);
      Complex complex1 = Complex.valueOf(1126.8567, 1126.8567);
      Complex complex2 = complex1.log();
      Complex complex3 = Complex.valueOf(1126.8567, (-854.08836));
      Complex complex4 = complex3.add(488.465049758285);
      complex2.pow(complex3);
      Complex complex5 = Complex.ZERO;
      complex3.tan();
      complex0.divide(complex5);
      complex4.add(0.0);
      Complex complex6 = Complex.ZERO;
      Complex complex7 = complex6.sin();
      Complex.valueOf(0.0);
      complex3.hashCode();
      complex7.readResolve();
      complex7.asin();
      complex1.sqrt1z();
      Complex complex8 = Complex.I;
      complex8.multiply((-5793));
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Complex complex0 = new Complex((-1085.20250255), 20.0);
      complex0.ONE.readResolve();
      Complex complex1 = complex0.INF.subtract((-750.148558));
      Complex complex2 = complex0.I.atan();
      Complex complex3 = (Complex)complex0.readResolve();
      Complex complex4 = complex0.multiply(complex3);
      complex2.atan();
      Complex complex5 = Complex.valueOf(20.0, 20.0);
      Complex complex6 = Complex.valueOf((-1085.20250255));
      Complex complex7 = complex5.add(complex6);
      complex0.divide(1106.4916685236185);
      Complex complex8 = Complex.I;
      complex8.cos();
      complex1.cosh();
      complex7.reciprocal();
      complex4.createComplex((-265.21128), 1106.4916685236185);
      Complex complex9 = new Complex(20.0);
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.negate();
      Complex complex3 = Complex.valueOf((-381.2), 2.0);
      complex1.log();
      Complex complex4 = complex0.divide(complex1);
      Complex complex5 = complex1.divide(complex4);
      Complex complex6 = Complex.I;
      Complex complex7 = complex6.createComplex(1126.8567, (-358.6662));
      Complex complex8 = complex2.cosh();
      complex6.acos();
      Complex complex9 = complex8.divide(complex0);
      Complex complex10 = Complex.valueOf(1221.10063);
      complex0.divide(complex4);
      Complex complex11 = complex7.sinh();
      Complex complex12 = complex5.subtract(complex3);
      complex12.readResolve();
      complex11.sqrt1z();
      complex1.getField();
      Complex complex13 = Complex.INF;
      complex13.sqrt1z();
      complex9.divide(1126.8567);
      complex10.multiply(1.2871924223480165E-8);
      complex7.divide(838.7306460114612);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Complex complex0 = new Complex((-1085.20250255), 20.0);
      complex0.ONE.readResolve();
      Complex complex1 = complex0.INF.subtract((-750.148558));
      Complex complex2 = complex0.I.atan();
      complex0.readResolve();
      Complex complex3 = Complex.valueOf(20.0, (-3008.026622));
      Complex complex4 = complex0.INF.log();
      Complex complex5 = complex3.I.add(0.0);
      Complex complex6 = complex5.INF.pow(complex1);
      Complex complex7 = Complex.ZERO;
      complex7.NaN.tan();
      Complex complex8 = complex5.ZERO.divide(complex7);
      complex4.NaN.add((-384.3686433082246));
      complex2.ZERO.sin();
      Complex.valueOf((-3008.026622));
      complex4.ONE.hashCode();
      Object object0 = complex3.NaN.readResolve();
      ((Complex) object0).INF.add(complex1);
      Complex complex9 = complex0.asin();
      complex9.ZERO.sqrt1z();
      complex6.multiply((-1522));
      complex2.equals(complex8);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.readResolve();
      Complex complex1 = Complex.INF;
      complex0.equals(complex1);
      Complex complex2 = complex0.log();
      complex1.sinh();
      complex0.multiply(complex2);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      complex1.I.nthRoot(804);
      Complex complex2 = complex0.cos();
      Complex complex3 = complex2.sqrt();
      Complex complex4 = complex1.pow(complex3);
      Object object0 = new Object();
      Complex complex5 = Complex.valueOf((-1675.684421746));
      complex4.multiply((-4146.820368));
      Complex complex6 = complex5.reciprocal();
      complex6.log();
      Complex complex7 = Complex.I;
      Complex complex8 = Complex.I;
      complex4.equals(complex1);
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.I;
      Complex complex2 = complex1.NaN.sqrt1z();
      Complex complex3 = complex0.ZERO.acos();
      Complex complex4 = complex1.createComplex(1662.3277056555298, 0.5403023058681398);
      complex3.getReal();
      Complex complex5 = complex2.reciprocal();
      Complex complex6 = Complex.INF;
      complex1.divide(complex5);
      complex2.acos();
      complex4.pow((-822.78));
      Complex complex7 = new Complex(1.5707963267948966, 0.5403023058681398);
      complex5.toString();
      complex4.subtract(complex7);
      Complex complex8 = new Complex(0.5403023058681398, 2.306361132372847);
      complex8.cosh();
      complex2.hashCode();
      Complex complex9 = Complex.INF;
      Complex.valueOf(Double.NaN, 1.0921536132159379E198);
      Complex complex10 = Complex.ONE;
      complex10.getField();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = Complex.valueOf(Double.NaN, Double.NaN);
      complex1.ZERO.sqrt1z();
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Complex complex0 = new Complex((-1323.76));
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.valueOf(170.1302472653);
      Complex complex3 = Complex.valueOf(170.1302472653);
      Complex complex4 = complex3.asin();
      Complex.valueOf(170.1302472653);
      complex0.getArgument();
      complex2.isNaN();
      Complex complex5 = complex2.subtract(complex0);
      Complex complex6 = new Complex((-1323.76));
      complex6.subtract(3.141592653589793);
      complex5.getArgument();
      Complex complex7 = complex4.add(complex3);
      Complex complex8 = Complex.valueOf(0.0, 5598.8507380622);
      complex8.divide(complex2);
      Complex complex9 = Complex.NaN;
      complex6.readResolve();
      complex3.pow(complex1);
      complex7.cosh();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Complex complex0 = new Complex((-2962.363461282), (-2962.363461282));
      Complex complex1 = complex0.log();
      Complex complex2 = complex0.pow((-2962.363461282));
      complex2.log();
      Complex complex3 = complex1.sin();
      complex1.nthRoot(1315);
      Complex complex4 = complex3.multiply(complex0);
      Complex complex5 = complex4.ZERO.add((-2962.363461282));
      Complex complex6 = complex5.ZERO.sin();
      Complex complex7 = complex3.INF.asin();
      Complex complex8 = complex6.NaN.sqrt1z();
      complex8.ZERO.subtract(complex0);
      complex7.I.divide((-1737.0));
      complex4.isInfinite();
      complex8.add(complex7);
      Complex complex9 = complex3.cos();
      complex9.pow((double) 1315);
      complex2.tanh();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1518.16868));
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex0.ZERO.atan();
      Complex complex4 = complex1.NaN.tan();
      Complex complex5 = complex0.ONE.reciprocal();
      Complex complex6 = complex5.I.exp();
      complex4.toString();
      Complex complex7 = complex5.subtract(1985.51815);
      Complex complex8 = complex0.exp();
      complex6.reciprocal();
      complex7.sinh();
      Complex complex9 = complex3.sinh();
      Complex complex10 = complex9.add(complex8);
      complex7.add(complex8);
      Complex complex11 = Complex.INF;
      complex11.cos();
      complex6.sqrt();
      complex8.pow(complex10);
      Complex complex12 = Complex.I;
      complex12.readResolve();
      Complex.valueOf((-2076.09159364));
      complex6.multiply(1985.51815);
      Complex complex13 = complex3.reciprocal();
      complex4.log();
      complex2.pow(complex13);
      Complex complex14 = Complex.ONE;
      complex14.multiply(complex3);
      Complex complex15 = Complex.I;
      complex10.equals(complex12);
      Complex.valueOf(1985.51815, 3.6456988391022927E-7);
      Complex complex16 = Complex.NaN;
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.I.subtract(Double.NaN);
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.divide((-491.0));
      Complex complex2 = complex0.I.createComplex((-491.0), 108.45561768);
      Complex complex3 = complex0.ONE.multiply(399);
      Complex complex4 = Complex.INF;
      Complex complex5 = complex4.I.tan();
      Complex complex6 = complex5.I.divide(complex2);
      Complex complex7 = complex6.INF.sin();
      complex0.asin();
      Complex complex8 = Complex.valueOf(108.45561768);
      complex0.getArgument();
      Complex complex9 = complex1.sinh();
      Complex complex10 = complex1.add(complex7);
      complex4.add(complex8);
      complex10.cos();
      complex1.sqrt();
      complex3.pow(complex8);
      Object object0 = new Object();
      Complex.valueOf((-4146.820368));
      Complex complex11 = complex5.multiply(1.5707963267948966);
      complex11.reciprocal();
      Complex complex12 = complex9.log();
      complex0.pow(complex9);
      Complex complex13 = Complex.ZERO;
      Complex complex14 = Complex.I;
      Complex complex15 = Complex.I;
      complex15.equals(complex11);
      complex12.log();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.readResolve();
      Complex complex1 = Complex.ZERO;
      Object object0 = complex1.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      // Undeclared exception!
      complex0.nthRoot(1073741824);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Complex complex0 = new Complex(1216.1017924777846, 1216.1017924777846);
      complex0.tan();
      complex0.sinh();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Complex complex0 = new Complex((-1085.20250255), 20.0);
      complex0.ONE.readResolve();
      complex0.INF.subtract((-750.148558));
      Complex complex1 = complex0.I.atan();
      Object object0 = complex0.readResolve();
      ((Complex) object0).INF.acos();
      Complex complex2 = Complex.valueOf(20.0, (-3008.026622));
      Complex complex3 = complex0.INF.log();
      complex0.sinh();
      Complex complex4 = complex3.add(complex1);
      Complex complex5 = complex2.add(complex4);
      Complex complex6 = complex4.cos();
      complex3.sqrt();
      Complex complex7 = Complex.NaN;
      complex7.pow(complex5);
      complex4.readResolve();
      Complex complex8 = Complex.valueOf((-3008.026622));
      Complex complex9 = complex6.multiply((-3409.1991));
      complex9.ONE.divide((-1085.20250255));
      Complex complex10 = new Complex(20.0);
      Complex complex11 = complex10.reciprocal();
      Complex complex12 = complex11.log();
      Complex complex13 = complex0.pow(complex12);
      complex13.multiply(complex8);
      Complex complex14 = Complex.I;
      Object object1 = new Object();
      complex6.equals(object1);
      complex7.log();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex1.add(4745.8);
      Complex complex3 = Complex.ONE;
      complex2.pow(complex3);
      Complex complex4 = Complex.ZERO;
      Complex complex5 = complex2.tan();
      Complex complex6 = complex5.divide(complex3);
      complex6.add((double) 804);
      Complex complex7 = Complex.valueOf(4745.8);
      complex7.sin();
      Complex complex8 = Complex.valueOf((-384.3686433082246));
      complex6.hashCode();
      complex5.readResolve();
      Complex complex9 = Complex.INF;
      complex8.sqrt1z();
      complex8.multiply(1259);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      Complex complex2 = complex0.exp();
      Complex complex3 = complex1.sqrt();
      Complex complex4 = complex3.createComplex((-1566.97), 1662.3277056555298);
      complex0.getReal();
      complex3.reciprocal();
      Complex complex5 = Complex.INF;
      Complex complex6 = complex2.divide(complex0);
      complex4.acos();
      Complex complex7 = Complex.ZERO;
      complex7.pow(0.0);
      Complex complex8 = new Complex((-1.0), (-1566.97));
      complex6.toString();
      Complex complex9 = complex4.divide(complex5);
      complex9.conjugate();
      complex1.nthRoot(291);
      complex5.divide((double) 0);
      complex0.atan();
      Complex complex10 = Complex.valueOf(482.2);
      complex10.reciprocal();
      Complex complex11 = Complex.I;
      complex11.getImaginary();
      Complex complex12 = Complex.NaN;
      complex12.multiply(0.0);
      complex8.cosh();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.divide((-491.0));
      complex0.abs();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex1.tanh();
      complex3.toString();
      Complex complex4 = complex0.subtract((-491.0));
      Complex complex5 = complex1.exp();
      Complex complex6 = complex1.reciprocal();
      Complex complex7 = complex2.sinh();
      Complex complex8 = complex5.sinh();
      Complex complex9 = complex0.add(complex6);
      complex3.add(complex2);
      complex5.cos();
      complex0.sqrt();
      Complex complex10 = complex3.pow(complex8);
      complex10.ZERO.asin();
      Complex complex11 = new Complex(1863.5065079987, 723.9901929);
      complex11.readResolve();
      Complex complex12 = Complex.valueOf(0.9903647292539726);
      Complex complex13 = complex9.multiply(4240.6089657988);
      Complex complex14 = complex4.reciprocal();
      complex7.log();
      Complex complex15 = Complex.NaN;
      complex7.pow(complex15);
      complex3.multiply(complex12);
      Complex complex16 = Complex.I;
      complex14.equals(complex4);
      complex13.log();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Complex complex0 = new Complex(2.2863545689858782E21);
      Complex complex1 = Complex.valueOf((-490.36));
      Complex complex2 = complex0.ONE.add(complex1);
      Complex complex3 = Complex.NaN;
      Complex complex4 = complex0.multiply(complex3);
      complex1.INF.createComplex(2.2863545689858782E21, 4.247320713683124E-8);
      complex4.ONE.nthRoot(887);
      complex1.divide(complex2);
      Complex complex5 = complex3.add((-490.36));
      Complex complex6 = complex5.NaN.tan();
      Complex complex7 = complex5.sqrt();
      complex6.exp();
      Complex complex8 = complex5.add(1.940772294998169);
      Complex complex9 = complex4.add(complex3);
      Complex complex10 = new Complex(887, 1668.1954);
      Complex complex11 = complex9.I.divide(complex10);
      complex8.tan();
      Complex complex12 = complex0.cos();
      complex12.sinh();
      complex9.cosh();
      complex9.log();
      Complex complex13 = complex6.reciprocal();
      complex13.INF.log();
      Complex complex14 = complex13.add(complex5);
      complex14.I.atan();
      complex11.createComplex((-5.46060534001412E134), 655.092);
      complex2.asin();
      complex10.acos();
      complex3.tanh();
      complex7.nthRoot(904);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.nthRoot(601);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Complex complex0 = new Complex(0.0047514392369155155, 0.0047514392369155155);
      Complex complex1 = complex0.NaN.add(0.0047514392369155155);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.conjugate();
      Complex complex4 = complex3.cosh();
      Complex complex5 = complex3.add(0.0047514392369155155);
      Complex complex6 = complex1.add(1494.247220076967);
      Complex complex7 = complex5.tanh();
      Complex complex8 = complex0.ZERO.acos();
      complex8.I.toString();
      complex0.INF.divide(complex3);
      Complex complex9 = complex4.divide(1494.247220076967);
      Complex complex10 = complex2.createComplex(1494.247220076967, 0.0047514392369155155);
      Complex complex11 = complex7.atan();
      Object object0 = new Object();
      complex11.equals(object0);
      complex6.getField();
      Complex complex12 = Complex.ONE;
      complex12.ZERO.cosh();
      complex9.multiply(complex12);
      complex6.createComplex(0.0047514392369155155, (-1205.362712));
      complex8.sinh();
      complex11.asin();
      Complex complex13 = complex10.createComplex((-1205.362712), 1494.247220076967);
      complex8.isInfinite();
      complex13.conjugate();
      Complex.valueOf(2743.65151861313, 2743.65151861313);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = new Complex(832.6777500876, 832.6777500876);
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex2.INF.conjugate();
      complex2.I.pow(complex1);
      complex0.abs();
      Complex complex4 = complex0.pow(1863.5065079987);
      Complex complex5 = complex0.sqrt1z();
      complex5.ONE.tanh();
      complex3.toString();
      Complex complex6 = complex0.subtract(1.0);
      Complex complex7 = complex5.exp();
      Complex complex8 = Complex.I;
      complex0.sinh();
      Complex complex9 = complex7.sinh();
      Complex complex10 = complex1.add(complex2);
      complex10.add(complex7);
      complex5.cosh();
      complex0.getField();
      complex4.cos();
      complex9.toString();
      complex4.cosh();
      complex6.subtract(1863.5065079987);
      Complex complex11 = new Complex((-2647.519622287974));
      complex11.pow(0.8414709848078965);
      complex3.divide(complex5);
      complex6.toString();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex1.log();
      Complex complex4 = Complex.valueOf(2527.3887222061, (-430.230149029036));
      complex4.nthRoot(1783);
      complex2.createComplex(43408.100102, (-1159.504186763963));
      Complex complex5 = complex4.pow(6.283185307179586);
      Complex complex6 = Complex.valueOf((-1221.10063));
      complex6.add(complex3);
      complex5.exp();
      Complex complex7 = Complex.valueOf(6.283185307179586);
      complex7.sin();
      complex6.multiply((-2419.7622886));
      Complex complex8 = complex5.log();
      complex4.cos();
      complex8.getArgument();
      Complex complex9 = new Complex(1.071796178817749);
      complex9.hashCode();
      complex2.getReal();
      Complex complex10 = Complex.NaN;
      complex10.getImaginary();
      Complex complex11 = Complex.valueOf((-1221.10063), 488.465049758285);
      complex11.sqrt();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5045560598373413);
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex0.ZERO.atan();
      Complex complex4 = complex1.NaN.tan();
      Complex complex5 = complex0.ONE.reciprocal();
      Complex complex6 = complex5.I.exp();
      Complex complex7 = complex5.INF.conjugate();
      Complex complex8 = complex7.I.subtract(complex1);
      Complex complex9 = complex8.tan();
      complex9.divide(complex6);
      Complex complex10 = complex3.add((-166.2756294879));
      complex2.sin();
      Complex.valueOf((-166.2756294879));
      complex8.hashCode();
      complex7.readResolve();
      Complex complex11 = Complex.INF;
      complex11.ZERO.tanh();
      complex11.asin();
      complex0.sqrt1z();
      complex10.isNaN();
      complex8.toString();
      complex6.toString();
      complex9.sinh();
      Complex complex12 = Complex.INF;
      complex12.getField();
      Complex.valueOf(0.8834431206077556, 0.5045560598373413);
      complex7.readResolve();
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Complex complex0 = new Complex((-1323.76));
      Complex complex1 = complex0.acos();
      Complex complex2 = Complex.valueOf(170.1302472653);
      Complex complex3 = complex2.cosh();
      Complex complex4 = complex3.exp();
      complex3.toString();
      complex3.readResolve();
      complex4.multiply((-10237.98847552477));
      complex1.tan();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(832.6777500876);
      Complex complex2 = complex0.ZERO.sqrt1z();
      Complex complex3 = complex2.INF.conjugate();
      complex2.I.pow(complex1);
      complex0.abs();
      Complex complex4 = complex3.add(1.0);
      Complex complex5 = Complex.I;
      complex5.readResolve();
      complex5.pow(complex4);
      complex2.cosh();
      Complex complex6 = new Complex(804, 1.0);
      complex6.sinh();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.INF.divide((-491.0));
      Complex complex1 = complex0.I.createComplex((-491.0), 108.45561768);
      Complex.valueOf((-200.23));
      Complex complex2 = complex1.divide(4.1132503787829275);
      complex0.getField();
      complex2.hashCode();
      Complex complex3 = complex0.acos();
      complex3.ZERO.tanh();
      Complex.valueOf(1001.35284606981, 3469.506672);
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Complex complex0 = Complex.valueOf(796.8, 796.8);
      Complex complex1 = complex0.subtract(796.8);
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex2.I.asin();
      complex2.NaN.divide(5.679855838941285E-8);
      Complex complex3 = complex0.log();
      Complex complex4 = complex1.createComplex((-1159.504186763963), (-1159.504186763963));
      Complex complex5 = complex4.INF.pow(1.071796178817749);
      complex1.add(complex0);
      Complex complex6 = complex0.exp();
      complex3.sin();
      Complex complex7 = complex6.multiply(366.58381808819);
      complex7.ONE.log();
      complex7.cos();
      complex1.getArgument();
      complex4.hashCode();
      complex3.getReal();
      complex5.getImaginary();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5045560598373413);
      Complex complex1 = complex0.ZERO.exp();
      Complex complex2 = complex1.NaN.log();
      Complex complex3 = complex0.ZERO.atan();
      complex1.NaN.tan();
      Complex complex4 = complex0.ONE.reciprocal();
      Complex complex5 = complex4.I.exp();
      complex2.toString();
      Complex complex6 = complex4.subtract(1985.51815);
      Complex complex7 = complex0.exp();
      Complex complex8 = complex5.reciprocal();
      complex6.sinh();
      Complex complex9 = complex3.sinh();
      Complex complex10 = complex9.add(complex7);
      complex6.add(complex7);
      Complex complex11 = Complex.INF;
      complex11.cos();
      complex5.sqrt();
      complex7.pow(complex10);
      Complex complex12 = Complex.I;
      complex12.readResolve();
      Complex.valueOf(0.5045560598373413);
      Complex complex13 = complex6.multiply(0.5045560598373413);
      complex13.reciprocal();
      Complex complex14 = complex8.log();
      complex1.pow(complex13);
      complex7.multiply(complex14);
      Complex complex15 = Complex.I;
      complex1.equals(".cG:*$p.73");
      complex13.log();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Complex complex0 = new Complex(0.12211392819881439);
      Complex complex1 = complex0.tanh();
      complex0.sqrt();
      Complex complex2 = complex0.INF.sin();
      complex2.I.getArgument();
      complex1.ZERO.getArgument();
      complex0.equals(complex1);
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = Complex.valueOf(0.12211392819881439);
      Complex complex5 = complex4.NaN.cosh();
      complex4.ZERO.hashCode();
      Complex complex6 = complex0.multiply(complex3);
      Complex complex7 = complex3.multiply((-1922));
      Complex complex8 = Complex.valueOf(101.187887);
      Complex complex9 = complex8.ZERO.add((double) (-1922));
      complex9.ZERO.cosh();
      complex7.divide(complex8);
      complex6.readResolve();
      complex1.createComplex((-7.042204992948526E-8), 0.0);
      complex9.add(631.878134071369);
      complex8.asin();
      complex5.asin();
      Complex.valueOf(631.878134071369, 631.878134071369);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(832.6777500876);
      Complex complex2 = complex0.ZERO.sqrt1z();
      complex2.INF.conjugate();
      complex2.I.pow(complex1);
      complex0.abs();
      Complex complex3 = complex0.pow(1863.5065079987);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.ONE.tanh();
      complex5.INF.toString();
      Complex complex6 = complex0.subtract(1.0);
      Complex complex7 = complex4.exp();
      complex4.I.reciprocal();
      complex0.sinh();
      complex7.sinh();
      Complex complex8 = complex1.add(complex2);
      Complex complex9 = Complex.NaN;
      Complex complex10 = complex0.cos();
      complex10.NaN.sqrt();
      complex2.pow(complex8);
      complex6.readResolve();
      Complex.valueOf(1.0);
      complex8.multiply(832.6777500876);
      complex1.reciprocal();
      complex7.log();
      complex0.pow(complex7);
      complex8.multiply(complex3);
      Complex complex11 = Complex.I;
      complex9.equals(complex11);
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(962);
      complex1.NaN.sqrt1z();
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex2.INF.log();
      complex0.ZERO.toString();
      Complex complex4 = complex3.tanh();
      Complex complex5 = complex4.INF.pow((-5.071761314397018E-8));
      complex3.createComplex(962, 4.048565732162643E78);
      complex1.getArgument();
      Complex complex6 = complex1.atan();
      Complex complex7 = complex4.conjugate();
      complex6.log();
      complex7.asin();
      complex5.asin();
      Complex.valueOf((-209.46016), 0.0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.divide((-491.0));
      Complex complex2 = complex0.I.createComplex((-491.0), 108.45561768);
      Complex complex3 = complex0.ONE.multiply(399);
      Complex complex4 = complex3.INF.cos();
      Complex complex5 = complex4.I.tan();
      Complex complex6 = complex5.I.divide(complex2);
      complex6.INF.sin();
      Complex complex7 = complex0.asin();
      Complex.valueOf(108.45561768);
      complex0.getArgument();
      complex2.isNaN();
      Complex complex8 = complex2.subtract(complex7);
      Complex complex9 = complex7.subtract((-782.671820403336));
      complex9.ZERO.getArgument();
      complex9.INF.add(complex6);
      Complex complex10 = Complex.valueOf((-1606.183341019323), 1.5707963267948966);
      complex10.ONE.divide(complex1);
      Complex complex11 = Complex.NaN;
      complex11.readResolve();
      complex8.pow(complex9);
      complex11.cosh();
      complex11.sinh();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      complex1.I.nthRoot(804);
      Complex complex2 = complex1.sinh();
      Complex complex3 = complex2.sinh();
      Complex complex4 = complex3.add(complex2);
      Complex complex5 = Complex.I;
      Complex complex6 = complex4.cos();
      complex6.sqrt();
      complex5.pow(complex6);
      complex0.readResolve();
      Complex.valueOf(1.4142135623730951);
      complex2.multiply((-5.753754066078771E-8));
      complex4.reciprocal();
      Complex complex7 = Complex.ONE;
      complex7.log();
      complex3.pow(complex6);
      Complex complex8 = complex1.multiply(complex0);
      complex8.INF.conjugate();
      Complex complex9 = Complex.I;
      Complex complex10 = new Complex((-0.9127689912020085), 804);
      Object object0 = new Object();
      complex10.equals(object0);
      complex2.log();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(832.6777500876);
      complex1.INF.conjugate();
      complex0.I.pow(complex1);
      complex0.abs();
      Complex complex2 = complex0.sqrt1z();
      Complex complex3 = complex2.ONE.tanh();
      complex3.INF.toString();
      complex0.subtract(1.0);
      complex2.exp();
      complex2.I.reciprocal();
      complex3.add(1.0);
      Complex complex4 = new Complex(832.6777500876, 2.6192569732666016);
      complex4.readResolve();
      Complex complex5 = complex3.pow(complex1);
      complex4.cosh();
      complex5.sinh();
      complex1.sinh();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.hashCode();
      complex0.I.sinh();
      Complex complex1 = complex0.INF.sin();
      complex0.hashCode();
      complex0.getReal();
      Complex complex2 = complex0.multiply(complex1);
      Complex complex3 = complex2.ZERO.atan();
      complex2.divide(0.0);
      complex1.getImaginary();
      complex3.asin();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Complex complex0 = new Complex(0.0, 0.0);
      Complex complex1 = complex0.sqrt();
      Complex complex2 = complex1.I.createComplex((-265.5094451), 0.5069117546081543);
      Complex complex3 = complex0.INF.cos();
      Complex complex4 = Complex.valueOf(0.0);
      complex4.ONE.acos();
      Complex complex5 = complex4.INF.multiply(0.0);
      Complex complex6 = complex5.I.subtract(complex0);
      Complex complex7 = complex4.exp();
      Complex complex8 = complex7.INF.add(complex3);
      complex7.sinh();
      complex4.pow(0.0);
      complex8.pow(complex2);
      complex1.multiply(complex0);
      complex6.multiply(complex3);
      complex5.sqrt();
      complex4.nthRoot(926);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Complex complex0 = new Complex(296.61);
      Complex complex1 = complex0.NaN.cosh();
      Complex complex2 = complex1.ONE.negate();
      Complex complex3 = complex1.ONE.reciprocal();
      complex3.multiply((-400));
      complex0.getField();
      Complex complex4 = complex0.sin();
      complex0.abs();
      complex4.INF.readResolve();
      complex0.isInfinite();
      complex4.ZERO.sinh();
      Complex complex5 = complex4.sinh();
      complex5.I.getArgument();
      Complex complex6 = complex5.tanh();
      Complex complex7 = complex6.ZERO.divide(complex1);
      complex7.ONE.createComplex(0.0, (-1613.7192685247967));
      complex7.NaN.subtract(1.5707963267948966);
      complex0.getImaginary();
      Complex complex8 = complex2.sqrt();
      Complex complex9 = complex2.divide(0.0);
      complex9.pow(complex8);
      Complex complex10 = complex8.I.asin();
      complex10.ZERO.getField();
      complex10.INF.asin();
      complex0.multiply(1343);
      complex8.isNaN();
      Complex complex11 = complex0.multiply(1570);
      complex11.readResolve();
      Complex.valueOf(1.5564982816556894E177, 6.283185307179586);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1216.1017924777846, 1216.1017924777846);
      assertFalse(complex0.isInfinite());
      assertFalse(complex0.isNaN());
      assertEquals(1216.1017924777846, complex0.getImaginary(), 0.01);
      assertEquals(1216.1017924777846, complex0.getReal(), 0.01);
      
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.cosh();
      complex0.INF.getArgument();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.cos();
      complex0.INF.pow(complex3);
      Complex complex4 = complex2.sqrt();
      complex0.getArgument();
      Complex complex5 = complex1.atan();
      complex0.tanh();
      Complex.valueOf(1.5707963267948966, 2.7593424989059015E-8);
      complex0.I.asin();
      Complex complex6 = complex5.multiply(1064);
      complex6.I.add(complex1);
      complex2.toString();
      Complex complex7 = Complex.valueOf((double) 1064);
      complex7.NaN.abs();
      complex4.multiply(Double.POSITIVE_INFINITY);
      complex2.sinh();
      complex5.cosh();
      complex6.log();
      Complex.valueOf((-1161.923913889));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.pow(Double.POSITIVE_INFINITY);
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Complex complex0 = Complex.valueOf(796.8, 796.8);
      Complex complex1 = complex0.subtract(796.8);
      Complex complex2 = complex1.ZERO.divide(complex0);
      complex2.I.asin();
      complex2.NaN.divide(5.679855838941285E-8);
      Complex complex3 = complex0.multiply((-2072));
      complex3.I.pow(0.0);
      complex3.NaN.sinh();
      complex0.log();
      double double0 = (-1159.504186763963);
      try { 
        complex1.INF.nthRoot((-2072));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,072
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1216.1017924777846, 1216.1017924777846);
      complex0.equals((Object) null);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0, 0.0);
      Complex complex1 = complex0.createComplex(0.0, 0.0);
      Complex complex2 = complex1.sin();
      complex0.INF.getField();
      complex2.getArgument();
      complex0.getField();
      Complex complex3 = Complex.valueOf(222.68061794);
      complex3.add(0.0);
      Complex complex4 = complex1.conjugate();
      Complex complex5 = complex4.I.add(complex0);
      complex4.I.subtract(Double.POSITIVE_INFINITY);
      complex5.ONE.cosh();
      complex5.multiply((-3996.712494));
      Complex complex6 = Complex.valueOf(415.411372);
      complex6.pow(complex3);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Complex complex0 = new Complex(Double.POSITIVE_INFINITY);
      complex0.getField();
      Complex complex1 = complex0.asin();
      Complex complex2 = complex1.ONE.subtract(complex0);
      Complex complex3 = complex0.log();
      complex3.abs();
      complex2.ZERO.exp();
      complex3.NaN.toString();
      Complex complex4 = complex3.asin();
      complex4.subtract(complex1);
      complex2.sinh();
      complex0.acos();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.0);
      Complex complex1 = complex0.I.sqrt();
      complex1.ZERO.multiply(1.0);
      complex0.multiply((-1522));
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.nthRoot(37);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.abs();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Complex complex0 = new Complex(2159.98361196, 0.0);
      Complex complex1 = complex0.INF.multiply((-4424));
      complex1.I.sinh();
      Complex complex2 = complex0.INF.asin();
      Complex complex3 = complex0.I.multiply(44);
      Complex complex4 = complex3.ONE.createComplex(44, 0.0);
      Complex complex5 = complex4.ZERO.tan();
      Complex.valueOf((double) (-4424), (-54.2492736111524));
      complex5.ONE.sinh();
      complex5.NaN.acos();
      complex5.INF.toString();
      complex0.toString();
      complex0.sinh();
      complex2.exp();
      complex4.log();
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.toString();
      complex0.getImaginary();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex1.INF.negate();
      Complex.valueOf(2.0, Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.log();
      Complex complex5 = complex2.ONE.divide(complex0);
      Complex complex6 = complex4.INF.divide(complex1);
      Complex complex7 = complex6.ONE.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.ZERO.cosh();
      complex8.acos();
      complex7.divide(complex5);
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex10 = complex9.ZERO.divide(complex1);
      complex10.INF.sinh();
      Complex complex11 = complex8.ZERO.subtract(complex5);
      complex3.readResolve();
      Complex complex12 = complex2.sqrt1z();
      complex12.ONE.getField();
      complex2.sqrt1z();
      complex0.divide(1.2871924223480165E-8);
      complex6.multiply(1.2871924223480165E-8);
      complex11.hashCode();
      complex8.ZERO.log();
      Complex complex13 = complex6.divide(1987.2);
      Complex complex14 = complex13.subtract(785.0);
      complex10.subtract(complex11);
      Complex complex15 = Complex.valueOf((-3028.222575429), Double.POSITIVE_INFINITY);
      complex15.ONE.toString();
      complex14.isNaN();
      complex2.reciprocal();
      complex2.getImaginary();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Complex complex0 = new Complex((-1085.20250255), 20.0);
      complex0.ONE.readResolve();
      Complex complex1 = complex0.INF.subtract((-750.148558));
      Complex complex2 = complex0.I.atan();
      complex0.readResolve();
      Complex complex3 = Complex.valueOf(20.0, (-3008.026622));
      Complex complex4 = complex0.INF.log();
      Complex complex5 = complex3.I.add(0.0);
      complex5.INF.pow(complex1);
      Complex complex6 = Complex.ZERO;
      complex6.NaN.tan();
      complex5.ZERO.divide(complex6);
      complex4.NaN.add((-384.3686433082246));
      complex2.ZERO.sin();
      Complex.valueOf((-3008.026622));
      complex4.ONE.hashCode();
      complex3.NaN.readResolve();
      Complex complex7 = complex0.asin();
      complex7.ZERO.sqrt1z();
      complex0.isNaN();
      complex2.toString();
      complex2.toString();
      Complex complex8 = complex0.sinh();
      complex8.getField();
      Complex.valueOf(20.0, 0.0);
      complex2.readResolve();
      complex4.getReal();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.reciprocal();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Complex complex0 = new Complex((-3371.012784));
      Complex complex1 = complex0.NaN.cos();
      complex1.I.multiply(complex0);
      Complex complex2 = complex0.ZERO.multiply(0);
      Complex complex3 = complex2.I.cosh();
      complex2.NaN.readResolve();
      complex0.ONE.abs();
      complex0.pow((-3371.012784));
      complex0.INF.readResolve();
      Complex complex4 = complex2.sinh();
      Complex complex5 = complex3.I.createComplex(0.0, 0.0);
      complex5.INF.log();
      Complex complex6 = complex0.divide(0.0);
      complex3.subtract(1.0);
      complex6.getField();
      Complex complex7 = Complex.valueOf(1.0);
      complex6.createComplex((-3371.012784), (-890.285331));
      Complex complex8 = complex4.sin();
      Complex complex9 = complex4.sinh();
      complex9.NaN.reciprocal();
      Complex complex10 = complex0.sqrt();
      Complex.valueOf(1.687819480895996, (-71.348392755));
      complex8.multiply(1);
      complex10.divide(1.0);
      complex7.sin();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.I.log();
      complex1.INF.add(complex0);
      Complex complex2 = complex0.sinh();
      Complex complex3 = complex2.ZERO.subtract(complex1);
      Complex complex4 = complex3.I.subtract(complex2);
      Complex complex5 = complex0.sqrt1z();
      complex5.getField();
      Complex complex6 = complex0.ZERO.log();
      complex6.ZERO.readResolve();
      complex3.multiply(complex4);
      complex2.nthRoot(37);
      complex2.hashCode();
      complex4.getField();
      Complex complex7 = complex4.add((double) 37);
      complex1.negate();
      Complex.valueOf((double) 37, 1.0);
      complex7.exp();
      complex5.sqrt();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.sqrt1z();
      complex0.hashCode();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply(727);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.multiply(3028);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.NaN.sinh();
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.0);
      Complex complex1 = complex0.tan();
      Complex complex2 = Complex.valueOf(0.0);
      Complex complex3 = complex0.I.divide(0.0);
      Complex complex4 = complex3.I.conjugate();
      complex4.ZERO.sqrt();
      Complex complex5 = complex4.ZERO.subtract(8050.07);
      complex1.ZERO.abs();
      Complex complex6 = Complex.valueOf(5.3331719086630523E-8, 1.0);
      complex3.ZERO.readResolve();
      complex3.ZERO.toString();
      complex0.getImaginary();
      Complex complex7 = complex3.multiply(0.0);
      Complex complex8 = complex7.INF.divide(complex5);
      Complex complex9 = complex5.ZERO.subtract(complex8);
      complex0.getArgument();
      complex9.add(5.2243955659975294E-98);
      Complex complex10 = complex8.NaN.createComplex(940.58942, 0.0);
      complex10.ZERO.subtract(0.0);
      complex10.ZERO.asin();
      Complex complex11 = complex7.multiply(0.0);
      complex5.sin();
      complex8.sinh();
      complex9.getReal();
      complex6.subtract(complex7);
      complex5.reciprocal();
      complex2.sqrt1z();
      Complex.valueOf(0.0);
      Complex.valueOf(778.145934809, 0.0);
      complex4.tanh();
      complex5.reciprocal();
      complex11.cos();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex.valueOf((-4564.3018), (-4564.3018));
      Complex complex1 = new Complex((-4564.3018));
      complex1.ZERO.getField();
      Complex complex2 = complex1.ONE.atan();
      complex2.NaN.sqrt();
      complex0.NaN.toString();
      Complex complex3 = complex0.multiply(complex1);
      Complex complex4 = complex3.NaN.log();
      complex3.reciprocal();
      complex0.reciprocal();
      complex4.pow((-128.699101705527));
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ONE;
      complex0.subtract(complex1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3447982.464582252));
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.sin();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.NaN.abs();
      complex0.add(Double.NaN);
      complex0.pow(Double.NaN);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.atan();
      complex1.acos();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.I.toString();
      complex0.getImaginary();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.sqrt();
      complex1.INF.negate();
      Complex complex3 = Complex.valueOf(2.0, Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.log();
      Complex complex5 = complex2.ONE.divide(complex0);
      Complex complex6 = complex4.INF.divide(complex1);
      Complex complex7 = complex6.ONE.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.ZERO.cosh();
      complex8.acos();
      complex7.divide(complex5);
      Complex complex9 = Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex10 = complex2.divide(Double.POSITIVE_INFINITY);
      complex3.getField();
      complex10.hashCode();
      complex8.acos();
      complex9.tanh();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.pow(2793.5211650663);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Complex complex0 = new Complex(0.12211392819881439);
      Complex complex1 = complex0.tanh();
      complex0.sqrt();
      Complex complex2 = complex0.INF.sin();
      complex2.I.getArgument();
      complex1.ZERO.getArgument();
      complex0.equals(complex1);
      Complex complex3 = complex1.subtract(complex0);
      Complex complex4 = Complex.valueOf(0.12211392819881439);
      complex4.NaN.cosh();
      complex4.ZERO.hashCode();
      Complex complex5 = complex0.multiply(complex3);
      Complex complex6 = complex3.multiply((-1922));
      Complex complex7 = Complex.valueOf(101.187887);
      Complex complex8 = complex7.ZERO.add((double) (-1922));
      Complex complex9 = complex8.ZERO.cosh();
      complex6.divide(complex7);
      complex5.readResolve();
      complex1.createComplex((-7.042204992948526E-8), 0.0);
      Complex complex10 = complex8.add(631.878134071369);
      complex3.pow(0.0);
      complex2.pow(Double.NaN);
      Complex complex11 = complex9.multiply(complex10);
      complex5.divide(complex11);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.exp();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.ZERO.atan();
      Complex complex2 = complex1.conjugate();
      Complex complex3 = complex2.I.divide(complex0);
      try { 
        complex3.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.add(0.09853420812072453);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Complex complex0 = Complex.valueOf(1.089659460026928E7, Double.POSITIVE_INFINITY);
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.INF.tanh();
      Complex complex1 = new Complex(1565.9595860212517, 1565.9595860212517);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = complex0.ZERO.log();
      Complex complex2 = complex1.ZERO.tan();
      Complex complex3 = Complex.valueOf(0.6155023574829102, 0.6155023574829102);
      Complex complex4 = complex3.NaN.sinh();
      complex0.I.abs();
      complex3.INF.negate();
      Complex complex5 = complex0.tanh();
      complex0.tan();
      Complex complex6 = complex5.atan();
      complex6.getArgument();
      Complex complex7 = complex2.atan();
      Complex complex8 = complex7.NaN.divide(0.6155023574829102);
      complex8.INF.negate();
      Complex complex9 = complex7.exp();
      Complex complex10 = complex9.ZERO.acos();
      complex7.INF.nthRoot(17);
      complex10.getField();
      complex7.acos();
      complex4.negate();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.NaN;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      double double0 = 0.0;
      Complex complex0 = new Complex(1494.0, 0.0);
      Complex complex1 = complex0.INF.tanh();
      complex0.getArgument();
      Complex complex2 = complex0.ONE.sqrt1z();
      Complex complex3 = complex0.exp();
      Complex complex4 = complex2.sqrt();
      Complex complex5 = complex4.createComplex(1662.3277056555298, 0.0);
      complex5.getReal();
      Complex complex6 = complex2.reciprocal();
      Complex complex7 = complex6.INF.divide(0.0);
      complex7.ZERO.divide(complex1);
      Complex complex8 = complex6.I.acos();
      complex8.ONE.pow(1.0921536132159379E198);
      Complex complex9 = complex5.createComplex(923.6685524, 0.0);
      complex9.ZERO.toString();
      complex3.INF.divide(complex6);
      Complex complex10 = complex9.conjugate();
      try { 
        complex10.NaN.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.sqrt();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = Complex.INF;
      complex0.equals(complex1);
      complex0.log();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.multiply(0.42161011695861816);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.toString();
      complex0.getImaginary();
      Complex complex1 = complex0.reciprocal();
      Complex complex2 = complex1.ZERO.sqrt();
      Complex complex3 = complex1.INF.negate();
      complex3.ONE.asin();
      Complex complex4 = Complex.valueOf(2.0, Double.POSITIVE_INFINITY);
      Complex complex5 = complex0.log();
      Complex complex6 = complex2.ONE.divide(complex0);
      Complex complex7 = complex5.ONE.createComplex(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
      Complex complex8 = complex7.ZERO.cosh();
      complex8.acos();
      complex7.divide(complex6);
      Complex.valueOf(Double.POSITIVE_INFINITY);
      Complex complex9 = complex4.multiply(Double.POSITIVE_INFINITY);
      complex0.tan();
      complex9.exp();
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.multiply(complex1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Complex complex0 = new Complex(0.0);
      Complex complex1 = complex0.acos();
      Complex complex2 = complex1.ONE.cosh();
      complex0.hashCode();
      complex1.I.exp();
      complex1.toString();
      complex0.readResolve();
      complex1.multiply(0.0);
      complex2.tan();
      complex2.sin();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.exp();
      assertEquals(2.718281828459045, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      
      complex0.toString();
      Complex complex2 = complex1.multiply(3074.109207942);
      complex1.tan();
      Complex complex3 = Complex.NaN;
      complex2.equals(complex3);
      complex1.sqrt();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.acos();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.ZERO;
      complex0.divide(complex1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.isNaN();
      Complex complex1 = complex0.acos();
      complex1.I.asin();
      complex0.equals((Object) null);
      complex0.NaN.sqrt();
      try { 
        complex0.multiply((Complex) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null is not allowed
         //
         verifyException("org.apache.commons.math3.util.MathUtils", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Complex complex0 = Complex.I;
      Object object0 = complex0.readResolve();
      complex0.equals(object0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Complex complex0 = Complex.valueOf((double) 2998);
      complex0.pow((double) 2998);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      Complex complex1 = Complex.NaN;
      complex0.sqrt1z();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.ZERO;
      complex0.pow(complex1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(962);
      complex1.NaN.sqrt1z();
      Complex complex2 = complex0.ZERO.acos();
      Complex complex3 = complex2.INF.log();
      complex0.ZERO.toString();
      Complex complex4 = complex3.tanh();
      complex4.INF.pow((-5.071761314397018E-8));
      Complex complex5 = complex0.createComplex((-209.46015912891454), (-209.46015912891454));
      complex1.getArgument();
      complex5.atan();
      complex3.conjugate();
      Complex complex6 = complex2.log();
      Complex complex7 = complex6.asin();
      complex7.asin();
      Complex.valueOf((-1300.758300277585), (double) 962);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.tanh();
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Complex complex0 = Complex.valueOf(0.5045560598373413);
      Complex complex1 = complex0.ZERO.exp();
      complex1.NaN.log();
      complex0.ZERO.atan();
      complex1.NaN.tan();
      Complex complex2 = complex0.ONE.reciprocal();
      Complex complex3 = complex2.I.exp();
      Complex complex4 = complex2.INF.conjugate();
      Complex complex5 = complex4.I.subtract(complex1);
      Complex complex6 = complex0.tanh();
      complex6.I.abs();
      complex0.ZERO.tanh();
      complex1.sqrt();
      complex6.createComplex(0.5045560598373413, 0.0);
      Complex complex7 = complex1.tanh();
      complex0.getArgument();
      complex7.pow(complex3);
      complex5.cos();
      Complex.valueOf(0.6327667236328125, 0.6327667236328125);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1252.606968309));
      complex0.I.hashCode();
      Complex complex1 = Complex.ONE;
      complex1.NaN.negate();
      complex1.I.cosh();
      Complex complex2 = complex0.INF.add(complex1);
      Complex complex3 = complex0.NaN.pow((-2027.590596224));
      complex0.getReal();
      Complex complex4 = complex3.log();
      Complex complex5 = complex4.NaN.add(complex2);
      complex5.ONE.subtract((-2027.590596224));
      complex5.INF.log();
      Complex.valueOf((-1252.606968309), (-2027.590596224));
      complex5.abs();
      complex2.abs();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.conjugate();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2904.63);
      Complex complex1 = complex0.ONE.add(2904.63);
      complex1.readResolve();
      Complex complex2 = complex0.acos();
      complex2.createComplex(2904.63, 2.0);
      complex0.isNaN();
      complex2.reciprocal();
      complex2.pow(2.0);
      complex1.exp();
      complex0.pow(0.0);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Complex.valueOf(Double.POSITIVE_INFINITY, Double.POSITIVE_INFINITY);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.INF.add(0.006453481103084534);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.toString();
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.multiply(125.0);
      complex1.conjugate();
      Complex complex2 = new Complex(2901.9397, Double.POSITIVE_INFINITY);
      Complex complex3 = complex0.asin();
      Complex complex4 = Complex.ZERO;
      complex1.multiply(complex2);
      try { 
        complex3.nthRoot((-1726));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -1,726
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.ZERO.reciprocal();
      complex0.atan();
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.multiply(832.6777500876);
      Complex complex2 = complex0.ZERO.sqrt1z();
      complex2.INF.conjugate();
      complex2.I.pow(complex1);
      complex0.abs();
      Complex complex3 = complex0.pow(1863.5065079987);
      Complex complex4 = complex0.sqrt1z();
      Complex complex5 = complex4.ONE.tanh();
      complex5.INF.toString();
      Complex complex6 = complex0.subtract(1.0);
      Complex complex7 = complex4.exp();
      complex4.I.reciprocal();
      complex0.sinh();
      complex7.sinh();
      Complex complex8 = complex1.add(complex2);
      Complex complex9 = complex8.add(complex7);
      Complex complex10 = complex0.cos();
      complex10.NaN.sqrt();
      complex2.pow(complex8);
      complex6.readResolve();
      Complex.valueOf(1.0);
      complex8.multiply(832.6777500876);
      complex1.reciprocal();
      complex7.log();
      complex0.pow(complex7);
      complex8.multiply(complex3);
      Complex complex11 = Complex.I;
      complex9.equals(complex11);
      complex5.log();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Complex complex0 = new Complex((-205.93));
      complex0.subtract((-205.93));
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Complex complex0 = Complex.INF;
      complex0.cosh();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.asin();
      complex1.reciprocal();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.acos();
      complex0.negate();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.isNaN();
      Complex complex1 = complex0.log();
      complex1.exp();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.multiply((-1574));
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-1606.427));
      Complex complex1 = Complex.ZERO;
      complex0.ZERO.pow((-1606.427));
      Complex complex2 = complex0.I.multiply(complex1);
      Complex complex3 = complex2.I.sinh();
      Complex complex4 = complex3.NaN.multiply(complex2);
      Complex complex5 = complex3.NaN.acos();
      complex4.ZERO.multiply(4808);
      complex5.INF.readResolve();
      complex2.getField();
      Complex complex6 = complex0.ONE.negate();
      Complex.valueOf((-1612.8367), 409.634256);
      complex0.tanh();
      complex4.sin();
      complex0.add((-1953.6016735626));
      complex6.getReal();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = Complex.INF;
      complex0.ZERO.divide(complex1);
      complex0.multiply(complex0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.ONE.createComplex(0.0, (-2321.1670281));
      Complex complex2 = complex1.sin();
      Complex complex3 = complex0.INF.multiply(1);
      Complex complex4 = complex2.cosh();
      Complex complex5 = complex0.reciprocal();
      complex5.I.cos();
      complex3.add(1163.383007933);
      complex3.ONE.sin();
      complex3.ZERO.toString();
      Complex complex6 = complex1.ONE.cosh();
      complex3.sinh();
      Complex complex7 = complex2.subtract(complex3);
      complex1.NaN.hashCode();
      Complex complex8 = complex5.negate();
      complex8.abs();
      Complex complex9 = complex8.I.acos();
      complex8.getReal();
      Complex complex10 = complex8.pow(complex6);
      complex6.sin();
      complex8.NaN.subtract((-1.0));
      complex0.multiply(1);
      complex2.getImaginary();
      complex7.sqrt1z();
      Complex complex11 = complex0.cosh();
      complex10.NaN.pow(complex1);
      complex11.INF.subtract(complex3);
      Complex.valueOf((-20.0), 1163.383007933);
      complex8.sqrt1z();
      complex9.subtract(complex10);
      complex10.pow(complex11);
      complex4.multiply(23);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Complex complex0 = new Complex(170.1302472653);
      Complex complex1 = Complex.valueOf(170.1302472653);
      Complex complex2 = Complex.valueOf(170.1302472653);
      Complex complex3 = complex2.ONE.createComplex(0.0, Double.POSITIVE_INFINITY);
      Complex complex4 = complex0.I.tan();
      complex0.getImaginary();
      Complex complex5 = complex0.cosh();
      Complex complex6 = complex5.sinh();
      Complex complex7 = complex6.ZERO.pow(complex0);
      complex1.cosh();
      complex2.subtract(complex7);
      complex4.cosh();
      complex3.hashCode();
      Complex complex8 = complex7.add((-4563.76377));
      complex8.getField();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.INF.divide((-491.0));
      Complex complex2 = complex0.I.createComplex((-491.0), 108.45561768);
      Complex complex3 = complex0.ONE.multiply(399);
      Complex complex4 = complex3.INF.cos();
      Complex complex5 = complex4.I.tan();
      Complex complex6 = complex5.I.divide(complex2);
      Complex complex7 = complex6.INF.sin();
      Complex complex8 = complex0.asin();
      Complex.valueOf(108.45561768);
      complex0.getArgument();
      complex2.isNaN();
      Complex complex9 = complex2.subtract(complex8);
      Complex complex10 = complex8.subtract((-782.671820403336));
      complex10.ZERO.getArgument();
      complex10.INF.add(complex6);
      Complex complex11 = Complex.valueOf((-1606.183341019323), 1.5707963267948966);
      complex11.ONE.divide(complex1);
      Complex complex12 = Complex.valueOf(1.681239366531372, (-1606.183341019323));
      complex12.I.cosh();
      Complex complex13 = complex2.add((-1606.183341019323));
      Complex complex14 = complex9.multiply(complex2);
      complex14.INF.toString();
      Complex complex15 = complex4.negate();
      complex15.INF.hashCode();
      complex0.reciprocal();
      complex0.negate();
      complex13.multiply(944);
      complex7.readResolve();
      complex8.log();
      complex15.divide(0.0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.divide((-0.9999978805889542));
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.cos();
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Complex complex0 = new Complex(3357.27, 0.0);
      complex0.ONE.toString();
      complex0.INF.cos();
      Complex complex1 = complex0.exp();
      Complex complex2 = complex1.cosh();
      complex2.getArgument();
      Complex complex3 = complex0.createComplex(0.0, (-4.948973160958133E-121));
      Complex complex4 = complex3.ZERO.add(complex0);
      Complex complex5 = complex1.I.sin();
      Complex complex6 = complex5.sin();
      Complex complex7 = complex4.atan();
      complex1.ZERO.divide((-4.948973160958133E-121));
      Complex complex8 = complex7.ZERO.negate();
      complex8.NaN.getField();
      complex3.NaN.cosh();
      Complex complex9 = Complex.valueOf(0.0);
      Complex complex10 = complex2.cos();
      complex10.add(complex2);
      Complex complex11 = complex2.sqrt1z();
      Complex complex12 = complex1.acos();
      complex7.abs();
      Complex complex13 = complex9.multiply(complex12);
      complex1.INF.createComplex(3357.27, (-1885.287007375));
      Complex complex14 = complex13.INF.sqrt1z();
      complex14.ZERO.divide((-939.0));
      complex8.atan();
      complex6.multiply(Double.NaN);
      complex5.equals(complex11);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Complex complex0 = new Complex(0.0, (-3.4893601256685762E283));
      Complex complex1 = complex0.exp();
      Complex complex2 = complex0.sqrt();
      Complex complex3 = complex2.NaN.conjugate();
      complex0.ZERO.cos();
      complex3.ONE.cos();
      complex1.getReal();
      Complex complex4 = complex1.ONE.reciprocal();
      complex1.pow(0.0);
      complex1.nthRoot(553);
      complex0.toString();
      complex4.nthRoot(553);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Complex complex0 = new Complex((-1.1244184344361017E-8));
      Complex complex1 = Complex.ONE;
      complex0.NaN.getArgument();
      Complex complex2 = complex1.I.sqrt1z();
      complex0.I.add(complex1);
      complex0.I.readResolve();
      complex0.INF.asin();
      complex0.nthRoot(988);
      complex2.sinh();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.nthRoot(4115);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Complex complex0 = Complex.I;
      complex0.NaN.subtract(0.0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Complex complex0 = new Complex((-818.98137322), (-818.98137322));
      Complex complex1 = Complex.INF;
      complex1.I.abs();
      Complex complex2 = complex0.I.multiply(complex1);
      complex2.INF.multiply(complex1);
      Complex complex3 = complex0.cos();
      Complex complex4 = complex0.ONE.atan();
      Complex complex5 = complex3.acos();
      complex0.ZERO.abs();
      complex5.ZERO.readResolve();
      Complex complex6 = complex0.subtract((-2154.0));
      Complex complex7 = complex6.ONE.exp();
      complex5.NaN.toString();
      Complex complex8 = complex5.pow(complex3);
      complex5.NaN.toString();
      complex3.toString();
      complex3.getReal();
      Complex complex9 = complex8.conjugate();
      Complex complex10 = complex4.asin();
      complex10.ZERO.reciprocal();
      Complex complex11 = complex10.NaN.subtract(complex0);
      complex11.ZERO.asin();
      Complex complex12 = complex8.INF.add((-2154.0));
      complex11.NaN.pow(Double.NEGATIVE_INFINITY);
      Complex complex13 = complex10.negate();
      complex0.nthRoot(95);
      complex9.sin();
      complex7.divide(1.0);
      complex13.subtract((-2.9013441705763093E-8));
      complex2.exp();
      complex12.toString();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.ONE;
      complex1.I.nthRoot(804);
      complex1.ZERO.add((-2222.47));
      Complex complex2 = Complex.valueOf((-2222.47), (double) 804);
      complex2.I.nthRoot(3648);
      complex1.multiply((double) 804);
      Complex complex3 = complex2.tan();
      complex3.log();
      complex0.tan();
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      try { 
        complex0.nthRoot((-2038));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: -2,038
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Complex complex0 = Complex.NaN;
      complex0.INF.getArgument();
      complex0.cos();
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      complex0.readResolve();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.asin();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = Complex.valueOf(0.0);
      Complex complex2 = complex1.NaN.subtract(0.0);
      Complex complex3 = complex2.I.asin();
      Complex complex4 = complex3.atan();
      complex4.readResolve();
      Complex.valueOf(0.0, (-4828.2));
      Complex complex5 = complex0.NaN.subtract((-4828.2));
      complex5.ZERO.asin();
      Complex complex6 = complex0.exp();
      complex6.ONE.divide(complex1);
      Complex.valueOf((-867.3429259571), (-867.3429259571));
      complex6.I.atan();
      complex0.ZERO.getArgument();
      Complex.valueOf((double) 0, 0.0);
      complex6.NaN.tan();
      try { 
        complex1.ONE.nthRoot(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // cannot compute nth root for null or negative n: 0
         //
         verifyException("org.apache.commons.math3.complex.Complex", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Complex complex0 = new Complex(3.5829049382293792E280, 1.1231621190000476E-7);
      Complex complex1 = complex0.INF.acos();
      Complex complex2 = complex0.multiply((-1));
      double double0 = complex2.INF.abs();
      assertEquals(Double.POSITIVE_INFINITY, double0, 0.01);
      
      Complex complex3 = complex2.INF.tan();
      Complex complex4 = complex3.NaN.atan();
      Complex complex5 = complex4.ONE.subtract(complex0);
      Complex complex6 = complex0.INF.atan();
      complex2.readResolve();
      Complex complex7 = complex0.multiply((-1));
      Complex complex8 = complex7.ZERO.cos();
      assertEquals(1.0, complex8.getReal(), 0.01);
      assertEquals(-0.0, complex8.getImaginary(), 0.01);
      
      complex0.equals(complex4);
      Complex complex9 = complex4.sqrt();
      complex9.cosh();
      complex1.getField();
      complex9.cos();
      complex4.toString();
      Complex complex10 = complex6.cosh();
      Complex complex11 = complex5.subtract(0.0);
      complex5.readResolve();
      assertSame(complex4, complex10);
      
      Complex complex12 = complex7.pow(2.757030889767851E-8);
      assertEquals((-8.661622254767337E-8), complex12.getImaginary(), 0.01);
      assertEquals(1.000017810578149, complex12.getReal(), 0.01);
      
      Complex complex13 = complex3.divide(complex0);
      assertTrue(complex2.equals((Object)complex11));
      assertSame(complex13, complex1);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.reciprocal();
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
      assertTrue(complex1.equals((Object)complex0));
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.divide((-0.9999978805889542));
      assertEquals((-1.0000021194155377), complex1.getReal(), 0.01);
      assertFalse(complex1.isInfinite());
      assertFalse(complex1.isNaN());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      complex0.ZERO.hashCode();
      Complex complex1 = complex0.atan();
      assertEquals(0.7853981633974483, complex1.getReal(), 0.01);
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.reciprocal();
      assertEquals(0.0, complex1.getImaginary(), 0.01);
      assertEquals(0.0, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-20.248132119344877));
      Complex complex1 = complex0.atan();
      Complex complex2 = complex0.cos();
      assertEquals(0.0, complex2.getImaginary(), 0.01);
      
      Complex complex3 = complex1.cosh();
      assertEquals(2.3986255045444462, complex3.getReal(), 0.01);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      
      Complex complex4 = complex0.tanh();
      assertEquals((-1.0), complex4.getReal(), 0.01);
      
      Complex complex5 = Complex.valueOf((-20.248132119344877), Double.NaN);
      assertEquals(Double.NaN, complex5.getReal(), 0.01);
      
      Complex complex6 = complex1.tan();
      assertEquals((-20.248132119345044), complex6.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Complex complex0 = Complex.I;
      ComplexField complexField0 = complex0.getField();
      assertNotNull(complexField0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.negate();
      assertEquals((-1.0), complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertFalse(complex1.isInfinite());
      assertEquals(-0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.createComplex((-1.1441115218462356E163), (-3489.6992991977386));
      Complex complex2 = complex1.acos();
      Complex complex3 = complex0.add(complex2);
      assertEquals(Double.POSITIVE_INFINITY, complex3.getReal(), 0.01);
      assertTrue(complex3.equals((Object)complex2));
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Complex complex0 = Complex.ZERO;
      Complex complex1 = complex0.divide(0.0);
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Complex complex0 = Complex.I;
      Complex complex1 = complex0.ONE.reciprocal();
      Complex complex2 = Complex.valueOf(8.48292035519895E-10);
      Complex complex3 = complex1.divide(8.48292035519895E-10);
      assertEquals(-0.0, complex3.getImaginary(), 0.01);
      
      complex0.getField();
      complex0.hashCode();
      Complex complex4 = complex1.acos();
      assertEquals(-0.0, complex4.getImaginary(), 0.01);
      assertEquals(0.0, complex4.getReal(), 0.01);
      
      Complex complex5 = Complex.valueOf(8.48292035519895E-10, 8.48292035519895E-10);
      assertEquals(8.48292035519895E-10, complex5.getReal(), 0.01);
      
      Complex complex6 = complex2.exp();
      assertEquals(1.000000000848292, complex6.getReal(), 0.01);
      assertFalse(complex6.isInfinite());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Complex complex0 = Complex.ONE;
      Complex complex1 = complex0.log();
      assertFalse(complex1.isInfinite());
      assertEquals(0.0, complex1.getReal(), 0.01);
      assertFalse(complex1.isNaN());
      assertEquals(0.0, complex1.getImaginary(), 0.01);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sin();
      assertTrue(complex1.isNaN());
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Complex complex0 = Complex.INF;
      Complex complex1 = complex0.sqrt1z();
      assertEquals(Double.NaN, complex1.getReal(), 0.01);
      assertEquals(Double.NEGATIVE_INFINITY, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isInfinite());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Complex complex0 = Complex.valueOf((-3424.994));
      Complex complex1 = complex0.sqrt();
      assertEquals(58.523448292116214, complex1.getImaginary(), 0.01);
      assertFalse(complex1.isNaN());
      
      Complex complex2 = complex0.atan();
      assertEquals(1.1102230246251564E-16, complex2.getImaginary(), 0.01);
      assertEquals((-1.570504355488791), complex2.getReal(), 0.01);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Complex complex0 = Complex.valueOf(2868.715477279);
      assertEquals(0.0, complex0.getImaginary(), 0.01);
      assertEquals(2868.715477279, complex0.getReal(), 0.01);
      assertFalse(complex0.isNaN());
      assertFalse(complex0.isInfinite());
  }
}
